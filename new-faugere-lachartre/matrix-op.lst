   1              		.file	"matrix-op.C"
  22              	.Ltext_begin:
  23              		.data
  24              		.file	1 "matrix-op.C"
  25              		.file	2 "./matrix-util.C"
  26              		.file	3 "/usr/include/c++/4.6.3/bits/basic_string.h"
  27              		.file	4 "/usr/include/c++/4.6.3/ext/new_allocator.h"
  28              		.file	5 "/usr/include/c++/4.6.3/bits/locale_classes.h"
  29              		.file	6 "/usr/include/c++/4.6.3/bits/allocator.h"
  30              		.file	7 "/usr/include/c++/4.6.3/bits/stringfwd.h"
  31              		.file	8 "/usr/include/c++/4.6.3/bits/ios_base.h"
  32              		.file	9 "/usr/include/c++/4.6.3/bits/stl_iterator.h"
  33              		.file	10 "/usr/include/c++/4.6.3/bits/basic_string.tcc"
  34              		.file	11 "/usr/include/c++/4.6.3/bits/char_traits.h"
  35              		.file	12 "/usr/include/c++/4.6.3/ostream"
  36              		.file	13 "/usr/include/xlocale.h"
  37              		.file	14 "/usr/include/c++/4.6.3/bits/basic_ios.h"
  38              		.file	15 "/usr/include/c++/4.6.3/bits/basic_ios.tcc"
  39              		.file	16 "/usr/include/c++/4.6.3/bits/streambuf.tcc"
  40              		.file	17 "/usr/include/c++/4.6.3/streambuf"
  41              		.file	18 "/usr/include/c++/4.6.3/bits/postypes.h"
  42              		.file	19 "/usr/include/c++/4.6.3/bits/stl_algobase.h"
  43              		.file	20 "/usr/include/c++/4.6.3/istream"
  44              		.file	21 "/usr/include/c++/4.6.3/bits/istream.tcc"
  45              		.file	22 "/usr/include/c++/4.6.3/iosfwd"
  46              		.file	23 "/usr/include/c++/4.6.3/x86_64-redhat-linux/bits/ctype_base.h"
  47              		.file	24 "/usr/include/c++/4.6.3/bits/locale_facets.h"
  48              		.file	25 "/usr/include/c++/4.6.3/bits/locale_facets.tcc"
  49              		.file	26 "/usr/include/c++/4.6.3/bits/ostream.tcc"
  50              		.file	27 "/usr/include/c++/4.6.3/fstream"
  51              		.file	28 "/usr/include/c++/4.6.3/sstream"
  52              		.file	29 "/usr/include/c++/4.6.3/bits/sstream.tcc"
  53              		.file	30 "../lela/matrix/sparse.h"
  54              		.file	31 "/usr/include/libio.h"
  55              		.file	32 "../lela/vector/sparse.h"
  56              		.file	33 "../lela/util/timer.h"
  57              		.file	34 "/usr/include/c++/4.6.3/bits/stl_vector.h"
  58              		.file	35 "../lela/ring/modular.h"
  59              		.file	36 "/usr/include/c++/4.6.3/bits/stl_construct.h"
  60              		.file	37 "../lela/util/property.h"
  61              		.file	38 "/usr/include/c++/4.6.3/bits/stl_pair.h"
  62              		.file	39 "../lela/vector/traits.h"
  63              		.file	40 "/usr/include/c++/4.6.3/bits/vector.tcc"
  64              		.file	41 "/usr/include/c++/4.6.3/new"
  65              		.file	42 "/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h"
  66              		.file	43 "/usr/include/c++/4.6.3/bits/stl_uninitialized.h"
  67              		.file	44 "/usr/include/c++/4.6.3/ext/type_traits.h"
  68              		.file	45 "/usr/include/c++/4.6.3/bits/stl_iterator_base_funcs.h"
  69              		.file	46 "/usr/include/c++/4.6.3/bits/move.h"
  70              		.file	47 "/usr/include/c++/4.6.3/ext/atomicity.h"
  71              		.file	48 "/usr/include/c++/4.6.3/x86_64-redhat-linux/bits/gthr-default.h"
  72              		.file	49 "/usr/include/c++/4.6.3/iostream"
  73              		.file	50 "../lela/vector/stream.h"
  74              		.file	51 "../lela/matrix/raw-iterator.h"
  75              		.file	52 "/usr/include/c++/4.6.3/bits/codecvt.h"
  76              		.file	53 "/usr/include/c++/4.6.3/bits/stl_tree.h"
  77              		.file	54 "../lela/util/commentator.h"
  78              		.file	55 "/usr/include/bits/pthreadtypes.h"
  79              		.file	56 "/usr/include/c++/4.6.3/bits/fstream.tcc"
  80              		.file	57 "/usr/include/c++/4.6.3/x86_64-redhat-linux/bits/basic_file.h"
  81              		.file	58 "/usr/include/wchar.h"
  82              		.file	59 "/usr/include/c++/4.6.3/bits/stl_deque.h"
  83              		.file	60 "/usr/include/c++/4.6.3/bits/stl_stack.h"
  84              		.file	61 "/usr/include/c++/4.6.3/bits/stl_function.h"
  85              		.file	62 "/usr/include/c++/4.6.3/bits/stl_map.h"
  86              		.file	63 "/usr/include/c++/4.6.3/bits/stl_list.h"
  87              		.file	64 "/usr/include/bits/confname.h"
  88              		.file	65 "/usr/include/c++/4.6.3/bits/cpp_type_traits.h"
  89              		.section	.rodata.cst8,"aM",@progbits,8
  90              		.align	8
  91              	.LCPI0_0:
  92 0000 00000000 		.quad	4652218415073722368     # double 1.024000e+03
  92      00009040 
  93              		.text
  94              		.globl	_ZN10MatrixUtil14show_mem_usageESs
  95              		.align	16, 0x90
  97              	_ZN10MatrixUtil14show_mem_usageESs:     # @_ZN10MatrixUtil14show_mem_usageESs
  98              	.Leh_func_begin0:
  99              	.Lfunc_begin0:
   1:./matrix-util.C **** /*
   2:./matrix-util.C ****  * matrix-util.C
   3:./matrix-util.C ****  *
   4:./matrix-util.C ****  *  Created on: 30 mai 2012
   5:./matrix-util.C ****  *      Author: martani (LIP6 / UPMC University Paris06)
   6:./matrix-util.C ****  */
   7:./matrix-util.C **** 
   8:./matrix-util.C **** 
   9:./matrix-util.C **** #ifndef MATRIX_UTIL_C_
  10:./matrix-util.C **** #define MATRIX_UTIL_C_
  11:./matrix-util.C **** 
  12:./matrix-util.C **** #include <assert.h>
  13:./matrix-util.C **** //#include <boost/functional/hash.hpp>
  14:./matrix-util.C ****  #include <unistd.h>
  15:./matrix-util.C **** #include <sys/resource.h>
  16:./matrix-util.C **** 
  17:./matrix-util.C **** #include "matrix-util.h"
  18:./matrix-util.C **** 
  19:./matrix-util.C **** using namespace LELA;
  20:./matrix-util.C **** 
  21:./matrix-util.C **** /*void MatrixUtil::show_mem_usage(std::string msg)
  22:./matrix-util.C **** {
  23:./matrix-util.C **** 	struct rusage ru;
  24:./matrix-util.C **** 	getrusage(RUSAGE_SELF, &ru);
  25:./matrix-util.C **** 	commentator.report (Commentator::LEVEL_IMPORTANT, INTERNAL_DESCRIPTION)
  26:./matrix-util.C **** 			<< "\t[[[ " << msg << " ]]]\t\t" << " Memory : " << ru.ru_maxrss / 1024.0 << "MB" << std::endl;
  27:./matrix-util.C **** 	//printf(" Using: %.2fMB of memory\n", );
  28:./matrix-util.C **** }*/
  29:./matrix-util.C **** 
  30:./matrix-util.C **** void MatrixUtil::show_mem_usage(std::string msg)
  31:./matrix-util.C **** {
 100              		.loc	2 31 0
 101              	.Ltmp43:
 102              	# BB#0:
 103 0000 55       		pushq	%rbp
 104              	.Ltmp40:
 105 0001 4889E5   		movq	%rsp, %rbp
 106              	.Ltmp41:
 107 0004 4156     		pushq	%r14
 108 0006 53       		pushq	%rbx
 109 0007 4883EC40 		subq	$64, %rsp
 110              	.Ltmp42:
 111 000b 4889FB   		movq	%rdi, %rbx
  32:./matrix-util.C **** 	std::string unit = "KB"; // KB, MB
 112              		.loc	2 32 25
 113              	.Ltmp44:
 114              	.Ltmp0:                                 # ./matrix-util.C:32:25
 115 000e 488D7DD8 		leaq	-40(%rbp), %rdi
 116 0012 BE000000 		movl	$.L.str, %esi           # ./matrix-util.C:32:25
 116      00
 117 0017 488D55D0 		leaq	-48(%rbp), %rdx
 118 001b E8000000 		callq	_ZNSsC1EPKcRKSaIcE      # ./matrix-util.C:32:25
 118      00
 119              	.Ltmp1:                                 # ./matrix-util.C:32:25
 120              	# BB#1:
  33:./matrix-util.C **** 	double vm, rss;
  34:./matrix-util.C **** 	process_mem_usage(vm, rss);
 121              		.loc	2 34 2
 122              	.Ltmp45:
 123              	.Ltmp3:                                 # ./matrix-util.C:34:2
 124 0020 488D7DC8 		leaq	-56(%rbp), %rdi
 125 0024 488D75C0 		leaq	-64(%rbp), %rsi
 126 0028 E8000000 		callq	_ZN10MatrixUtil17process_mem_usageERdS0_ # ./matrix-util.C:34:2
 126      00
 127              	.Ltmp4:                                 # ./matrix-util.C:34:2
  33:./matrix-util.C **** 	double vm, rss;
 128              		.loc	2 33 9
 129              	.Ltmp46:
 130              		#DEBUG_VALUE: vm <- [%rbp+$-56]+$0 # ./matrix-util.C:33:9
  33:./matrix-util.C **** 	double vm, rss;
 131              		.loc	2 33 13
 132              	.Ltmp47:
 133              		#DEBUG_VALUE: rss <- [%rbp+$-64]+$0 # ./matrix-util.C:33:13
 134              	# BB#2:
  35:./matrix-util.C **** 	if(vm > 1024)
 135              		.loc	2 35 2
 136              	.Ltmp48:
 137 002d F20F1045 		movsd	-56(%rbp), %xmm0        # ./matrix-util.C:35:2
 137      C8
 138 0032 F20F1145 		movsd	%xmm0, -72(%rbp)        # ./matrix-util.C:35:2
 138      B8
 139              	                                        # 8-byte Spill
 140 0037 660F2E05 		ucomisd	.LCPI0_0(%rip), %xmm0   # ./matrix-util.C:35:2
 140      00000000 
 141 003f 763C     		jbe	.LBB0_4
 142              	# BB#3:
 143 0041 F20F1005 		movsd	.LCPI0_0(%rip), %xmm0
 143      00000000 
  36:./matrix-util.C **** 	{
  37:./matrix-util.C **** 		vm = vm / 1024.0;
 144              		.loc	2 37 3
 145              	.Ltmp49:
 146 0049 F20F104D 		movsd	-72(%rbp), %xmm1        # ./matrix-util.C:37:3
 146      B8
 147              	                                        # 8-byte Reload
 148 004e F20F5EC8 		divsd	%xmm0, %xmm1            # ./matrix-util.C:37:3
 149 0052 F20F114D 		movsd	%xmm1, -72(%rbp)        # 8-byte Spill
 149      B8
 150 0057 488D7DD8 		leaq	-40(%rbp), %rdi
 151 005b BE000000 		movl	$.L.str1, %esi
 151      00
   1:/usr/include/c++/4.6.3/bits/basic_string.h **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/c++/4.6.3/bits/basic_string.h **** 
   3:/usr/include/c++/4.6.3/bits/basic_string.h **** // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
   4:/usr/include/c++/4.6.3/bits/basic_string.h **** // 2006, 2007, 2008, 2009, 2010, 2011
   5:/usr/include/c++/4.6.3/bits/basic_string.h **** // Free Software Foundation, Inc.
   6:/usr/include/c++/4.6.3/bits/basic_string.h **** //
   7:/usr/include/c++/4.6.3/bits/basic_string.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   8:/usr/include/c++/4.6.3/bits/basic_string.h **** // software; you can redistribute it and/or modify it under the
   9:/usr/include/c++/4.6.3/bits/basic_string.h **** // terms of the GNU General Public License as published by the
  10:/usr/include/c++/4.6.3/bits/basic_string.h **** // Free Software Foundation; either version 3, or (at your option)
  11:/usr/include/c++/4.6.3/bits/basic_string.h **** // any later version.
  12:/usr/include/c++/4.6.3/bits/basic_string.h **** 
  13:/usr/include/c++/4.6.3/bits/basic_string.h **** // This library is distributed in the hope that it will be useful,
  14:/usr/include/c++/4.6.3/bits/basic_string.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:/usr/include/c++/4.6.3/bits/basic_string.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:/usr/include/c++/4.6.3/bits/basic_string.h **** // GNU General Public License for more details.
  17:/usr/include/c++/4.6.3/bits/basic_string.h **** 
  18:/usr/include/c++/4.6.3/bits/basic_string.h **** // Under Section 7 of GPL version 3, you are granted additional
  19:/usr/include/c++/4.6.3/bits/basic_string.h **** // permissions described in the GCC Runtime Library Exception, version
  20:/usr/include/c++/4.6.3/bits/basic_string.h **** // 3.1, as published by the Free Software Foundation.
  21:/usr/include/c++/4.6.3/bits/basic_string.h **** 
  22:/usr/include/c++/4.6.3/bits/basic_string.h **** // You should have received a copy of the GNU General Public License and
  23:/usr/include/c++/4.6.3/bits/basic_string.h **** // a copy of the GCC Runtime Library Exception along with this program;
  24:/usr/include/c++/4.6.3/bits/basic_string.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  25:/usr/include/c++/4.6.3/bits/basic_string.h **** // <http://www.gnu.org/licenses/>.
  26:/usr/include/c++/4.6.3/bits/basic_string.h **** 
  27:/usr/include/c++/4.6.3/bits/basic_string.h **** /** @file bits/basic_string.h
  28:/usr/include/c++/4.6.3/bits/basic_string.h ****  *  This is an internal header file, included by other library headers.
  29:/usr/include/c++/4.6.3/bits/basic_string.h ****  *  Do not attempt to use it directly. @headername{string}
  30:/usr/include/c++/4.6.3/bits/basic_string.h ****  */
  31:/usr/include/c++/4.6.3/bits/basic_string.h **** 
  32:/usr/include/c++/4.6.3/bits/basic_string.h **** //
  33:/usr/include/c++/4.6.3/bits/basic_string.h **** // ISO C++ 14882: 21 Strings library
  34:/usr/include/c++/4.6.3/bits/basic_string.h **** //
  35:/usr/include/c++/4.6.3/bits/basic_string.h **** 
  36:/usr/include/c++/4.6.3/bits/basic_string.h **** #ifndef _BASIC_STRING_H
  37:/usr/include/c++/4.6.3/bits/basic_string.h **** #define _BASIC_STRING_H 1
  38:/usr/include/c++/4.6.3/bits/basic_string.h **** 
  39:/usr/include/c++/4.6.3/bits/basic_string.h **** #pragma GCC system_header
  40:/usr/include/c++/4.6.3/bits/basic_string.h **** 
  41:/usr/include/c++/4.6.3/bits/basic_string.h **** #include <ext/atomicity.h>
  42:/usr/include/c++/4.6.3/bits/basic_string.h **** #include <debug/debug.h>
  43:/usr/include/c++/4.6.3/bits/basic_string.h **** #include <initializer_list>
  44:/usr/include/c++/4.6.3/bits/basic_string.h **** 
  45:/usr/include/c++/4.6.3/bits/basic_string.h **** namespace std _GLIBCXX_VISIBILITY(default)
  46:/usr/include/c++/4.6.3/bits/basic_string.h **** {
  47:/usr/include/c++/4.6.3/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  48:/usr/include/c++/4.6.3/bits/basic_string.h **** 
  49:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
  50:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
  51:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
  52:/usr/include/c++/4.6.3/bits/basic_string.h ****    *
  53:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @ingroup strings
  54:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @ingroup sequences
  55:/usr/include/c++/4.6.3/bits/basic_string.h ****    *
  56:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  57:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
  58:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
  59:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
  60:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
  61:/usr/include/c++/4.6.3/bits/basic_string.h ****    *
  62:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @doctodo
  63:/usr/include/c++/4.6.3/bits/basic_string.h ****    *
  64:/usr/include/c++/4.6.3/bits/basic_string.h ****    *
  65:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  Documentation?  What's that?
  66:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  Nathan Myers <ncm@cantrip.org>.
  67:/usr/include/c++/4.6.3/bits/basic_string.h ****    *
  68:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  A string looks like this:
  69:/usr/include/c++/4.6.3/bits/basic_string.h ****    *
  70:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @code
  71:/usr/include/c++/4.6.3/bits/basic_string.h ****    *                                        [_Rep]
  72:/usr/include/c++/4.6.3/bits/basic_string.h ****    *                                        _M_length
  73:/usr/include/c++/4.6.3/bits/basic_string.h ****    *   [basic_string<char_type>]            _M_capacity
  74:/usr/include/c++/4.6.3/bits/basic_string.h ****    *   _M_dataplus                          _M_refcount
  75:/usr/include/c++/4.6.3/bits/basic_string.h ****    *   _M_p ---------------->               unnamed array of char_type
  76:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @endcode
  77:/usr/include/c++/4.6.3/bits/basic_string.h ****    *
  78:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  Where the _M_p points to the first character in the string, and
  79:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  you cast it to a pointer-to-_Rep and subtract 1 to get a
  80:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  pointer to the header.
  81:/usr/include/c++/4.6.3/bits/basic_string.h ****    *
  82:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  This approach has the enormous advantage that a string object
  83:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  requires only one allocation.  All the ugliness is confined
  84:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  within a single %pair of inline functions, which each compile to
  85:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  a single @a add instruction: _Rep::_M_data(), and
  86:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  string::_M_rep(); and the allocation function which gets a
  87:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  block of raw bytes and with room enough and constructs a _Rep
  88:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  object at the front.
  89:/usr/include/c++/4.6.3/bits/basic_string.h ****    *
  90:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  The reason you want _M_data pointing to the character %array and
  91:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  not the _Rep is so that the debugger can see the string
  92:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  contents. (Probably we should add a non-inline member to get
  93:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  the _Rep for the debugger to use, so users can check the actual
  94:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  string length.)
  95:/usr/include/c++/4.6.3/bits/basic_string.h ****    *
  96:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  Note that the _Rep object is a POD so that you can have a
  97:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  static <em>empty string</em> _Rep object already @a constructed before
  98:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  static constructors have run.  The reference-count encoding is
  99:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  chosen so that a 0 indicates one reference, so you never try to
 100:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  destroy the empty-string _Rep object.
 101:/usr/include/c++/4.6.3/bits/basic_string.h ****    *
 102:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  All but the last paragraph is considered pretty conventional
 103:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  for a C++ string implementation.
 104:/usr/include/c++/4.6.3/bits/basic_string.h ****   */
 105:/usr/include/c++/4.6.3/bits/basic_string.h ****   // 21.3  Template class basic_string
 106:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
 107:/usr/include/c++/4.6.3/bits/basic_string.h ****     class basic_string
 108:/usr/include/c++/4.6.3/bits/basic_string.h ****     {
 109:/usr/include/c++/4.6.3/bits/basic_string.h ****       typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;
 110:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 111:/usr/include/c++/4.6.3/bits/basic_string.h ****       // Types:
 112:/usr/include/c++/4.6.3/bits/basic_string.h ****     public:
 113:/usr/include/c++/4.6.3/bits/basic_string.h ****       typedef _Traits					    traits_type;
 114:/usr/include/c++/4.6.3/bits/basic_string.h ****       typedef typename _Traits::char_type		    value_type;
 115:/usr/include/c++/4.6.3/bits/basic_string.h ****       typedef _Alloc					    allocator_type;
 116:/usr/include/c++/4.6.3/bits/basic_string.h ****       typedef typename _CharT_alloc_type::size_type	    size_type;
 117:/usr/include/c++/4.6.3/bits/basic_string.h ****       typedef typename _CharT_alloc_type::difference_type   difference_type;
 118:/usr/include/c++/4.6.3/bits/basic_string.h ****       typedef typename _CharT_alloc_type::reference	    reference;
 119:/usr/include/c++/4.6.3/bits/basic_string.h ****       typedef typename _CharT_alloc_type::const_reference   const_reference;
 120:/usr/include/c++/4.6.3/bits/basic_string.h ****       typedef typename _CharT_alloc_type::pointer	    pointer;
 121:/usr/include/c++/4.6.3/bits/basic_string.h ****       typedef typename _CharT_alloc_type::const_pointer	    const_pointer;
 122:/usr/include/c++/4.6.3/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
 123:/usr/include/c++/4.6.3/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
 124:/usr/include/c++/4.6.3/bits/basic_string.h ****                                                             const_iterator;
 125:/usr/include/c++/4.6.3/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 126:/usr/include/c++/4.6.3/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		    reverse_iterator;
 127:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 128:/usr/include/c++/4.6.3/bits/basic_string.h ****     private:
 129:/usr/include/c++/4.6.3/bits/basic_string.h ****       // _Rep: string representation
 130:/usr/include/c++/4.6.3/bits/basic_string.h ****       //   Invariants:
 131:/usr/include/c++/4.6.3/bits/basic_string.h ****       //   1. String really contains _M_length + 1 characters: due to 21.3.4
 132:/usr/include/c++/4.6.3/bits/basic_string.h ****       //      must be kept null-terminated.
 133:/usr/include/c++/4.6.3/bits/basic_string.h ****       //   2. _M_capacity >= _M_length
 134:/usr/include/c++/4.6.3/bits/basic_string.h ****       //      Allocated memory is always (_M_capacity + 1) * sizeof(_CharT).
 135:/usr/include/c++/4.6.3/bits/basic_string.h ****       //   3. _M_refcount has three states:
 136:/usr/include/c++/4.6.3/bits/basic_string.h ****       //      -1: leaked, one reference, no ref-copies allowed, non-const.
 137:/usr/include/c++/4.6.3/bits/basic_string.h ****       //       0: one reference, non-const.
 138:/usr/include/c++/4.6.3/bits/basic_string.h ****       //     n>0: n + 1 references, operations require a lock, const.
 139:/usr/include/c++/4.6.3/bits/basic_string.h ****       //   4. All fields==0 is an empty string, given the extra storage
 140:/usr/include/c++/4.6.3/bits/basic_string.h ****       //      beyond-the-end for a null terminator; thus, the shared
 141:/usr/include/c++/4.6.3/bits/basic_string.h ****       //      empty string representation needs no constructor.
 142:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 143:/usr/include/c++/4.6.3/bits/basic_string.h ****       struct _Rep_base
 144:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 145:/usr/include/c++/4.6.3/bits/basic_string.h **** 	size_type		_M_length;
 146:/usr/include/c++/4.6.3/bits/basic_string.h **** 	size_type		_M_capacity;
 147:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_Atomic_word		_M_refcount;
 148:/usr/include/c++/4.6.3/bits/basic_string.h ****       };
 149:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 150:/usr/include/c++/4.6.3/bits/basic_string.h ****       struct _Rep : _Rep_base
 151:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 152:/usr/include/c++/4.6.3/bits/basic_string.h **** 	// Types:
 153:/usr/include/c++/4.6.3/bits/basic_string.h **** 	typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
 154:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 155:/usr/include/c++/4.6.3/bits/basic_string.h **** 	// (Public) Data members:
 156:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 157:/usr/include/c++/4.6.3/bits/basic_string.h **** 	// The maximum number of individual char_type elements of an
 158:/usr/include/c++/4.6.3/bits/basic_string.h **** 	// individual string is determined by _S_max_size. This is the
 159:/usr/include/c++/4.6.3/bits/basic_string.h **** 	// value that will be returned by max_size().  (Whereas npos
 160:/usr/include/c++/4.6.3/bits/basic_string.h **** 	// is the maximum number of bytes the allocator can allocate.)
 161:/usr/include/c++/4.6.3/bits/basic_string.h **** 	// If one was to divvy up the theoretical largest size string,
 162:/usr/include/c++/4.6.3/bits/basic_string.h **** 	// with a terminating character and m _CharT elements, it'd
 163:/usr/include/c++/4.6.3/bits/basic_string.h **** 	// look like this:
 164:/usr/include/c++/4.6.3/bits/basic_string.h **** 	// npos = sizeof(_Rep) + (m * sizeof(_CharT)) + sizeof(_CharT)
 165:/usr/include/c++/4.6.3/bits/basic_string.h **** 	// Solving for m:
 166:/usr/include/c++/4.6.3/bits/basic_string.h **** 	// m = ((npos - sizeof(_Rep))/sizeof(CharT)) - 1
 167:/usr/include/c++/4.6.3/bits/basic_string.h **** 	// In addition, this implementation quarters this amount.
 168:/usr/include/c++/4.6.3/bits/basic_string.h **** 	static const size_type	_S_max_size;
 169:/usr/include/c++/4.6.3/bits/basic_string.h **** 	static const _CharT	_S_terminal;
 170:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 171:/usr/include/c++/4.6.3/bits/basic_string.h **** 	// The following storage is init'd to 0 by the linker, resulting
 172:/usr/include/c++/4.6.3/bits/basic_string.h ****         // (carefully) in an empty string with one reference.
 173:/usr/include/c++/4.6.3/bits/basic_string.h ****         static size_type _S_empty_rep_storage[];
 174:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 175:/usr/include/c++/4.6.3/bits/basic_string.h ****         static _Rep&
 176:/usr/include/c++/4.6.3/bits/basic_string.h ****         _S_empty_rep()
 177:/usr/include/c++/4.6.3/bits/basic_string.h ****         { 
 178:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  // NB: Mild hack to avoid strict-aliasing warnings.  Note that
 179:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  // _S_empty_rep_storage is never modified and the punning should
 180:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  // be reasonably safe in this case.
 181:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
 182:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  return *reinterpret_cast<_Rep*>(__p);
 183:/usr/include/c++/4.6.3/bits/basic_string.h **** 	}
 184:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 185:/usr/include/c++/4.6.3/bits/basic_string.h ****         bool
 186:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_is_leaked() const
 187:/usr/include/c++/4.6.3/bits/basic_string.h ****         { return this->_M_refcount < 0; }
 188:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 189:/usr/include/c++/4.6.3/bits/basic_string.h ****         bool
 190:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_is_shared() const
 191:/usr/include/c++/4.6.3/bits/basic_string.h ****         { return this->_M_refcount > 0; }
 192:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 193:/usr/include/c++/4.6.3/bits/basic_string.h ****         void
 194:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_set_leaked()
 195:/usr/include/c++/4.6.3/bits/basic_string.h ****         { this->_M_refcount = -1; }
 196:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 197:/usr/include/c++/4.6.3/bits/basic_string.h ****         void
 198:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_set_sharable()
 199:/usr/include/c++/4.6.3/bits/basic_string.h ****         { this->_M_refcount = 0; }
 200:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 201:/usr/include/c++/4.6.3/bits/basic_string.h **** 	void
 202:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_set_length_and_sharable(size_type __n)
 203:/usr/include/c++/4.6.3/bits/basic_string.h **** 	{
 204:/usr/include/c++/4.6.3/bits/basic_string.h **** #ifndef _GLIBCXX_FULLY_DYNAMIC_STRING
 205:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
 206:/usr/include/c++/4.6.3/bits/basic_string.h **** #endif
 207:/usr/include/c++/4.6.3/bits/basic_string.h **** 	    {
 208:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      this->_M_set_sharable();  // One reference.
 209:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      this->_M_length = __n;
 210:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      traits_type::assign(this->_M_refdata()[__n], _S_terminal);
 211:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      // grrr. (per 21.3.4)
 212:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      // You cannot leave those LWG people alone for a second.
 213:/usr/include/c++/4.6.3/bits/basic_string.h **** 	    }
 214:/usr/include/c++/4.6.3/bits/basic_string.h **** 	}
 215:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 216:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_CharT*
 217:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_refdata() throw()
 218:/usr/include/c++/4.6.3/bits/basic_string.h **** 	{ return reinterpret_cast<_CharT*>(this + 1); }
 219:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 220:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_CharT*
 221:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
 222:/usr/include/c++/4.6.3/bits/basic_string.h **** 	{
 223:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  return (!_M_is_leaked() && __alloc1 == __alloc2)
 224:/usr/include/c++/4.6.3/bits/basic_string.h **** 	          ? _M_refcopy() : _M_clone(__alloc1);
 225:/usr/include/c++/4.6.3/bits/basic_string.h **** 	}
 226:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 227:/usr/include/c++/4.6.3/bits/basic_string.h **** 	// Create & Destroy
 228:/usr/include/c++/4.6.3/bits/basic_string.h **** 	static _Rep*
 229:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_S_create(size_type, size_type, const _Alloc&);
 230:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 231:/usr/include/c++/4.6.3/bits/basic_string.h **** 	void
 232:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_dispose(const _Alloc& __a)
 233:/usr/include/c++/4.6.3/bits/basic_string.h **** 	{
 234:/usr/include/c++/4.6.3/bits/basic_string.h **** #ifndef _GLIBCXX_FULLY_DYNAMIC_STRING
 235:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
 236:/usr/include/c++/4.6.3/bits/basic_string.h **** #endif
 237:/usr/include/c++/4.6.3/bits/basic_string.h **** 	    {
 238:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      // Be race-detector-friendly.  For more info see bits/c++config.
 239:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
 240:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
 241:/usr/include/c++/4.6.3/bits/basic_string.h **** 							 -1) <= 0)
 242:/usr/include/c++/4.6.3/bits/basic_string.h **** 		{
 243:/usr/include/c++/4.6.3/bits/basic_string.h **** 		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
 244:/usr/include/c++/4.6.3/bits/basic_string.h **** 		  _M_destroy(__a);
 245:/usr/include/c++/4.6.3/bits/basic_string.h **** 		}
 246:/usr/include/c++/4.6.3/bits/basic_string.h **** 	    }
 247:/usr/include/c++/4.6.3/bits/basic_string.h **** 	}  // XXX MT
 248:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 249:/usr/include/c++/4.6.3/bits/basic_string.h **** 	void
 250:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_destroy(const _Alloc&) throw();
 251:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 252:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_CharT*
 253:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_refcopy() throw()
 254:/usr/include/c++/4.6.3/bits/basic_string.h **** 	{
 255:/usr/include/c++/4.6.3/bits/basic_string.h **** #ifndef _GLIBCXX_FULLY_DYNAMIC_STRING
 256:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
 257:/usr/include/c++/4.6.3/bits/basic_string.h **** #endif
 258:/usr/include/c++/4.6.3/bits/basic_string.h ****             __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
 259:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  return _M_refdata();
 260:/usr/include/c++/4.6.3/bits/basic_string.h **** 	}  // XXX MT
 261:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 262:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_CharT*
 263:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_clone(const _Alloc&, size_type __res = 0);
 264:/usr/include/c++/4.6.3/bits/basic_string.h ****       };
 265:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 266:/usr/include/c++/4.6.3/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 267:/usr/include/c++/4.6.3/bits/basic_string.h ****       struct _Alloc_hider : _Alloc
 268:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 269:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_Alloc_hider(_CharT* __dat, const _Alloc& __a)
 270:/usr/include/c++/4.6.3/bits/basic_string.h **** 	: _Alloc(__a), _M_p(__dat) { }
 271:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 272:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_CharT* _M_p; // The actual data.
 273:/usr/include/c++/4.6.3/bits/basic_string.h ****       };
 274:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 275:/usr/include/c++/4.6.3/bits/basic_string.h ****     public:
 276:/usr/include/c++/4.6.3/bits/basic_string.h ****       // Data Members (public):
 277:/usr/include/c++/4.6.3/bits/basic_string.h ****       // NB: This is an unsigned type, and thus represents the maximum
 278:/usr/include/c++/4.6.3/bits/basic_string.h ****       // size that the allocator can hold.
 279:/usr/include/c++/4.6.3/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
 280:/usr/include/c++/4.6.3/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
 281:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 282:/usr/include/c++/4.6.3/bits/basic_string.h ****     private:
 283:/usr/include/c++/4.6.3/bits/basic_string.h ****       // Data Members (private):
 284:/usr/include/c++/4.6.3/bits/basic_string.h ****       mutable _Alloc_hider	_M_dataplus;
 285:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 286:/usr/include/c++/4.6.3/bits/basic_string.h ****       _CharT*
 287:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_data() const
 288:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return  _M_dataplus._M_p; }
 289:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 290:/usr/include/c++/4.6.3/bits/basic_string.h ****       _CharT*
 291:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_data(_CharT* __p)
 292:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return (_M_dataplus._M_p = __p); }
 293:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 294:/usr/include/c++/4.6.3/bits/basic_string.h ****       _Rep*
 295:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_rep() const
 296:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }
 297:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 298:/usr/include/c++/4.6.3/bits/basic_string.h ****       // For the internal use we have functions similar to `begin'/`end'
 299:/usr/include/c++/4.6.3/bits/basic_string.h ****       // but they do not call _M_leak.
 300:/usr/include/c++/4.6.3/bits/basic_string.h ****       iterator
 301:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_ibegin() const
 302:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return iterator(_M_data()); }
 303:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 304:/usr/include/c++/4.6.3/bits/basic_string.h ****       iterator
 305:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_iend() const
 306:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 307:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 308:/usr/include/c++/4.6.3/bits/basic_string.h ****       void
 309:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_leak()    // for use in begin() & non-const op[]
 310:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 311:/usr/include/c++/4.6.3/bits/basic_string.h **** 	if (!_M_rep()->_M_is_leaked())
 312:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  _M_leak_hard();
 313:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 314:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 315:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
 316:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
 317:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 318:/usr/include/c++/4.6.3/bits/basic_string.h **** 	if (__pos > this->size())
 319:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  __throw_out_of_range(__N(__s));
 320:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return __pos;
 321:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 322:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 323:/usr/include/c++/4.6.3/bits/basic_string.h ****       void
 324:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
 325:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 326:/usr/include/c++/4.6.3/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
 327:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
 328:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 329:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 330:/usr/include/c++/4.6.3/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
 331:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
 332:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const
 333:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 334:/usr/include/c++/4.6.3/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
 335:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
 336:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 337:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 338:/usr/include/c++/4.6.3/bits/basic_string.h ****       // True if _Rep and source do not overlap.
 339:/usr/include/c++/4.6.3/bits/basic_string.h ****       bool
 340:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const
 341:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 342:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
 343:/usr/include/c++/4.6.3/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
 344:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 345:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 346:/usr/include/c++/4.6.3/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
 347:/usr/include/c++/4.6.3/bits/basic_string.h ****       // traits_type::copy/move/assign.
 348:/usr/include/c++/4.6.3/bits/basic_string.h ****       static void
 349:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_copy(_CharT* __d, const _CharT* __s, size_type __n)
 350:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 351:/usr/include/c++/4.6.3/bits/basic_string.h **** 	if (__n == 1)
 352:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 353:/usr/include/c++/4.6.3/bits/basic_string.h **** 	else
 354:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
 355:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 356:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 357:/usr/include/c++/4.6.3/bits/basic_string.h ****       static void
 358:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_move(_CharT* __d, const _CharT* __s, size_type __n)
 359:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 360:/usr/include/c++/4.6.3/bits/basic_string.h **** 	if (__n == 1)
 361:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 362:/usr/include/c++/4.6.3/bits/basic_string.h **** 	else
 363:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);	  
 364:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 365:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 366:/usr/include/c++/4.6.3/bits/basic_string.h ****       static void
 367:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_assign(_CharT* __d, size_type __n, _CharT __c)
 368:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 369:/usr/include/c++/4.6.3/bits/basic_string.h **** 	if (__n == 1)
 370:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
 371:/usr/include/c++/4.6.3/bits/basic_string.h **** 	else
 372:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);	  
 373:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 374:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 375:/usr/include/c++/4.6.3/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
 376:/usr/include/c++/4.6.3/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
 377:/usr/include/c++/4.6.3/bits/basic_string.h ****       template<class _Iterator>
 378:/usr/include/c++/4.6.3/bits/basic_string.h ****         static void
 379:/usr/include/c++/4.6.3/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 380:/usr/include/c++/4.6.3/bits/basic_string.h ****         {
 381:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, ++__p)
 382:/usr/include/c++/4.6.3/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
 383:/usr/include/c++/4.6.3/bits/basic_string.h **** 	}
 384:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 385:/usr/include/c++/4.6.3/bits/basic_string.h ****       static void
 386:/usr/include/c++/4.6.3/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)
 387:/usr/include/c++/4.6.3/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 388:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 389:/usr/include/c++/4.6.3/bits/basic_string.h ****       static void
 390:/usr/include/c++/4.6.3/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
 391:/usr/include/c++/4.6.3/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 392:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 393:/usr/include/c++/4.6.3/bits/basic_string.h ****       static void
 394:/usr/include/c++/4.6.3/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)
 395:/usr/include/c++/4.6.3/bits/basic_string.h ****       { _M_copy(__p, __k1, __k2 - __k1); }
 396:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 397:/usr/include/c++/4.6.3/bits/basic_string.h ****       static void
 398:/usr/include/c++/4.6.3/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 399:/usr/include/c++/4.6.3/bits/basic_string.h ****       { _M_copy(__p, __k1, __k2 - __k1); }
 400:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 401:/usr/include/c++/4.6.3/bits/basic_string.h ****       static int
 402:/usr/include/c++/4.6.3/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2)
 403:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 404:/usr/include/c++/4.6.3/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
 405:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 406:/usr/include/c++/4.6.3/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
 407:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
 408:/usr/include/c++/4.6.3/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
 409:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
 410:/usr/include/c++/4.6.3/bits/basic_string.h **** 	else
 411:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  return int(__d);
 412:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 413:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 414:/usr/include/c++/4.6.3/bits/basic_string.h ****       void
 415:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, size_type __len2);
 416:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 417:/usr/include/c++/4.6.3/bits/basic_string.h ****       void
 418:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_leak_hard();
 419:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 420:/usr/include/c++/4.6.3/bits/basic_string.h ****       static _Rep&
 421:/usr/include/c++/4.6.3/bits/basic_string.h ****       _S_empty_rep()
 422:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return _Rep::_S_empty_rep(); }
 423:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 424:/usr/include/c++/4.6.3/bits/basic_string.h ****     public:
 425:/usr/include/c++/4.6.3/bits/basic_string.h ****       // Construct/copy/destroy:
 426:/usr/include/c++/4.6.3/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
 427:/usr/include/c++/4.6.3/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
 428:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 429:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 430:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
 431:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 432:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string()
 433:/usr/include/c++/4.6.3/bits/basic_string.h **** #ifndef _GLIBCXX_FULLY_DYNAMIC_STRING
 434:/usr/include/c++/4.6.3/bits/basic_string.h ****       : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }
 435:/usr/include/c++/4.6.3/bits/basic_string.h **** #else
 436:/usr/include/c++/4.6.3/bits/basic_string.h ****       : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()){ }
 437:/usr/include/c++/4.6.3/bits/basic_string.h **** #endif
 438:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 439:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 440:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
 441:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 442:/usr/include/c++/4.6.3/bits/basic_string.h ****       explicit
 443:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string(const _Alloc& __a);
 444:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 445:/usr/include/c++/4.6.3/bits/basic_string.h ****       // NB: per LWG issue 42, semantics different from IS:
 446:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 447:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a str.
 448:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  str  Source string.
 449:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 450:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string(const basic_string& __str);
 451:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 452:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 453:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  str  Source string.
 454:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  pos  Index of first character to copy from.
 455:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  n  Number of characters to copy (default remainder).
 456:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 457:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 458:/usr/include/c++/4.6.3/bits/basic_string.h **** 		   size_type __n = npos);
 459:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 460:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 461:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  str  Source string.
 462:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  pos  Index of first character to copy from.
 463:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  n  Number of characters to copy.
 464:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  a  Allocator to use.
 465:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 466:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 467:/usr/include/c++/4.6.3/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a);
 468:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 469:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 470:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
 471:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  s  Source character %array.
 472:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  n  Number of characters to copy.
 473:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  a  Allocator to use (default is default allocator).
 474:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
 475:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  NB: @a s must have at least @a n characters, &apos;\\0&apos;
 476:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  has no special meaning.
 477:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 478:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
 479:/usr/include/c++/4.6.3/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc());
 480:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 481:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
 482:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  s  Source C string.
 483:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  a  Allocator to use (default is default allocator).
 484:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 485:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());
 486:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 487:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
 488:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  n  Number of characters.
 489:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  c  Character to use.
 490:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  a  Allocator to use (default is default allocator).
 491:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 492:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
 493:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 494:/usr/include/c++/4.6.3/bits/basic_string.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 495:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 496:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Move construct string.
 497:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  str  Source string.
 498:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
 499:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a str.
 500:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
 501:/usr/include/c++/4.6.3/bits/basic_string.h ****        **/
 502:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string(basic_string&& __str)
 503:/usr/include/c++/4.6.3/bits/basic_string.h ****       : _M_dataplus(__str._M_dataplus)
 504:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 505:/usr/include/c++/4.6.3/bits/basic_string.h **** #ifndef _GLIBCXX_FULLY_DYNAMIC_STRING	
 506:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__str._M_data(_S_empty_rep()._M_refdata());
 507:/usr/include/c++/4.6.3/bits/basic_string.h **** #else
 508:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__str._M_data(_S_construct(size_type(), _CharT(), get_allocator()));
 509:/usr/include/c++/4.6.3/bits/basic_string.h **** #endif
 510:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 511:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 512:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 513:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
 514:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  l  std::initializer_list of characters.
 515:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  a  Allocator to use (default is default allocator).
 516:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 517:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());
 518:/usr/include/c++/4.6.3/bits/basic_string.h **** #endif // __GXX_EXPERIMENTAL_CXX0X__
 519:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 520:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 521:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
 522:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  beg  Start of range.
 523:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  end  End of range.
 524:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  a  Allocator to use (default is default allocator).
 525:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 526:/usr/include/c++/4.6.3/bits/basic_string.h ****       template<class _InputIterator>
 527:/usr/include/c++/4.6.3/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
 528:/usr/include/c++/4.6.3/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc());
 529:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 530:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 531:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Destroy the string instance.
 532:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 533:/usr/include/c++/4.6.3/bits/basic_string.h ****       ~basic_string()
 534:/usr/include/c++/4.6.3/bits/basic_string.h ****       { _M_rep()->_M_dispose(this->get_allocator()); }
 535:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 536:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 537:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
 538:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  str  Source string.
 539:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 540:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
 541:/usr/include/c++/4.6.3/bits/basic_string.h ****       operator=(const basic_string& __str) 
 542:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->assign(__str); }
 543:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 544:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 545:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
 546:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  s  Source null-terminated string.
 547:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 548:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
 549:/usr/include/c++/4.6.3/bits/basic_string.h ****       operator=(const _CharT* __s) 
 550:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->assign(__s); }
 551:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 552:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 553:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
 554:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  c  Source character.
 555:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
 556:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
 557:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  (*this)[0] == @a c.
 558:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 559:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
 560:/usr/include/c++/4.6.3/bits/basic_string.h ****       operator=(_CharT __c) 
 561:/usr/include/c++/4.6.3/bits/basic_string.h ****       { 
 562:/usr/include/c++/4.6.3/bits/basic_string.h **** 	this->assign(1, __c); 
 563:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return *this;
 564:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 565:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 566:/usr/include/c++/4.6.3/bits/basic_string.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 567:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 568:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
 569:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  str  Source string.
 570:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
 571:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
 572:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
 573:/usr/include/c++/4.6.3/bits/basic_string.h ****        **/
 574:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
 575:/usr/include/c++/4.6.3/bits/basic_string.h ****       operator=(basic_string&& __str)
 576:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 577:/usr/include/c++/4.6.3/bits/basic_string.h **** 	// NB: DR 1204.
 578:/usr/include/c++/4.6.3/bits/basic_string.h **** 	this->swap(__str);
 579:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return *this;
 580:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 581:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 582:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 583:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
 584:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  l  std::initializer_list.
 585:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 586:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
 587:/usr/include/c++/4.6.3/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
 588:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 589:/usr/include/c++/4.6.3/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
 590:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return *this;
 591:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 592:/usr/include/c++/4.6.3/bits/basic_string.h **** #endif // __GXX_EXPERIMENTAL_CXX0X__
 593:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 594:/usr/include/c++/4.6.3/bits/basic_string.h ****       // Iterators:
 595:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 596:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
 597:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  the %string.  Unshares the string.
 598:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 599:/usr/include/c++/4.6.3/bits/basic_string.h ****       iterator
 600:/usr/include/c++/4.6.3/bits/basic_string.h ****       begin()
 601:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 602:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_leak();
 603:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return iterator(_M_data());
 604:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 605:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 606:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 607:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 608:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  character in the %string.
 609:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 610:/usr/include/c++/4.6.3/bits/basic_string.h ****       const_iterator
 611:/usr/include/c++/4.6.3/bits/basic_string.h ****       begin() const
 612:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return const_iterator(_M_data()); }
 613:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 614:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 615:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
 616:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  character in the %string.  Unshares the string.
 617:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 618:/usr/include/c++/4.6.3/bits/basic_string.h ****       iterator
 619:/usr/include/c++/4.6.3/bits/basic_string.h ****       end()
 620:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 621:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_leak();
 622:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return iterator(_M_data() + this->size());
 623:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 624:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 625:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 626:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 627:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  last character in the %string.
 628:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 629:/usr/include/c++/4.6.3/bits/basic_string.h ****       const_iterator
 630:/usr/include/c++/4.6.3/bits/basic_string.h ****       end() const
 631:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
 632:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 633:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 634:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
 635:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
 636:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  order.  Unshares the string.
 637:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 638:/usr/include/c++/4.6.3/bits/basic_string.h ****       reverse_iterator
 639:/usr/include/c++/4.6.3/bits/basic_string.h ****       rbegin()
 640:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
 641:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 642:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 643:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 644:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 645:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  reverse element order.
 646:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 647:/usr/include/c++/4.6.3/bits/basic_string.h ****       const_reverse_iterator
 648:/usr/include/c++/4.6.3/bits/basic_string.h ****       rbegin() const
 649:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 650:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 651:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 652:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
 653:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
 654:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  element order.  Unshares the string.
 655:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 656:/usr/include/c++/4.6.3/bits/basic_string.h ****       reverse_iterator
 657:/usr/include/c++/4.6.3/bits/basic_string.h ****       rend()
 658:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
 659:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 660:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 661:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 662:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 663:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  is done in reverse element order.
 664:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 665:/usr/include/c++/4.6.3/bits/basic_string.h ****       const_reverse_iterator
 666:/usr/include/c++/4.6.3/bits/basic_string.h ****       rend() const
 667:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 668:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 669:/usr/include/c++/4.6.3/bits/basic_string.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 670:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 671:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 672:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  character in the %string.
 673:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 674:/usr/include/c++/4.6.3/bits/basic_string.h ****       const_iterator
 675:/usr/include/c++/4.6.3/bits/basic_string.h ****       cbegin() const
 676:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
 677:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 678:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 679:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 680:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  last character in the %string.
 681:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 682:/usr/include/c++/4.6.3/bits/basic_string.h ****       const_iterator
 683:/usr/include/c++/4.6.3/bits/basic_string.h ****       cend() const
 684:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
 685:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 686:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 687:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 688:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 689:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  reverse element order.
 690:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 691:/usr/include/c++/4.6.3/bits/basic_string.h ****       const_reverse_iterator
 692:/usr/include/c++/4.6.3/bits/basic_string.h ****       crbegin() const
 693:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 694:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 695:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 696:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 697:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 698:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  is done in reverse element order.
 699:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 700:/usr/include/c++/4.6.3/bits/basic_string.h ****       const_reverse_iterator
 701:/usr/include/c++/4.6.3/bits/basic_string.h ****       crend() const
 702:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 703:/usr/include/c++/4.6.3/bits/basic_string.h **** #endif
 704:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 705:/usr/include/c++/4.6.3/bits/basic_string.h ****     public:
 706:/usr/include/c++/4.6.3/bits/basic_string.h ****       // Capacity:
 707:/usr/include/c++/4.6.3/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 708:/usr/include/c++/4.6.3/bits/basic_string.h ****       ///  null-termination.
 709:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
 710:/usr/include/c++/4.6.3/bits/basic_string.h ****       size() const
 711:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return _M_rep()->_M_length; }
 712:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 713:/usr/include/c++/4.6.3/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 714:/usr/include/c++/4.6.3/bits/basic_string.h ****       ///  null-termination.
 715:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
 716:/usr/include/c++/4.6.3/bits/basic_string.h ****       length() const
 717:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return _M_rep()->_M_length; }
 718:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 719:/usr/include/c++/4.6.3/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
 720:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
 721:/usr/include/c++/4.6.3/bits/basic_string.h ****       max_size() const
 722:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return _Rep::_S_max_size; }
 723:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 724:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 725:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 726:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  n  Number of characters the %string should contain.
 727:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  c  Character to fill any new elements.
 728:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
 729:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  This function will %resize the %string to the specified
 730:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
 731:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
 732:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a c.
 733:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 734:/usr/include/c++/4.6.3/bits/basic_string.h ****       void
 735:/usr/include/c++/4.6.3/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
 736:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 737:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 738:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 739:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  n  Number of characters the %string should contain.
 740:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
 741:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
 742:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
 743:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
 744:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
 745:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  setting them to 0.
 746:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 747:/usr/include/c++/4.6.3/bits/basic_string.h ****       void
 748:/usr/include/c++/4.6.3/bits/basic_string.h ****       resize(size_type __n)
 749:/usr/include/c++/4.6.3/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
 750:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 751:/usr/include/c++/4.6.3/bits/basic_string.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 752:/usr/include/c++/4.6.3/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
 753:/usr/include/c++/4.6.3/bits/basic_string.h ****       void
 754:/usr/include/c++/4.6.3/bits/basic_string.h ****       shrink_to_fit()
 755:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 756:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__try
 757:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  { reserve(0); }
 758:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__catch(...)
 759:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  { }
 760:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 761:/usr/include/c++/4.6.3/bits/basic_string.h **** #endif
 762:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 763:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 764:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
 765:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  before needing to allocate more memory.
 766:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 767:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
 768:/usr/include/c++/4.6.3/bits/basic_string.h ****       capacity() const
 769:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return _M_rep()->_M_capacity; }
 770:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 771:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 772:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 773:/usr/include/c++/4.6.3/bits/basic_string.h ****        *          characters.
 774:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  res_arg  Number of characters required.
 775:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If @a res_arg exceeds @c max_size().
 776:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
 777:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
 778:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
 779:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
 780:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  thrown.
 781:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
 782:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
 783:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
 784:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
 785:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
 786:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  data.
 787:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 788:/usr/include/c++/4.6.3/bits/basic_string.h ****       void
 789:/usr/include/c++/4.6.3/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
 790:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 791:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 792:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Erases the string, making it empty.
 793:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 794:/usr/include/c++/4.6.3/bits/basic_string.h ****       void
 795:/usr/include/c++/4.6.3/bits/basic_string.h ****       clear()
 796:/usr/include/c++/4.6.3/bits/basic_string.h ****       { _M_mutate(0, this->size(), 0); }
 797:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 798:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 799:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
 800:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  <code>*this == ""</code>.
 801:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 802:/usr/include/c++/4.6.3/bits/basic_string.h ****       bool
 803:/usr/include/c++/4.6.3/bits/basic_string.h ****       empty() const
 804:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->size() == 0; }
 805:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 806:/usr/include/c++/4.6.3/bits/basic_string.h ****       // Element access:
 807:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 808:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
 809:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  pos  The index of the character to access.
 810:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
 811:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
 812:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
 813:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
 814:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
 815:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  see at().)
 816:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 817:/usr/include/c++/4.6.3/bits/basic_string.h ****       const_reference
 818:/usr/include/c++/4.6.3/bits/basic_string.h ****       operator[] (size_type __pos) const
 819:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 820:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_GLIBCXX_DEBUG_ASSERT(__pos <= size());
 821:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return _M_data()[__pos];
 822:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 823:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 824:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 825:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
 826:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  pos  The index of the character to access.
 827:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Read/write reference to the character.
 828:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
 829:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
 830:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
 831:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
 832:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  see at().)  Unshares the string.
 833:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 834:/usr/include/c++/4.6.3/bits/basic_string.h ****       reference
 835:/usr/include/c++/4.6.3/bits/basic_string.h ****       operator[](size_type __pos)
 836:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 837:/usr/include/c++/4.6.3/bits/basic_string.h ****         // allow pos == size() as v3 extension:
 838:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_GLIBCXX_DEBUG_ASSERT(__pos <= size());
 839:/usr/include/c++/4.6.3/bits/basic_string.h ****         // but be strict in pedantic mode:
 840:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__pos < size());
 841:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_leak();
 842:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return _M_data()[__pos];
 843:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 844:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 845:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 846:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
 847:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n The index of the character to access.
 848:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
 849:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
 850:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
 851:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
 852:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
 853:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  throws out_of_range if the check fails.
 854:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 855:/usr/include/c++/4.6.3/bits/basic_string.h ****       const_reference
 856:/usr/include/c++/4.6.3/bits/basic_string.h ****       at(size_type __n) const
 857:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 858:/usr/include/c++/4.6.3/bits/basic_string.h **** 	if (__n >= this->size())
 859:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  __throw_out_of_range(__N("basic_string::at"));
 860:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return _M_data()[__n];
 861:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 862:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 863:/usr/include/c++/4.6.3/bits/basic_string.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 864:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 865:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
 866:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  element of the %string.
 867:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 868:/usr/include/c++/4.6.3/bits/basic_string.h ****       reference
 869:/usr/include/c++/4.6.3/bits/basic_string.h ****       front()
 870:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return operator[](0); }
 871:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 872:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 873:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
 874:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  element of the %string.
 875:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 876:/usr/include/c++/4.6.3/bits/basic_string.h ****       const_reference
 877:/usr/include/c++/4.6.3/bits/basic_string.h ****       front() const
 878:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return operator[](0); }
 879:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 880:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 881:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
 882:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  element of the %string.
 883:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 884:/usr/include/c++/4.6.3/bits/basic_string.h ****       reference
 885:/usr/include/c++/4.6.3/bits/basic_string.h ****       back()
 886:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return operator[](this->size() - 1); }
 887:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 888:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 889:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
 890:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  last element of the %string.
 891:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 892:/usr/include/c++/4.6.3/bits/basic_string.h ****       const_reference
 893:/usr/include/c++/4.6.3/bits/basic_string.h ****       back() const
 894:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return operator[](this->size() - 1); }
 895:/usr/include/c++/4.6.3/bits/basic_string.h **** #endif
 896:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 897:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 898:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
 899:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n The index of the character to access.
 900:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Read/write reference to the character.
 901:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
 902:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
 903:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
 904:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
 905:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  throws out_of_range if the check fails.  Success results in
 906:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  unsharing the string.
 907:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 908:/usr/include/c++/4.6.3/bits/basic_string.h ****       reference
 909:/usr/include/c++/4.6.3/bits/basic_string.h ****       at(size_type __n)
 910:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 911:/usr/include/c++/4.6.3/bits/basic_string.h **** 	if (__n >= size())
 912:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  __throw_out_of_range(__N("basic_string::at"));
 913:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_leak();
 914:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return _M_data()[__n];
 915:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 916:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 917:/usr/include/c++/4.6.3/bits/basic_string.h ****       // Modifiers:
 918:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 919:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Append a string to this string.
 920:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param str  The string to append.
 921:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
 922:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 923:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
 924:/usr/include/c++/4.6.3/bits/basic_string.h ****       operator+=(const basic_string& __str)
 925:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->append(__str); }
 926:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 927:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 928:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Append a C string.
 929:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  The C string to append.
 930:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
 931:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 932:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
 933:/usr/include/c++/4.6.3/bits/basic_string.h ****       operator+=(const _CharT* __s)
 934:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->append(__s); }
 935:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 936:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 937:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Append a character.
 938:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param c  The character to append.
 939:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
 940:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 941:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
 942:/usr/include/c++/4.6.3/bits/basic_string.h ****       operator+=(_CharT __c)
 943:/usr/include/c++/4.6.3/bits/basic_string.h ****       { 
 944:/usr/include/c++/4.6.3/bits/basic_string.h **** 	this->push_back(__c);
 945:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return *this;
 946:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
 947:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 948:/usr/include/c++/4.6.3/bits/basic_string.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 949:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 950:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
 951:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param l  The initializer_list of characters to be appended.
 952:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
 953:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 954:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
 955:/usr/include/c++/4.6.3/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
 956:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
 957:/usr/include/c++/4.6.3/bits/basic_string.h **** #endif // __GXX_EXPERIMENTAL_CXX0X__
 958:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 959:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 960:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Append a string to this string.
 961:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param str  The string to append.
 962:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
 963:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 964:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
 965:/usr/include/c++/4.6.3/bits/basic_string.h ****       append(const basic_string& __str);
 966:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 967:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 968:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Append a substring.
 969:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param str  The string to append.
 970:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of the first character of str to append.
 971:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  The number of characters to append.
 972:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
 973:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
 974:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
 975:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  This function appends @a n characters from @a str starting at @a pos
 976:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  to this string.  If @a n is is larger than the number of available
 977:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  characters in @a str, the remainder of @a str is appended.
 978:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 979:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
 980:/usr/include/c++/4.6.3/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n);
 981:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 982:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 983:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Append a C substring.
 984:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  The C string to append.
 985:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  The number of characters to append.
 986:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
 987:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 988:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
 989:/usr/include/c++/4.6.3/bits/basic_string.h ****       append(const _CharT* __s, size_type __n);
 990:/usr/include/c++/4.6.3/bits/basic_string.h **** 
 991:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
 992:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Append a C string.
 993:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  The C string to append.
 994:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
 995:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
 996:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
 997:/usr/include/c++/4.6.3/bits/basic_string.h ****       append(const _CharT* __s)
 998:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
 999:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1000:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return this->append(__s, traits_type::length(__s));
1001:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1002:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1003:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1004:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Append multiple characters.
1005:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  The number of characters to append.
1006:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param c  The character to use.
1007:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1008:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1009:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Appends n copies of c to this string.
1010:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
1011:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1012:/usr/include/c++/4.6.3/bits/basic_string.h ****       append(size_type __n, _CharT __c);
1013:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1014:/usr/include/c++/4.6.3/bits/basic_string.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
1015:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1016:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1017:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param l  The initializer_list of characters to append.
1018:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1019:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
1020:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1021:/usr/include/c++/4.6.3/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
1022:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1023:/usr/include/c++/4.6.3/bits/basic_string.h **** #endif // __GXX_EXPERIMENTAL_CXX0X__
1024:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1025:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1026:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Append a range of characters.
1027:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param first  Iterator referencing the first character to append.
1028:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param last  Iterator marking the end of the range.
1029:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1030:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1031:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Appends characters in the range [first,last) to this string.
1032:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
1033:/usr/include/c++/4.6.3/bits/basic_string.h ****       template<class _InputIterator>
1034:/usr/include/c++/4.6.3/bits/basic_string.h ****         basic_string&
1035:/usr/include/c++/4.6.3/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
1036:/usr/include/c++/4.6.3/bits/basic_string.h ****         { return this->replace(_M_iend(), _M_iend(), __first, __last); }
1037:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1038:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1039:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Append a single character.
1040:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param c  Character to append.
1041:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
1042:/usr/include/c++/4.6.3/bits/basic_string.h ****       void
1043:/usr/include/c++/4.6.3/bits/basic_string.h ****       push_back(_CharT __c)
1044:/usr/include/c++/4.6.3/bits/basic_string.h ****       { 
1045:/usr/include/c++/4.6.3/bits/basic_string.h **** 	const size_type __len = 1 + this->size();
1046:/usr/include/c++/4.6.3/bits/basic_string.h **** 	if (__len > this->capacity() || _M_rep()->_M_is_shared())
1047:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  this->reserve(__len);
1048:/usr/include/c++/4.6.3/bits/basic_string.h **** 	traits_type::assign(_M_data()[this->size()], __c);
1049:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_rep()->_M_set_length_and_sharable(__len);
1050:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1051:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1052:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1053:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1054:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  str  Source string to use.
1055:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1056:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
1057:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1058:/usr/include/c++/4.6.3/bits/basic_string.h ****       assign(const basic_string& __str);
1059:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1060:/usr/include/c++/4.6.3/bits/basic_string.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
1061:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1062:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1063:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param  str  Source string to use.
1064:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1065:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1066:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a str.
1067:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
1068:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
1069:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1070:/usr/include/c++/4.6.3/bits/basic_string.h ****       assign(basic_string&& __str)
1071:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
1072:/usr/include/c++/4.6.3/bits/basic_string.h **** 	this->swap(__str);
1073:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return *this;
1074:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1075:/usr/include/c++/4.6.3/bits/basic_string.h **** #endif // __GXX_EXPERIMENTAL_CXX0X__
1076:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1077:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1078:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
1079:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param str  The string to use.
1080:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of the first character of str.
1081:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Number of characters to use.
1082:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1083:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
1084:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1085:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  This function sets this string to the substring of @a str consisting
1086:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  of @a n characters at @a pos.  If @a n is is larger than the number
1087:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  of available characters in @a str, the remainder of @a str is used.
1088:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
1089:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1090:/usr/include/c++/4.6.3/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n)
1091:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->assign(__str._M_data()
1092:/usr/include/c++/4.6.3/bits/basic_string.h **** 			    + __str._M_check(__pos, "basic_string::assign"),
1093:/usr/include/c++/4.6.3/bits/basic_string.h **** 			    __str._M_limit(__pos, __n)); }
1094:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1095:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1096:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Set value to a C substring.
1097:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  The C string to use.
1098:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Number of characters to use.
1099:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1100:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1101:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  This function sets the value of this string to the first @a n
1102:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  characters of @a s.  If @a n is is larger than the number of
1103:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  available characters in @a s, the remainder of @a s is used.
1104:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
1105:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1106:/usr/include/c++/4.6.3/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n);
1107:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1108:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1109:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
1110:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  The C string to use.
1111:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1112:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1113:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a s.
1114:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a s once the
1115:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  function returns.
1116:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
1117:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
 152              		.loc	3 1117 7
 153              	.Ltmp50:
 154              		#DEBUG_VALUE: assign:this <- RDI+0 # /usr/include/c++/4.6.3/bits/basic_string.h:1117:7[ /usr/inclu
   1:/usr/include/c++/4.6.3/bits/char_traits.h **** // Character Traits for use by standard string and iostream -*- C++ -*-
   2:/usr/include/c++/4.6.3/bits/char_traits.h **** 
   3:/usr/include/c++/4.6.3/bits/char_traits.h **** // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
   4:/usr/include/c++/4.6.3/bits/char_traits.h **** // 2006, 2007, 2008, 2009, 2010
   5:/usr/include/c++/4.6.3/bits/char_traits.h **** // Free Software Foundation, Inc.
   6:/usr/include/c++/4.6.3/bits/char_traits.h **** //
   7:/usr/include/c++/4.6.3/bits/char_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   8:/usr/include/c++/4.6.3/bits/char_traits.h **** // software; you can redistribute it and/or modify it under the
   9:/usr/include/c++/4.6.3/bits/char_traits.h **** // terms of the GNU General Public License as published by the
  10:/usr/include/c++/4.6.3/bits/char_traits.h **** // Free Software Foundation; either version 3, or (at your option)
  11:/usr/include/c++/4.6.3/bits/char_traits.h **** // any later version.
  12:/usr/include/c++/4.6.3/bits/char_traits.h **** 
  13:/usr/include/c++/4.6.3/bits/char_traits.h **** // This library is distributed in the hope that it will be useful,
  14:/usr/include/c++/4.6.3/bits/char_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:/usr/include/c++/4.6.3/bits/char_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:/usr/include/c++/4.6.3/bits/char_traits.h **** // GNU General Public License for more details.
  17:/usr/include/c++/4.6.3/bits/char_traits.h **** 
  18:/usr/include/c++/4.6.3/bits/char_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  19:/usr/include/c++/4.6.3/bits/char_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  20:/usr/include/c++/4.6.3/bits/char_traits.h **** // 3.1, as published by the Free Software Foundation.
  21:/usr/include/c++/4.6.3/bits/char_traits.h **** 
  22:/usr/include/c++/4.6.3/bits/char_traits.h **** // You should have received a copy of the GNU General Public License and
  23:/usr/include/c++/4.6.3/bits/char_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  24:/usr/include/c++/4.6.3/bits/char_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  25:/usr/include/c++/4.6.3/bits/char_traits.h **** // <http://www.gnu.org/licenses/>.
  26:/usr/include/c++/4.6.3/bits/char_traits.h **** 
  27:/usr/include/c++/4.6.3/bits/char_traits.h **** /** @file bits/char_traits.h
  28:/usr/include/c++/4.6.3/bits/char_traits.h ****  *  This is an internal header file, included by other library headers.
  29:/usr/include/c++/4.6.3/bits/char_traits.h ****  *  Do not attempt to use it directly. @headername{string}
  30:/usr/include/c++/4.6.3/bits/char_traits.h ****  */
  31:/usr/include/c++/4.6.3/bits/char_traits.h **** 
  32:/usr/include/c++/4.6.3/bits/char_traits.h **** //
  33:/usr/include/c++/4.6.3/bits/char_traits.h **** // ISO C++ 14882: 21  Strings library
  34:/usr/include/c++/4.6.3/bits/char_traits.h **** //
  35:/usr/include/c++/4.6.3/bits/char_traits.h **** 
  36:/usr/include/c++/4.6.3/bits/char_traits.h **** #ifndef _CHAR_TRAITS_H
  37:/usr/include/c++/4.6.3/bits/char_traits.h **** #define _CHAR_TRAITS_H 1
  38:/usr/include/c++/4.6.3/bits/char_traits.h **** 
  39:/usr/include/c++/4.6.3/bits/char_traits.h **** #pragma GCC system_header
  40:/usr/include/c++/4.6.3/bits/char_traits.h **** 
  41:/usr/include/c++/4.6.3/bits/char_traits.h **** #include <bits/stl_algobase.h>  // std::copy, std::fill_n
  42:/usr/include/c++/4.6.3/bits/char_traits.h **** #include <bits/postypes.h>      // For streampos
  43:/usr/include/c++/4.6.3/bits/char_traits.h **** #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.
  44:/usr/include/c++/4.6.3/bits/char_traits.h **** 
  45:/usr/include/c++/4.6.3/bits/char_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  46:/usr/include/c++/4.6.3/bits/char_traits.h **** {
  47:/usr/include/c++/4.6.3/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  48:/usr/include/c++/4.6.3/bits/char_traits.h **** 
  49:/usr/include/c++/4.6.3/bits/char_traits.h ****   /**
  50:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  @brief  Mapping from character type to associated types.
  51:/usr/include/c++/4.6.3/bits/char_traits.h ****    *
  52:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  @note This is an implementation class for the generic version
  53:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  of char_traits.  It defines int_type, off_type, pos_type, and
  54:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  state_type.  By default these are unsigned long, streamoff,
  55:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  streampos, and mbstate_t.  Users who need a different set of
  56:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  types, but who don't need to change the definitions of any function
  57:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  defined in char_traits, can specialize __gnu_cxx::_Char_types
  58:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  while leaving __gnu_cxx::char_traits alone. */
  59:/usr/include/c++/4.6.3/bits/char_traits.h ****   template<typename _CharT>
  60:/usr/include/c++/4.6.3/bits/char_traits.h ****     struct _Char_types
  61:/usr/include/c++/4.6.3/bits/char_traits.h ****     {
  62:/usr/include/c++/4.6.3/bits/char_traits.h ****       typedef unsigned long   int_type;
  63:/usr/include/c++/4.6.3/bits/char_traits.h ****       typedef std::streampos  pos_type;
  64:/usr/include/c++/4.6.3/bits/char_traits.h ****       typedef std::streamoff  off_type;
  65:/usr/include/c++/4.6.3/bits/char_traits.h ****       typedef std::mbstate_t  state_type;
  66:/usr/include/c++/4.6.3/bits/char_traits.h ****     };
  67:/usr/include/c++/4.6.3/bits/char_traits.h **** 
  68:/usr/include/c++/4.6.3/bits/char_traits.h **** 
  69:/usr/include/c++/4.6.3/bits/char_traits.h ****   /**
  70:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  @brief  Base class used to implement std::char_traits.
  71:/usr/include/c++/4.6.3/bits/char_traits.h ****    *
  72:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  @note For any given actual character type, this definition is
  73:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  probably wrong.  (Most of the member functions are likely to be
  74:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  right, but the int_type and state_type typedefs, and the eof()
  75:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  member function, are likely to be wrong.)  The reason this class
  76:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  exists is so users can specialize it.  Classes in namespace std
  77:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  may not be specialized for fundamental types, but classes in
  78:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  namespace __gnu_cxx may be.
  79:/usr/include/c++/4.6.3/bits/char_traits.h ****    *
  80:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt05ch13s03.html
  81:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
  82:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.  
  83:/usr/include/c++/4.6.3/bits/char_traits.h ****    */
  84:/usr/include/c++/4.6.3/bits/char_traits.h ****   template<typename _CharT>
  85:/usr/include/c++/4.6.3/bits/char_traits.h ****     struct char_traits
  86:/usr/include/c++/4.6.3/bits/char_traits.h ****     {
  87:/usr/include/c++/4.6.3/bits/char_traits.h ****       typedef _CharT                                    char_type;
  88:/usr/include/c++/4.6.3/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::int_type    int_type;
  89:/usr/include/c++/4.6.3/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::pos_type    pos_type;
  90:/usr/include/c++/4.6.3/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::off_type    off_type;
  91:/usr/include/c++/4.6.3/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::state_type  state_type;
  92:/usr/include/c++/4.6.3/bits/char_traits.h **** 
  93:/usr/include/c++/4.6.3/bits/char_traits.h ****       static void
  94:/usr/include/c++/4.6.3/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2)
  95:/usr/include/c++/4.6.3/bits/char_traits.h ****       { __c1 = __c2; }
  96:/usr/include/c++/4.6.3/bits/char_traits.h **** 
  97:/usr/include/c++/4.6.3/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
  98:/usr/include/c++/4.6.3/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2)
  99:/usr/include/c++/4.6.3/bits/char_traits.h ****       { return __c1 == __c2; }
 100:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 101:/usr/include/c++/4.6.3/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 102:/usr/include/c++/4.6.3/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2)
 103:/usr/include/c++/4.6.3/bits/char_traits.h ****       { return __c1 < __c2; }
 104:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 105:/usr/include/c++/4.6.3/bits/char_traits.h ****       static int
 106:/usr/include/c++/4.6.3/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, std::size_t __n);
 107:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 108:/usr/include/c++/4.6.3/bits/char_traits.h ****       static std::size_t
 109:/usr/include/c++/4.6.3/bits/char_traits.h ****       length(const char_type* __s);
 110:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 111:/usr/include/c++/4.6.3/bits/char_traits.h ****       static const char_type*
 112:/usr/include/c++/4.6.3/bits/char_traits.h ****       find(const char_type* __s, std::size_t __n, const char_type& __a);
 113:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 114:/usr/include/c++/4.6.3/bits/char_traits.h ****       static char_type*
 115:/usr/include/c++/4.6.3/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, std::size_t __n);
 116:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 117:/usr/include/c++/4.6.3/bits/char_traits.h ****       static char_type*
 118:/usr/include/c++/4.6.3/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, std::size_t __n);
 119:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 120:/usr/include/c++/4.6.3/bits/char_traits.h ****       static char_type*
 121:/usr/include/c++/4.6.3/bits/char_traits.h ****       assign(char_type* __s, std::size_t __n, char_type __a);
 122:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 123:/usr/include/c++/4.6.3/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR char_type
 124:/usr/include/c++/4.6.3/bits/char_traits.h ****       to_char_type(const int_type& __c)
 125:/usr/include/c++/4.6.3/bits/char_traits.h ****       { return static_cast<char_type>(__c); }
 126:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 127:/usr/include/c++/4.6.3/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 128:/usr/include/c++/4.6.3/bits/char_traits.h ****       to_int_type(const char_type& __c)
 129:/usr/include/c++/4.6.3/bits/char_traits.h ****       { return static_cast<int_type>(__c); }
 130:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 131:/usr/include/c++/4.6.3/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 132:/usr/include/c++/4.6.3/bits/char_traits.h ****       eq_int_type(const int_type& __c1, const int_type& __c2)
 133:/usr/include/c++/4.6.3/bits/char_traits.h ****       { return __c1 == __c2; }
 134:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 135:/usr/include/c++/4.6.3/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 136:/usr/include/c++/4.6.3/bits/char_traits.h ****       eof()
 137:/usr/include/c++/4.6.3/bits/char_traits.h ****       { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }
 138:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 139:/usr/include/c++/4.6.3/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 140:/usr/include/c++/4.6.3/bits/char_traits.h ****       not_eof(const int_type& __c)
 141:/usr/include/c++/4.6.3/bits/char_traits.h ****       { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
 142:/usr/include/c++/4.6.3/bits/char_traits.h ****     };
 143:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 144:/usr/include/c++/4.6.3/bits/char_traits.h ****   template<typename _CharT>
 145:/usr/include/c++/4.6.3/bits/char_traits.h ****     int
 146:/usr/include/c++/4.6.3/bits/char_traits.h ****     char_traits<_CharT>::
 147:/usr/include/c++/4.6.3/bits/char_traits.h ****     compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
 148:/usr/include/c++/4.6.3/bits/char_traits.h ****     {
 149:/usr/include/c++/4.6.3/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 150:/usr/include/c++/4.6.3/bits/char_traits.h **** 	if (lt(__s1[__i], __s2[__i]))
 151:/usr/include/c++/4.6.3/bits/char_traits.h **** 	  return -1;
 152:/usr/include/c++/4.6.3/bits/char_traits.h **** 	else if (lt(__s2[__i], __s1[__i]))
 153:/usr/include/c++/4.6.3/bits/char_traits.h **** 	  return 1;
 154:/usr/include/c++/4.6.3/bits/char_traits.h ****       return 0;
 155:/usr/include/c++/4.6.3/bits/char_traits.h ****     }
 156:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 157:/usr/include/c++/4.6.3/bits/char_traits.h ****   template<typename _CharT>
 158:/usr/include/c++/4.6.3/bits/char_traits.h ****     std::size_t
 159:/usr/include/c++/4.6.3/bits/char_traits.h ****     char_traits<_CharT>::
 160:/usr/include/c++/4.6.3/bits/char_traits.h ****     length(const char_type* __p)
 161:/usr/include/c++/4.6.3/bits/char_traits.h ****     {
 162:/usr/include/c++/4.6.3/bits/char_traits.h ****       std::size_t __i = 0;
 163:/usr/include/c++/4.6.3/bits/char_traits.h ****       while (!eq(__p[__i], char_type()))
 164:/usr/include/c++/4.6.3/bits/char_traits.h ****         ++__i;
 165:/usr/include/c++/4.6.3/bits/char_traits.h ****       return __i;
 166:/usr/include/c++/4.6.3/bits/char_traits.h ****     }
 167:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 168:/usr/include/c++/4.6.3/bits/char_traits.h ****   template<typename _CharT>
 169:/usr/include/c++/4.6.3/bits/char_traits.h ****     const typename char_traits<_CharT>::char_type*
 170:/usr/include/c++/4.6.3/bits/char_traits.h ****     char_traits<_CharT>::
 171:/usr/include/c++/4.6.3/bits/char_traits.h ****     find(const char_type* __s, std::size_t __n, const char_type& __a)
 172:/usr/include/c++/4.6.3/bits/char_traits.h ****     {
 173:/usr/include/c++/4.6.3/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 174:/usr/include/c++/4.6.3/bits/char_traits.h ****         if (eq(__s[__i], __a))
 175:/usr/include/c++/4.6.3/bits/char_traits.h ****           return __s + __i;
 176:/usr/include/c++/4.6.3/bits/char_traits.h ****       return 0;
 177:/usr/include/c++/4.6.3/bits/char_traits.h ****     }
 178:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 179:/usr/include/c++/4.6.3/bits/char_traits.h ****   template<typename _CharT>
 180:/usr/include/c++/4.6.3/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 181:/usr/include/c++/4.6.3/bits/char_traits.h ****     char_traits<_CharT>::
 182:/usr/include/c++/4.6.3/bits/char_traits.h ****     move(char_type* __s1, const char_type* __s2, std::size_t __n)
 183:/usr/include/c++/4.6.3/bits/char_traits.h ****     {
 184:/usr/include/c++/4.6.3/bits/char_traits.h ****       return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
 185:/usr/include/c++/4.6.3/bits/char_traits.h **** 						    __n * sizeof(char_type)));
 186:/usr/include/c++/4.6.3/bits/char_traits.h ****     }
 187:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 188:/usr/include/c++/4.6.3/bits/char_traits.h ****   template<typename _CharT>
 189:/usr/include/c++/4.6.3/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 190:/usr/include/c++/4.6.3/bits/char_traits.h ****     char_traits<_CharT>::
 191:/usr/include/c++/4.6.3/bits/char_traits.h ****     copy(char_type* __s1, const char_type* __s2, std::size_t __n)
 192:/usr/include/c++/4.6.3/bits/char_traits.h ****     {
 193:/usr/include/c++/4.6.3/bits/char_traits.h ****       // NB: Inline std::copy so no recursive dependencies.
 194:/usr/include/c++/4.6.3/bits/char_traits.h ****       std::copy(__s2, __s2 + __n, __s1);
 195:/usr/include/c++/4.6.3/bits/char_traits.h ****       return __s1;
 196:/usr/include/c++/4.6.3/bits/char_traits.h ****     }
 197:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 198:/usr/include/c++/4.6.3/bits/char_traits.h ****   template<typename _CharT>
 199:/usr/include/c++/4.6.3/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 200:/usr/include/c++/4.6.3/bits/char_traits.h ****     char_traits<_CharT>::
 201:/usr/include/c++/4.6.3/bits/char_traits.h ****     assign(char_type* __s, std::size_t __n, char_type __a)
 202:/usr/include/c++/4.6.3/bits/char_traits.h ****     {
 203:/usr/include/c++/4.6.3/bits/char_traits.h ****       // NB: Inline std::fill_n so no recursive dependencies.
 204:/usr/include/c++/4.6.3/bits/char_traits.h ****       std::fill_n(__s, __n, __a);
 205:/usr/include/c++/4.6.3/bits/char_traits.h ****       return __s;
 206:/usr/include/c++/4.6.3/bits/char_traits.h ****     }
 207:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 208:/usr/include/c++/4.6.3/bits/char_traits.h **** _GLIBCXX_END_NAMESPACE_VERSION
 209:/usr/include/c++/4.6.3/bits/char_traits.h **** } // namespace
 210:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 211:/usr/include/c++/4.6.3/bits/char_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
 212:/usr/include/c++/4.6.3/bits/char_traits.h **** {
 213:/usr/include/c++/4.6.3/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 214:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 215:/usr/include/c++/4.6.3/bits/char_traits.h ****   // 21.1
 216:/usr/include/c++/4.6.3/bits/char_traits.h ****   /**
 217:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  @brief  Basis for explicit traits specializations.
 218:/usr/include/c++/4.6.3/bits/char_traits.h ****    *
 219:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  @note  For any given actual character type, this definition is
 220:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  probably wrong.  Since this is just a thin wrapper around
 221:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  __gnu_cxx::char_traits, it is possible to achieve a more
 222:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  appropriate definition by specializing __gnu_cxx::char_traits.
 223:/usr/include/c++/4.6.3/bits/char_traits.h ****    *
 224:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt05ch13s03.html
 225:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
 226:/usr/include/c++/4.6.3/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.
 227:/usr/include/c++/4.6.3/bits/char_traits.h ****   */
 228:/usr/include/c++/4.6.3/bits/char_traits.h ****   template<class _CharT>
 229:/usr/include/c++/4.6.3/bits/char_traits.h ****     struct char_traits : public __gnu_cxx::char_traits<_CharT>
 230:/usr/include/c++/4.6.3/bits/char_traits.h ****     { };
 231:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 232:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 233:/usr/include/c++/4.6.3/bits/char_traits.h ****   /// 21.1.3.1  char_traits specializations
 234:/usr/include/c++/4.6.3/bits/char_traits.h ****   template<>
 235:/usr/include/c++/4.6.3/bits/char_traits.h ****     struct char_traits<char>
 236:/usr/include/c++/4.6.3/bits/char_traits.h ****     {
 237:/usr/include/c++/4.6.3/bits/char_traits.h ****       typedef char              char_type;
 238:/usr/include/c++/4.6.3/bits/char_traits.h ****       typedef int               int_type;
 239:/usr/include/c++/4.6.3/bits/char_traits.h ****       typedef streampos         pos_type;
 240:/usr/include/c++/4.6.3/bits/char_traits.h ****       typedef streamoff         off_type;
 241:/usr/include/c++/4.6.3/bits/char_traits.h ****       typedef mbstate_t         state_type;
 242:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 243:/usr/include/c++/4.6.3/bits/char_traits.h ****       static void
 244:/usr/include/c++/4.6.3/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2)
 245:/usr/include/c++/4.6.3/bits/char_traits.h ****       { __c1 = __c2; }
 246:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 247:/usr/include/c++/4.6.3/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 248:/usr/include/c++/4.6.3/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2)
 249:/usr/include/c++/4.6.3/bits/char_traits.h ****       { return __c1 == __c2; }
 250:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 251:/usr/include/c++/4.6.3/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 252:/usr/include/c++/4.6.3/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2)
 253:/usr/include/c++/4.6.3/bits/char_traits.h ****       { return __c1 < __c2; }
 254:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 255:/usr/include/c++/4.6.3/bits/char_traits.h ****       static int
 256:/usr/include/c++/4.6.3/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, size_t __n)
 257:/usr/include/c++/4.6.3/bits/char_traits.h ****       { return __builtin_memcmp(__s1, __s2, __n); }
 258:/usr/include/c++/4.6.3/bits/char_traits.h **** 
 259:/usr/include/c++/4.6.3/bits/char_traits.h ****       static size_t
 155              		.loc	11 259 31
 156              	.Ltmp51:
 157              		#DEBUG_VALUE: length:__s <- RSI+0 # /usr/include/c++/4.6.3/bits/char_traits.h:259:31[ /usr/include
 158 0060 BA020000 		movl	$2, %edx
 158      00
 159              		.loc	2 37 3
 160              	.Ltmp52:
 161 0065 F20F114D 		movsd	%xmm1, -56(%rbp)        # ./matrix-util.C:37:3
 161      C8
  38:./matrix-util.C **** 		rss = rss / 1024.0;
 162              		.loc	2 38 3
 163              	.Ltmp53:
 164 006a F20F104D 		movsd	-64(%rbp), %xmm1        # ./matrix-util.C:38:3
 164      C0
 165 006f F20F5EC8 		divsd	%xmm0, %xmm1            # ./matrix-util.C:38:3
 166 0073 F20F114D 		movsd	%xmm1, -64(%rbp)        # ./matrix-util.C:38:3
 166      C0
 167              	.Ltmp5:
 168              	.Ltmp54:
 169              		#DEBUG_VALUE: assign:this <- undef
 170              	.Ltmp55:
 171              		#DEBUG_VALUE: length:__s <- undef
 172 0078 E8000000 		callq	_ZNSs6assignEPKcm
 172      00
 173              	.Ltmp6:
 174              	.Ltmp56:
 175              	.LBB0_4:                                # %_ZNSsaSEPKc.exit
  39:./matrix-util.C **** 		unit = "MB";
  40:./matrix-util.C **** 	}
  41:./matrix-util.C **** 
  42:./matrix-util.C **** 	commentator.report (Commentator::LEVEL_NORMAL, INTERNAL_DESCRIPTION)
 176              		.loc	2 42 2
 177              	.Ltmp57:
 178              	.Ltmp7:                                 # ./matrix-util.C:42:2
 179 007d BF000000 		movl	$_ZN4LELA11commentatorE, %edi # ./matrix-util.C:42:2
 179      00
 180 0082 BE020000 		movl	$2, %esi
 180      00
 181 0087 BA000000 		movl	$.L.str2, %edx          # ./matrix-util.C:42:2
 181      00
 182 008c E8000000 		callq	_ZN4LELA11Commentator6reportElPKc # ./matrix-util.C:42:2
 182      00
 183              	.Ltmp8:                                 # ./matrix-util.C:42:2
 184              	# BB#5:
 185 0091 4989C6   		movq	%rax, %r14              # ./matrix-util.C:42:2
 186              	.Ltmp9:
   1:/usr/include/c++/4.6.3/ostream **** // Output streams -*- C++ -*-
   2:/usr/include/c++/4.6.3/ostream **** 
   3:/usr/include/c++/4.6.3/ostream **** // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
   4:/usr/include/c++/4.6.3/ostream **** // 2006, 2007, 2008, 2009, 2010, 2011
   5:/usr/include/c++/4.6.3/ostream **** // Free Software Foundation, Inc.
   6:/usr/include/c++/4.6.3/ostream **** //
   7:/usr/include/c++/4.6.3/ostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   8:/usr/include/c++/4.6.3/ostream **** // software; you can redistribute it and/or modify it under the
   9:/usr/include/c++/4.6.3/ostream **** // terms of the GNU General Public License as published by the
  10:/usr/include/c++/4.6.3/ostream **** // Free Software Foundation; either version 3, or (at your option)
  11:/usr/include/c++/4.6.3/ostream **** // any later version.
  12:/usr/include/c++/4.6.3/ostream **** 
  13:/usr/include/c++/4.6.3/ostream **** // This library is distributed in the hope that it will be useful,
  14:/usr/include/c++/4.6.3/ostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:/usr/include/c++/4.6.3/ostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:/usr/include/c++/4.6.3/ostream **** // GNU General Public License for more details.
  17:/usr/include/c++/4.6.3/ostream **** 
  18:/usr/include/c++/4.6.3/ostream **** // Under Section 7 of GPL version 3, you are granted additional
  19:/usr/include/c++/4.6.3/ostream **** // permissions described in the GCC Runtime Library Exception, version
  20:/usr/include/c++/4.6.3/ostream **** // 3.1, as published by the Free Software Foundation.
  21:/usr/include/c++/4.6.3/ostream **** 
  22:/usr/include/c++/4.6.3/ostream **** // You should have received a copy of the GNU General Public License and
  23:/usr/include/c++/4.6.3/ostream **** // a copy of the GCC Runtime Library Exception along with this program;
  24:/usr/include/c++/4.6.3/ostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  25:/usr/include/c++/4.6.3/ostream **** // <http://www.gnu.org/licenses/>.
  26:/usr/include/c++/4.6.3/ostream **** 
  27:/usr/include/c++/4.6.3/ostream **** /** @file include/ostream
  28:/usr/include/c++/4.6.3/ostream ****  *  This is a Standard C++ Library header.
  29:/usr/include/c++/4.6.3/ostream ****  */
  30:/usr/include/c++/4.6.3/ostream **** 
  31:/usr/include/c++/4.6.3/ostream **** //
  32:/usr/include/c++/4.6.3/ostream **** // ISO C++ 14882: 27.6.2  Output streams
  33:/usr/include/c++/4.6.3/ostream **** //
  34:/usr/include/c++/4.6.3/ostream **** 
  35:/usr/include/c++/4.6.3/ostream **** #ifndef _GLIBCXX_OSTREAM
  36:/usr/include/c++/4.6.3/ostream **** #define _GLIBCXX_OSTREAM 1
  37:/usr/include/c++/4.6.3/ostream **** 
  38:/usr/include/c++/4.6.3/ostream **** #pragma GCC system_header
  39:/usr/include/c++/4.6.3/ostream **** 
  40:/usr/include/c++/4.6.3/ostream **** #include <ios>
  41:/usr/include/c++/4.6.3/ostream **** #include <bits/ostream_insert.h>
  42:/usr/include/c++/4.6.3/ostream **** 
  43:/usr/include/c++/4.6.3/ostream **** namespace std _GLIBCXX_VISIBILITY(default)
  44:/usr/include/c++/4.6.3/ostream **** {
  45:/usr/include/c++/4.6.3/ostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  46:/usr/include/c++/4.6.3/ostream **** 
  47:/usr/include/c++/4.6.3/ostream ****   // [27.6.2.1] Template class basic_ostream
  48:/usr/include/c++/4.6.3/ostream ****   /**
  49:/usr/include/c++/4.6.3/ostream ****    *  @brief  Controlling output.
  50:/usr/include/c++/4.6.3/ostream ****    *  @ingroup io
  51:/usr/include/c++/4.6.3/ostream ****    *
  52:/usr/include/c++/4.6.3/ostream ****    *  This is the base class for all output streams.  It provides text
  53:/usr/include/c++/4.6.3/ostream ****    *  formatting of all builtin types, and communicates with any class
  54:/usr/include/c++/4.6.3/ostream ****    *  derived from basic_streambuf to do the actual output.
  55:/usr/include/c++/4.6.3/ostream ****   */
  56:/usr/include/c++/4.6.3/ostream ****   template<typename _CharT, typename _Traits>
  57:/usr/include/c++/4.6.3/ostream ****     class basic_ostream : virtual public basic_ios<_CharT, _Traits>
  58:/usr/include/c++/4.6.3/ostream ****     {
  59:/usr/include/c++/4.6.3/ostream ****     public:
  60:/usr/include/c++/4.6.3/ostream ****       // Types (inherited from basic_ios (27.4.4)):
  61:/usr/include/c++/4.6.3/ostream ****       typedef _CharT                     		char_type;
  62:/usr/include/c++/4.6.3/ostream ****       typedef typename _Traits::int_type 		int_type;
  63:/usr/include/c++/4.6.3/ostream ****       typedef typename _Traits::pos_type 		pos_type;
  64:/usr/include/c++/4.6.3/ostream ****       typedef typename _Traits::off_type 		off_type;
  65:/usr/include/c++/4.6.3/ostream ****       typedef _Traits                    		traits_type;
  66:/usr/include/c++/4.6.3/ostream ****       
  67:/usr/include/c++/4.6.3/ostream ****       // Non-standard Types:
  68:/usr/include/c++/4.6.3/ostream ****       typedef basic_streambuf<_CharT, _Traits> 		__streambuf_type;
  69:/usr/include/c++/4.6.3/ostream ****       typedef basic_ios<_CharT, _Traits>		__ios_type;
  70:/usr/include/c++/4.6.3/ostream ****       typedef basic_ostream<_CharT, _Traits>		__ostream_type;
  71:/usr/include/c++/4.6.3/ostream ****       typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >        
  72:/usr/include/c++/4.6.3/ostream ****       							__num_put_type;
  73:/usr/include/c++/4.6.3/ostream ****       typedef ctype<_CharT>           			__ctype_type;
  74:/usr/include/c++/4.6.3/ostream **** 
  75:/usr/include/c++/4.6.3/ostream ****       // [27.6.2.2] constructor/destructor
  76:/usr/include/c++/4.6.3/ostream ****       /**
  77:/usr/include/c++/4.6.3/ostream ****        *  @brief  Base constructor.
  78:/usr/include/c++/4.6.3/ostream ****        *
  79:/usr/include/c++/4.6.3/ostream ****        *  This ctor is almost never called by the user directly, rather from
  80:/usr/include/c++/4.6.3/ostream ****        *  derived classes' initialization lists, which pass a pointer to
  81:/usr/include/c++/4.6.3/ostream ****        *  their own stream buffer.
  82:/usr/include/c++/4.6.3/ostream ****       */
  83:/usr/include/c++/4.6.3/ostream ****       explicit 
  84:/usr/include/c++/4.6.3/ostream ****       basic_ostream(__streambuf_type* __sb)
  85:/usr/include/c++/4.6.3/ostream ****       { this->init(__sb); }
  86:/usr/include/c++/4.6.3/ostream **** 
  87:/usr/include/c++/4.6.3/ostream ****       /**
  88:/usr/include/c++/4.6.3/ostream ****        *  @brief  Base destructor.
  89:/usr/include/c++/4.6.3/ostream ****        *
  90:/usr/include/c++/4.6.3/ostream ****        *  This does very little apart from providing a virtual base dtor.
  91:/usr/include/c++/4.6.3/ostream ****       */
  92:/usr/include/c++/4.6.3/ostream ****       virtual 
  93:/usr/include/c++/4.6.3/ostream ****       ~basic_ostream() { }
  94:/usr/include/c++/4.6.3/ostream **** 
  95:/usr/include/c++/4.6.3/ostream ****       // [27.6.2.3] prefix/suffix
  96:/usr/include/c++/4.6.3/ostream ****       class sentry;
  97:/usr/include/c++/4.6.3/ostream ****       friend class sentry;
  98:/usr/include/c++/4.6.3/ostream ****       
  99:/usr/include/c++/4.6.3/ostream ****       // [27.6.2.5] formatted output
 100:/usr/include/c++/4.6.3/ostream ****       // [27.6.2.5.3]  basic_ostream::operator<<
 101:/usr/include/c++/4.6.3/ostream ****       //@{
 102:/usr/include/c++/4.6.3/ostream ****       /**
 103:/usr/include/c++/4.6.3/ostream ****        *  @brief  Interface for manipulators.
 104:/usr/include/c++/4.6.3/ostream ****        *
 105:/usr/include/c++/4.6.3/ostream ****        *  Manipulators such as @c std::endl and @c std::hex use these
 106:/usr/include/c++/4.6.3/ostream ****        *  functions in constructs like "std::cout << std::endl".  For more
 107:/usr/include/c++/4.6.3/ostream ****        *  information, see the iomanip header.
 108:/usr/include/c++/4.6.3/ostream ****       */
 109:/usr/include/c++/4.6.3/ostream ****       __ostream_type&
 110:/usr/include/c++/4.6.3/ostream ****       operator<<(__ostream_type& (*__pf)(__ostream_type&))
 111:/usr/include/c++/4.6.3/ostream ****       {
 112:/usr/include/c++/4.6.3/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 113:/usr/include/c++/4.6.3/ostream **** 	// DR 60. What is a formatted input function?
 114:/usr/include/c++/4.6.3/ostream **** 	// The inserters for manipulators are *not* formatted output functions.
 115:/usr/include/c++/4.6.3/ostream **** 	return __pf(*this);
 116:/usr/include/c++/4.6.3/ostream ****       }
 117:/usr/include/c++/4.6.3/ostream **** 
 118:/usr/include/c++/4.6.3/ostream ****       __ostream_type&
 119:/usr/include/c++/4.6.3/ostream ****       operator<<(__ios_type& (*__pf)(__ios_type&))
 120:/usr/include/c++/4.6.3/ostream ****       {
 121:/usr/include/c++/4.6.3/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 122:/usr/include/c++/4.6.3/ostream **** 	// DR 60. What is a formatted input function?
 123:/usr/include/c++/4.6.3/ostream **** 	// The inserters for manipulators are *not* formatted output functions.
 124:/usr/include/c++/4.6.3/ostream **** 	__pf(*this);
 125:/usr/include/c++/4.6.3/ostream **** 	return *this;
 126:/usr/include/c++/4.6.3/ostream ****       }
 127:/usr/include/c++/4.6.3/ostream **** 
 128:/usr/include/c++/4.6.3/ostream ****       __ostream_type&
 129:/usr/include/c++/4.6.3/ostream ****       operator<<(ios_base& (*__pf) (ios_base&))
 130:/usr/include/c++/4.6.3/ostream ****       {
 131:/usr/include/c++/4.6.3/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 132:/usr/include/c++/4.6.3/ostream **** 	// DR 60. What is a formatted input function?
 133:/usr/include/c++/4.6.3/ostream **** 	// The inserters for manipulators are *not* formatted output functions.
 134:/usr/include/c++/4.6.3/ostream **** 	__pf(*this);
 135:/usr/include/c++/4.6.3/ostream **** 	return *this;
 136:/usr/include/c++/4.6.3/ostream ****       }
 137:/usr/include/c++/4.6.3/ostream ****       //@}
 138:/usr/include/c++/4.6.3/ostream **** 
 139:/usr/include/c++/4.6.3/ostream ****       // [27.6.2.5.2] arithmetic inserters
 140:/usr/include/c++/4.6.3/ostream ****       /**
 141:/usr/include/c++/4.6.3/ostream ****        *  @name Arithmetic Inserters
 142:/usr/include/c++/4.6.3/ostream ****        *
 143:/usr/include/c++/4.6.3/ostream ****        *  All the @c operator<< functions (aka <em>formatted output
 144:/usr/include/c++/4.6.3/ostream ****        *  functions</em>) have some common behavior.  Each starts by
 145:/usr/include/c++/4.6.3/ostream ****        *  constructing a temporary object of type std::basic_ostream::sentry.
 146:/usr/include/c++/4.6.3/ostream ****        *  This can have several effects, concluding with the setting of a
 147:/usr/include/c++/4.6.3/ostream ****        *  status flag; see the sentry documentation for more.
 148:/usr/include/c++/4.6.3/ostream ****        *
 149:/usr/include/c++/4.6.3/ostream ****        *  If the sentry status is good, the function tries to generate
 150:/usr/include/c++/4.6.3/ostream ****        *  whatever data is appropriate for the type of the argument.
 151:/usr/include/c++/4.6.3/ostream ****        *
 152:/usr/include/c++/4.6.3/ostream ****        *  If an exception is thrown during insertion, ios_base::badbit
 153:/usr/include/c++/4.6.3/ostream ****        *  will be turned on in the stream's error state without causing an
 154:/usr/include/c++/4.6.3/ostream ****        *  ios_base::failure to be thrown.  The original exception will then
 155:/usr/include/c++/4.6.3/ostream ****        *  be rethrown.
 156:/usr/include/c++/4.6.3/ostream ****       */
 157:/usr/include/c++/4.6.3/ostream ****       //@{
 158:/usr/include/c++/4.6.3/ostream ****       /**
 159:/usr/include/c++/4.6.3/ostream ****        *  @brief  Basic arithmetic inserters
 160:/usr/include/c++/4.6.3/ostream ****        *  @param  A variable of builtin type.
 161:/usr/include/c++/4.6.3/ostream ****        *  @return  @c *this if successful
 162:/usr/include/c++/4.6.3/ostream ****        *
 163:/usr/include/c++/4.6.3/ostream ****        *  These functions use the stream's current locale (specifically, the
 164:/usr/include/c++/4.6.3/ostream ****        *  @c num_get facet) to perform numeric formatting.
 165:/usr/include/c++/4.6.3/ostream ****       */
 166:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 167:/usr/include/c++/4.6.3/ostream ****       operator<<(long __n)
 168:/usr/include/c++/4.6.3/ostream ****       { return _M_insert(__n); }
 169:/usr/include/c++/4.6.3/ostream ****       
 170:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 171:/usr/include/c++/4.6.3/ostream ****       operator<<(unsigned long __n)
 172:/usr/include/c++/4.6.3/ostream ****       { return _M_insert(__n); }	
 173:/usr/include/c++/4.6.3/ostream **** 
 174:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 175:/usr/include/c++/4.6.3/ostream ****       operator<<(bool __n)
 176:/usr/include/c++/4.6.3/ostream ****       { return _M_insert(__n); }
 177:/usr/include/c++/4.6.3/ostream **** 
 178:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 179:/usr/include/c++/4.6.3/ostream ****       operator<<(short __n);
 180:/usr/include/c++/4.6.3/ostream **** 
 181:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 182:/usr/include/c++/4.6.3/ostream ****       operator<<(unsigned short __n)
 183:/usr/include/c++/4.6.3/ostream ****       {
 184:/usr/include/c++/4.6.3/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 185:/usr/include/c++/4.6.3/ostream **** 	// 117. basic_ostream uses nonexistent num_put member functions.
 186:/usr/include/c++/4.6.3/ostream **** 	return _M_insert(static_cast<unsigned long>(__n));
 187:/usr/include/c++/4.6.3/ostream ****       }
 188:/usr/include/c++/4.6.3/ostream **** 
 189:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 190:/usr/include/c++/4.6.3/ostream ****       operator<<(int __n);
 191:/usr/include/c++/4.6.3/ostream **** 
 192:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 193:/usr/include/c++/4.6.3/ostream ****       operator<<(unsigned int __n)
 194:/usr/include/c++/4.6.3/ostream ****       {
 195:/usr/include/c++/4.6.3/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 196:/usr/include/c++/4.6.3/ostream **** 	// 117. basic_ostream uses nonexistent num_put member functions.
 197:/usr/include/c++/4.6.3/ostream **** 	return _M_insert(static_cast<unsigned long>(__n));
 198:/usr/include/c++/4.6.3/ostream ****       }
 199:/usr/include/c++/4.6.3/ostream **** 
 200:/usr/include/c++/4.6.3/ostream **** #ifdef _GLIBCXX_USE_LONG_LONG
 201:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 202:/usr/include/c++/4.6.3/ostream ****       operator<<(long long __n)
 203:/usr/include/c++/4.6.3/ostream ****       { return _M_insert(__n); }
 204:/usr/include/c++/4.6.3/ostream **** 
 205:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 206:/usr/include/c++/4.6.3/ostream ****       operator<<(unsigned long long __n)
 207:/usr/include/c++/4.6.3/ostream ****       { return _M_insert(__n); }	
 208:/usr/include/c++/4.6.3/ostream **** #endif
 209:/usr/include/c++/4.6.3/ostream **** 
 210:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 211:/usr/include/c++/4.6.3/ostream ****       operator<<(double __f)
 212:/usr/include/c++/4.6.3/ostream ****       { return _M_insert(__f); }
 213:/usr/include/c++/4.6.3/ostream **** 
 214:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 215:/usr/include/c++/4.6.3/ostream ****       operator<<(float __f)
 216:/usr/include/c++/4.6.3/ostream ****       {
 217:/usr/include/c++/4.6.3/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 218:/usr/include/c++/4.6.3/ostream **** 	// 117. basic_ostream uses nonexistent num_put member functions.
 219:/usr/include/c++/4.6.3/ostream **** 	return _M_insert(static_cast<double>(__f));
 220:/usr/include/c++/4.6.3/ostream ****       }
 221:/usr/include/c++/4.6.3/ostream **** 
 222:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 223:/usr/include/c++/4.6.3/ostream ****       operator<<(long double __f)
 224:/usr/include/c++/4.6.3/ostream ****       { return _M_insert(__f); }
 225:/usr/include/c++/4.6.3/ostream **** 
 226:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 227:/usr/include/c++/4.6.3/ostream ****       operator<<(const void* __p)
 228:/usr/include/c++/4.6.3/ostream ****       { return _M_insert(__p); }
 229:/usr/include/c++/4.6.3/ostream **** 
 230:/usr/include/c++/4.6.3/ostream ****       /**
 231:/usr/include/c++/4.6.3/ostream ****        *  @brief  Extracting from another streambuf.
 232:/usr/include/c++/4.6.3/ostream ****        *  @param  sb  A pointer to a streambuf
 233:/usr/include/c++/4.6.3/ostream ****        *
 234:/usr/include/c++/4.6.3/ostream ****        *  This function behaves like one of the basic arithmetic extractors,
 235:/usr/include/c++/4.6.3/ostream ****        *  in that it also constructs a sentry object and has the same error
 236:/usr/include/c++/4.6.3/ostream ****        *  handling behavior.
 237:/usr/include/c++/4.6.3/ostream ****        *
 238:/usr/include/c++/4.6.3/ostream ****        *  If @a sb is NULL, the stream will set failbit in its error state.
 239:/usr/include/c++/4.6.3/ostream ****        *
 240:/usr/include/c++/4.6.3/ostream ****        *  Characters are extracted from @a sb and inserted into @c *this
 241:/usr/include/c++/4.6.3/ostream ****        *  until one of the following occurs:
 242:/usr/include/c++/4.6.3/ostream ****        *
 243:/usr/include/c++/4.6.3/ostream ****        *  - the input stream reaches end-of-file,
 244:/usr/include/c++/4.6.3/ostream ****        *  - insertion into the output sequence fails (in this case, the
 245:/usr/include/c++/4.6.3/ostream ****        *    character that would have been inserted is not extracted), or
 246:/usr/include/c++/4.6.3/ostream ****        *  - an exception occurs while getting a character from @a sb, which
 247:/usr/include/c++/4.6.3/ostream ****        *    sets failbit in the error state
 248:/usr/include/c++/4.6.3/ostream ****        *
 249:/usr/include/c++/4.6.3/ostream ****        *  If the function inserts no characters, failbit is set.
 250:/usr/include/c++/4.6.3/ostream ****       */
 251:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 252:/usr/include/c++/4.6.3/ostream ****       operator<<(__streambuf_type* __sb);
 253:/usr/include/c++/4.6.3/ostream ****       //@}
 254:/usr/include/c++/4.6.3/ostream **** 
 255:/usr/include/c++/4.6.3/ostream ****       // [27.6.2.6] unformatted output functions
 256:/usr/include/c++/4.6.3/ostream ****       /**
 257:/usr/include/c++/4.6.3/ostream ****        *  @name Unformatted Output Functions
 258:/usr/include/c++/4.6.3/ostream ****        *
 259:/usr/include/c++/4.6.3/ostream ****        *  All the unformatted output functions have some common behavior.
 260:/usr/include/c++/4.6.3/ostream ****        *  Each starts by constructing a temporary object of type
 261:/usr/include/c++/4.6.3/ostream ****        *  std::basic_ostream::sentry.  This has several effects, concluding
 262:/usr/include/c++/4.6.3/ostream ****        *  with the setting of a status flag; see the sentry documentation
 263:/usr/include/c++/4.6.3/ostream ****        *  for more.
 264:/usr/include/c++/4.6.3/ostream ****        *
 265:/usr/include/c++/4.6.3/ostream ****        *  If the sentry status is good, the function tries to generate
 266:/usr/include/c++/4.6.3/ostream ****        *  whatever data is appropriate for the type of the argument.
 267:/usr/include/c++/4.6.3/ostream ****        *
 268:/usr/include/c++/4.6.3/ostream ****        *  If an exception is thrown during insertion, ios_base::badbit
 269:/usr/include/c++/4.6.3/ostream ****        *  will be turned on in the stream's error state.  If badbit is on in
 270:/usr/include/c++/4.6.3/ostream ****        *  the stream's exceptions mask, the exception will be rethrown
 271:/usr/include/c++/4.6.3/ostream ****        *  without completing its actions.
 272:/usr/include/c++/4.6.3/ostream ****       */
 273:/usr/include/c++/4.6.3/ostream ****       //@{
 274:/usr/include/c++/4.6.3/ostream ****       /**
 275:/usr/include/c++/4.6.3/ostream ****        *  @brief  Simple insertion.
 276:/usr/include/c++/4.6.3/ostream ****        *  @param  c  The character to insert.
 277:/usr/include/c++/4.6.3/ostream ****        *  @return  *this
 278:/usr/include/c++/4.6.3/ostream ****        *
 279:/usr/include/c++/4.6.3/ostream ****        *  Tries to insert @a c.
 280:/usr/include/c++/4.6.3/ostream ****        *
 281:/usr/include/c++/4.6.3/ostream ****        *  @note  This function is not overloaded on signed char and
 282:/usr/include/c++/4.6.3/ostream ****        *         unsigned char.
 283:/usr/include/c++/4.6.3/ostream ****       */
 284:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 285:/usr/include/c++/4.6.3/ostream ****       put(char_type __c);
 286:/usr/include/c++/4.6.3/ostream **** 
 287:/usr/include/c++/4.6.3/ostream ****       // Core write functionality, without sentry.
 288:/usr/include/c++/4.6.3/ostream ****       void
 289:/usr/include/c++/4.6.3/ostream ****       _M_write(const char_type* __s, streamsize __n)
 290:/usr/include/c++/4.6.3/ostream ****       {
 291:/usr/include/c++/4.6.3/ostream **** 	const streamsize __put = this->rdbuf()->sputn(__s, __n);
 292:/usr/include/c++/4.6.3/ostream **** 	if (__put != __n)
 293:/usr/include/c++/4.6.3/ostream **** 	  this->setstate(ios_base::badbit);
 294:/usr/include/c++/4.6.3/ostream ****       }
 295:/usr/include/c++/4.6.3/ostream **** 
 296:/usr/include/c++/4.6.3/ostream ****       /**
 297:/usr/include/c++/4.6.3/ostream ****        *  @brief  Character string insertion.
 298:/usr/include/c++/4.6.3/ostream ****        *  @param  s  The array to insert.
 299:/usr/include/c++/4.6.3/ostream ****        *  @param  n  Maximum number of characters to insert.
 300:/usr/include/c++/4.6.3/ostream ****        *  @return  *this
 301:/usr/include/c++/4.6.3/ostream ****        *
 302:/usr/include/c++/4.6.3/ostream ****        *  Characters are copied from @a s and inserted into the stream until
 303:/usr/include/c++/4.6.3/ostream ****        *  one of the following happens:
 304:/usr/include/c++/4.6.3/ostream ****        *
 305:/usr/include/c++/4.6.3/ostream ****        *  - @a n characters are inserted
 306:/usr/include/c++/4.6.3/ostream ****        *  - inserting into the output sequence fails (in this case, badbit
 307:/usr/include/c++/4.6.3/ostream ****        *    will be set in the stream's error state)
 308:/usr/include/c++/4.6.3/ostream ****        *
 309:/usr/include/c++/4.6.3/ostream ****        *  @note  This function is not overloaded on signed char and
 310:/usr/include/c++/4.6.3/ostream ****        *         unsigned char.
 311:/usr/include/c++/4.6.3/ostream ****       */
 312:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 313:/usr/include/c++/4.6.3/ostream ****       write(const char_type* __s, streamsize __n);
 314:/usr/include/c++/4.6.3/ostream ****       //@}
 315:/usr/include/c++/4.6.3/ostream **** 
 316:/usr/include/c++/4.6.3/ostream ****       /**
 317:/usr/include/c++/4.6.3/ostream ****        *  @brief  Synchronizing the stream buffer.
 318:/usr/include/c++/4.6.3/ostream ****        *  @return  *this
 319:/usr/include/c++/4.6.3/ostream ****        *
 320:/usr/include/c++/4.6.3/ostream ****        *  If @c rdbuf() is a null pointer, changes nothing.
 321:/usr/include/c++/4.6.3/ostream ****        *
 322:/usr/include/c++/4.6.3/ostream ****        *  Otherwise, calls @c rdbuf()->pubsync(), and if that returns -1,
 323:/usr/include/c++/4.6.3/ostream ****        *  sets badbit.
 324:/usr/include/c++/4.6.3/ostream ****       */
 325:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 326:/usr/include/c++/4.6.3/ostream ****       flush();
 327:/usr/include/c++/4.6.3/ostream **** 
 328:/usr/include/c++/4.6.3/ostream ****       // [27.6.2.4] seek members
 329:/usr/include/c++/4.6.3/ostream ****       /**
 330:/usr/include/c++/4.6.3/ostream ****        *  @brief  Getting the current write position.
 331:/usr/include/c++/4.6.3/ostream ****        *  @return  A file position object.
 332:/usr/include/c++/4.6.3/ostream ****        *
 333:/usr/include/c++/4.6.3/ostream ****        *  If @c fail() is not false, returns @c pos_type(-1) to indicate
 334:/usr/include/c++/4.6.3/ostream ****        *  failure.  Otherwise returns @c rdbuf()->pubseekoff(0,cur,out).
 335:/usr/include/c++/4.6.3/ostream ****       */
 336:/usr/include/c++/4.6.3/ostream ****       pos_type 
 337:/usr/include/c++/4.6.3/ostream ****       tellp();
 338:/usr/include/c++/4.6.3/ostream **** 
 339:/usr/include/c++/4.6.3/ostream ****       /**
 340:/usr/include/c++/4.6.3/ostream ****        *  @brief  Changing the current write position.
 341:/usr/include/c++/4.6.3/ostream ****        *  @param  pos  A file position object.
 342:/usr/include/c++/4.6.3/ostream ****        *  @return  *this
 343:/usr/include/c++/4.6.3/ostream ****        *
 344:/usr/include/c++/4.6.3/ostream ****        *  If @c fail() is not true, calls @c rdbuf()->pubseekpos(pos).  If
 345:/usr/include/c++/4.6.3/ostream ****        *  that function fails, sets failbit.
 346:/usr/include/c++/4.6.3/ostream ****       */
 347:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 348:/usr/include/c++/4.6.3/ostream ****       seekp(pos_type);
 349:/usr/include/c++/4.6.3/ostream **** 
 350:/usr/include/c++/4.6.3/ostream ****       /**
 351:/usr/include/c++/4.6.3/ostream ****        *  @brief  Changing the current write position.
 352:/usr/include/c++/4.6.3/ostream ****        *  @param  off  A file offset object.
 353:/usr/include/c++/4.6.3/ostream ****        *  @param  dir  The direction in which to seek.
 354:/usr/include/c++/4.6.3/ostream ****        *  @return  *this
 355:/usr/include/c++/4.6.3/ostream ****        *
 356:/usr/include/c++/4.6.3/ostream ****        *  If @c fail() is not true, calls @c rdbuf()->pubseekoff(off,dir).
 357:/usr/include/c++/4.6.3/ostream ****        *  If that function fails, sets failbit.
 358:/usr/include/c++/4.6.3/ostream ****       */
 359:/usr/include/c++/4.6.3/ostream ****        __ostream_type& 
 360:/usr/include/c++/4.6.3/ostream ****       seekp(off_type, ios_base::seekdir);
 361:/usr/include/c++/4.6.3/ostream ****       
 362:/usr/include/c++/4.6.3/ostream ****     protected:
 363:/usr/include/c++/4.6.3/ostream ****       basic_ostream()
 364:/usr/include/c++/4.6.3/ostream ****       { this->init(0); }
 365:/usr/include/c++/4.6.3/ostream **** 
 366:/usr/include/c++/4.6.3/ostream ****       template<typename _ValueT>
 367:/usr/include/c++/4.6.3/ostream ****         __ostream_type&
 368:/usr/include/c++/4.6.3/ostream ****         _M_insert(_ValueT __v);
 369:/usr/include/c++/4.6.3/ostream ****     };
 370:/usr/include/c++/4.6.3/ostream **** 
 371:/usr/include/c++/4.6.3/ostream ****   /**
 372:/usr/include/c++/4.6.3/ostream ****    *  @brief  Performs setup work for output streams.
 373:/usr/include/c++/4.6.3/ostream ****    *
 374:/usr/include/c++/4.6.3/ostream ****    *  Objects of this class are created before all of the standard
 375:/usr/include/c++/4.6.3/ostream ****    *  inserters are run.  It is responsible for <em>exception-safe prefix and
 376:/usr/include/c++/4.6.3/ostream ****    *  suffix operations</em>.
 377:/usr/include/c++/4.6.3/ostream ****   */
 378:/usr/include/c++/4.6.3/ostream ****   template <typename _CharT, typename _Traits>
 379:/usr/include/c++/4.6.3/ostream ****     class basic_ostream<_CharT, _Traits>::sentry
 380:/usr/include/c++/4.6.3/ostream ****     {
 381:/usr/include/c++/4.6.3/ostream ****       // Data Members.
 382:/usr/include/c++/4.6.3/ostream ****       bool 				_M_ok;
 383:/usr/include/c++/4.6.3/ostream ****       basic_ostream<_CharT, _Traits>& 	_M_os;
 384:/usr/include/c++/4.6.3/ostream ****       
 385:/usr/include/c++/4.6.3/ostream ****     public:
 386:/usr/include/c++/4.6.3/ostream ****       /**
 387:/usr/include/c++/4.6.3/ostream ****        *  @brief  The constructor performs preparatory work.
 388:/usr/include/c++/4.6.3/ostream ****        *  @param  os  The output stream to guard.
 389:/usr/include/c++/4.6.3/ostream ****        *
 390:/usr/include/c++/4.6.3/ostream ****        *  If the stream state is good (@a os.good() is true), then if the
 391:/usr/include/c++/4.6.3/ostream ****        *  stream is tied to another output stream, @c is.tie()->flush()
 392:/usr/include/c++/4.6.3/ostream ****        *  is called to synchronize the output sequences.
 393:/usr/include/c++/4.6.3/ostream ****        *
 394:/usr/include/c++/4.6.3/ostream ****        *  If the stream state is still good, then the sentry state becomes
 395:/usr/include/c++/4.6.3/ostream ****        *  true (@a okay).
 396:/usr/include/c++/4.6.3/ostream ****       */
 397:/usr/include/c++/4.6.3/ostream ****       explicit
 398:/usr/include/c++/4.6.3/ostream ****       sentry(basic_ostream<_CharT, _Traits>& __os);
 399:/usr/include/c++/4.6.3/ostream **** 
 400:/usr/include/c++/4.6.3/ostream ****       /**
 401:/usr/include/c++/4.6.3/ostream ****        *  @brief  Possibly flushes the stream.
 402:/usr/include/c++/4.6.3/ostream ****        *
 403:/usr/include/c++/4.6.3/ostream ****        *  If @c ios_base::unitbuf is set in @c os.flags(), and
 404:/usr/include/c++/4.6.3/ostream ****        *  @c std::uncaught_exception() is true, the sentry destructor calls
 405:/usr/include/c++/4.6.3/ostream ****        *  @c flush() on the output stream.
 406:/usr/include/c++/4.6.3/ostream ****       */
 407:/usr/include/c++/4.6.3/ostream ****       ~sentry()
 408:/usr/include/c++/4.6.3/ostream ****       {
 409:/usr/include/c++/4.6.3/ostream **** 	// XXX MT
 410:/usr/include/c++/4.6.3/ostream **** 	if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
 411:/usr/include/c++/4.6.3/ostream **** 	  {
 412:/usr/include/c++/4.6.3/ostream **** 	    // Can't call flush directly or else will get into recursive lock.
 413:/usr/include/c++/4.6.3/ostream **** 	    if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
 414:/usr/include/c++/4.6.3/ostream **** 	      _M_os.setstate(ios_base::badbit);
 415:/usr/include/c++/4.6.3/ostream **** 	  }
 416:/usr/include/c++/4.6.3/ostream ****       }
 417:/usr/include/c++/4.6.3/ostream **** 
 418:/usr/include/c++/4.6.3/ostream ****       /**
 419:/usr/include/c++/4.6.3/ostream ****        *  @brief  Quick status checking.
 420:/usr/include/c++/4.6.3/ostream ****        *  @return  The sentry state.
 421:/usr/include/c++/4.6.3/ostream ****        *
 422:/usr/include/c++/4.6.3/ostream ****        *  For ease of use, sentries may be converted to booleans.  The
 423:/usr/include/c++/4.6.3/ostream ****        *  return value is that of the sentry state (true == okay).
 424:/usr/include/c++/4.6.3/ostream ****       */
 425:/usr/include/c++/4.6.3/ostream **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 426:/usr/include/c++/4.6.3/ostream ****       explicit
 427:/usr/include/c++/4.6.3/ostream **** #endif
 428:/usr/include/c++/4.6.3/ostream ****       operator bool() const
 429:/usr/include/c++/4.6.3/ostream ****       { return _M_ok; }
 430:/usr/include/c++/4.6.3/ostream ****     };
 431:/usr/include/c++/4.6.3/ostream **** 
 432:/usr/include/c++/4.6.3/ostream ****   // [27.6.2.5.4] character insertion templates
 433:/usr/include/c++/4.6.3/ostream ****   //@{
 434:/usr/include/c++/4.6.3/ostream ****   /**
 435:/usr/include/c++/4.6.3/ostream ****    *  @brief  Character inserters
 436:/usr/include/c++/4.6.3/ostream ****    *  @param  out  An output stream.
 437:/usr/include/c++/4.6.3/ostream ****    *  @param  c  A character.
 438:/usr/include/c++/4.6.3/ostream ****    *  @return  out
 439:/usr/include/c++/4.6.3/ostream ****    *
 440:/usr/include/c++/4.6.3/ostream ****    *  Behaves like one of the formatted arithmetic inserters described in
 441:/usr/include/c++/4.6.3/ostream ****    *  std::basic_ostream.  After constructing a sentry object with good
 442:/usr/include/c++/4.6.3/ostream ****    *  status, this function inserts a single character and any required
 443:/usr/include/c++/4.6.3/ostream ****    *  padding (as determined by [22.2.2.2.2]).  @c out.width(0) is then
 444:/usr/include/c++/4.6.3/ostream ****    *  called.
 445:/usr/include/c++/4.6.3/ostream ****    *
 446:/usr/include/c++/4.6.3/ostream ****    *  If @a c is of type @c char and the character type of the stream is not
 447:/usr/include/c++/4.6.3/ostream ****    *  @c char, the character is widened before insertion.
 448:/usr/include/c++/4.6.3/ostream ****   */
 449:/usr/include/c++/4.6.3/ostream ****   template<typename _CharT, typename _Traits>
 450:/usr/include/c++/4.6.3/ostream ****     inline basic_ostream<_CharT, _Traits>&
 451:/usr/include/c++/4.6.3/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
 452:/usr/include/c++/4.6.3/ostream ****     { return __ostream_insert(__out, &__c, 1); }
 453:/usr/include/c++/4.6.3/ostream **** 
 454:/usr/include/c++/4.6.3/ostream ****   template<typename _CharT, typename _Traits>
 455:/usr/include/c++/4.6.3/ostream ****     inline basic_ostream<_CharT, _Traits>&
 456:/usr/include/c++/4.6.3/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
 457:/usr/include/c++/4.6.3/ostream ****     { return (__out << __out.widen(__c)); }
 458:/usr/include/c++/4.6.3/ostream **** 
 459:/usr/include/c++/4.6.3/ostream ****   // Specialization
 460:/usr/include/c++/4.6.3/ostream ****   template <class _Traits> 
 461:/usr/include/c++/4.6.3/ostream ****     inline basic_ostream<char, _Traits>&
 462:/usr/include/c++/4.6.3/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, char __c)
 463:/usr/include/c++/4.6.3/ostream ****     { return __ostream_insert(__out, &__c, 1); }
 464:/usr/include/c++/4.6.3/ostream **** 
 465:/usr/include/c++/4.6.3/ostream ****   // Signed and unsigned
 466:/usr/include/c++/4.6.3/ostream ****   template<class _Traits>
 467:/usr/include/c++/4.6.3/ostream ****     inline basic_ostream<char, _Traits>&
 468:/usr/include/c++/4.6.3/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
 469:/usr/include/c++/4.6.3/ostream ****     { return (__out << static_cast<char>(__c)); }
 470:/usr/include/c++/4.6.3/ostream ****   
 471:/usr/include/c++/4.6.3/ostream ****   template<class _Traits>
 472:/usr/include/c++/4.6.3/ostream ****     inline basic_ostream<char, _Traits>&
 473:/usr/include/c++/4.6.3/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
 474:/usr/include/c++/4.6.3/ostream ****     { return (__out << static_cast<char>(__c)); }
 475:/usr/include/c++/4.6.3/ostream ****   //@}
 476:/usr/include/c++/4.6.3/ostream ****   
 477:/usr/include/c++/4.6.3/ostream ****   //@{
 478:/usr/include/c++/4.6.3/ostream ****   /**
 479:/usr/include/c++/4.6.3/ostream ****    *  @brief  String inserters
 480:/usr/include/c++/4.6.3/ostream ****    *  @param  out  An output stream.
 481:/usr/include/c++/4.6.3/ostream ****    *  @param  s  A character string.
 482:/usr/include/c++/4.6.3/ostream ****    *  @return  out
 483:/usr/include/c++/4.6.3/ostream ****    *  @pre  @a s must be a non-NULL pointer
 484:/usr/include/c++/4.6.3/ostream ****    *
 485:/usr/include/c++/4.6.3/ostream ****    *  Behaves like one of the formatted arithmetic inserters described in
 486:/usr/include/c++/4.6.3/ostream ****    *  std::basic_ostream.  After constructing a sentry object with good
 487:/usr/include/c++/4.6.3/ostream ****    *  status, this function inserts @c traits::length(s) characters starting
 488:/usr/include/c++/4.6.3/ostream ****    *  at @a s, widened if necessary, followed by any required padding (as
 489:/usr/include/c++/4.6.3/ostream ****    *  determined by [22.2.2.2.2]).  @c out.width(0) is then called.
 490:/usr/include/c++/4.6.3/ostream ****   */
 491:/usr/include/c++/4.6.3/ostream ****   template<typename _CharT, typename _Traits>
 492:/usr/include/c++/4.6.3/ostream ****     inline basic_ostream<_CharT, _Traits>&
 493:/usr/include/c++/4.6.3/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
 494:/usr/include/c++/4.6.3/ostream ****     {
 495:/usr/include/c++/4.6.3/ostream ****       if (!__s)
 496:/usr/include/c++/4.6.3/ostream **** 	__out.setstate(ios_base::badbit);
 497:/usr/include/c++/4.6.3/ostream ****       else
 498:/usr/include/c++/4.6.3/ostream **** 	__ostream_insert(__out, __s,
 499:/usr/include/c++/4.6.3/ostream **** 			 static_cast<streamsize>(_Traits::length(__s)));
 500:/usr/include/c++/4.6.3/ostream ****       return __out;
 501:/usr/include/c++/4.6.3/ostream ****     }
 502:/usr/include/c++/4.6.3/ostream **** 
 503:/usr/include/c++/4.6.3/ostream ****   template<typename _CharT, typename _Traits>
 504:/usr/include/c++/4.6.3/ostream ****     basic_ostream<_CharT, _Traits> &
 505:/usr/include/c++/4.6.3/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);
 506:/usr/include/c++/4.6.3/ostream **** 
 507:/usr/include/c++/4.6.3/ostream ****   // Partial specializations
 508:/usr/include/c++/4.6.3/ostream ****   template<class _Traits>
 509:/usr/include/c++/4.6.3/ostream ****     inline basic_ostream<char, _Traits>&
 187              		.loc	12 509 46
 188              	.Ltmp58:
 189              		#DEBUG_VALUE: operator<<:__out <- R14+0 # /usr/include/c++/4.6.3/ostream:509:46[ ./matrix-util.C:4
 190 0094 BE000000 		movl	$.L.str3, %esi
 190      00
 191              	.Ltmp59:
 192              		#DEBUG_VALUE: length:__s <- RSI+0
 193 0099 BA030000 		movl	$3, %edx
 193      00
 194 009e 4C89F7   		movq	%r14, %rdi
 195              	.Ltmp60:
 196              		#DEBUG_VALUE: length:__s <- undef
 197 00a1 E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l
 197      00
 198              	.Ltmp10:
 199              	# BB#6:                                 # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.
 200              	.Ltmp61:
 201              		#DEBUG_VALUE: operator<<:__out <- R14+0
 287:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_data() const
 202              		.loc	3 287 9
 203              	.Ltmp62:
 204 00a6 488B33   		movq	(%rbx), %rsi            # /usr/include/c++/4.6.3/bits/basic_string.h:287:9[ /usr/include/c++/
 205              	.Ltmp63:
 286:/usr/include/c++/4.6.3/bits/basic_string.h ****       _CharT*
 206              		.loc	3 286 7
 207              	.Ltmp64:
 208              		#DEBUG_VALUE: _M_data:this <- RBX+0 # /usr/include/c++/4.6.3/bits/basic_string.h:286:7[ /usr/inclu
 710:/usr/include/c++/4.6.3/bits/basic_string.h ****       size() const
 209              		.loc	3 710 9
 210              	.Ltmp65:
 211 00a9 488B56E8 		movq	-24(%rsi), %rdx         # /usr/include/c++/4.6.3/bits/basic_string.h:710:9[ /usr/include/c++/
 709:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
 212              		.loc	3 709 7
 213              	.Ltmp66:
 214              		#DEBUG_VALUE: size:this <- RBX+0 # /usr/include/c++/4.6.3/bits/basic_string.h:709:7[ /usr/include/
 294:/usr/include/c++/4.6.3/bits/basic_string.h ****       _Rep*
 215              		.loc	3 294 7
 216              	.Ltmp67:
 217              		#DEBUG_VALUE: _M_rep:this <- RBX+0 # /usr/include/c++/4.6.3/bits/basic_string.h:294:7[ /usr/includ
 218              	.Ltmp11:
1118:/usr/include/c++/4.6.3/bits/basic_string.h ****       assign(const _CharT* __s)
1119:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
1120:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1121:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return this->assign(__s, traits_type::length(__s));
1122:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1123:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1124:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1125:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
1126:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Length of the resulting string.
1127:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param c  The character to use.
1128:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1129:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1130:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  This function sets the value of this string to @a n copies of
1131:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  character @a c.
1132:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
1133:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1134:/usr/include/c++/4.6.3/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
1135:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
1136:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1137:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1138:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
1139:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param first  Iterator referencing the first character to append.
1140:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param last  Iterator marking the end of the range.
1141:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1142:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1143:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Sets value of string to characters in the range [first,last).
1144:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1145:/usr/include/c++/4.6.3/bits/basic_string.h ****       template<class _InputIterator>
1146:/usr/include/c++/4.6.3/bits/basic_string.h ****         basic_string&
1147:/usr/include/c++/4.6.3/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
1148:/usr/include/c++/4.6.3/bits/basic_string.h ****         { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
1149:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1150:/usr/include/c++/4.6.3/bits/basic_string.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
1151:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1152:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
1153:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param l  The initializer_list of characters to assign.
1154:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1155:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
1156:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1157:/usr/include/c++/4.6.3/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
1158:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
1159:/usr/include/c++/4.6.3/bits/basic_string.h **** #endif // __GXX_EXPERIMENTAL_CXX0X__
1160:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1161:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1162:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1163:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param p  Iterator referencing location in string to insert at.
1164:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Number of characters to insert
1165:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param c  The character to insert.
1166:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1167:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1168:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Inserts @a n copies of character @a c starting at the position
1169:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  referenced by iterator @a p.  If adding characters causes the length
1170:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  to exceed max_size(), length_error is thrown.  The value of the
1171:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
1172:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1173:/usr/include/c++/4.6.3/bits/basic_string.h ****       void
1174:/usr/include/c++/4.6.3/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
1175:/usr/include/c++/4.6.3/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
1176:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1177:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1178:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1179:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param p  Iterator referencing location in string to insert at.
1180:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param beg  Start of range.
1181:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param end  End of range.
1182:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1183:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1184:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Inserts characters in range [beg,end).  If adding characters causes
1185:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  the length to exceed max_size(), length_error is thrown.  The value
1186:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
1187:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1188:/usr/include/c++/4.6.3/bits/basic_string.h ****       template<class _InputIterator>
1189:/usr/include/c++/4.6.3/bits/basic_string.h ****         void
1190:/usr/include/c++/4.6.3/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
1191:/usr/include/c++/4.6.3/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
1192:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1193:/usr/include/c++/4.6.3/bits/basic_string.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
1194:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1195:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
1196:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param p  Iterator referencing location in string to insert at.
1197:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param l  The initializer_list of characters to insert.
1198:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1199:/usr/include/c++/4.6.3/bits/basic_string.h ****        */
1200:/usr/include/c++/4.6.3/bits/basic_string.h ****       void
1201:/usr/include/c++/4.6.3/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
1202:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
1203:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());
1204:/usr/include/c++/4.6.3/bits/basic_string.h **** 	this->insert(__p - _M_ibegin(), __l.begin(), __l.size());
1205:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1206:/usr/include/c++/4.6.3/bits/basic_string.h **** #endif // __GXX_EXPERIMENTAL_CXX0X__
1207:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1208:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1209:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Insert value of a string.
1210:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos1  Iterator referencing location in string to insert at.
1211:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param str  The string to insert.
1212:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1213:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1214:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1215:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Inserts value of @a str starting at @a pos1.  If adding characters
1216:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  causes the length to exceed max_size(), length_error is thrown.  The
1217:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1218:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1219:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1220:/usr/include/c++/4.6.3/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
1221:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->insert(__pos1, __str, size_type(0), __str.size()); }
1222:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1223:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1224:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Insert a substring.
1225:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos1  Iterator referencing location in string to insert at.
1226:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param str  The string to insert.
1227:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos2  Start of characters in str to insert.
1228:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Number of characters to insert.
1229:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1230:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1231:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
1232:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @a pos2 > @a str.size().
1233:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1234:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting at @a pos1, insert @a n character of @a str beginning with
1235:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @a pos2.  If adding characters causes the length to exceed
1236:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a pos1 is beyond the end of
1237:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  this string or @a pos2 is beyond the end of @a str, out_of_range is
1238:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
1239:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  thrown.
1240:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1241:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1242:/usr/include/c++/4.6.3/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
1243:/usr/include/c++/4.6.3/bits/basic_string.h **** 	     size_type __pos2, size_type __n)
1244:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->insert(__pos1, __str._M_data()
1245:/usr/include/c++/4.6.3/bits/basic_string.h **** 			    + __str._M_check(__pos2, "basic_string::insert"),
1246:/usr/include/c++/4.6.3/bits/basic_string.h **** 			    __str._M_limit(__pos2, __n)); }
1247:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1248:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1249:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Insert a C substring.
1250:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Iterator referencing location in string to insert at.
1251:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  The C string to insert.
1252:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  The number of characters to insert.
1253:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1254:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1255:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1256:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  string.
1257:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1258:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Inserts the first @a n characters of @a s starting at @a pos.  If
1259:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
1260:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  length_error is thrown.  If @a pos is beyond end(), out_of_range is
1261:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
1262:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  thrown.
1263:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1264:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1265:/usr/include/c++/4.6.3/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n);
1266:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1267:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1268:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Insert a C string.
1269:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Iterator referencing location in string to insert at.
1270:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  The C string to insert.
1271:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1272:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1273:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1274:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  string.
1275:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1276:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Inserts the first @a n characters of @a s starting at @a pos.  If
1277:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
1278:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  length_error is thrown.  If @a pos is beyond end(), out_of_range is
1279:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
1280:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  thrown.
1281:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1282:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1283:/usr/include/c++/4.6.3/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
1284:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
1285:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1286:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return this->insert(__pos, __s, traits_type::length(__s));
1287:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1288:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1289:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1290:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1291:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index in string to insert at.
1292:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Number of characters to insert
1293:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param c  The character to insert.
1294:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1295:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1296:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1297:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  string.
1298:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1299:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Inserts @a n copies of character @a c starting at index @a pos.  If
1300:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
1301:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  length_error is thrown.  If @a pos > length(), out_of_range is
1302:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
1303:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  thrown.
1304:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1305:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1306:/usr/include/c++/4.6.3/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
1307:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
1308:/usr/include/c++/4.6.3/bits/basic_string.h **** 			      size_type(0), __n, __c); }
1309:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1310:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1311:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Insert one character.
1312:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param p  Iterator referencing position in string to insert at.
1313:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param c  The character to insert.
1314:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
1315:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1316:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1317:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Inserts character @a c at position referenced by @a p.  If adding
1318:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  character causes the length to exceed max_size(), length_error is
1319:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  thrown.  If @a p is beyond end of string, out_of_range is thrown.
1320:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
1321:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1322:/usr/include/c++/4.6.3/bits/basic_string.h ****       iterator
1323:/usr/include/c++/4.6.3/bits/basic_string.h ****       insert(iterator __p, _CharT __c)
1324:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
1325:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());
1326:/usr/include/c++/4.6.3/bits/basic_string.h **** 	const size_type __pos = __p - _M_ibegin();
1327:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
1328:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_rep()->_M_set_leaked();
1329:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1330:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1331:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1332:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1333:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Remove characters.
1334:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of first character to remove (default 0).
1335:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Number of characters to remove (default remainder).
1336:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1337:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1338:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  string.
1339:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1340:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Removes @a n characters from this string starting at @a pos.  The
1341:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  length of the string is reduced by @a n.  If there are < @a n
1342:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  characters to remove, the remainder of the string is truncated.  If
1343:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @a p is beyond end of string, out_of_range is thrown.  The value of
1344:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
1345:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1346:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1347:/usr/include/c++/4.6.3/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
1348:/usr/include/c++/4.6.3/bits/basic_string.h ****       { 
1349:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_mutate(_M_check(__pos, "basic_string::erase"),
1350:/usr/include/c++/4.6.3/bits/basic_string.h **** 		  _M_limit(__pos, __n), size_type(0));
1351:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return *this;
1352:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1353:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1354:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1355:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Remove one character.
1356:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param position  Iterator referencing the character to remove.
1357:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
1358:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1359:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Removes the character at @a position from this string. The value
1360:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
1361:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1362:/usr/include/c++/4.6.3/bits/basic_string.h ****       iterator
1363:/usr/include/c++/4.6.3/bits/basic_string.h ****       erase(iterator __position)
1364:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
1365:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= _M_ibegin()
1366:/usr/include/c++/4.6.3/bits/basic_string.h **** 				 && __position < _M_iend());
1367:/usr/include/c++/4.6.3/bits/basic_string.h **** 	const size_type __pos = __position - _M_ibegin();
1368:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_mutate(__pos, size_type(1), size_type(0));
1369:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_rep()->_M_set_leaked();
1370:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1371:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1372:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1373:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1374:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Remove a range of characters.
1375:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param first  Iterator referencing the first character to remove.
1376:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param last  Iterator referencing the end of the range.
1377:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
1378:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1379:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
1380:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
1381:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1382:/usr/include/c++/4.6.3/bits/basic_string.h ****       iterator
1383:/usr/include/c++/4.6.3/bits/basic_string.h ****       erase(iterator __first, iterator __last);
1384:/usr/include/c++/4.6.3/bits/basic_string.h ****  
1385:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1386:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1387:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of first character to replace.
1388:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Number of characters to be replaced.
1389:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param str  String to insert.
1390:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1391:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1392:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  string.
1393:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1394:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1395:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos+n) from this string.
1396:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  In place, the value of @a str is inserted.  If @a pos is beyond end
1397:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  of string, out_of_range is thrown.  If the length of the result
1398:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of the string
1399:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  doesn't change if an error is thrown.
1400:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1401:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1402:/usr/include/c++/4.6.3/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
1403:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
1404:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1405:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1406:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1407:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos1  Index of first character to replace.
1408:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n1  Number of characters to be replaced.
1409:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param str  String to insert.
1410:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos2  Index of first character of str to use.
1411:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n2  Number of characters from str to use.
1412:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1413:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or @a pos2 >
1414:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  str.size().
1415:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1416:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1417:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Removes the characters in the range [pos1,pos1 + n) from this
1418:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  string.  In place, the value of @a str is inserted.  If @a pos is
1419:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
1420:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
1421:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
1422:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1423:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1424:/usr/include/c++/4.6.3/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
1425:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      size_type __pos2, size_type __n2)
1426:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
1427:/usr/include/c++/4.6.3/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
1428:/usr/include/c++/4.6.3/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
1429:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1430:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1431:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
1432:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of first character to replace.
1433:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n1  Number of characters to be replaced.
1434:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  C string to insert.
1435:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n2  Number of characters from @a s to use.
1436:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1437:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
1438:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1439:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1440:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this string.
1441:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  In place, the first @a n2 characters of @a s are inserted, or all
1442:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  of @a s if @a n2 is too large.  If @a pos is beyond end of string,
1443:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  out_of_range is thrown.  If the length of result exceeds max_size(),
1444:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't change if
1445:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  an error is thrown.
1446:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1447:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1448:/usr/include/c++/4.6.3/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
1449:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      size_type __n2);
1450:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1451:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1452:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
1453:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of first character to replace.
1454:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n1  Number of characters to be replaced.
1455:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  C string to insert.
1456:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1457:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
1458:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1459:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1460:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this string.
1461:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  In place, the characters of @a s are inserted.  If @a pos is beyond
1462:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  end of string, out_of_range is thrown.  If the length of result
1463:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of the string
1464:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  doesn't change if an error is thrown.
1465:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1466:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1467:/usr/include/c++/4.6.3/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
1468:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
1469:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1470:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
1471:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1472:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1473:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1474:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
1475:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of first character to replace.
1476:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n1  Number of characters to be replaced.
1477:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n2  Number of characters to insert.
1478:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param c  Character to insert.
1479:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1480:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
1481:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1482:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1483:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this string.
1484:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  In place, @a n2 copies of @a c are inserted.  If @a pos is beyond
1485:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  end of string, out_of_range is thrown.  If the length of result
1486:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of the string
1487:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  doesn't change if an error is thrown.
1488:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1489:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1490:/usr/include/c++/4.6.3/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
1491:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
1492:/usr/include/c++/4.6.3/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
1493:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1494:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1495:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
1496:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param i1  Iterator referencing start of range to replace.
1497:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param i2  Iterator referencing end of range to replace.
1498:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param str  String value to insert.
1499:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1500:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1501:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1502:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Removes the characters in the range [i1,i2).  In place, the value of
1503:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @a str is inserted.  If the length of result exceeds max_size(),
1504:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't change if
1505:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  an error is thrown.
1506:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1507:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1508:/usr/include/c++/4.6.3/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const basic_string& __str)
1509:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
1510:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1511:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1512:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
1513:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param i1  Iterator referencing start of range to replace.
1514:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param i2  Iterator referencing end of range to replace.
1515:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  C string value to insert.
1516:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Number of characters from s to insert.
1517:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1518:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1519:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1520:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Removes the characters in the range [i1,i2).  In place, the first @a
1521:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  n characters of @a s are inserted.  If the length of result exceeds
1522:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  max_size(), length_error is thrown.  The value of the string doesn't
1523:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  change if an error is thrown.
1524:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1525:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1526:/usr/include/c++/4.6.3/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
1527:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
1528:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
1529:/usr/include/c++/4.6.3/bits/basic_string.h **** 				 && __i2 <= _M_iend());
1530:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
1531:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1532:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1533:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1534:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
1535:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param i1  Iterator referencing start of range to replace.
1536:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param i2  Iterator referencing end of range to replace.
1537:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  C string value to insert.
1538:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1539:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1540:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1541:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Removes the characters in the range [i1,i2).  In place, the
1542:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  characters of @a s are inserted.  If the length of result exceeds
1543:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  max_size(), length_error is thrown.  The value of the string doesn't
1544:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  change if an error is thrown.
1545:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1546:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1547:/usr/include/c++/4.6.3/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const _CharT* __s)
1548:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
1549:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1550:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
1551:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1552:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1553:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1554:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
1555:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param i1  Iterator referencing start of range to replace.
1556:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param i2  Iterator referencing end of range to replace.
1557:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Number of characters to insert.
1558:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param c  Character to insert.
1559:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1560:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1561:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1562:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Removes the characters in the range [i1,i2).  In place, @a n copies
1563:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  of @a c are inserted.  If the length of result exceeds max_size(),
1564:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't change if
1565:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  an error is thrown.
1566:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1567:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1568:/usr/include/c++/4.6.3/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
1569:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
1570:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
1571:/usr/include/c++/4.6.3/bits/basic_string.h **** 				 && __i2 <= _M_iend());
1572:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
1573:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1574:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1575:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1576:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
1577:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param i1  Iterator referencing start of range to replace.
1578:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param i2  Iterator referencing end of range to replace.
1579:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param k1  Iterator referencing start of range to insert.
1580:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param k2  Iterator referencing end of range to insert.
1581:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1582:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1583:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1584:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Removes the characters in the range [i1,i2).  In place, characters
1585:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  in the range [k1,k2) are inserted.  If the length of result exceeds
1586:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  max_size(), length_error is thrown.  The value of the string doesn't
1587:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  change if an error is thrown.
1588:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1589:/usr/include/c++/4.6.3/bits/basic_string.h ****       template<class _InputIterator>
1590:/usr/include/c++/4.6.3/bits/basic_string.h ****         basic_string&
1591:/usr/include/c++/4.6.3/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
1592:/usr/include/c++/4.6.3/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
1593:/usr/include/c++/4.6.3/bits/basic_string.h ****         {
1594:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
1595:/usr/include/c++/4.6.3/bits/basic_string.h **** 				   && __i2 <= _M_iend());
1596:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
1597:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1598:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
1599:/usr/include/c++/4.6.3/bits/basic_string.h **** 	}
1600:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1601:/usr/include/c++/4.6.3/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
1602:/usr/include/c++/4.6.3/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
1603:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1604:/usr/include/c++/4.6.3/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
1605:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
1606:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
1607:/usr/include/c++/4.6.3/bits/basic_string.h **** 				 && __i2 <= _M_iend());
1608:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
1609:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
1610:/usr/include/c++/4.6.3/bits/basic_string.h **** 			     __k1, __k2 - __k1);
1611:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1612:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1613:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1614:/usr/include/c++/4.6.3/bits/basic_string.h ****       replace(iterator __i1, iterator __i2,
1615:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
1616:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
1617:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
1618:/usr/include/c++/4.6.3/bits/basic_string.h **** 				 && __i2 <= _M_iend());
1619:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
1620:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
1621:/usr/include/c++/4.6.3/bits/basic_string.h **** 			     __k1, __k2 - __k1);
1622:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1623:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1624:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1625:/usr/include/c++/4.6.3/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
1626:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
1627:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
1628:/usr/include/c++/4.6.3/bits/basic_string.h **** 				 && __i2 <= _M_iend());
1629:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
1630:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
1631:/usr/include/c++/4.6.3/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
1632:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1633:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1634:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1635:/usr/include/c++/4.6.3/bits/basic_string.h ****       replace(iterator __i1, iterator __i2,
1636:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
1637:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
1638:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
1639:/usr/include/c++/4.6.3/bits/basic_string.h **** 				 && __i2 <= _M_iend());
1640:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
1641:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
1642:/usr/include/c++/4.6.3/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
1643:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1644:/usr/include/c++/4.6.3/bits/basic_string.h ****       
1645:/usr/include/c++/4.6.3/bits/basic_string.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
1646:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1647:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
1648:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param i1  Iterator referencing start of range to replace.
1649:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param i2  Iterator referencing end of range to replace.
1650:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param l  The initializer_list of characters to insert.
1651:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Reference to this string.
1652:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1653:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1654:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Removes the characters in the range [i1,i2).  In place, characters
1655:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  in the range [k1,k2) are inserted.  If the length of result exceeds
1656:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  max_size(), length_error is thrown.  The value of the string doesn't
1657:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  change if an error is thrown.
1658:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1659:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string& replace(iterator __i1, iterator __i2,
1660:/usr/include/c++/4.6.3/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
1661:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }
1662:/usr/include/c++/4.6.3/bits/basic_string.h **** #endif // __GXX_EXPERIMENTAL_CXX0X__
1663:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1664:/usr/include/c++/4.6.3/bits/basic_string.h ****     private:
1665:/usr/include/c++/4.6.3/bits/basic_string.h ****       template<class _Integer>
1666:/usr/include/c++/4.6.3/bits/basic_string.h **** 	basic_string&
1667:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
1668:/usr/include/c++/4.6.3/bits/basic_string.h **** 			    _Integer __val, __true_type)
1669:/usr/include/c++/4.6.3/bits/basic_string.h ****         { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }
1670:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1671:/usr/include/c++/4.6.3/bits/basic_string.h ****       template<class _InputIterator>
1672:/usr/include/c++/4.6.3/bits/basic_string.h **** 	basic_string&
1673:/usr/include/c++/4.6.3/bits/basic_string.h **** 	_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
1674:/usr/include/c++/4.6.3/bits/basic_string.h **** 			    _InputIterator __k2, __false_type);
1675:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1676:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1677:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
1678:/usr/include/c++/4.6.3/bits/basic_string.h **** 		     _CharT __c);
1679:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1680:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
1681:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
1682:/usr/include/c++/4.6.3/bits/basic_string.h **** 		      size_type __n2);
1683:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1684:/usr/include/c++/4.6.3/bits/basic_string.h ****       // _S_construct_aux is used to implement the 21.3.1 para 15 which
1685:/usr/include/c++/4.6.3/bits/basic_string.h ****       // requires special behaviour if _InIter is an integral type
1686:/usr/include/c++/4.6.3/bits/basic_string.h ****       template<class _InIterator>
1687:/usr/include/c++/4.6.3/bits/basic_string.h ****         static _CharT*
1688:/usr/include/c++/4.6.3/bits/basic_string.h ****         _S_construct_aux(_InIterator __beg, _InIterator __end,
1689:/usr/include/c++/4.6.3/bits/basic_string.h **** 			 const _Alloc& __a, __false_type)
1690:/usr/include/c++/4.6.3/bits/basic_string.h **** 	{
1691:/usr/include/c++/4.6.3/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
1692:/usr/include/c++/4.6.3/bits/basic_string.h ****           return _S_construct(__beg, __end, __a, _Tag());
1693:/usr/include/c++/4.6.3/bits/basic_string.h **** 	}
1694:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1695:/usr/include/c++/4.6.3/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1696:/usr/include/c++/4.6.3/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
1697:/usr/include/c++/4.6.3/bits/basic_string.h ****       template<class _Integer>
1698:/usr/include/c++/4.6.3/bits/basic_string.h ****         static _CharT*
1699:/usr/include/c++/4.6.3/bits/basic_string.h ****         _S_construct_aux(_Integer __beg, _Integer __end,
1700:/usr/include/c++/4.6.3/bits/basic_string.h **** 			 const _Alloc& __a, __true_type)
1701:/usr/include/c++/4.6.3/bits/basic_string.h ****         { return _S_construct_aux_2(static_cast<size_type>(__beg),
1702:/usr/include/c++/4.6.3/bits/basic_string.h **** 				    __end, __a); }
1703:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1704:/usr/include/c++/4.6.3/bits/basic_string.h ****       static _CharT*
1705:/usr/include/c++/4.6.3/bits/basic_string.h ****       _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
1706:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return _S_construct(__req, __c, __a); }
1707:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1708:/usr/include/c++/4.6.3/bits/basic_string.h ****       template<class _InIterator>
1709:/usr/include/c++/4.6.3/bits/basic_string.h ****         static _CharT*
1710:/usr/include/c++/4.6.3/bits/basic_string.h ****         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
1711:/usr/include/c++/4.6.3/bits/basic_string.h **** 	{
1712:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
1713:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  return _S_construct_aux(__beg, __end, __a, _Integral());
1714:/usr/include/c++/4.6.3/bits/basic_string.h ****         }
1715:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1716:/usr/include/c++/4.6.3/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
1717:/usr/include/c++/4.6.3/bits/basic_string.h ****       template<class _InIterator>
1718:/usr/include/c++/4.6.3/bits/basic_string.h ****         static _CharT*
1719:/usr/include/c++/4.6.3/bits/basic_string.h ****          _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
1720:/usr/include/c++/4.6.3/bits/basic_string.h **** 		      input_iterator_tag);
1721:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1722:/usr/include/c++/4.6.3/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
1723:/usr/include/c++/4.6.3/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
1724:/usr/include/c++/4.6.3/bits/basic_string.h ****       template<class _FwdIterator>
1725:/usr/include/c++/4.6.3/bits/basic_string.h ****         static _CharT*
1726:/usr/include/c++/4.6.3/bits/basic_string.h ****         _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
1727:/usr/include/c++/4.6.3/bits/basic_string.h **** 		     forward_iterator_tag);
1728:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1729:/usr/include/c++/4.6.3/bits/basic_string.h ****       static _CharT*
1730:/usr/include/c++/4.6.3/bits/basic_string.h ****       _S_construct(size_type __req, _CharT __c, const _Alloc& __a);
1731:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1732:/usr/include/c++/4.6.3/bits/basic_string.h ****     public:
1733:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1734:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1735:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Copy substring into C string.
1736:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  C string to copy value into.
1737:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Number of characters to copy.
1738:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of first character to copy.
1739:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Number of characters actually copied
1740:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::out_of_range  If pos > size().
1741:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1742:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Copies up to @a n characters starting at @a pos into the C string @a
1743:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  s.  If @a pos is %greater than size(), out_of_range is thrown.
1744:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1745:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
1746:/usr/include/c++/4.6.3/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
1747:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1748:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1749:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Swap contents with another string.
1750:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  String to swap with.
1751:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1752:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a s in constant
1753:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  time.
1754:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1755:/usr/include/c++/4.6.3/bits/basic_string.h ****       void
1756:/usr/include/c++/4.6.3/bits/basic_string.h ****       swap(basic_string& __s);
1757:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1758:/usr/include/c++/4.6.3/bits/basic_string.h ****       // String operations:
1759:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1760:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
1761:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1762:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
1763:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  happen.
1764:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1765:/usr/include/c++/4.6.3/bits/basic_string.h ****       const _CharT*
1766:/usr/include/c++/4.6.3/bits/basic_string.h ****       c_str() const
1767:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return _M_data(); }
1768:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1769:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1770:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Return const pointer to contents.
1771:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1772:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
1773:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  happen.
1774:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1775:/usr/include/c++/4.6.3/bits/basic_string.h ****       const _CharT*
1776:/usr/include/c++/4.6.3/bits/basic_string.h ****       data() const
1777:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return _M_data(); }
1778:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1779:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1780:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Return copy of allocator used to construct this string.
1781:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1782:/usr/include/c++/4.6.3/bits/basic_string.h ****       allocator_type
1783:/usr/include/c++/4.6.3/bits/basic_string.h ****       get_allocator() const
1784:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return _M_dataplus; }
1785:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1786:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1787:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find position of a C substring.
1788:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  C string to locate.
1789:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search from.
1790:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Number of characters from @a s to search for.
1791:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
1792:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1793:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches forward for the first @a n characters
1794:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  in @a s within this string.  If found, returns the index where it
1795:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  begins.  If not found, returns npos.
1796:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1797:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
1798:/usr/include/c++/4.6.3/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos, size_type __n) const;
1799:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1800:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1801:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find position of a string.
1802:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param str  String to locate.
1803:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search from (default 0).
1804:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
1805:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1806:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches forward for value of @a str within
1807:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
1808:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  found, returns npos.
1809:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1810:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
1811:/usr/include/c++/4.6.3/bits/basic_string.h ****       find(const basic_string& __str, size_type __pos = 0) const
1812:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->find(__str.data(), __pos, __str.size()); }
1813:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1814:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1815:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find position of a C string.
1816:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  C string to locate.
1817:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search from (default 0).
1818:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
1819:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1820:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches forward for the value of @a s within
1821:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
1822:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  found, returns npos.
1823:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1824:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
1825:/usr/include/c++/4.6.3/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos = 0) const
1826:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
1827:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1828:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return this->find(__s, __pos, traits_type::length(__s));
1829:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1830:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1831:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1832:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find position of a character.
1833:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param c  Character to locate.
1834:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search from (default 0).
1835:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of first occurrence.
1836:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1837:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches forward for @a c within this string.
1838:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
1839:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  returns npos.
1840:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1841:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
1842:/usr/include/c++/4.6.3/bits/basic_string.h ****       find(_CharT __c, size_type __pos = 0) const;
1843:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1844:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1845:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find last position of a string.
1846:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param str  String to locate.
1847:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search back from (default end).
1848:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
1849:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1850:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches backward for value of @a str within
1851:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
1852:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  found, returns npos.
1853:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1854:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
1855:/usr/include/c++/4.6.3/bits/basic_string.h ****       rfind(const basic_string& __str, size_type __pos = npos) const
1856:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->rfind(__str.data(), __pos, __str.size()); }
1857:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1858:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1859:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find last position of a C substring.
1860:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  C string to locate.
1861:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search back from.
1862:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Number of characters from s to search for.
1863:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
1864:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1865:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches backward for the first @a n
1866:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  characters in @a s within this string.  If found, returns the index
1867:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  where it begins.  If not found, returns npos.
1868:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1869:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
1870:/usr/include/c++/4.6.3/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos, size_type __n) const;
1871:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1872:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1873:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find last position of a C string.
1874:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  C string to locate.
1875:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to start search at (default end).
1876:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of start of  last occurrence.
1877:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1878:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches backward for the value of @a s within
1879:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
1880:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  found, returns npos.
1881:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1882:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
1883:/usr/include/c++/4.6.3/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos = npos) const
1884:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
1885:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1886:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return this->rfind(__s, __pos, traits_type::length(__s));
1887:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1888:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1889:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1890:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find last position of a character.
1891:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param c  Character to locate.
1892:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search back from (default end).
1893:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of last occurrence.
1894:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1895:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches backward for @a c within this string.
1896:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
1897:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  returns npos.
1898:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1899:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
1900:/usr/include/c++/4.6.3/bits/basic_string.h ****       rfind(_CharT __c, size_type __pos = npos) const;
1901:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1902:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1903:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find position of a character of string.
1904:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param str  String containing characters to locate.
1905:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search from (default 0).
1906:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of first occurrence.
1907:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1908:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches forward for one of the characters of
1909:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @a str within this string.  If found, returns the index where it was
1910:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  found.  If not found, returns npos.
1911:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1912:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
1913:/usr/include/c++/4.6.3/bits/basic_string.h ****       find_first_of(const basic_string& __str, size_type __pos = 0) const
1914:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->find_first_of(__str.data(), __pos, __str.size()); }
1915:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1916:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1917:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find position of a character of C substring.
1918:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  String containing characters to locate.
1919:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search from.
1920:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Number of characters from s to search for.
1921:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of first occurrence.
1922:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1923:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches forward for one of the first @a n
1924:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  characters of @a s within this string.  If found, returns the index
1925:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
1926:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1927:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
1928:/usr/include/c++/4.6.3/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
1929:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1930:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1931:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find position of a character of C string.
1932:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  String containing characters to locate.
1933:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search from (default 0).
1934:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of first occurrence.
1935:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1936:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches forward for one of the characters of
1937:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @a s within this string.  If found, returns the index where it was
1938:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  found.  If not found, returns npos.
1939:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1940:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
1941:/usr/include/c++/4.6.3/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos = 0) const
1942:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
1943:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1944:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return this->find_first_of(__s, __pos, traits_type::length(__s));
1945:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
1946:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1947:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1948:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find position of a character.
1949:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param c  Character to locate.
1950:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search from (default 0).
1951:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of first occurrence.
1952:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1953:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches forward for the character @a c within
1954:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  this string.  If found, returns the index where it was found.  If
1955:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  not found, returns npos.
1956:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1957:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Note: equivalent to find(c, pos).
1958:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1959:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
1960:/usr/include/c++/4.6.3/bits/basic_string.h ****       find_first_of(_CharT __c, size_type __pos = 0) const
1961:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->find(__c, __pos); }
1962:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1963:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1964:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
1965:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param str  String containing characters to locate.
1966:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search back from (default end).
1967:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of last occurrence.
1968:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1969:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches backward for one of the characters of
1970:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @a str within this string.  If found, returns the index where it was
1971:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  found.  If not found, returns npos.
1972:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1973:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
1974:/usr/include/c++/4.6.3/bits/basic_string.h ****       find_last_of(const basic_string& __str, size_type __pos = npos) const
1975:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->find_last_of(__str.data(), __pos, __str.size()); }
1976:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1977:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1978:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find last position of a character of C substring.
1979:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  C string containing characters to locate.
1980:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search back from.
1981:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Number of characters from s to search for.
1982:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of last occurrence.
1983:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1984:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches backward for one of the first @a n
1985:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  characters of @a s within this string.  If found, returns the index
1986:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
1987:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
1988:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
1989:/usr/include/c++/4.6.3/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
1990:/usr/include/c++/4.6.3/bits/basic_string.h **** 
1991:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
1992:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find last position of a character of C string.
1993:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  C string containing characters to locate.
1994:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search back from (default end).
1995:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of last occurrence.
1996:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
1997:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches backward for one of the characters of
1998:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @a s within this string.  If found, returns the index where it was
1999:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  found.  If not found, returns npos.
2000:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
2001:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
2002:/usr/include/c++/4.6.3/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos = npos) const
2003:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
2004:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2005:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return this->find_last_of(__s, __pos, traits_type::length(__s));
2006:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
2007:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2008:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
2009:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find last position of a character.
2010:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param c  Character to locate.
2011:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search back from (default end).
2012:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of last occurrence.
2013:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
2014:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches backward for @a c within this string.
2015:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
2016:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  returns npos.
2017:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
2018:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Note: equivalent to rfind(c, pos).
2019:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
2020:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
2021:/usr/include/c++/4.6.3/bits/basic_string.h ****       find_last_of(_CharT __c, size_type __pos = npos) const
2022:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->rfind(__c, __pos); }
2023:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2024:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
2025:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find position of a character not in string.
2026:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param str  String containing characters to avoid.
2027:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search from (default 0).
2028:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of first occurrence.
2029:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
2030:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches forward for a character not contained
2031:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  in @a str within this string.  If found, returns the index where it
2032:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  was found.  If not found, returns npos.
2033:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
2034:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
2035:/usr/include/c++/4.6.3/bits/basic_string.h ****       find_first_not_of(const basic_string& __str, size_type __pos = 0) const
2036:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
2037:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2038:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
2039:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find position of a character not in C substring.
2040:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  C string containing characters to avoid.
2041:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search from.
2042:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Number of characters from s to consider.
2043:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of first occurrence.
2044:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
2045:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches forward for a character not contained
2046:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  in the first @a n characters of @a s within this string.  If found,
2047:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns npos.
2048:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
2049:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
2050:/usr/include/c++/4.6.3/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos,
2051:/usr/include/c++/4.6.3/bits/basic_string.h **** 			size_type __n) const;
2052:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2053:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
2054:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find position of a character not in C string.
2055:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  C string containing characters to avoid.
2056:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search from (default 0).
2057:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of first occurrence.
2058:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
2059:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches forward for a character not contained
2060:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  in @a s within this string.  If found, returns the index where it
2061:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  was found.  If not found, returns npos.
2062:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
2063:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
2064:/usr/include/c++/4.6.3/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
2065:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
2066:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2067:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return this->find_first_not_of(__s, __pos, traits_type::length(__s));
2068:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
2069:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2070:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
2071:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find position of a different character.
2072:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param c  Character to avoid.
2073:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search from (default 0).
2074:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of first occurrence.
2075:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
2076:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches forward for a character other than @a c
2077:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  within this string.  If found, returns the index where it was found.
2078:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  If not found, returns npos.
2079:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
2080:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
2081:/usr/include/c++/4.6.3/bits/basic_string.h ****       find_first_not_of(_CharT __c, size_type __pos = 0) const;
2082:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2083:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
2084:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find last position of a character not in string.
2085:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param str  String containing characters to avoid.
2086:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search back from (default end).
2087:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of last occurrence.
2088:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
2089:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches backward for a character not
2090:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  contained in @a str within this string.  If found, returns the index
2091:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
2092:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
2093:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
2094:/usr/include/c++/4.6.3/bits/basic_string.h ****       find_last_not_of(const basic_string& __str, size_type __pos = npos) const
2095:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
2096:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2097:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
2098:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find last position of a character not in C substring.
2099:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  C string containing characters to avoid.
2100:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search back from.
2101:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Number of characters from s to consider.
2102:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of last occurrence.
2103:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
2104:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches backward for a character not
2105:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  contained in the first @a n characters of @a s within this string.
2106:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
2107:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  returns npos.
2108:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
2109:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
2110:/usr/include/c++/4.6.3/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos,
2111:/usr/include/c++/4.6.3/bits/basic_string.h **** 		       size_type __n) const;
2112:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
2113:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find last position of a character not in C string.
2114:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  C string containing characters to avoid.
2115:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search back from (default end).
2116:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of last occurrence.
2117:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
2118:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches backward for a character not
2119:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  contained in @a s within this string.  If found, returns the index
2120:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
2121:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
2122:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
2123:/usr/include/c++/4.6.3/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
2124:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
2125:/usr/include/c++/4.6.3/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2126:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return this->find_last_not_of(__s, __pos, traits_type::length(__s));
2127:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
2128:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2129:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
2130:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Find last position of a different character.
2131:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param c  Character to avoid.
2132:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of character to search back from (default end).
2133:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Index of last occurrence.
2134:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
2135:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Starting from @a pos, searches backward for a character other than
2136:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @a c within this string.  If found, returns the index where it was
2137:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  found.  If not found, returns npos.
2138:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
2139:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
2140:/usr/include/c++/4.6.3/bits/basic_string.h ****       find_last_not_of(_CharT __c, size_type __pos = npos) const;
2141:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2142:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
2143:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Get a substring.
2144:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of first character (default 0).
2145:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Number of characters in substring (default remainder).
2146:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  The new string.
2147:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @throw  std::out_of_range  If pos > size().
2148:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
2149:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Construct and return a new string using the @a n characters starting
2150:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  at @a pos.  If the string is too short, use the remainder of the
2151:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  characters.  If @a pos is beyond the end of the string, out_of_range
2152:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  is thrown.
2153:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
2154:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string
2155:/usr/include/c++/4.6.3/bits/basic_string.h ****       substr(size_type __pos = 0, size_type __n = npos) const
2156:/usr/include/c++/4.6.3/bits/basic_string.h ****       { return basic_string(*this,
2157:/usr/include/c++/4.6.3/bits/basic_string.h **** 			    _M_check(__pos, "basic_string::substr"), __n); }
2158:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2159:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
2160:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Compare to a string.
2161:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param str  String to compare against.
2162:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2163:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
2164:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a str, 0 if
2165:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  their values are equivalent, or > 0 if this string is ordered after
2166:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @a str.  Determines the effective length rlen of the strings to
2167:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  compare as the smallest of size() and str.size().  The function
2168:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  then compares the two strings by calling traits::compare(data(),
2169:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  str.data(),rlen).  If the result of the comparison is nonzero returns
2170:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  it, otherwise the shorter one is ordered first.
2171:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
2172:/usr/include/c++/4.6.3/bits/basic_string.h ****       int
2173:/usr/include/c++/4.6.3/bits/basic_string.h ****       compare(const basic_string& __str) const
2174:/usr/include/c++/4.6.3/bits/basic_string.h ****       {
2175:/usr/include/c++/4.6.3/bits/basic_string.h **** 	const size_type __size = this->size();
2176:/usr/include/c++/4.6.3/bits/basic_string.h **** 	const size_type __osize = __str.size();
2177:/usr/include/c++/4.6.3/bits/basic_string.h **** 	const size_type __len = std::min(__size, __osize);
2178:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2179:/usr/include/c++/4.6.3/bits/basic_string.h **** 	int __r = traits_type::compare(_M_data(), __str.data(), __len);
2180:/usr/include/c++/4.6.3/bits/basic_string.h **** 	if (!__r)
2181:/usr/include/c++/4.6.3/bits/basic_string.h **** 	  __r = _S_compare(__size, __osize);
2182:/usr/include/c++/4.6.3/bits/basic_string.h **** 	return __r;
2183:/usr/include/c++/4.6.3/bits/basic_string.h ****       }
2184:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2185:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
2186:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Compare substring to a string.
2187:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of first character of substring.
2188:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n  Number of characters in substring.
2189:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param str  String to compare against.
2190:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2191:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
2192:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Form the substring of this string from the @a n characters starting
2193:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  at @a pos.  Returns an integer < 0 if the substring is ordered
2194:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  before @a str, 0 if their values are equivalent, or > 0 if the
2195:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  substring is ordered after @a str.  Determines the effective length
2196:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  rlen of the strings to compare as the smallest of the length of the
2197:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  substring and @a str.size().  The function then compares the two
2198:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  strings by calling traits::compare(substring.data(),str.data(),rlen).
2199:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it, otherwise the
2200:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  shorter one is ordered first.
2201:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
2202:/usr/include/c++/4.6.3/bits/basic_string.h ****       int
2203:/usr/include/c++/4.6.3/bits/basic_string.h ****       compare(size_type __pos, size_type __n, const basic_string& __str) const;
2204:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2205:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
2206:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Compare substring to a substring.
2207:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos1  Index of first character of substring.
2208:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n1  Number of characters in substring.
2209:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param str  String to compare against.
2210:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos2  Index of first character of substring of str.
2211:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n2  Number of characters in substring of str.
2212:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2213:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
2214:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Form the substring of this string from the @a n1 characters starting
2215:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  at @a pos1.  Form the substring of @a str from the @a n2 characters
2216:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  starting at @a pos2.  Returns an integer < 0 if this substring is
2217:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  ordered before the substring of @a str, 0 if their values are
2218:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  equivalent, or > 0 if this substring is ordered after the substring
2219:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  of @a str.  Determines the effective length rlen of the strings
2220:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  to compare as the smallest of the lengths of the substrings.  The
2221:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  function then compares the two strings by calling
2222:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).
2223:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it, otherwise the
2224:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  shorter one is ordered first.
2225:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
2226:/usr/include/c++/4.6.3/bits/basic_string.h ****       int
2227:/usr/include/c++/4.6.3/bits/basic_string.h ****       compare(size_type __pos1, size_type __n1, const basic_string& __str,
2228:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      size_type __pos2, size_type __n2) const;
2229:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2230:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
2231:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Compare to a C string.
2232:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  C string to compare against.
2233:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2234:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
2235:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a s, 0 if
2236:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  their values are equivalent, or > 0 if this string is ordered after
2237:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @a s.  Determines the effective length rlen of the strings to
2238:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  compare as the smallest of size() and the length of a string
2239:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  constructed from @a s.  The function then compares the two strings
2240:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  by calling traits::compare(data(),s,rlen).  If the result of the
2241:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  comparison is nonzero returns it, otherwise the shorter one is
2242:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  ordered first.
2243:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
2244:/usr/include/c++/4.6.3/bits/basic_string.h ****       int
2245:/usr/include/c++/4.6.3/bits/basic_string.h ****       compare(const _CharT* __s) const;
2246:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2247:/usr/include/c++/4.6.3/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
2248:/usr/include/c++/4.6.3/bits/basic_string.h ****       // 5 String::compare specification questionable
2249:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
2250:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Compare substring to a C string.
2251:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos  Index of first character of substring.
2252:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n1  Number of characters in substring.
2253:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  C string to compare against.
2254:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2255:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
2256:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Form the substring of this string from the @a n1 characters starting
2257:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  at @a pos.  Returns an integer < 0 if the substring is ordered
2258:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  before @a s, 0 if their values are equivalent, or > 0 if the
2259:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  substring is ordered after @a s.  Determines the effective length
2260:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  rlen of the strings to compare as the smallest of the length of the 
2261:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  substring and the length of a string constructed from @a s.  The
2262:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  function then compares the two string by calling
2263:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  traits::compare(substring.data(),s,rlen).  If the result of the
2264:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  comparison is nonzero returns it, otherwise the shorter one is
2265:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  ordered first.
2266:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
2267:/usr/include/c++/4.6.3/bits/basic_string.h ****       int
2268:/usr/include/c++/4.6.3/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s) const;
2269:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2270:/usr/include/c++/4.6.3/bits/basic_string.h ****       /**
2271:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @brief  Compare substring against a character %array.
2272:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param pos1  Index of first character of substring.
2273:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n1  Number of characters in substring.
2274:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param s  character %array to compare against.
2275:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @param n2  Number of characters of s.
2276:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2277:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
2278:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Form the substring of this string from the @a n1 characters starting
2279:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  at @a pos1.  Form a string from the first @a n2 characters of @a s.
2280:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  Returns an integer < 0 if this substring is ordered before the string
2281:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  from @a s, 0 if their values are equivalent, or > 0 if this substring
2282:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  is ordered after the string from @a s.   Determines the effective
2283:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  length rlen of the strings to compare as the smallest of the length
2284:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  of the substring and @a n2.  The function then compares the two
2285:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  strings by calling traits::compare(substring.data(),s,rlen).  If the
2286:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  result of the comparison is nonzero returns it, otherwise the shorter
2287:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  one is ordered first.
2288:/usr/include/c++/4.6.3/bits/basic_string.h ****        *
2289:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  NB: s must have at least n2 characters, &apos;\\0&apos; has
2290:/usr/include/c++/4.6.3/bits/basic_string.h ****        *  no special meaning.
2291:/usr/include/c++/4.6.3/bits/basic_string.h ****       */
2292:/usr/include/c++/4.6.3/bits/basic_string.h ****       int
2293:/usr/include/c++/4.6.3/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s,
2294:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      size_type __n2) const;
2295:/usr/include/c++/4.6.3/bits/basic_string.h ****   };
2296:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2297:/usr/include/c++/4.6.3/bits/basic_string.h ****   // operator+
2298:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2299:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Concatenate two strings.
2300:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  First string.
2301:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  Last string.
2302:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  New string with value of @a lhs followed by @a rhs.
2303:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2304:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2305:/usr/include/c++/4.6.3/bits/basic_string.h ****     basic_string<_CharT, _Traits, _Alloc>
2306:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
2307:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
2308:/usr/include/c++/4.6.3/bits/basic_string.h ****     {
2309:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
2310:/usr/include/c++/4.6.3/bits/basic_string.h ****       __str.append(__rhs);
2311:/usr/include/c++/4.6.3/bits/basic_string.h ****       return __str;
2312:/usr/include/c++/4.6.3/bits/basic_string.h ****     }
2313:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2314:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2315:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Concatenate C string and string.
2316:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  First string.
2317:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  Last string.
2318:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  New string with value of @a lhs followed by @a rhs.
2319:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2320:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2321:/usr/include/c++/4.6.3/bits/basic_string.h ****     basic_string<_CharT,_Traits,_Alloc>
2322:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator+(const _CharT* __lhs,
2323:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      const basic_string<_CharT,_Traits,_Alloc>& __rhs);
2324:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2325:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2326:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Concatenate character and string.
2327:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  First string.
2328:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  Last string.
2329:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  New string with @a lhs followed by @a rhs.
2330:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2331:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2332:/usr/include/c++/4.6.3/bits/basic_string.h ****     basic_string<_CharT,_Traits,_Alloc>
2333:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);
2334:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2335:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2336:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Concatenate string and C string.
2337:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  First string.
2338:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  Last string.
2339:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  New string with @a lhs followed by @a rhs.
2340:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2341:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2342:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
2343:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
2344:/usr/include/c++/4.6.3/bits/basic_string.h **** 	     const _CharT* __rhs)
2345:/usr/include/c++/4.6.3/bits/basic_string.h ****     {
2346:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
2347:/usr/include/c++/4.6.3/bits/basic_string.h ****       __str.append(__rhs);
2348:/usr/include/c++/4.6.3/bits/basic_string.h ****       return __str;
2349:/usr/include/c++/4.6.3/bits/basic_string.h ****     }
2350:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2351:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2352:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Concatenate string and character.
2353:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  First string.
2354:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  Last string.
2355:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  New string with @a lhs followed by @a rhs.
2356:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2357:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2358:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
2359:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
2360:/usr/include/c++/4.6.3/bits/basic_string.h ****     {
2361:/usr/include/c++/4.6.3/bits/basic_string.h ****       typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
2362:/usr/include/c++/4.6.3/bits/basic_string.h ****       typedef typename __string_type::size_type		__size_type;
2363:/usr/include/c++/4.6.3/bits/basic_string.h ****       __string_type __str(__lhs);
2364:/usr/include/c++/4.6.3/bits/basic_string.h ****       __str.append(__size_type(1), __rhs);
2365:/usr/include/c++/4.6.3/bits/basic_string.h ****       return __str;
2366:/usr/include/c++/4.6.3/bits/basic_string.h ****     }
2367:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2368:/usr/include/c++/4.6.3/bits/basic_string.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
2369:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2370:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
2371:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
2372:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
2373:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return std::move(__lhs.append(__rhs)); }
2374:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2375:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2376:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
2377:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
2378:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
2379:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return std::move(__rhs.insert(0, __lhs)); }
2380:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2381:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2382:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
2383:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
2384:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
2385:/usr/include/c++/4.6.3/bits/basic_string.h ****     {
2386:/usr/include/c++/4.6.3/bits/basic_string.h ****       const auto __size = __lhs.size() + __rhs.size();
2387:/usr/include/c++/4.6.3/bits/basic_string.h ****       const bool __cond = (__size > __lhs.capacity()
2388:/usr/include/c++/4.6.3/bits/basic_string.h **** 			   && __size <= __rhs.capacity());
2389:/usr/include/c++/4.6.3/bits/basic_string.h ****       return __cond ? std::move(__rhs.insert(0, __lhs))
2390:/usr/include/c++/4.6.3/bits/basic_string.h **** 	            : std::move(__lhs.append(__rhs));
2391:/usr/include/c++/4.6.3/bits/basic_string.h ****     }
2392:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2393:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2394:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
2395:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator+(const _CharT* __lhs,
2396:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
2397:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return std::move(__rhs.insert(0, __lhs)); }
2398:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2399:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2400:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
2401:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator+(_CharT __lhs,
2402:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
2403:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return std::move(__rhs.insert(0, 1, __lhs)); }
2404:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2405:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2406:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
2407:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
2408:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      const _CharT* __rhs)
2409:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return std::move(__lhs.append(__rhs)); }
2410:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2411:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2412:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
2413:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
2414:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      _CharT __rhs)
2415:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return std::move(__lhs.append(1, __rhs)); }
2416:/usr/include/c++/4.6.3/bits/basic_string.h **** #endif
2417:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2418:/usr/include/c++/4.6.3/bits/basic_string.h ****   // operator ==
2419:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2420:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Test equivalence of two strings.
2421:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  First string.
2422:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  Second string.
2423:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  True if @a lhs.compare(@a rhs) == 0.  False otherwise.
2424:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2425:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2426:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline bool
2427:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
2428:/usr/include/c++/4.6.3/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
2429:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return __lhs.compare(__rhs) == 0; }
2430:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2431:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT>
2432:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline
2433:/usr/include/c++/4.6.3/bits/basic_string.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
2434:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator==(const basic_string<_CharT>& __lhs,
2435:/usr/include/c++/4.6.3/bits/basic_string.h **** 	       const basic_string<_CharT>& __rhs)
2436:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return (__lhs.size() == __rhs.size()
2437:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
2438:/usr/include/c++/4.6.3/bits/basic_string.h **** 						    __lhs.size())); }
2439:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2440:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2441:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Test equivalence of C string and string.
2442:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  C string.
2443:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  String.
2444:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  True if @a rhs.compare(@a lhs) == 0.  False otherwise.
2445:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2446:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2447:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline bool
2448:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator==(const _CharT* __lhs,
2449:/usr/include/c++/4.6.3/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
2450:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return __rhs.compare(__lhs) == 0; }
2451:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2452:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2453:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Test equivalence of string and C string.
2454:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  String.
2455:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  C string.
2456:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  True if @a lhs.compare(@a rhs) == 0.  False otherwise.
2457:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2458:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2459:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline bool
2460:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
2461:/usr/include/c++/4.6.3/bits/basic_string.h **** 	       const _CharT* __rhs)
2462:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return __lhs.compare(__rhs) == 0; }
2463:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2464:/usr/include/c++/4.6.3/bits/basic_string.h ****   // operator !=
2465:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2466:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Test difference of two strings.
2467:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  First string.
2468:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  Second string.
2469:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  True if @a lhs.compare(@a rhs) != 0.  False otherwise.
2470:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2471:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2472:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline bool
2473:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
2474:/usr/include/c++/4.6.3/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
2475:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return !(__lhs == __rhs); }
2476:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2477:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2478:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Test difference of C string and string.
2479:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  C string.
2480:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  String.
2481:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  True if @a rhs.compare(@a lhs) != 0.  False otherwise.
2482:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2483:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2484:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline bool
2485:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator!=(const _CharT* __lhs,
2486:/usr/include/c++/4.6.3/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
2487:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return !(__lhs == __rhs); }
2488:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2489:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2490:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Test difference of string and C string.
2491:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  String.
2492:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  C string.
2493:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  True if @a lhs.compare(@a rhs) != 0.  False otherwise.
2494:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2495:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2496:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline bool
2497:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
2498:/usr/include/c++/4.6.3/bits/basic_string.h **** 	       const _CharT* __rhs)
2499:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return !(__lhs == __rhs); }
2500:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2501:/usr/include/c++/4.6.3/bits/basic_string.h ****   // operator <
2502:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2503:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Test if string precedes string.
2504:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  First string.
2505:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  Second string.
2506:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  True if @a lhs precedes @a rhs.  False otherwise.
2507:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2508:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2509:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline bool
2510:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
2511:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
2512:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return __lhs.compare(__rhs) < 0; }
2513:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2514:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2515:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Test if string precedes C string.
2516:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  String.
2517:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  C string.
2518:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  True if @a lhs precedes @a rhs.  False otherwise.
2519:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2520:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2521:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline bool
2522:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
2523:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      const _CharT* __rhs)
2524:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return __lhs.compare(__rhs) < 0; }
2525:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2526:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2527:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Test if C string precedes string.
2528:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  C string.
2529:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  String.
2530:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  True if @a lhs precedes @a rhs.  False otherwise.
2531:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2532:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2533:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline bool
2534:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator<(const _CharT* __lhs,
2535:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
2536:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return __rhs.compare(__lhs) > 0; }
2537:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2538:/usr/include/c++/4.6.3/bits/basic_string.h ****   // operator >
2539:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2540:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Test if string follows string.
2541:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  First string.
2542:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  Second string.
2543:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  True if @a lhs follows @a rhs.  False otherwise.
2544:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2545:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2546:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline bool
2547:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
2548:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
2549:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return __lhs.compare(__rhs) > 0; }
2550:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2551:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2552:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Test if string follows C string.
2553:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  String.
2554:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  C string.
2555:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  True if @a lhs follows @a rhs.  False otherwise.
2556:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2557:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2558:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline bool
2559:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
2560:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      const _CharT* __rhs)
2561:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return __lhs.compare(__rhs) > 0; }
2562:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2563:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2564:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Test if C string follows string.
2565:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  C string.
2566:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  String.
2567:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  True if @a lhs follows @a rhs.  False otherwise.
2568:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2569:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2570:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline bool
2571:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator>(const _CharT* __lhs,
2572:/usr/include/c++/4.6.3/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
2573:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return __rhs.compare(__lhs) < 0; }
2574:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2575:/usr/include/c++/4.6.3/bits/basic_string.h ****   // operator <=
2576:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2577:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Test if string doesn't follow string.
2578:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  First string.
2579:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  Second string.
2580:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  True if @a lhs doesn't follow @a rhs.  False otherwise.
2581:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2582:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2583:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline bool
2584:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
2585:/usr/include/c++/4.6.3/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
2586:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return __lhs.compare(__rhs) <= 0; }
2587:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2588:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2589:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Test if string doesn't follow C string.
2590:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  String.
2591:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  C string.
2592:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  True if @a lhs doesn't follow @a rhs.  False otherwise.
2593:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2594:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2595:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline bool
2596:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
2597:/usr/include/c++/4.6.3/bits/basic_string.h **** 	       const _CharT* __rhs)
2598:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return __lhs.compare(__rhs) <= 0; }
2599:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2600:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2601:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Test if C string doesn't follow string.
2602:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  C string.
2603:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  String.
2604:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  True if @a lhs doesn't follow @a rhs.  False otherwise.
2605:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2606:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2607:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline bool
2608:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator<=(const _CharT* __lhs,
2609:/usr/include/c++/4.6.3/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
2610:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return __rhs.compare(__lhs) >= 0; }
2611:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2612:/usr/include/c++/4.6.3/bits/basic_string.h ****   // operator >=
2613:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2614:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Test if string doesn't precede string.
2615:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  First string.
2616:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  Second string.
2617:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  True if @a lhs doesn't precede @a rhs.  False otherwise.
2618:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2619:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2620:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline bool
2621:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
2622:/usr/include/c++/4.6.3/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
2623:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return __lhs.compare(__rhs) >= 0; }
2624:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2625:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2626:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Test if string doesn't precede C string.
2627:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  String.
2628:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  C string.
2629:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  True if @a lhs doesn't precede @a rhs.  False otherwise.
2630:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2631:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2632:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline bool
2633:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
2634:/usr/include/c++/4.6.3/bits/basic_string.h **** 	       const _CharT* __rhs)
2635:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return __lhs.compare(__rhs) >= 0; }
2636:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2637:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2638:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Test if C string doesn't precede string.
2639:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  C string.
2640:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  String.
2641:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  True if @a lhs doesn't precede @a rhs.  False otherwise.
2642:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2643:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2644:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline bool
2645:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator>=(const _CharT* __lhs,
2646:/usr/include/c++/4.6.3/bits/basic_string.h **** 	     const basic_string<_CharT, _Traits, _Alloc>& __rhs)
2647:/usr/include/c++/4.6.3/bits/basic_string.h ****     { return __rhs.compare(__lhs) <= 0; }
2648:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2649:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2650:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Swap contents of two strings.
2651:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param lhs  First string.
2652:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param rhs  Second string.
2653:/usr/include/c++/4.6.3/bits/basic_string.h ****    *
2654:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  Exchanges the contents of @a lhs and @a rhs in constant time.
2655:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2656:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2657:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline void
2658:/usr/include/c++/4.6.3/bits/basic_string.h ****     swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
2659:/usr/include/c++/4.6.3/bits/basic_string.h **** 	 basic_string<_CharT, _Traits, _Alloc>& __rhs)
2660:/usr/include/c++/4.6.3/bits/basic_string.h ****     { __lhs.swap(__rhs); }
2661:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2662:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2663:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Read stream into a string.
2664:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param is  Input stream.
2665:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param str  Buffer to store into.
2666:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  Reference to the input stream.
2667:/usr/include/c++/4.6.3/bits/basic_string.h ****    *
2668:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  Stores characters from @a is into @a str until whitespace is found, the
2669:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  end of the stream is encountered, or str.max_size() is reached.  If
2670:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  is.width() is non-zero, that is the limit on the number of characters
2671:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  stored into @a str.  Any previous contents of @a str are erased.
2672:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2673:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2674:/usr/include/c++/4.6.3/bits/basic_string.h ****     basic_istream<_CharT, _Traits>&
2675:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator>>(basic_istream<_CharT, _Traits>& __is,
2676:/usr/include/c++/4.6.3/bits/basic_string.h **** 	       basic_string<_CharT, _Traits, _Alloc>& __str);
2677:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2678:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<>
2679:/usr/include/c++/4.6.3/bits/basic_string.h ****     basic_istream<char>&
2680:/usr/include/c++/4.6.3/bits/basic_string.h ****     operator>>(basic_istream<char>& __is, basic_string<char>& __str);
2681:/usr/include/c++/4.6.3/bits/basic_string.h **** 
2682:/usr/include/c++/4.6.3/bits/basic_string.h ****   /**
2683:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @brief  Write string to a stream.
2684:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param os  Output stream.
2685:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @param str  String to write out.
2686:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  @return  Reference to the output stream.
2687:/usr/include/c++/4.6.3/bits/basic_string.h ****    *
2688:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  Output characters of @a str into os following the same rules as for
2689:/usr/include/c++/4.6.3/bits/basic_string.h ****    *  writing a C string.
2690:/usr/include/c++/4.6.3/bits/basic_string.h ****    */
2691:/usr/include/c++/4.6.3/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2692:/usr/include/c++/4.6.3/bits/basic_string.h ****     inline basic_ostream<_CharT, _Traits>&
 219              		.loc	3 2692 48
 220              	.Ltmp68:
 221              		#DEBUG_VALUE: operator<<:__os <- R14+0 # /usr/include/c++/4.6.3/bits/basic_string.h:2692:48[ ./mat
 222 00ad 4C89F7   		movq	%r14, %rdi
 223              	.Ltmp69:
 224              		#DEBUG_VALUE: operator<<:__os <- undef
 225              	.Ltmp70:
 226              		#DEBUG_VALUE: operator<<:__out <- undef
 227 00b0 E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l
 227      00
 228              	.Ltmp12:
 229              	# BB#7:                                 # %_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_
 230              	.Ltmp71:
 231              		#DEBUG_VALUE: _M_data:this <- RBX+0
 232              	.Ltmp72:
 233              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 234              	.Ltmp73:
 235              		#DEBUG_VALUE: size:this <- RBX+0
 236 00b5 4889C3   		movq	%rax, %rbx
 237              	.Ltmp13:
 238              	.Ltmp74:
 239              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 240 00b8 BE000000 		movl	$.L.str4, %esi
 240      00
 241              	.Ltmp75:
 242              		#DEBUG_VALUE: length:__s <- RSI+0
 243 00bd BA050000 		movl	$5, %edx
 243      00
 244 00c2 4889DF   		movq	%rbx, %rdi
 245              	.Ltmp76:
 246              		#DEBUG_VALUE: length:__s <- undef
 247 00c5 E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l
 247      00
 248              	.Ltmp14:
 249              	# BB#8:                                 # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.
 250              	.Ltmp15:
 251              	.Ltmp77:
 252              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 253              	.Ltmp78:
 254              		#DEBUG_VALUE: _M_data:this <- RBX+0
 255              	.Ltmp79:
 256              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 257              	.Ltmp80:
 258              		#DEBUG_VALUE: size:this <- RBX+0
 259 00ca BE000000 		movl	$.L.str5, %esi
 259      00
 260              	.Ltmp81:
 261              		#DEBUG_VALUE: length:__s <- RSI+0
 262 00cf BA0E0000 		movl	$14, %edx
 262      00
 263 00d4 4889DF   		movq	%rbx, %rdi
 264              	.Ltmp82:
 265              		#DEBUG_VALUE: length:__s <- undef
 266 00d7 E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l
 266      00
 267              	.Ltmp16:
 268              	# BB#9:                                 # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.
 269              	.Ltmp83:
 270              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 271              	.Ltmp84:
 272              		#DEBUG_VALUE: _M_data:this <- RBX+0
 273              	.Ltmp85:
 274              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 275              	.Ltmp86:
 276              		#DEBUG_VALUE: size:this <- RBX+0
 277              	.Ltmp87:
 278              		.loc	2 42 2
 279              	.Ltmp88:
 280 00dc F20F1045 		movsd	-64(%rbp), %xmm0        # ./matrix-util.C:42:2
 280      C0
 281              	.Ltmp17:
 210:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 282              		.loc	12 210 25
 283              	.Ltmp89:
 284              		#DEBUG_VALUE: operator<<:__f <- XMM0+0 # /usr/include/c++/4.6.3/ostream:210:25[ ./matrix-util.C:42
 210:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 285              		.loc	12 210 7
 286              	.Ltmp90:
 287              		#DEBUG_VALUE: operator<<:this <- RBX+0 # /usr/include/c++/4.6.3/ostream:210:7[ ./matrix-util.C:42:
 288 00e1 4889DF   		movq	%rbx, %rdi
 289              	.Ltmp91:
 290              		#DEBUG_VALUE: operator<<:this <- undef
 291              	.Ltmp92:
 292              		#DEBUG_VALUE: operator<<:__f <- undef
 293              	.Ltmp93:
 294              		#DEBUG_VALUE: operator<<:__out <- undef
 295 00e4 E8000000 		callq	_ZNSo9_M_insertIdEERSoT_
 295      00
 296              	.Ltmp18:
 297              	# BB#10:                                # %_ZNSolsEd.exit
 298              	.Ltmp94:
 299              		#DEBUG_VALUE: _M_data:this <- RBX+0
 300              	.Ltmp95:
 301              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 302              	.Ltmp96:
 303              		#DEBUG_VALUE: size:this <- RBX+0
 287:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_data() const
 304              		.loc	3 287 9
 305              	.Ltmp97:
 306 00e9 488B75D8 		movq	-40(%rbp), %rsi         # /usr/include/c++/4.6.3/bits/basic_string.h:287:9[ /usr/include/c++/
 307              	.Ltmp98:
 710:/usr/include/c++/4.6.3/bits/basic_string.h ****       size() const
 308              		.loc	3 710 9
 309              	.Ltmp99:
 310 00ed 488B56E8 		movq	-24(%rsi), %rdx         # /usr/include/c++/4.6.3/bits/basic_string.h:710:9[ /usr/include/c++/
 311              	.Ltmp19:
 312              	.Ltmp100:
 313              		#DEBUG_VALUE: operator<<:__os <- RAX+0
 314 00f1 4889C7   		movq	%rax, %rdi
 315              	.Ltmp101:
 316              		#DEBUG_VALUE: operator<<:__os <- undef
 317 00f4 E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l
 317      00
 318              	.Ltmp20:
 319              	# BB#11:                                # %_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_
 320              	.Ltmp102:
 321              		#DEBUG_VALUE: _M_data:this <- RBX+0
 322              	.Ltmp103:
 323              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 324              	.Ltmp104:
 325              		#DEBUG_VALUE: size:this <- RBX+0
 326 00f9 4889C3   		movq	%rax, %rbx
 327              	.Ltmp21:
 328              	.Ltmp105:
 329              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 330 00fc BE000000 		movl	$.L.str6, %esi
 330      00
 331              	.Ltmp106:
 332              		#DEBUG_VALUE: length:__s <- RSI+0
 333 0101 BA060000 		movl	$6, %edx
 333      00
 334 0106 4889DF   		movq	%rbx, %rdi
 335              	.Ltmp107:
 336              		#DEBUG_VALUE: length:__s <- undef
 337 0109 E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l
 337      00
 338              	.Ltmp22:
 339              	# BB#12:                                # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.
 340              	.Ltmp23:
 341              	.Ltmp108:
 342              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 343              	.Ltmp109:
 344              		#DEBUG_VALUE: _M_data:this <- RBX+0
 345              	.Ltmp110:
 346              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 347              	.Ltmp111:
 348              		#DEBUG_VALUE: size:this <- RBX+0
 349              	.Ltmp112:
 350              		#DEBUG_VALUE: operator<<:this <- RBX+0
 351              	.Ltmp113:
 352              		#DEBUG_VALUE: operator<<:__f <- [%rbp+$-72]+$0
 353 010e 4889DF   		movq	%rbx, %rdi
 354              	.Ltmp114:
 355              		#DEBUG_VALUE: operator<<:this <- undef
 356              	.Ltmp115:
 357              		#DEBUG_VALUE: operator<<:__out <- undef
 358 0111 F20F1045 		movsd	-72(%rbp), %xmm0        # 8-byte Reload
 358      B8
 359              	.Ltmp116:
 360              		#DEBUG_VALUE: operator<<:__f <- undef
 361 0116 E8000000 		callq	_ZNSo9_M_insertIdEERSoT_
 361      00
 362              	.Ltmp24:
 363              	# BB#13:                                # %_ZNSolsEd.exit8
 364              	.Ltmp117:
 365              		#DEBUG_VALUE: _M_data:this <- RBX+0
 366              	.Ltmp118:
 367              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 368              	.Ltmp119:
 369              		#DEBUG_VALUE: size:this <- RBX+0
 287:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_data() const
 370              		.loc	3 287 9
 371              	.Ltmp120:
 372 011b 488B75D8 		movq	-40(%rbp), %rsi         # /usr/include/c++/4.6.3/bits/basic_string.h:287:9[ /usr/include/c++/
 373              	.Ltmp121:
 710:/usr/include/c++/4.6.3/bits/basic_string.h ****       size() const
 374              		.loc	3 710 9
 375              	.Ltmp122:
 376 011f 488B56E8 		movq	-24(%rsi), %rdx         # /usr/include/c++/4.6.3/bits/basic_string.h:710:9[ /usr/include/c++/
 377              	.Ltmp25:
 378              	.Ltmp123:
 379              		#DEBUG_VALUE: operator<<:__os <- RAX+0
 380 0123 4889C7   		movq	%rax, %rdi
 381              	.Ltmp124:
 382              		#DEBUG_VALUE: operator<<:__os <- undef
 383 0126 E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l
 383      00
 384              	.Ltmp26:
 385              	# BB#14:                                # %_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_
 386              	.Ltmp125:
 387              		#DEBUG_VALUE: _M_data:this <- RBX+0
 388              	.Ltmp126:
 389              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 390              	.Ltmp127:
 391              		#DEBUG_VALUE: size:this <- RBX+0
 392 012b 4889C3   		movq	%rax, %rbx
 393              	.Ltmp27:
 394              	.Ltmp128:
 395              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 396 012e BE000000 		movl	$.L.str7, %esi
 396      00
 397              	.Ltmp129:
 398              		#DEBUG_VALUE: length:__s <- RSI+0
 399 0133 BA010000 		movl	$1, %edx
 399      00
 400 0138 4889DF   		movq	%rbx, %rdi
 401              	.Ltmp130:
 402              		#DEBUG_VALUE: length:__s <- undef
 403 013b E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l
 403      00
 404              	.Ltmp28:
 405              	# BB#15:                                # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.
 406              	.Ltmp131:
 407              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 408              	.Ltmp132:
 409              		#DEBUG_VALUE: _M_data:this <- RBX+0
 410              	.Ltmp133:
 411              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 412              	.Ltmp134:
 413              		#DEBUG_VALUE: size:this <- RBX+0
 414              	.Ltmp135:
 415              		#DEBUG_VALUE: endl:__os <- RBX+0
 416 0140 488B03   		movq	(%rbx), %rax
 417 0143 488B40E8 		movq	-24(%rax), %rax
 418 0147 4C8BB418 		movq	240(%rax,%rbx), %r14
 418      F0000000 
 419              	.Ltmp136:
 420              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 421              	.Ltmp137:
 422              		#DEBUG_VALUE: widen:__c <- 10+0
 423 014f 4D85F6   		testq	%r14, %r14
 424 0152 7505     		jne	.LBB0_17
 425              	# BB#16:
 426              	.Ltmp37:
 427              	.Ltmp138:
 428              		#DEBUG_VALUE: _M_data:this <- RBX+0
 429              	.Ltmp139:
 430              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 431              	.Ltmp140:
 432              		#DEBUG_VALUE: size:this <- RBX+0
 433              	.Ltmp141:
 434              		#DEBUG_VALUE: widen:__c <- 10+0
 435 0154 E8000000 		callq	_ZSt16__throw_bad_castv
 435      00
 436              	.Ltmp38:
 437              	.LBB0_17:                               # %.noexc14
 438              	.Ltmp142:
 439              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 440              	.Ltmp143:
 441              		#DEBUG_VALUE: _M_data:this <- RBX+0
 442              	.Ltmp144:
 443              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 444              	.Ltmp145:
 445              		#DEBUG_VALUE: size:this <- RBX+0
 446              	.Ltmp146:
 447              		#DEBUG_VALUE: endl:__os <- RBX+0
 448              	.Ltmp147:
 449              		#DEBUG_VALUE: widen:__c <- 10+0
 450              	.Ltmp148:
 451              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 452 0159 41807E38 		cmpb	$0, 56(%r14)
 452      00
 453              	.Ltmp149:
 454              		#DEBUG_VALUE: widen:this <- R14+0
 455              	.Ltmp150:
 456              		#DEBUG_VALUE: widen:__c <- 10+0
 457 015e 7470     		je	.LBB0_27
 458              	# BB#18:
 459              	.Ltmp151:
 460              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 461              	.Ltmp152:
 462              		#DEBUG_VALUE: _M_data:this <- RBX+0
 463              	.Ltmp153:
 464              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 465              	.Ltmp154:
 466              		#DEBUG_VALUE: size:this <- RBX+0
 467              	.Ltmp155:
 468              		#DEBUG_VALUE: endl:__os <- RBX+0
 469              	.Ltmp156:
 470              		#DEBUG_VALUE: widen:__c <- 10+0
 471              	.Ltmp157:
 472              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 473              	.Ltmp158:
 474              		#DEBUG_VALUE: widen:__c <- 10+0
 475              	.Ltmp159:
 476              		#DEBUG_VALUE: widen:this <- R14+0
 477 0160 418A4643 		movb	67(%r14), %al
 478              	.Ltmp160:
 479              		#DEBUG_VALUE: widen:this <- undef
 480              	.Ltmp161:
 481              		#DEBUG_VALUE: __check_facet:__f <- undef
 482 0164 E9800000 		jmp	.LBB0_29
 482      00
 483              	.LBB0_19:
 484              	.Ltmp39:
 485 0169 488B7DD8 		movq	-40(%rbp), %rdi
 486 016d 488D5FE8 		leaq	-24(%rdi), %rbx
 487 0171 B9000000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %ecx
 487      00
 488 0176 4839CB   		cmpq	%rcx, %rbx
 489              	.Ltmp162:
  34:./matrix-util.C **** 	process_mem_usage(vm, rss);
 490              		.loc	2 34 2
 491              	.Ltmp163:
 492 0179 4989C6   		movq	%rax, %r14              # ./matrix-util.C:34:2
 493 017c 750B     		jne	.LBB0_21
 494              	# BB#20:
 495 017e 4C89F0   		movq	%r14, %rax
  32:./matrix-util.C **** 	std::string unit = "KB"; // KB, MB
 496              		.loc	2 32 25
 497              	.Ltmp164:
 498 0181 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:32:25
 499 0184 E8000000 		callq	_Unwind_Resume_or_Rethrow # ./matrix-util.C:32:25
 499      00
 500              	.LBB0_21:
 501 0189 4883C7F8 		addq	$-8, %rdi
 502 018d B8000000 		movl	$pthread_cancel, %eax
 502      00
 503 0192 4885C0   		testq	%rax, %rax
 504              	.Ltmp165:
 505              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 506 0195 740C     		je	.LBB0_23
 507              	# BB#22:
 508              	.Ltmp166:
 509              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 510 0197 BEFFFFFF 		movl	$-1, %esi
 510      FF
 511 019c E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 511      00
 512 01a1 EB07     		jmp	.LBB0_24
 513              	.LBB0_23:
 514              	.Ltmp167:
 515              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 516              	.Ltmp168:
 517              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 518 01a3 8B07     		movl	(%rdi), %eax
 519              	.Ltmp169:
 520              		#DEBUG_VALUE: __result <- EAX+0
 521 01a5 8D48FF   		leal	-1(%rax), %ecx
 522 01a8 890F     		movl	%ecx, (%rdi)
 523              	.Ltmp170:
 524              		#DEBUG_VALUE: __result <- undef
 525              	.LBB0_24:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 526              	.Ltmp171:
 527              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 528 01aa 85C0     		testl	%eax, %eax
 529 01ac 7E0B     		jle	.LBB0_26
 530              	# BB#25:
 531              	.Ltmp172:
 532              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 533 01ae 4C89F0   		movq	%r14, %rax
 534 01b1 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:32:25
 535 01b4 E8000000 		callq	_Unwind_Resume_or_Rethrow # ./matrix-util.C:32:25
 535      00
 536              	.LBB0_26:
 537              	.Ltmp173:
 538              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 539 01b9 488D75E8 		leaq	-24(%rbp), %rsi
 540 01bd 4889DF   		movq	%rbx, %rdi
 541 01c0 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 541      00
 542 01c5 4C89F0   		movq	%r14, %rax
 543 01c8 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:32:25
 544 01cb E8000000 		callq	_Unwind_Resume_or_Rethrow # ./matrix-util.C:32:25
 544      00
 545              	.LBB0_27:
 546              	.Ltmp29:
 547              	.Ltmp174:
 548              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 549              	.Ltmp175:
 550              		#DEBUG_VALUE: _M_data:this <- RBX+0
 551              	.Ltmp176:
 552              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 553              	.Ltmp177:
 554              		#DEBUG_VALUE: size:this <- RBX+0
 555              	.Ltmp178:
 556              		#DEBUG_VALUE: endl:__os <- RBX+0
 557              	.Ltmp179:
 558              		#DEBUG_VALUE: widen:__c <- 10+0
 559              	.Ltmp180:
 560              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 561              	.Ltmp181:
 562              		#DEBUG_VALUE: widen:__c <- 10+0
 563              	.Ltmp182:
 564              		#DEBUG_VALUE: widen:this <- R14+0
 565 01d0 4C89F7   		movq	%r14, %rdi
 566 01d3 E8000000 		callq	_ZNKSt5ctypeIcE13_M_widen_initEv
 566      00
 567              	.Ltmp30:
 568              	# BB#28:                                # %.noexc16
 569              	.Ltmp183:
 570              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 571              	.Ltmp184:
 572              		#DEBUG_VALUE: _M_data:this <- RBX+0
 573              	.Ltmp185:
 574              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 575              	.Ltmp186:
 576              		#DEBUG_VALUE: size:this <- RBX+0
 577              	.Ltmp187:
 578              		#DEBUG_VALUE: endl:__os <- RBX+0
 579              	.Ltmp188:
 580              		#DEBUG_VALUE: widen:__c <- 10+0
 581              	.Ltmp189:
 582              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 583              	.Ltmp190:
 584              		#DEBUG_VALUE: widen:__c <- 10+0
 585              	.Ltmp191:
 586              		#DEBUG_VALUE: widen:this <- R14+0
 587 01d8 498B06   		movq	(%r14), %rax
 588 01db 488B4030 		movq	48(%rax), %rax
 589              	.Ltmp31:
 590 01df BE0A0000 		movl	$10, %esi
 590      00
 591 01e4 4C89F7   		movq	%r14, %rdi
 592              	.Ltmp192:
 593              		#DEBUG_VALUE: widen:this <- undef
 594              	.Ltmp193:
 595              		#DEBUG_VALUE: __check_facet:__f <- undef
 596 01e7 FFD0     		callq	*%rax
 597              	.Ltmp32:
 598              	.LBB0_29:                               # %.noexc
 599              	.Ltmp33:
 600              	.Ltmp194:
 601              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 602              	.Ltmp195:
 603              		#DEBUG_VALUE: _M_data:this <- RBX+0
 604              	.Ltmp196:
 605              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 606              	.Ltmp197:
 607              		#DEBUG_VALUE: size:this <- RBX+0
 608              	.Ltmp198:
 609              		#DEBUG_VALUE: endl:__os <- RBX+0
 610              	.Ltmp199:
 611              		#DEBUG_VALUE: widen:__c <- 10+0
 612              	.Ltmp200:
 613              		#DEBUG_VALUE: widen:__c <- 10+0
 614 01e9 0FBEF0   		movsbl	%al, %esi
 615 01ec 4889DF   		movq	%rbx, %rdi
 616              	.Ltmp201:
 617              		#DEBUG_VALUE: endl:__os <- undef
 618              	.Ltmp202:
 619              		#DEBUG_VALUE: operator<<:__out <- undef
 620 01ef E8000000 		callq	_ZNSo3putEc
 620      00
 621              	.Ltmp34:
 622              	# BB#30:                                # %.noexc11
 623              	.Ltmp35:
 624              	.Ltmp203:
 625              		#DEBUG_VALUE: _M_data:this <- RBX+0
 626              	.Ltmp204:
 627              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 628              	.Ltmp205:
 629              		#DEBUG_VALUE: size:this <- RBX+0
 630              	.Ltmp206:
 631              		#DEBUG_VALUE: widen:__c <- 10+0
 632              	.Ltmp207:
 633              		#DEBUG_VALUE: widen:__c <- 10+0
 634              	.Ltmp208:
 635              		#DEBUG_VALUE: flush:__os <- RAX+0
 636 01f4 4889C7   		movq	%rax, %rdi
 637              	.Ltmp209:
 638              		#DEBUG_VALUE: flush:__os <- undef
 639 01f7 E8000000 		callq	_ZNSo5flushEv
 639      00
 640              	.Ltmp36:
 641              	# BB#31:                                # %_ZNSolsEPFRSoS_E.exit
 642              	.Ltmp210:
 643              		#DEBUG_VALUE: _M_data:this <- RBX+0
 644              	.Ltmp211:
 645              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 646              	.Ltmp212:
 647              		#DEBUG_VALUE: size:this <- RBX+0
 648              	.Ltmp213:
 649              		#DEBUG_VALUE: widen:__c <- 10+0
 650              	.Ltmp214:
 651              		#DEBUG_VALUE: widen:__c <- 10+0
 652 01fc 488B7DD8 		movq	-40(%rbp), %rdi
 653 0200 488D5FE8 		leaq	-24(%rdi), %rbx
 654 0204 B8000000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %eax
 654      00
 655 0209 4839C3   		cmpq	%rax, %rbx
 656 020c 7431     		je	.LBB0_37
 657              	# BB#32:
 658              	.Ltmp215:
 659              		#DEBUG_VALUE: _M_data:this <- RBX+0
 660              	.Ltmp216:
 661              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 662              	.Ltmp217:
 663              		#DEBUG_VALUE: size:this <- RBX+0
 664              	.Ltmp218:
 665              		#DEBUG_VALUE: widen:__c <- 10+0
 666              	.Ltmp219:
 667              		#DEBUG_VALUE: widen:__c <- 10+0
 668 020e 4883C7F8 		addq	$-8, %rdi
 669 0212 B8000000 		movl	$pthread_cancel, %eax
 669      00
 670 0217 4885C0   		testq	%rax, %rax
 671              	.Ltmp220:
 672              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 673 021a 740C     		je	.LBB0_34
 674              	# BB#33:
 675              	.Ltmp221:
 676              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 677              	.Ltmp222:
 678              		#DEBUG_VALUE: _M_data:this <- RBX+0
 679              	.Ltmp223:
 680              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 681              	.Ltmp224:
 682              		#DEBUG_VALUE: size:this <- RBX+0
 683              	.Ltmp225:
 684              		#DEBUG_VALUE: widen:__c <- 10+0
 685              	.Ltmp226:
 686              		#DEBUG_VALUE: widen:__c <- 10+0
 687 021c BEFFFFFF 		movl	$-1, %esi
 687      FF
 688 0221 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 688      00
 689 0226 EB07     		jmp	.LBB0_35
 690              	.LBB0_34:
 691              	.Ltmp227:
 692              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 693              	.Ltmp228:
 694              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 695              	.Ltmp229:
 696              		#DEBUG_VALUE: _M_data:this <- RBX+0
 697              	.Ltmp230:
 698              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 699              	.Ltmp231:
 700              		#DEBUG_VALUE: size:this <- RBX+0
 701              	.Ltmp232:
 702              		#DEBUG_VALUE: widen:__c <- 10+0
 703              	.Ltmp233:
 704              		#DEBUG_VALUE: widen:__c <- 10+0
 705 0228 8B07     		movl	(%rdi), %eax
 706              	.Ltmp234:
 707              		#DEBUG_VALUE: __result <- EAX+0
 708 022a 8D48FF   		leal	-1(%rax), %ecx
 709 022d 890F     		movl	%ecx, (%rdi)
 710              	.Ltmp235:
 711              		#DEBUG_VALUE: __result <- undef
 712              	.LBB0_35:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 713              	.Ltmp236:
 714              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 715              	.Ltmp237:
 716              		#DEBUG_VALUE: _M_data:this <- RBX+0
 717              	.Ltmp238:
 718              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 719              	.Ltmp239:
 720              		#DEBUG_VALUE: size:this <- RBX+0
 721              	.Ltmp240:
 722              		#DEBUG_VALUE: widen:__c <- 10+0
 723              	.Ltmp241:
 724              		#DEBUG_VALUE: widen:__c <- 10+0
 725 022f 85C0     		testl	%eax, %eax
 726 0231 7F0C     		jg	.LBB0_37
 727              	# BB#36:
 728              	.Ltmp242:
 729              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 730              	.Ltmp243:
 731              		#DEBUG_VALUE: _M_data:this <- RBX+0
 732              	.Ltmp244:
 733              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 734              	.Ltmp245:
 735              		#DEBUG_VALUE: size:this <- RBX+0
 736              	.Ltmp246:
 737              		#DEBUG_VALUE: widen:__c <- 10+0
 738              	.Ltmp247:
 739              		#DEBUG_VALUE: widen:__c <- 10+0
 740 0233 488D75E0 		leaq	-32(%rbp), %rsi
 741 0237 4889DF   		movq	%rbx, %rdi
 742 023a E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 742      00
 743              	.LBB0_37:                               # %_ZNSsD1Ev.exit
  43:./matrix-util.C **** 			<< "[[[" << msg << "]]]\t\t" << " Memory (RSS: " << rss << unit << "; VM: " << vm << unit << ")"
  44:./matrix-util.C **** }
 744              		.loc	2 44 1
 745              	.Ltmp248:
 746 023f 4883C440 		addq	$64, %rsp               # ./matrix-util.C:44:1
 747              	.Ltmp249:
 748              		#DEBUG_VALUE: _M_data:this <- RBX+0
 749              	.Ltmp250:
 750              		#DEBUG_VALUE: _M_rep:this <- RBX+0
 751              	.Ltmp251:
 752              		#DEBUG_VALUE: size:this <- RBX+0
 753              	.Ltmp252:
 754              		#DEBUG_VALUE: widen:__c <- 10+0
 755              	.Ltmp253:
 756              		#DEBUG_VALUE: widen:__c <- 10+0
 757 0243 5B       		popq	%rbx                    # ./matrix-util.C:44:1
 758 0244 415E     		popq	%r14                    # ./matrix-util.C:44:1
 759 0246 5D       		popq	%rbp                    # ./matrix-util.C:44:1
 760 0247 C3       		ret                             # ./matrix-util.C:44:1
 761              	.LBB0_38:
 762              	.Ltmp2:
  32:./matrix-util.C **** 	std::string unit = "KB"; // KB, MB
 763              		.loc	2 32 25
 764              	.Ltmp254:
 765 0248 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:32:25
 766 024b E8000000 		callq	_Unwind_Resume_or_Rethrow # ./matrix-util.C:32:25
 766      00
 767              	.Ltmp255:
 768              	.Ltmp256:
 770              	.Lfunc_end0:
 771              	.Leh_func_end0:
 772              		.section	.gcc_except_table,"a",@progbits
 773              		.align	4
 774              	GCC_except_table0:
 775              	.Lexception0:
 776 0000 FF       		.byte	255                     # @LPStart Encoding = omit
 777 0001 03       		.byte	3                       # @TType Encoding = udata4
 778 0002 49       		.byte	73                      # @TType base offset
 779 0003 03       		.byte	3                       # Call site Encoding = udata4
 780 0004 41       		.byte	65                      # Call site table length
 781              	.Lset0 = .Ltmp0-.Leh_func_begin0        # Region start
 782 0005 0E000000 		.long	.Lset0
 783              	.Lset1 = .Ltmp1-.Ltmp0                  # Region length
 784 0009 12000000 		.long	.Lset1
 785              	.Lset2 = .Ltmp2-.Leh_func_begin0        # Landing pad
 786 000d 48020000 		.long	.Lset2
 787 0011 01       		.byte	1                       # Action
 788              	.Lset3 = .Ltmp3-.Leh_func_begin0        # Region start
 789 0012 20000000 		.long	.Lset3
 790              	.Lset4 = .Ltmp38-.Ltmp3                 # Region length
 791 0016 39010000 		.long	.Lset4
 792              	.Lset5 = .Ltmp39-.Leh_func_begin0       # Landing pad
 793 001a 69010000 		.long	.Lset5
 794 001e 01       		.byte	1                       # Action
 795              	.Lset6 = .Ltmp38-.Leh_func_begin0       # Region start
 796 001f 59010000 		.long	.Lset6
 797              	.Lset7 = .Ltmp29-.Ltmp38                # Region length
 798 0023 77000000 		.long	.Lset7
 799 0027 00000000 		.long	0                       # Landing pad
 800 002b 00       		.byte	0                       # Action
 801              	.Lset8 = .Ltmp29-.Leh_func_begin0       # Region start
 802 002c D0010000 		.long	.Lset8
 803              	.Lset9 = .Ltmp36-.Ltmp29                # Region length
 804 0030 2C000000 		.long	.Lset9
 805              	.Lset10 = .Ltmp39-.Leh_func_begin0      # Landing pad
 806 0034 69010000 		.long	.Lset10
 807 0038 01       		.byte	1                       # Action
 808              	.Lset11 = .Ltmp36-.Leh_func_begin0      # Region start
 809 0039 FC010000 		.long	.Lset11
 810              	.Lset12 = .Leh_func_end0-.Ltmp36        # Region length
 811 003d 54000000 		.long	.Lset12
 812 0041 00000000 		.long	0                       # Landing pad
 813 0045 00       		.byte	0                       # Action
 814              	                                        # -- Action Record Table --
 815              	                                        # Action Record
 816 0046 01       		.byte	1                       #   TypeInfo index
 817 0047 00       		.byte	0                       #   Next action
 818              	                                        # -- Catch TypeInfos --
 819 0048 00000000 		.long	0                       # TypeInfo
 820              		.align	4
 821              	
 822              		.section	.rodata.cst8,"aM",@progbits,8
 823              		.align	8
 824              	.LCPI1_0:
 825 0008 00001000 		.quad	4985484787500187648     # double 1.934281e+25
 825      00003045 
 826              	.LCPI1_1:
 827 0010 00000000 		.quad	4652218415073722368     # double 1.024000e+03
 827      00009040 
 828              		.text
 829              		.globl	_ZN10MatrixUtil17process_mem_usageERdS0_
 830              		.align	16, 0x90
 832              	_ZN10MatrixUtil17process_mem_usageERdS0_: # @_ZN10MatrixUtil17process_mem_usageERdS0_
 833              	.Leh_func_begin1:
 834              	.Lfunc_begin1:
  45:./matrix-util.C **** 
  46:./matrix-util.C **** uint32 MatrixUtil::loadF4Modulus(const char *fileName)
  47:./matrix-util.C **** {
  48:./matrix-util.C **** 	uint32 mod;
  49:./matrix-util.C **** 
  50:./matrix-util.C ****         std::ostream &report = commentator.report (Commentator::LEVEL_IMPORTANT, INTERNAL_ERROR);
  51:./matrix-util.C ****         
  52:./matrix-util.C **** 	FILE *f = fopen(fileName, "r");
  53:./matrix-util.C **** 	if (f == NULL)
  54:./matrix-util.C **** 	{
  55:./matrix-util.C **** 		report << "Can't open " << fileName << std::endl;
  56:./matrix-util.C **** 		exit(1);
  57:./matrix-util.C **** 	}
  58:./matrix-util.C **** 
  59:./matrix-util.C **** 	fseek(f, 2 * sizeof(uint32), SEEK_SET);
  60:./matrix-util.C **** 	if(fread(&mod, sizeof(uint32),     1,f) != 1)
  61:./matrix-util.C **** 	{
  62:./matrix-util.C **** 		report << "Error while reading file " << fileName << std::endl;
  63:./matrix-util.C **** 		throw "Error while reading file";
  64:./matrix-util.C **** 	}
  65:./matrix-util.C **** 
  66:./matrix-util.C **** 	assert(mod >= 2);
  67:./matrix-util.C **** 
  68:./matrix-util.C **** 	fclose(f);
  69:./matrix-util.C **** 	return mod;
  70:./matrix-util.C **** }
  71:./matrix-util.C **** 
  72:./matrix-util.C **** //reads the matrix row by row from the file, does not load the whole file to memory. more efficient
  73:./matrix-util.C **** template <class Ring>
  74:./matrix-util.C **** SparseMatrix<typename Ring::Element> MatrixUtil::loadF4Matrix(const Ring &R, const char *fileName)
  75:./matrix-util.C **** {
  76:./matrix-util.C **** 	std::ostream &report = commentator.report (Commentator::LEVEL_NORMAL, INTERNAL_DESCRIPTION);
  77:./matrix-util.C **** 	// Code adapted from C version of dump_matrix.c
  78:./matrix-util.C **** 	
  79:./matrix-util.C **** 	FILE *f = fopen(fileName, "r");
  80:./matrix-util.C **** 	if (f == NULL)
  81:./matrix-util.C **** 	{
  82:./matrix-util.C **** 		commentator.report (Commentator::LEVEL_IMPORTANT, INTERNAL_ERROR) 
  83:./matrix-util.C ****                         << "Can't open " << fileName << std::endl;
  84:./matrix-util.C **** 		throw "Can't open file";
  85:./matrix-util.C **** 	}
  86:./matrix-util.C **** 
  87:./matrix-util.C **** 	uint16 *nz;
  88:./matrix-util.C **** 	uint32       *pos;
  89:./matrix-util.C **** 	uint32        sz;
  90:./matrix-util.C **** 	uint32 n;
  91:./matrix-util.C **** 	uint32 m;
  92:./matrix-util.C **** 	uint32  mod;
  93:./matrix-util.C **** 	uint64  nb;
  94:./matrix-util.C **** 
  95:./matrix-util.C **** 	if(fread(&n, sizeof(uint32),       1,f) != 1)
  96:./matrix-util.C **** 		throw "Error while reading file";
  97:./matrix-util.C **** 	if(fread(&m, sizeof(uint32),       1,f) != 1)
  98:./matrix-util.C **** 		throw "Error while reading file";
  99:./matrix-util.C **** 	if(fread(&mod, sizeof(uint32),     1,f) != 1)
 100:./matrix-util.C **** 		throw "Error while reading file";
 101:./matrix-util.C **** 	if(fread(&nb, sizeof(uint64),1,f) != 1)
 102:./matrix-util.C **** 		throw "Error while reading file";
 103:./matrix-util.C **** 
 104:./matrix-util.C **** 	report << n << " x " << m << " matrix" << std::endl;
 105:./matrix-util.C **** 	report << "mod " << mod << std::endl;
 106:./matrix-util.C **** 	{
 107:./matrix-util.C **** 		double Nz=(double)(n)*(double)(m);
 108:./matrix-util.C **** 		Nz=(double)(nb)/Nz;
 109:./matrix-util.C **** 		Nz*=100.0;
 110:./matrix-util.C **** 		report << "Nb of Nz elements " << nb << " (density " << Nz << ")" << std::endl;
 111:./matrix-util.C **** 	}
 112:./matrix-util.C **** 
 113:./matrix-util.C **** 	SparseMatrix<typename Ring::Element> A (n, m);
 114:./matrix-util.C **** 	typename SparseMatrix<typename Ring::Element>::RowIterator i_A;
 115:./matrix-util.C **** 
 116:./matrix-util.C **** 	uint32 i;
 117:./matrix-util.C **** 	nz = new unsigned short int [m];	//has a size of at most a full row of the matrix
 118:./matrix-util.C **** 	pos = new uint32 [m];
 119:./matrix-util.C **** 	
 120:./matrix-util.C **** 	//save the arrays original pointers
 121:./matrix-util.C **** 	uint16 *oNz = nz;
 122:./matrix-util.C **** 	uint32 *oPos = pos;
 123:./matrix-util.C **** 
 124:./matrix-util.C **** 	uint32 header_size = sizeof(uint32) * 3 + sizeof(uint64);	//size of n, m, mod and nb in the header
 125:./matrix-util.C **** 	uint64 row_sizes_offset, row_values_offset, row_positions_offset;		//cursors in the file
 126:./matrix-util.C **** 
 127:./matrix-util.C **** 	//row sizes if positioned after the values and the positions of the elements in the file
 128:./matrix-util.C **** 	row_sizes_offset = nb*sizeof(uint16) + nb*sizeof(uint32) + header_size;
 129:./matrix-util.C **** 	row_values_offset = header_size;
 130:./matrix-util.C **** 	row_positions_offset = nb*sizeof(uint16) + header_size;
 131:./matrix-util.C **** 
 132:./matrix-util.C **** 	for(i_A = A.rowBegin (), i=0; i<n; i++, ++i_A){
 133:./matrix-util.C **** 		//get the size of the current row
 134:./matrix-util.C **** 		fseek(f, row_sizes_offset, SEEK_SET);
 135:./matrix-util.C **** 		if(fread(&sz, sizeof(uint32), 1, f) != 1 )
 136:./matrix-util.C **** 			throw "Error while reading file";
 137:./matrix-util.C **** 
 138:./matrix-util.C **** 		row_sizes_offset += sizeof(uint32);
 139:./matrix-util.C ****                                 
 140:./matrix-util.C **** 		assert(sz <= m);		//number of elements in a row at max equal to the size of a row in the matrix
 141:./matrix-util.C **** 
 142:./matrix-util.C **** 		//read sz elements from the values part of the file
 143:./matrix-util.C **** 		fseek(f, row_values_offset, SEEK_SET);
 144:./matrix-util.C **** 		if(fread(nz, sizeof(uint16), sz, f) != sz )
 145:./matrix-util.C **** 			throw "Error while reading file";
 146:./matrix-util.C **** 
 147:./matrix-util.C **** 		row_values_offset += sz*sizeof(uint16);
 148:./matrix-util.C **** 
 149:./matrix-util.C **** 		//read sz elements from the posistions part of the file
 150:./matrix-util.C **** 		fseek(f, row_positions_offset, SEEK_SET);
 151:./matrix-util.C **** 		if(fread(pos, sizeof(uint32), sz, f) != sz )
 152:./matrix-util.C **** 			throw "Error while reading file";
 153:./matrix-util.C **** 
 154:./matrix-util.C **** 		row_positions_offset += sz*sizeof(uint32);
 155:./matrix-util.C **** 
 156:./matrix-util.C **** 		i_A->reserve (sz);
 157:./matrix-util.C **** 		for(uint32 j=0; j<sz; j++)
 158:./matrix-util.C **** 		{
 159:./matrix-util.C **** 			i_A->push_back (typename Vector<Ring>::Sparse::value_type (pos[j], typename Ring::Element ()));
 160:./matrix-util.C **** 			R.init(i_A->back ().second, nz[j]);
 161:./matrix-util.C **** 		}
 162:./matrix-util.C **** 	}
 163:./matrix-util.C **** 
 164:./matrix-util.C **** 	//free memory
 165:./matrix-util.C **** 	delete[] oNz; delete[] oPos;
 166:./matrix-util.C **** 	fclose(f);
 167:./matrix-util.C **** 
 168:./matrix-util.C **** 	return A;
 169:./matrix-util.C **** }
 170:./matrix-util.C **** 
 171:./matrix-util.C **** //Expects a SparseMatrix
 172:./matrix-util.C **** template <class Ring, typename Matrix>
 173:./matrix-util.C **** void MatrixUtil::writeF4MatrixToFile(const Ring &R, const char *fileName, const Matrix& A)
 174:./matrix-util.C **** {
 175:./matrix-util.C **** 	unsigned int n;
 176:./matrix-util.C **** 	unsigned int m;
 177:./matrix-util.C **** 	unsigned int  mod;
 178:./matrix-util.C **** 	unsigned long long  nb;
 179:./matrix-util.C **** 
 180:./matrix-util.C **** 	n = A.rowdim ();
 181:./matrix-util.C **** 	m = A.coldim ();
 182:./matrix-util.C **** 	mod = R._modulus;
 183:./matrix-util.C **** 
 184:./matrix-util.C **** 	uint32 i;
 185:./matrix-util.C **** 	nb = 0;
 186:./matrix-util.C **** 	for (i = 0; i < n; ++i) {
 187:./matrix-util.C **** 		nb += A[i].size ();
 188:./matrix-util.C **** 	}
 189:./matrix-util.C **** 
 190:./matrix-util.C **** 	FILE *f = fopen(fileName, "w");
 191:./matrix-util.C **** 	if (f == NULL)
 192:./matrix-util.C **** 	{
 193:./matrix-util.C **** 		commentator.report (Commentator::LEVEL_IMPORTANT, INTERNAL_ERROR) 
 194:./matrix-util.C ****                         << "Can't open " << fileName << std::endl;
 195:./matrix-util.C **** 		throw "Can't open file";	//TODO: handle properly with exception classes
 196:./matrix-util.C **** 	}
 197:./matrix-util.C **** 
 198:./matrix-util.C **** 	fwrite(&n, sizeof(unsigned int), 1, f);
 199:./matrix-util.C **** 	fwrite(&m, sizeof(unsigned int), 1, f);
 200:./matrix-util.C **** 	fwrite(&mod, sizeof(unsigned int), 1, f);
 201:./matrix-util.C **** 	fwrite(&nb, sizeof(unsigned long long), 1, f);
 202:./matrix-util.C **** 
 203:./matrix-util.C **** 	typename Matrix::Row::const_iterator it;
 204:./matrix-util.C **** 	//write values
 205:./matrix-util.C **** 	for (i = 0; i < n; ++i) {
 206:./matrix-util.C **** 		it = A[i].begin ();
 207:./matrix-util.C **** 		while(it != A[i].end ())
 208:./matrix-util.C **** 		{
 209:./matrix-util.C **** 			fwrite(&(it->second), sizeof(unsigned short int), 1, f);
 210:./matrix-util.C **** 			++it;
 211:./matrix-util.C **** 		}
 212:./matrix-util.C **** 	}
 213:./matrix-util.C **** 
 214:./matrix-util.C **** 	//write positions
 215:./matrix-util.C **** 	for (i = 0; i < n; ++i) {
 216:./matrix-util.C **** 		it = A[i].begin ();
 217:./matrix-util.C **** 		while(it != A[i].end ())
 218:./matrix-util.C **** 		{
 219:./matrix-util.C **** 			fwrite(&(it->first), sizeof(unsigned int), 1, f);
 220:./matrix-util.C **** 			++it;
 221:./matrix-util.C **** 		}
 222:./matrix-util.C **** 	}
 223:./matrix-util.C **** 
 224:./matrix-util.C **** 	size_t sz;
 225:./matrix-util.C **** 	//write rows' sizes
 226:./matrix-util.C **** 	for (i = 0; i < n; ++i) {
 227:./matrix-util.C **** 		sz = A[i].size ();
 228:./matrix-util.C **** 		fwrite(&sz, sizeof(unsigned int), 1, f);
 229:./matrix-util.C **** 	}
 230:./matrix-util.C **** 
 231:./matrix-util.C **** 	fclose(f);
 232:./matrix-util.C **** }
 233:./matrix-util.C **** 
 234:./matrix-util.C **** 
 235:./matrix-util.C **** //dumps the matrix content as a PBM image. null elements are represented with a white pixel
 236:./matrix-util.C **** //other elements are represented with a black pixel
 237:./matrix-util.C **** 
 238:./matrix-util.C **** template <typename Matrix>
 239:./matrix-util.C **** void MatrixUtil::dumpMatrixAsPbmImage(const Matrix& A, const char *outputFileName)
 240:./matrix-util.C **** {
 241:./matrix-util.C **** 	typename Matrix::ConstRowIterator i_A = A.rowBegin ();
 242:./matrix-util.C **** 	uint32 j, col, m, row_size;
 243:./matrix-util.C **** 	char buffer[512];
 244:./matrix-util.C **** 	unsigned char output_byte = 0;
 245:./matrix-util.C **** 	m = A.coldim ();
 246:./matrix-util.C **** 
 247:./matrix-util.C **** 	FILE *outStream = fopen(outputFileName, "wb");
 248:./matrix-util.C **** 
 249:./matrix-util.C **** 	//magic PBM header
 250:./matrix-util.C **** 	sprintf(buffer, "P4\n# matrix size(%u, %u)\n%u %u\n", A.rowdim (), A.coldim (), A.coldim (), A.row
 251:./matrix-util.C **** 	fwrite(buffer, sizeof(char), strlen(buffer), outStream);
 252:./matrix-util.C **** 
 253:./matrix-util.C **** 
 254:./matrix-util.C **** 	while(i_A != A.rowEnd())
 255:./matrix-util.C **** 	{
 256:./matrix-util.C **** 		row_size = (*i_A).size ();
 257:./matrix-util.C **** 
 258:./matrix-util.C **** 		j=0;
 259:./matrix-util.C **** 		for(col=0; col<m; ++col){
 260:./matrix-util.C **** 
 261:./matrix-util.C **** 			if(j<row_size && (*i_A)[j].first == col)
 262:./matrix-util.C **** 			{
 263:./matrix-util.C **** 				output_byte |= (1 << (7 - (col%8)));
 264:./matrix-util.C **** 				j++;
 265:./matrix-util.C **** 			}
 266:./matrix-util.C **** 			else
 267:./matrix-util.C **** 			{
 268:./matrix-util.C **** 				output_byte &= ~(1 << (7 - (col%8)));
 269:./matrix-util.C **** 			}
 270:./matrix-util.C **** 
 271:./matrix-util.C **** 			if(col%8 == 7) //flush byte every 8 cols
 272:./matrix-util.C **** 			{
 273:./matrix-util.C **** 				fwrite(&output_byte, sizeof(unsigned char), 1, outStream);
 274:./matrix-util.C **** 				output_byte = 0;
 275:./matrix-util.C **** 			}
 276:./matrix-util.C **** 		}
 277:./matrix-util.C **** 
 278:./matrix-util.C **** 		if(col%8 != 0)
 279:./matrix-util.C **** 			fwrite(&output_byte, sizeof(unsigned char), 1, outStream);
 280:./matrix-util.C **** 
 281:./matrix-util.C **** 		fflush(outStream);
 282:./matrix-util.C **** 
 283:./matrix-util.C **** 		++i_A;
 284:./matrix-util.C **** 	}
 285:./matrix-util.C **** 
 286:./matrix-util.C **** 	fclose(outStream);
 287:./matrix-util.C **** }
 288:./matrix-util.C **** 
 289:./matrix-util.C **** //given a path to a file, returns prefix|parent directory|__|file|suffix	where "|" denotes concaten
 290:./matrix-util.C **** std::string MatrixUtil::getOutputFileNameWithExtension(const char *inputfile, const char* prefix, c
 291:./matrix-util.C **** {
 292:./matrix-util.C **** 	std::string f (inputfile), pre (prefix), suff (suffix);
 293:./matrix-util.C **** 	std::string file, dir;
 294:./matrix-util.C **** 
 295:./matrix-util.C **** 	size_t found;
 296:./matrix-util.C **** 	found = f.find_last_of("/");
 297:./matrix-util.C **** 
 298:./matrix-util.C **** 	file = f.substr(found+1);
 299:./matrix-util.C **** 	dir = f.substr(0, found);
 300:./matrix-util.C **** 
 301:./matrix-util.C **** 	found = dir.find_last_of("/");
 302:./matrix-util.C **** 	dir = dir.substr(found+1);
 303:./matrix-util.C **** 
 304:./matrix-util.C **** 	std::stringstream ss;
 305:./matrix-util.C **** 	ss << prefix << dir << "__" << file << suffix;
 306:./matrix-util.C **** 
 307:./matrix-util.C **** 	return ss.str ();
 308:./matrix-util.C **** }
 309:./matrix-util.C **** 
 310:./matrix-util.C **** template <typename Matrix, typename Ring>
 311:./matrix-util.C **** bool MatrixUtil::verifyMatrixRowsAreUnitary(Ring& R, const Matrix& A, typename Ring::Element& det)
 312:./matrix-util.C **** {
 313:./matrix-util.C **** 	typename Matrix::RowIterator i_A = A.rowBegin ();
 314:./matrix-util.C **** 	R.init(det, 1);
 315:./matrix-util.C **** 
 316:./matrix-util.C **** 	while(i_A != A.rowEnd ())
 317:./matrix-util.C **** 	{
 318:./matrix-util.C **** 		if(!i_A->empty ())
 319:./matrix-util.C **** 		{
 320:./matrix-util.C **** 			R.mulin(det, i_A->front ().second);
 321:./matrix-util.C **** 		}
 322:./matrix-util.C **** 		++i_A;
 323:./matrix-util.C **** 	}
 324:./matrix-util.C **** 
 325:./matrix-util.C **** 	if(det != 1)
 326:./matrix-util.C **** 			return false;
 327:./matrix-util.C **** 		else
 328:./matrix-util.C **** 			return true;
 329:./matrix-util.C **** }
 330:./matrix-util.C **** 
 331:./matrix-util.C **** template <typename Matrix, typename Ring>
 332:./matrix-util.C **** bool MatrixUtil::verifyEveryRowEntryIsNoGreaterThanThePreceedingRows(Ring& R, const Matrix& A)
 333:./matrix-util.C **** {
 334:./matrix-util.C **** 	typename Ring::Element e;
 335:./matrix-util.C **** 	Context<Ring> ctx (R);
 336:./matrix-util.C **** 
 337:./matrix-util.C **** 	uint32 h, last_h = BLAS1::head(ctx, e, A[0]);;
 338:./matrix-util.C **** 	for (uint32 i = 1; i < A.rowdim (); ++i) {
 339:./matrix-util.C **** 		h = BLAS1::head(ctx, e, A[i]);
 340:./matrix-util.C **** 		if(h  > last_h)
 341:./matrix-util.C **** 		{
 342:./matrix-util.C **** 			return false;
 343:./matrix-util.C **** 		}
 344:./matrix-util.C **** 
 345:./matrix-util.C **** 		last_h = h;
 346:./matrix-util.C **** 	}
 347:./matrix-util.C **** 
 348:./matrix-util.C **** 	return true;
 349:./matrix-util.C **** }
 350:./matrix-util.C **** 
 351:./matrix-util.C **** 
 352:./matrix-util.C **** /* ACTIVATE this if you have the boost library */
 353:./matrix-util.C **** //verifies the equality of matrices by the hash of their rows (if rows are not in the same order, t
 354:./matrix-util.C **** /*template <typename Matrix, typename Ring>
 355:./matrix-util.C **** bool MatrixUtil::matrixEqualUsingHash(Ring& R, const Matrix& A, const Matrix& B)
 356:./matrix-util.C **** {
 357:./matrix-util.C **** 	assert(A.coldim () == B.coldim ());
 358:./matrix-util.C **** 	assert(A.rowdim () == B.rowdim ());
 359:./matrix-util.C **** 
 360:./matrix-util.C **** 	std::size_t res1 = 0, res2 = 0;
 361:./matrix-util.C **** 	typename Ring::Element arr[A.coldim ()];
 362:./matrix-util.C **** 
 363:./matrix-util.C **** 	typename Matrix::Row::const_iterator it;
 364:./matrix-util.C **** 
 365:./matrix-util.C **** 	for (uint32 i = 0; i < A.rowdim (); ++i) {
 366:./matrix-util.C **** 		memset(arr, 0, A.coldim () * sizeof(typename Ring::Element));
 367:./matrix-util.C **** 
 368:./matrix-util.C **** 		for (it = A[i].begin(); it != A[i].end (); ++it) {
 369:./matrix-util.C **** 			arr[it->first] = it->second;
 370:./matrix-util.C **** 		}
 371:./matrix-util.C **** 
 372:./matrix-util.C **** 		res1 ^= hasharray(arr, A.coldim ());
 373:./matrix-util.C **** 	}
 374:./matrix-util.C **** 
 375:./matrix-util.C **** 	for (uint32 i = 0; i < B.rowdim (); ++i) {
 376:./matrix-util.C **** 		memset(arr, 0, A.coldim () * sizeof(typename Ring::Element));
 377:./matrix-util.C **** 
 378:./matrix-util.C **** 		for (it = B[i].begin(); it != B[i].end (); ++it) {
 379:./matrix-util.C **** 			arr[it->first] = it->second;
 380:./matrix-util.C **** 		}
 381:./matrix-util.C **** 
 382:./matrix-util.C **** 		res2 ^= hasharray(arr, A.coldim ());
 383:./matrix-util.C **** 	}
 384:./matrix-util.C **** 
 385:./matrix-util.C **** 	return res1 == res2;
 386:./matrix-util.C **** }*/
 387:./matrix-util.C **** 
 388:./matrix-util.C **** /* ACTIVATE this if you have the boost library */
 389:./matrix-util.C **** /*template <typename T>
 390:./matrix-util.C **** std::size_t MatrixUtil::hasharray(const T arr[], int N)
 391:./matrix-util.C **** {
 392:./matrix-util.C **** 	 return boost::hash_range(arr, arr+N);
 393:./matrix-util.C **** }*/
 394:./matrix-util.C **** 
 395:./matrix-util.C **** template <typename Matrix>
 396:./matrix-util.C **** void MatrixUtil::invertMatrixRows(Matrix& A)
 397:./matrix-util.C **** {
 398:./matrix-util.C **** 	uint32 i, rowdim = A.rowdim ()-1;
 399:./matrix-util.C **** 	for (i = 0; i <  (rowdim+1)/2; ++i) {
 400:./matrix-util.C **** 		std::swap(A[i], A[rowdim - i]);
 401:./matrix-util.C **** 	}
 402:./matrix-util.C **** }
 403:./matrix-util.C **** 
 404:./matrix-util.C **** 
 405:./matrix-util.C **** // For each r in A: r <- entry(r)^-1 * r
 406:./matrix-util.C **** template <typename Ring, typename Matrix>
 407:./matrix-util.C **** void MatrixUtil::makeRowsUnitary(const Ring& R, Matrix& A)
 408:./matrix-util.C **** {
 409:./matrix-util.C **** 	typename Matrix::RowIterator i_A;
 410:./matrix-util.C **** 	typename Matrix::Row::iterator it;
 411:./matrix-util.C **** 	typename Ring::Element inv;
 412:./matrix-util.C **** 
 413:./matrix-util.C **** 	Context<Ring> ctx (R);
 414:./matrix-util.C **** 
 415:./matrix-util.C **** 	for (i_A = A.rowBegin (); i_A != A.rowEnd (); ++i_A)
 416:./matrix-util.C **** 	{
 417:./matrix-util.C **** 		if(i_A->empty ())
 418:./matrix-util.C **** 			continue;
 419:./matrix-util.C **** 
 420:./matrix-util.C **** 		it = i_A->begin ();
 421:./matrix-util.C **** 		if(R.inv(inv, it->second) != true)		//should be invertible
 422:./matrix-util.C **** 			throw "Non invertible value";
 423:./matrix-util.C **** 
 424:./matrix-util.C **** 		BLAS1::scal(ctx, inv, *i_A);
 425:./matrix-util.C **** 	}
 426:./matrix-util.C **** }
 427:./matrix-util.C **** 
 428:./matrix-util.C **** template <typename Ring>
 429:./matrix-util.C **** SparseMatrix<typename Ring::Element> MatrixUtil::generateIDMatrix(const Ring R, size_t size)
 430:./matrix-util.C **** {
 431:./matrix-util.C **** 	SparseMatrix<typename Ring::Element> ID (size, size);
 432:./matrix-util.C **** 	for (size_t i = 0;  i < size; ++ i) {
 433:./matrix-util.C **** 		ID[i].push_back (typename Vector<Ring>::Sparse::value_type (i, 1));
 434:./matrix-util.C **** 	}
 435:./matrix-util.C **** 
 436:./matrix-util.C **** 	return ID;
 437:./matrix-util.C **** }
 438:./matrix-util.C **** 
 439:./matrix-util.C **** template <typename Matrix>
 440:./matrix-util.C **** void MatrixUtil::freeMatrixMemory(Matrix& A)
 441:./matrix-util.C **** {
 442:./matrix-util.C **** 	typename Matrix::RowIterator i_M = A.rowBegin ();
 443:./matrix-util.C **** 
 444:./matrix-util.C **** 	while(i_M != A.rowEnd ())
 445:./matrix-util.C **** 	{
 446:./matrix-util.C **** 		(*i_M).free ();
 447:./matrix-util.C **** 		++i_M;
 448:./matrix-util.C **** 	}
 449:./matrix-util.C **** }
 450:./matrix-util.C **** 
 451:./matrix-util.C **** 
 452:./matrix-util.C **** //////////////////////////////////////////////////////////////////////////////
 453:./matrix-util.C **** //
 454:./matrix-util.C **** // process_mem_usage(double &, double &) - takes two doubles by reference,
 455:./matrix-util.C **** // attempts to read the system-dependent data for a process' virtual memory
 456:./matrix-util.C **** // size and resident set size, and return the results in KB.
 457:./matrix-util.C **** //
 458:./matrix-util.C **** // On failure, returns 0.0, 0.0
 459:./matrix-util.C **** 
 460:./matrix-util.C **** void MatrixUtil::process_mem_usage(double& vm_usage, double& resident_set)
 461:./matrix-util.C **** {
 835              		.loc	2 461 0
 836              	.Ltmp316:
 837              	# BB#0:
 838 0250 55       		pushq	%rbp
 839              	.Ltmp313:
 840 0251 4889E5   		movq	%rsp, %rbp
 841              	.Ltmp314:
 842 0254 4157     		pushq	%r15
 843 0256 4156     		pushq	%r14
 844 0258 53       		pushq	%rbx
 845 0259 4881EC28 		subq	$1064, %rsp             # imm = 0x428
 845      040000
 846              	.Ltmp315:
 847              		#DEBUG_VALUE: process_mem_usage:vm_usage <- RDI+0 # ./matrix-util.C:460:44
 848              		#DEBUG_VALUE: process_mem_usage:resident_set <- RSI+0 # ./matrix-util.C:460:62
 849 0260 4889F3   		movq	%rsi, %rbx
 850              	.Ltmp317:
 851              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 852 0263 4989FE   		movq	%rdi, %r14
 853              	.Ltmp318:
 854              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 462:./matrix-util.C ****    using std::ios_base;
 463:./matrix-util.C ****    using std::ifstream;
 464:./matrix-util.C ****    using std::string;
 465:./matrix-util.C **** 
 466:./matrix-util.C ****    vm_usage     = 0.0;
 855              		.loc	2 466 4
 856              	.Ltmp319:
 857 0266 49C70600 		movq	$0, (%r14)              # ./matrix-util.C:466:4
 857      000000
 467:./matrix-util.C ****    resident_set = 0.0;
 858              		.loc	2 467 4
 859              	.Ltmp320:
 860 026d 48C70300 		movq	$0, (%rbx)              # ./matrix-util.C:467:4
 860      000000
 861 0274 4C8DBD80 		leaq	-896(%rbp), %r15
 861      FCFFFF
 468:./matrix-util.C **** 
 469:./matrix-util.C ****    // 'file' stat seems to give the most reliable results
 470:./matrix-util.C ****    //
 471:./matrix-util.C ****    ifstream stat_stream("/proc/self/stat",ios_base::in);
 862              		.loc	2 471 56
 863              	.Ltmp321:
 864 027b BE000000 		movl	$.L.str17, %esi         # ./matrix-util.C:471:56
 864      00
 865 0280 BA080000 		movl	$8, %edx
 865      00
 866 0285 4C89FF   		movq	%r15, %rdi              # ./matrix-util.C:471:56
 867 0288 E8000000 		callq	_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode # ./matrix-util.C:471:56
 867      00
 868 028d 48C78578 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -904(%rbp)
 868      FCFFFF00 
 868      000000
 869 0298 48C78570 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -912(%rbp)
 869      FCFFFF00 
 869      000000
 870 02a3 488DB578 		leaq	-904(%rbp), %rsi
 870      FCFFFF
 871              	.Ltmp322:
 872              		#DEBUG_VALUE: basic_string:this <- RSI+0
 873 02aa 48C78568 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -920(%rbp)
 873      FCFFFF00 
 873      000000
 874 02b5 48C78560 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -928(%rbp)
 874      FCFFFF00 
 874      000000
 875 02c0 48C78558 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -936(%rbp)
 875      FCFFFF00 
 875      000000
 876 02cb 48C78550 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -944(%rbp)
 876      FCFFFF00 
 876      000000
 877 02d6 48C78548 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -952(%rbp)
 877      FCFFFF00 
 877      000000
 878 02e1 48C78540 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -960(%rbp)
 878      FCFFFF00 
 878      000000
 879 02ec 48C78538 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -968(%rbp)
 879      FCFFFF00 
 879      000000
 880 02f7 48C78530 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -976(%rbp)
 880      FCFFFF00 
 880      000000
 881 0302 48C78528 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -984(%rbp)
 881      FCFFFF00 
 881      000000
 882 030d 48C78520 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -992(%rbp)
 882      FCFFFF00 
 882      000000
 883 0318 48C78518 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -1000(%rbp)
 883      FCFFFF00 
 883      000000
 884 0323 48C78510 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -1008(%rbp)
 884      FCFFFF00 
 884      000000
 885 032e 48C78508 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -1016(%rbp)
 885      FCFFFF00 
 885      000000
 886 0339 48C78500 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -1024(%rbp)
 886      FCFFFF00 
 886      000000
 887 0344 48C785F8 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -1032(%rbp)
 887      FBFFFF00 
 887      000000
 888 034f 48C785F0 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -1040(%rbp)
 888      FBFFFF00 
 888      000000
 889 035a 48C785E8 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -1048(%rbp)
 889      FBFFFF00 
 889      000000
 890 0365 48C785E0 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -1056(%rbp)
 890      FBFFFF00 
 890      000000
 891 0370 48C785D8 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -1064(%rbp)
 891      FBFFFF00 
 891      000000
 892 037b 48C785D0 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -1072(%rbp)
 892      FBFFFF00 
 892      000000
 472:./matrix-util.C **** 
 473:./matrix-util.C ****    // dummy vars for leading entries in stat that we don't care about
 474:./matrix-util.C ****    //
 475:./matrix-util.C ****    string pid, comm, state, ppid, pgrp, session, tty_nr;
 476:./matrix-util.C ****    string tpgid, flags, minflt, cminflt, majflt, cmajflt;
 477:./matrix-util.C ****    string utime, stime, cutime, cstime, priority, nice;
 478:./matrix-util.C ****    string O, itrealvalue, starttime;
 479:./matrix-util.C **** 
 480:./matrix-util.C ****    // the two fields we want
 481:./matrix-util.C ****    //
 482:./matrix-util.C ****    unsigned long vsize;
 483:./matrix-util.C ****    long rss;
 484:./matrix-util.C **** 
 485:./matrix-util.C ****    stat_stream >> pid >> comm >> state >> ppid >> pgrp >> session >> tty_nr
 893              		.loc	2 485 4
 894              	.Ltmp323:
 895              	.Ltmp257:                               # ./matrix-util.C:485:4
 896 0386 4C89FF   		movq	%r15, %rdi              # ./matrix-util.C:485:4
 897              	.Ltmp324:
 898              		#DEBUG_VALUE: basic_string:this <- undef
 899 0389 E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 899      00
 900              	.Ltmp258:                               # ./matrix-util.C:485:4
 901              	# BB#1:
 902              	.Ltmp259:                               # ./matrix-util.C:485:4
 903              	.Ltmp325:
 904              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 905              	.Ltmp326:
 906              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 907 038e 488DB570 		leaq	-912(%rbp), %rsi
 907      FCFFFF
 908 0395 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 909 0398 E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 909      00
 910              	.Ltmp260:                               # ./matrix-util.C:485:4
 911              	# BB#2:
 912              	.Ltmp261:                               # ./matrix-util.C:485:4
 913              	.Ltmp327:
 914              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 915              	.Ltmp328:
 916              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 917 039d 488DB568 		leaq	-920(%rbp), %rsi
 917      FCFFFF
 918 03a4 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 919 03a7 E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 919      00
 920              	.Ltmp262:                               # ./matrix-util.C:485:4
 921              	# BB#3:
 922              	.Ltmp263:                               # ./matrix-util.C:485:4
 923              	.Ltmp329:
 924              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 925              	.Ltmp330:
 926              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 927 03ac 488DB560 		leaq	-928(%rbp), %rsi
 927      FCFFFF
 928 03b3 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 929 03b6 E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 929      00
 930              	.Ltmp264:                               # ./matrix-util.C:485:4
 931              	# BB#4:
 932              	.Ltmp265:                               # ./matrix-util.C:485:4
 933              	.Ltmp331:
 934              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 935              	.Ltmp332:
 936              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 937 03bb 488DB558 		leaq	-936(%rbp), %rsi
 937      FCFFFF
 938 03c2 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 939 03c5 E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 939      00
 940              	.Ltmp266:                               # ./matrix-util.C:485:4
 941              	# BB#5:
 942              	.Ltmp267:                               # ./matrix-util.C:485:4
 943              	.Ltmp333:
 944              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 945              	.Ltmp334:
 946              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 947 03ca 488DB550 		leaq	-944(%rbp), %rsi
 947      FCFFFF
 948 03d1 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 949 03d4 E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 949      00
 950              	.Ltmp268:                               # ./matrix-util.C:485:4
 951              	# BB#6:
 952              	.Ltmp269:                               # ./matrix-util.C:485:4
 953              	.Ltmp335:
 954              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 955              	.Ltmp336:
 956              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 957 03d9 488DB548 		leaq	-952(%rbp), %rsi
 957      FCFFFF
 958 03e0 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 959 03e3 E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 959      00
 960              	.Ltmp270:                               # ./matrix-util.C:485:4
 961              	# BB#7:
 962              	.Ltmp271:                               # ./matrix-util.C:485:4
 963              	.Ltmp337:
 964              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 965              	.Ltmp338:
 966              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 967 03e8 488DB540 		leaq	-960(%rbp), %rsi
 967      FCFFFF
 968 03ef 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 969 03f2 E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 969      00
 970              	.Ltmp272:                               # ./matrix-util.C:485:4
 971              	# BB#8:
 972              	.Ltmp273:                               # ./matrix-util.C:485:4
 973              	.Ltmp339:
 974              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 975              	.Ltmp340:
 976              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 977 03f7 488DB538 		leaq	-968(%rbp), %rsi
 977      FCFFFF
 978 03fe 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 979 0401 E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 979      00
 980              	.Ltmp274:                               # ./matrix-util.C:485:4
 981              	# BB#9:
 982              	.Ltmp275:                               # ./matrix-util.C:485:4
 983              	.Ltmp341:
 984              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 985              	.Ltmp342:
 986              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 987 0406 488DB530 		leaq	-976(%rbp), %rsi
 987      FCFFFF
 988 040d 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 989 0410 E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 989      00
 990              	.Ltmp276:                               # ./matrix-util.C:485:4
 991              	# BB#10:
 992              	.Ltmp277:                               # ./matrix-util.C:485:4
 993              	.Ltmp343:
 994              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 995              	.Ltmp344:
 996              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 997 0415 488DB528 		leaq	-984(%rbp), %rsi
 997      FCFFFF
 998 041c 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 999 041f E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 999      00
 1000              	.Ltmp278:                               # ./matrix-util.C:485:4
 1001              	# BB#11:
 1002              	.Ltmp279:                               # ./matrix-util.C:485:4
 1003              	.Ltmp345:
 1004              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 1005              	.Ltmp346:
 1006              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 1007 0424 488DB520 		leaq	-992(%rbp), %rsi
 1007      FCFFFF
 1008 042b 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 1009 042e E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 1009      00
 1010              	.Ltmp280:                               # ./matrix-util.C:485:4
 1011              	# BB#12:
 1012              	.Ltmp281:                               # ./matrix-util.C:485:4
 1013              	.Ltmp347:
 1014              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 1015              	.Ltmp348:
 1016              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 1017 0433 488DB518 		leaq	-1000(%rbp), %rsi
 1017      FCFFFF
 1018 043a 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 1019 043d E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 1019      00
 1020              	.Ltmp282:                               # ./matrix-util.C:485:4
 1021              	# BB#13:
 1022              	.Ltmp283:                               # ./matrix-util.C:485:4
 1023              	.Ltmp349:
 1024              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 1025              	.Ltmp350:
 1026              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 1027 0442 488DB510 		leaq	-1008(%rbp), %rsi
 1027      FCFFFF
 1028 0449 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 1029 044c E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 1029      00
 1030              	.Ltmp284:                               # ./matrix-util.C:485:4
 1031              	# BB#14:
 1032              	.Ltmp285:                               # ./matrix-util.C:485:4
 1033              	.Ltmp351:
 1034              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 1035              	.Ltmp352:
 1036              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 1037 0451 488DB508 		leaq	-1016(%rbp), %rsi
 1037      FCFFFF
 1038 0458 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 1039 045b E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 1039      00
 1040              	.Ltmp286:                               # ./matrix-util.C:485:4
 1041              	# BB#15:
 1042              	.Ltmp287:                               # ./matrix-util.C:485:4
 1043              	.Ltmp353:
 1044              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 1045              	.Ltmp354:
 1046              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 1047 0460 488DB500 		leaq	-1024(%rbp), %rsi
 1047      FCFFFF
 1048 0467 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 1049 046a E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 1049      00
 1050              	.Ltmp288:                               # ./matrix-util.C:485:4
 1051              	# BB#16:
 1052              	.Ltmp289:                               # ./matrix-util.C:485:4
 1053              	.Ltmp355:
 1054              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 1055              	.Ltmp356:
 1056              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 1057 046f 488DB5F8 		leaq	-1032(%rbp), %rsi
 1057      FBFFFF
 1058 0476 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 1059 0479 E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 1059      00
 1060              	.Ltmp290:                               # ./matrix-util.C:485:4
 1061              	# BB#17:
 1062              	.Ltmp291:                               # ./matrix-util.C:485:4
 1063              	.Ltmp357:
 1064              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 1065              	.Ltmp358:
 1066              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 1067 047e 488DB5F0 		leaq	-1040(%rbp), %rsi
 1067      FBFFFF
 1068 0485 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 1069 0488 E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 1069      00
 1070              	.Ltmp292:                               # ./matrix-util.C:485:4
 1071              	# BB#18:
 1072              	.Ltmp293:                               # ./matrix-util.C:485:4
 1073              	.Ltmp359:
 1074              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 1075              	.Ltmp360:
 1076              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 1077 048d 488DB5E8 		leaq	-1048(%rbp), %rsi
 1077      FBFFFF
 1078 0494 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 1079 0497 E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 1079      00
 1080              	.Ltmp294:                               # ./matrix-util.C:485:4
 1081              	# BB#19:
 1082              	.Ltmp295:                               # ./matrix-util.C:485:4
 1083              	.Ltmp361:
 1084              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 1085              	.Ltmp362:
 1086              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 1087 049c 488DB5E0 		leaq	-1056(%rbp), %rsi
 1087      FBFFFF
 1088 04a3 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 1089 04a6 E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 1089      00
 1090              	.Ltmp296:                               # ./matrix-util.C:485:4
 1091              	# BB#20:
 1092              	.Ltmp297:                               # ./matrix-util.C:485:4
 1093              	.Ltmp363:
 1094              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 1095              	.Ltmp364:
 1096              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 1097 04ab 488DB5D8 		leaq	-1064(%rbp), %rsi
 1097      FBFFFF
 1098 04b2 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 1099 04b5 E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 1099      00
 1100              	.Ltmp298:                               # ./matrix-util.C:485:4
 1101              	# BB#21:
 1102              	.Ltmp299:                               # ./matrix-util.C:485:4
 1103              	.Ltmp365:
 1104              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 1105              	.Ltmp366:
 1106              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 1107 04ba 488DB5D0 		leaq	-1072(%rbp), %rsi
 1107      FBFFFF
 1108 04c1 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:485:4
 1109 04c4 E8000000 		callq	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E # ./matrix-util.C
 1109      00
 1110              	.Ltmp300:                               # ./matrix-util.C:485:4
 1111              	# BB#22:
 1112              	.Ltmp301:
 1113              	.Ltmp367:
 1114              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 1115              	.Ltmp368:
 1116              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
   1:/usr/include/c++/4.6.3/istream **** // Input streams -*- C++ -*-
   2:/usr/include/c++/4.6.3/istream **** 
   3:/usr/include/c++/4.6.3/istream **** // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
   4:/usr/include/c++/4.6.3/istream **** // 2006, 2007, 2008, 2009, 2010, 2011
   5:/usr/include/c++/4.6.3/istream **** // Free Software Foundation, Inc.
   6:/usr/include/c++/4.6.3/istream **** //
   7:/usr/include/c++/4.6.3/istream **** // This file is part of the GNU ISO C++ Library.  This library is free
   8:/usr/include/c++/4.6.3/istream **** // software; you can redistribute it and/or modify it under the
   9:/usr/include/c++/4.6.3/istream **** // terms of the GNU General Public License as published by the
  10:/usr/include/c++/4.6.3/istream **** // Free Software Foundation; either version 3, or (at your option)
  11:/usr/include/c++/4.6.3/istream **** // any later version.
  12:/usr/include/c++/4.6.3/istream **** 
  13:/usr/include/c++/4.6.3/istream **** // This library is distributed in the hope that it will be useful,
  14:/usr/include/c++/4.6.3/istream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:/usr/include/c++/4.6.3/istream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:/usr/include/c++/4.6.3/istream **** // GNU General Public License for more details.
  17:/usr/include/c++/4.6.3/istream **** 
  18:/usr/include/c++/4.6.3/istream **** // Under Section 7 of GPL version 3, you are granted additional
  19:/usr/include/c++/4.6.3/istream **** // permissions described in the GCC Runtime Library Exception, version
  20:/usr/include/c++/4.6.3/istream **** // 3.1, as published by the Free Software Foundation.
  21:/usr/include/c++/4.6.3/istream **** 
  22:/usr/include/c++/4.6.3/istream **** // You should have received a copy of the GNU General Public License and
  23:/usr/include/c++/4.6.3/istream **** // a copy of the GCC Runtime Library Exception along with this program;
  24:/usr/include/c++/4.6.3/istream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  25:/usr/include/c++/4.6.3/istream **** // <http://www.gnu.org/licenses/>.
  26:/usr/include/c++/4.6.3/istream **** 
  27:/usr/include/c++/4.6.3/istream **** //
  28:/usr/include/c++/4.6.3/istream **** // ISO C++ 14882: 27.6.1  Input streams
  29:/usr/include/c++/4.6.3/istream **** //
  30:/usr/include/c++/4.6.3/istream **** 
  31:/usr/include/c++/4.6.3/istream **** /** @file include/istream
  32:/usr/include/c++/4.6.3/istream ****  *  This is a Standard C++ Library header.
  33:/usr/include/c++/4.6.3/istream ****  */
  34:/usr/include/c++/4.6.3/istream **** 
  35:/usr/include/c++/4.6.3/istream **** #ifndef _GLIBCXX_ISTREAM
  36:/usr/include/c++/4.6.3/istream **** #define _GLIBCXX_ISTREAM 1
  37:/usr/include/c++/4.6.3/istream **** 
  38:/usr/include/c++/4.6.3/istream **** #pragma GCC system_header
  39:/usr/include/c++/4.6.3/istream **** 
  40:/usr/include/c++/4.6.3/istream **** #include <ios>
  41:/usr/include/c++/4.6.3/istream **** #include <ostream>
  42:/usr/include/c++/4.6.3/istream **** 
  43:/usr/include/c++/4.6.3/istream **** namespace std _GLIBCXX_VISIBILITY(default)
  44:/usr/include/c++/4.6.3/istream **** {
  45:/usr/include/c++/4.6.3/istream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  46:/usr/include/c++/4.6.3/istream **** 
  47:/usr/include/c++/4.6.3/istream ****   // [27.6.1.1] Template class basic_istream
  48:/usr/include/c++/4.6.3/istream ****   /**
  49:/usr/include/c++/4.6.3/istream ****    *  @brief  Controlling input.
  50:/usr/include/c++/4.6.3/istream ****    *  @ingroup io
  51:/usr/include/c++/4.6.3/istream ****    *
  52:/usr/include/c++/4.6.3/istream ****    *  This is the base class for all input streams.  It provides text
  53:/usr/include/c++/4.6.3/istream ****    *  formatting of all builtin types, and communicates with any class
  54:/usr/include/c++/4.6.3/istream ****    *  derived from basic_streambuf to do the actual input.
  55:/usr/include/c++/4.6.3/istream ****   */
  56:/usr/include/c++/4.6.3/istream ****   template<typename _CharT, typename _Traits>
  57:/usr/include/c++/4.6.3/istream ****     class basic_istream : virtual public basic_ios<_CharT, _Traits>
  58:/usr/include/c++/4.6.3/istream ****     {
  59:/usr/include/c++/4.6.3/istream ****     public:
  60:/usr/include/c++/4.6.3/istream ****       // Types (inherited from basic_ios (27.4.4)):
  61:/usr/include/c++/4.6.3/istream ****       typedef _CharT                     		char_type;
  62:/usr/include/c++/4.6.3/istream ****       typedef typename _Traits::int_type 		int_type;
  63:/usr/include/c++/4.6.3/istream ****       typedef typename _Traits::pos_type 		pos_type;
  64:/usr/include/c++/4.6.3/istream ****       typedef typename _Traits::off_type 		off_type;
  65:/usr/include/c++/4.6.3/istream ****       typedef _Traits                    		traits_type;
  66:/usr/include/c++/4.6.3/istream ****       
  67:/usr/include/c++/4.6.3/istream ****       // Non-standard Types:
  68:/usr/include/c++/4.6.3/istream ****       typedef basic_streambuf<_CharT, _Traits> 		__streambuf_type;
  69:/usr/include/c++/4.6.3/istream ****       typedef basic_ios<_CharT, _Traits>		__ios_type;
  70:/usr/include/c++/4.6.3/istream ****       typedef basic_istream<_CharT, _Traits>		__istream_type;
  71:/usr/include/c++/4.6.3/istream ****       typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >        
  72:/usr/include/c++/4.6.3/istream ****  							__num_get_type;
  73:/usr/include/c++/4.6.3/istream ****       typedef ctype<_CharT>           			__ctype_type;
  74:/usr/include/c++/4.6.3/istream **** 
  75:/usr/include/c++/4.6.3/istream ****     protected:
  76:/usr/include/c++/4.6.3/istream ****       // Data Members:
  77:/usr/include/c++/4.6.3/istream ****       /**
  78:/usr/include/c++/4.6.3/istream ****        *  The number of characters extracted in the previous unformatted
  79:/usr/include/c++/4.6.3/istream ****        *  function; see gcount().
  80:/usr/include/c++/4.6.3/istream ****       */
  81:/usr/include/c++/4.6.3/istream ****       streamsize 		_M_gcount;
  82:/usr/include/c++/4.6.3/istream **** 
  83:/usr/include/c++/4.6.3/istream ****     public:
  84:/usr/include/c++/4.6.3/istream ****       // [27.6.1.1.1] constructor/destructor
  85:/usr/include/c++/4.6.3/istream ****       /**
  86:/usr/include/c++/4.6.3/istream ****        *  @brief  Base constructor.
  87:/usr/include/c++/4.6.3/istream ****        *
  88:/usr/include/c++/4.6.3/istream ****        *  This ctor is almost never called by the user directly, rather from
  89:/usr/include/c++/4.6.3/istream ****        *  derived classes' initialization lists, which pass a pointer to
  90:/usr/include/c++/4.6.3/istream ****        *  their own stream buffer.
  91:/usr/include/c++/4.6.3/istream ****       */
  92:/usr/include/c++/4.6.3/istream ****       explicit
  93:/usr/include/c++/4.6.3/istream ****       basic_istream(__streambuf_type* __sb)
  94:/usr/include/c++/4.6.3/istream ****       : _M_gcount(streamsize(0))
  95:/usr/include/c++/4.6.3/istream ****       { this->init(__sb); }
  96:/usr/include/c++/4.6.3/istream **** 
  97:/usr/include/c++/4.6.3/istream ****       /**
  98:/usr/include/c++/4.6.3/istream ****        *  @brief  Base destructor.
  99:/usr/include/c++/4.6.3/istream ****        *
 100:/usr/include/c++/4.6.3/istream ****        *  This does very little apart from providing a virtual base dtor.
 101:/usr/include/c++/4.6.3/istream ****       */
 102:/usr/include/c++/4.6.3/istream ****       virtual 
 103:/usr/include/c++/4.6.3/istream ****       ~basic_istream() 
 104:/usr/include/c++/4.6.3/istream ****       { _M_gcount = streamsize(0); }
 105:/usr/include/c++/4.6.3/istream **** 
 106:/usr/include/c++/4.6.3/istream ****       // [27.6.1.1.2] prefix/suffix
 107:/usr/include/c++/4.6.3/istream ****       class sentry;
 108:/usr/include/c++/4.6.3/istream ****       friend class sentry;
 109:/usr/include/c++/4.6.3/istream **** 
 110:/usr/include/c++/4.6.3/istream ****       // [27.6.1.2] formatted input
 111:/usr/include/c++/4.6.3/istream ****       // [27.6.1.2.3] basic_istream::operator>>
 112:/usr/include/c++/4.6.3/istream ****       //@{
 113:/usr/include/c++/4.6.3/istream ****       /**
 114:/usr/include/c++/4.6.3/istream ****        *  @brief  Interface for manipulators.
 115:/usr/include/c++/4.6.3/istream ****        *
 116:/usr/include/c++/4.6.3/istream ****        *  Manipulators such as @c std::ws and @c std::dec use these
 117:/usr/include/c++/4.6.3/istream ****        *  functions in constructs like 
 118:/usr/include/c++/4.6.3/istream ****        *  <code>std::cin >> std::ws</code>. 
 119:/usr/include/c++/4.6.3/istream ****        *  For more information, see the iomanip header.
 120:/usr/include/c++/4.6.3/istream ****       */
 121:/usr/include/c++/4.6.3/istream ****       __istream_type&
 122:/usr/include/c++/4.6.3/istream ****       operator>>(__istream_type& (*__pf)(__istream_type&))
 123:/usr/include/c++/4.6.3/istream ****       { return __pf(*this); }
 124:/usr/include/c++/4.6.3/istream **** 
 125:/usr/include/c++/4.6.3/istream ****       __istream_type&
 126:/usr/include/c++/4.6.3/istream ****       operator>>(__ios_type& (*__pf)(__ios_type&))
 127:/usr/include/c++/4.6.3/istream ****       { 
 128:/usr/include/c++/4.6.3/istream **** 	__pf(*this);
 129:/usr/include/c++/4.6.3/istream **** 	return *this;
 130:/usr/include/c++/4.6.3/istream ****       }
 131:/usr/include/c++/4.6.3/istream **** 
 132:/usr/include/c++/4.6.3/istream ****       __istream_type&
 133:/usr/include/c++/4.6.3/istream ****       operator>>(ios_base& (*__pf)(ios_base&))
 134:/usr/include/c++/4.6.3/istream ****       {
 135:/usr/include/c++/4.6.3/istream **** 	__pf(*this);
 136:/usr/include/c++/4.6.3/istream **** 	return *this;
 137:/usr/include/c++/4.6.3/istream ****       }
 138:/usr/include/c++/4.6.3/istream ****       //@}
 139:/usr/include/c++/4.6.3/istream ****       
 140:/usr/include/c++/4.6.3/istream ****       // [27.6.1.2.2] arithmetic extractors
 141:/usr/include/c++/4.6.3/istream ****       /**
 142:/usr/include/c++/4.6.3/istream ****        *  @name Arithmetic Extractors
 143:/usr/include/c++/4.6.3/istream ****        *
 144:/usr/include/c++/4.6.3/istream ****        *  All the @c operator>> functions (aka <em>formatted input
 145:/usr/include/c++/4.6.3/istream ****        *  functions</em>) have some common behavior.  Each starts by
 146:/usr/include/c++/4.6.3/istream ****        *  constructing a temporary object of type std::basic_istream::sentry
 147:/usr/include/c++/4.6.3/istream ****        *  with the second argument (noskipws) set to false.  This has several
 148:/usr/include/c++/4.6.3/istream ****        *  effects, concluding with the setting of a status flag; see the
 149:/usr/include/c++/4.6.3/istream ****        *  sentry documentation for more.
 150:/usr/include/c++/4.6.3/istream ****        *
 151:/usr/include/c++/4.6.3/istream ****        *  If the sentry status is good, the function tries to extract
 152:/usr/include/c++/4.6.3/istream ****        *  whatever data is appropriate for the type of the argument.
 153:/usr/include/c++/4.6.3/istream ****        *
 154:/usr/include/c++/4.6.3/istream ****        *  If an exception is thrown during extraction, ios_base::badbit
 155:/usr/include/c++/4.6.3/istream ****        *  will be turned on in the stream's error state without causing an
 156:/usr/include/c++/4.6.3/istream ****        *  ios_base::failure to be thrown.  The original exception will then
 157:/usr/include/c++/4.6.3/istream ****        *  be rethrown.
 158:/usr/include/c++/4.6.3/istream ****       */
 159:/usr/include/c++/4.6.3/istream ****       //@{
 160:/usr/include/c++/4.6.3/istream ****       /**
 161:/usr/include/c++/4.6.3/istream ****        *  @brief  Basic arithmetic extractors
 162:/usr/include/c++/4.6.3/istream ****        *  @param  A variable of builtin type.
 163:/usr/include/c++/4.6.3/istream ****        *  @return  @c *this if successful
 164:/usr/include/c++/4.6.3/istream ****        *
 165:/usr/include/c++/4.6.3/istream ****        *  These functions use the stream's current locale (specifically, the
 166:/usr/include/c++/4.6.3/istream ****        *  @c num_get facet) to parse the input data.
 167:/usr/include/c++/4.6.3/istream ****       */
 168:/usr/include/c++/4.6.3/istream ****       __istream_type& 
 169:/usr/include/c++/4.6.3/istream ****       operator>>(bool& __n)
 170:/usr/include/c++/4.6.3/istream ****       { return _M_extract(__n); }
 171:/usr/include/c++/4.6.3/istream ****       
 172:/usr/include/c++/4.6.3/istream ****       __istream_type& 
 173:/usr/include/c++/4.6.3/istream ****       operator>>(short& __n);
 174:/usr/include/c++/4.6.3/istream ****       
 175:/usr/include/c++/4.6.3/istream ****       __istream_type& 
 176:/usr/include/c++/4.6.3/istream ****       operator>>(unsigned short& __n)
 177:/usr/include/c++/4.6.3/istream ****       { return _M_extract(__n); }
 178:/usr/include/c++/4.6.3/istream **** 
 179:/usr/include/c++/4.6.3/istream ****       __istream_type& 
 180:/usr/include/c++/4.6.3/istream ****       operator>>(int& __n);
 181:/usr/include/c++/4.6.3/istream ****     
 182:/usr/include/c++/4.6.3/istream ****       __istream_type& 
 183:/usr/include/c++/4.6.3/istream ****       operator>>(unsigned int& __n)
 184:/usr/include/c++/4.6.3/istream ****       { return _M_extract(__n); }
 185:/usr/include/c++/4.6.3/istream **** 
 186:/usr/include/c++/4.6.3/istream ****       __istream_type& 
 187:/usr/include/c++/4.6.3/istream ****       operator>>(long& __n)
 188:/usr/include/c++/4.6.3/istream ****       { return _M_extract(__n); }
 189:/usr/include/c++/4.6.3/istream ****       
 190:/usr/include/c++/4.6.3/istream ****       __istream_type& 
 1117              		.loc	20 190 7
 1118              	.Ltmp369:
 1119              		#DEBUG_VALUE: operator>>:this <- RAX+0 # /usr/include/c++/4.6.3/istream:190:7[ ./matrix-util.C:485
 1120 04c9 488DB5C8 		leaq	-1080(%rbp), %rsi
 1120      FBFFFF
 1121              		.loc	20 190 33
 1122              	.Ltmp370:
 1123              		#DEBUG_VALUE: operator>>:__n <- RSI+0 # /usr/include/c++/4.6.3/istream:190:33[ ./matrix-util.C:485
 1124 04d0 4889C7   		movq	%rax, %rdi
 1125              	.Ltmp371:
 1126              		#DEBUG_VALUE: operator>>:__n <- undef
 1127              	.Ltmp372:
 1128              		#DEBUG_VALUE: operator>>:this <- undef
 1129 04d3 E8000000 		callq	_ZNSi10_M_extractImEERSiRT_
 1129      00
 1130              	.Ltmp302:
 1131              	# BB#23:                                # %_ZNSirsERm.exit
 1132              	.Ltmp303:
 1133              	.Ltmp373:
 1134              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 1135              	.Ltmp374:
 1136              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 186:/usr/include/c++/4.6.3/istream ****       __istream_type& 
 1137              		.loc	20 186 7
 1138              	.Ltmp375:
 1139              		#DEBUG_VALUE: operator>>:this <- RAX+0 # /usr/include/c++/4.6.3/istream:186:7[ ./matrix-util.C:485
 1140 04d8 488DB5C0 		leaq	-1088(%rbp), %rsi
 1140      FBFFFF
 186:/usr/include/c++/4.6.3/istream ****       __istream_type& 
 1141              		.loc	20 186 24
 1142              	.Ltmp376:
 1143              		#DEBUG_VALUE: operator>>:__n <- RSI+0 # /usr/include/c++/4.6.3/istream:186:24[ ./matrix-util.C:485
 1144 04df 4889C7   		movq	%rax, %rdi
 1145              	.Ltmp377:
 1146              		#DEBUG_VALUE: operator>>:__n <- undef
 1147              	.Ltmp378:
 1148              		#DEBUG_VALUE: operator>>:this <- undef
 1149 04e2 E8000000 		callq	_ZNSi10_M_extractIlEERSiRT_
 1149      00
 1150              	.Ltmp304:
 1151              	# BB#24:                                # %_ZNSirsERl.exit
 1152              	.Ltmp305:
 1153              	.Ltmp379:
 1154              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 1155              	.Ltmp380:
 1156              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
   1:/usr/include/c++/4.6.3/fstream **** // File based streams -*- C++ -*-
   2:/usr/include/c++/4.6.3/fstream **** 
   3:/usr/include/c++/4.6.3/fstream **** // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
   4:/usr/include/c++/4.6.3/fstream **** // 2006, 2007, 2008, 2009, 2010, 2011
   5:/usr/include/c++/4.6.3/fstream **** // Free Software Foundation, Inc.
   6:/usr/include/c++/4.6.3/fstream **** //
   7:/usr/include/c++/4.6.3/fstream **** // This file is part of the GNU ISO C++ Library.  This library is free
   8:/usr/include/c++/4.6.3/fstream **** // software; you can redistribute it and/or modify it under the
   9:/usr/include/c++/4.6.3/fstream **** // terms of the GNU General Public License as published by the
  10:/usr/include/c++/4.6.3/fstream **** // Free Software Foundation; either version 3, or (at your option)
  11:/usr/include/c++/4.6.3/fstream **** // any later version.
  12:/usr/include/c++/4.6.3/fstream **** 
  13:/usr/include/c++/4.6.3/fstream **** // This library is distributed in the hope that it will be useful,
  14:/usr/include/c++/4.6.3/fstream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:/usr/include/c++/4.6.3/fstream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:/usr/include/c++/4.6.3/fstream **** // GNU General Public License for more details.
  17:/usr/include/c++/4.6.3/fstream **** 
  18:/usr/include/c++/4.6.3/fstream **** // Under Section 7 of GPL version 3, you are granted additional
  19:/usr/include/c++/4.6.3/fstream **** // permissions described in the GCC Runtime Library Exception, version
  20:/usr/include/c++/4.6.3/fstream **** // 3.1, as published by the Free Software Foundation.
  21:/usr/include/c++/4.6.3/fstream **** 
  22:/usr/include/c++/4.6.3/fstream **** // You should have received a copy of the GNU General Public License and
  23:/usr/include/c++/4.6.3/fstream **** // a copy of the GCC Runtime Library Exception along with this program;
  24:/usr/include/c++/4.6.3/fstream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  25:/usr/include/c++/4.6.3/fstream **** // <http://www.gnu.org/licenses/>.
  26:/usr/include/c++/4.6.3/fstream **** 
  27:/usr/include/c++/4.6.3/fstream **** /** @file include/fstream
  28:/usr/include/c++/4.6.3/fstream ****  *  This is a Standard C++ Library header.
  29:/usr/include/c++/4.6.3/fstream ****  */
  30:/usr/include/c++/4.6.3/fstream **** 
  31:/usr/include/c++/4.6.3/fstream **** //
  32:/usr/include/c++/4.6.3/fstream **** // ISO C++ 14882: 27.8  File-based streams
  33:/usr/include/c++/4.6.3/fstream **** //
  34:/usr/include/c++/4.6.3/fstream **** 
  35:/usr/include/c++/4.6.3/fstream **** #ifndef _GLIBCXX_FSTREAM
  36:/usr/include/c++/4.6.3/fstream **** #define _GLIBCXX_FSTREAM 1
  37:/usr/include/c++/4.6.3/fstream **** 
  38:/usr/include/c++/4.6.3/fstream **** #pragma GCC system_header
  39:/usr/include/c++/4.6.3/fstream **** 
  40:/usr/include/c++/4.6.3/fstream **** #include <istream>
  41:/usr/include/c++/4.6.3/fstream **** #include <ostream>
  42:/usr/include/c++/4.6.3/fstream **** #include <bits/codecvt.h>
  43:/usr/include/c++/4.6.3/fstream **** #include <cstdio>             // For BUFSIZ
  44:/usr/include/c++/4.6.3/fstream **** #include <bits/basic_file.h>  // For __basic_file, __c_lock
  45:/usr/include/c++/4.6.3/fstream **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
  46:/usr/include/c++/4.6.3/fstream **** #include <string>             // For std::string overloads.
  47:/usr/include/c++/4.6.3/fstream **** #endif
  48:/usr/include/c++/4.6.3/fstream **** 
  49:/usr/include/c++/4.6.3/fstream **** namespace std _GLIBCXX_VISIBILITY(default)
  50:/usr/include/c++/4.6.3/fstream **** {
  51:/usr/include/c++/4.6.3/fstream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  52:/usr/include/c++/4.6.3/fstream **** 
  53:/usr/include/c++/4.6.3/fstream ****   // [27.8.1.1] template class basic_filebuf
  54:/usr/include/c++/4.6.3/fstream ****   /**
  55:/usr/include/c++/4.6.3/fstream ****    *  @brief  The actual work of input and output (for files).
  56:/usr/include/c++/4.6.3/fstream ****    *  @ingroup io
  57:/usr/include/c++/4.6.3/fstream ****    *
  58:/usr/include/c++/4.6.3/fstream ****    *  This class associates both its input and output sequence with an
  59:/usr/include/c++/4.6.3/fstream ****    *  external disk file, and maintains a joint file position for both
  60:/usr/include/c++/4.6.3/fstream ****    *  sequences.  Many of its semantics are described in terms of similar
  61:/usr/include/c++/4.6.3/fstream ****    *  behavior in the Standard C Library's @c FILE streams.
  62:/usr/include/c++/4.6.3/fstream ****    */
  63:/usr/include/c++/4.6.3/fstream ****   // Requirements on traits_type, specific to this class:
  64:/usr/include/c++/4.6.3/fstream ****   // traits_type::pos_type must be fpos<traits_type::state_type>
  65:/usr/include/c++/4.6.3/fstream ****   // traits_type::off_type must be streamoff
  66:/usr/include/c++/4.6.3/fstream ****   // traits_type::state_type must be Assignable and DefaultConstructible,
  67:/usr/include/c++/4.6.3/fstream ****   // and traits_type::state_type() must be the initial state for codecvt.
  68:/usr/include/c++/4.6.3/fstream ****   template<typename _CharT, typename _Traits>
  69:/usr/include/c++/4.6.3/fstream ****     class basic_filebuf : public basic_streambuf<_CharT, _Traits>
  70:/usr/include/c++/4.6.3/fstream ****     {
  71:/usr/include/c++/4.6.3/fstream ****     public:
  72:/usr/include/c++/4.6.3/fstream ****       // Types:
  73:/usr/include/c++/4.6.3/fstream ****       typedef _CharT                     	        char_type;
  74:/usr/include/c++/4.6.3/fstream ****       typedef _Traits                    	        traits_type;
  75:/usr/include/c++/4.6.3/fstream ****       typedef typename traits_type::int_type 		int_type;
  76:/usr/include/c++/4.6.3/fstream ****       typedef typename traits_type::pos_type 		pos_type;
  77:/usr/include/c++/4.6.3/fstream ****       typedef typename traits_type::off_type 		off_type;
  78:/usr/include/c++/4.6.3/fstream **** 
  79:/usr/include/c++/4.6.3/fstream ****       typedef basic_streambuf<char_type, traits_type>  	__streambuf_type;
  80:/usr/include/c++/4.6.3/fstream ****       typedef basic_filebuf<char_type, traits_type>     __filebuf_type;
  81:/usr/include/c++/4.6.3/fstream ****       typedef __basic_file<char>		        __file_type;
  82:/usr/include/c++/4.6.3/fstream ****       typedef typename traits_type::state_type          __state_type;
  83:/usr/include/c++/4.6.3/fstream ****       typedef codecvt<char_type, char, __state_type>    __codecvt_type;
  84:/usr/include/c++/4.6.3/fstream **** 
  85:/usr/include/c++/4.6.3/fstream ****       friend class ios_base; // For sync_with_stdio.
  86:/usr/include/c++/4.6.3/fstream **** 
  87:/usr/include/c++/4.6.3/fstream ****     protected:
  88:/usr/include/c++/4.6.3/fstream ****       // Data Members:
  89:/usr/include/c++/4.6.3/fstream ****       // MT lock inherited from libio or other low-level io library.
  90:/usr/include/c++/4.6.3/fstream ****       __c_lock          	_M_lock;
  91:/usr/include/c++/4.6.3/fstream **** 
  92:/usr/include/c++/4.6.3/fstream ****       // External buffer.
  93:/usr/include/c++/4.6.3/fstream ****       __file_type 		_M_file;
  94:/usr/include/c++/4.6.3/fstream **** 
  95:/usr/include/c++/4.6.3/fstream ****       /// Place to stash in || out || in | out settings for current filebuf.
  96:/usr/include/c++/4.6.3/fstream ****       ios_base::openmode 	_M_mode;
  97:/usr/include/c++/4.6.3/fstream **** 
  98:/usr/include/c++/4.6.3/fstream ****       // Beginning state type for codecvt.
  99:/usr/include/c++/4.6.3/fstream ****       __state_type 		_M_state_beg;
 100:/usr/include/c++/4.6.3/fstream **** 
 101:/usr/include/c++/4.6.3/fstream ****       // During output, the state that corresponds to pptr(),
 102:/usr/include/c++/4.6.3/fstream ****       // during input, the state that corresponds to egptr() and
 103:/usr/include/c++/4.6.3/fstream ****       // _M_ext_next.
 104:/usr/include/c++/4.6.3/fstream ****       __state_type		_M_state_cur;
 105:/usr/include/c++/4.6.3/fstream **** 
 106:/usr/include/c++/4.6.3/fstream ****       // Not used for output. During input, the state that corresponds
 107:/usr/include/c++/4.6.3/fstream ****       // to eback() and _M_ext_buf.
 108:/usr/include/c++/4.6.3/fstream ****       __state_type		_M_state_last;
 109:/usr/include/c++/4.6.3/fstream **** 
 110:/usr/include/c++/4.6.3/fstream ****       /// Pointer to the beginning of internal buffer.
 111:/usr/include/c++/4.6.3/fstream ****       char_type*		_M_buf; 	
 112:/usr/include/c++/4.6.3/fstream **** 
 113:/usr/include/c++/4.6.3/fstream ****       /**
 114:/usr/include/c++/4.6.3/fstream ****        *  Actual size of internal buffer. This number is equal to the size
 115:/usr/include/c++/4.6.3/fstream ****        *  of the put area + 1 position, reserved for the overflow char of
 116:/usr/include/c++/4.6.3/fstream ****        *  a full area.
 117:/usr/include/c++/4.6.3/fstream ****        */
 118:/usr/include/c++/4.6.3/fstream ****       size_t			_M_buf_size;
 119:/usr/include/c++/4.6.3/fstream **** 
 120:/usr/include/c++/4.6.3/fstream ****       // Set iff _M_buf is allocated memory from _M_allocate_internal_buffer.
 121:/usr/include/c++/4.6.3/fstream ****       bool			_M_buf_allocated;
 122:/usr/include/c++/4.6.3/fstream **** 
 123:/usr/include/c++/4.6.3/fstream ****       /**
 124:/usr/include/c++/4.6.3/fstream ****        *  _M_reading == false && _M_writing == false for @b uncommitted mode;
 125:/usr/include/c++/4.6.3/fstream ****        *  _M_reading == true for @b read mode;
 126:/usr/include/c++/4.6.3/fstream ****        *  _M_writing == true for @b write mode;
 127:/usr/include/c++/4.6.3/fstream ****        *
 128:/usr/include/c++/4.6.3/fstream ****        *  NB: _M_reading == true && _M_writing == true is unused.
 129:/usr/include/c++/4.6.3/fstream ****        */
 130:/usr/include/c++/4.6.3/fstream ****       bool                      _M_reading;
 131:/usr/include/c++/4.6.3/fstream ****       bool                      _M_writing;
 132:/usr/include/c++/4.6.3/fstream **** 
 133:/usr/include/c++/4.6.3/fstream ****       //@{
 134:/usr/include/c++/4.6.3/fstream ****       /**
 135:/usr/include/c++/4.6.3/fstream ****        *  Necessary bits for putback buffer management.
 136:/usr/include/c++/4.6.3/fstream ****        *
 137:/usr/include/c++/4.6.3/fstream ****        *  @note pbacks of over one character are not currently supported.
 138:/usr/include/c++/4.6.3/fstream ****        */
 139:/usr/include/c++/4.6.3/fstream ****       char_type			_M_pback;
 140:/usr/include/c++/4.6.3/fstream ****       char_type*		_M_pback_cur_save;
 141:/usr/include/c++/4.6.3/fstream ****       char_type*		_M_pback_end_save;
 142:/usr/include/c++/4.6.3/fstream ****       bool			_M_pback_init;
 143:/usr/include/c++/4.6.3/fstream ****       //@}
 144:/usr/include/c++/4.6.3/fstream **** 
 145:/usr/include/c++/4.6.3/fstream ****       // Cached codecvt facet.
 146:/usr/include/c++/4.6.3/fstream ****       const __codecvt_type* 	_M_codecvt;
 147:/usr/include/c++/4.6.3/fstream **** 
 148:/usr/include/c++/4.6.3/fstream ****       /**
 149:/usr/include/c++/4.6.3/fstream ****        *  Buffer for external characters. Used for input when
 150:/usr/include/c++/4.6.3/fstream ****        *  codecvt::always_noconv() == false. When valid, this corresponds
 151:/usr/include/c++/4.6.3/fstream ****        *  to eback().
 152:/usr/include/c++/4.6.3/fstream ****        */
 153:/usr/include/c++/4.6.3/fstream ****       char*			_M_ext_buf;
 154:/usr/include/c++/4.6.3/fstream **** 
 155:/usr/include/c++/4.6.3/fstream ****       /**
 156:/usr/include/c++/4.6.3/fstream ****        *  Size of buffer held by _M_ext_buf.
 157:/usr/include/c++/4.6.3/fstream ****        */
 158:/usr/include/c++/4.6.3/fstream ****       streamsize		_M_ext_buf_size;
 159:/usr/include/c++/4.6.3/fstream **** 
 160:/usr/include/c++/4.6.3/fstream ****       /**
 161:/usr/include/c++/4.6.3/fstream ****        *  Pointers into the buffer held by _M_ext_buf that delimit a
 162:/usr/include/c++/4.6.3/fstream ****        *  subsequence of bytes that have been read but not yet converted.
 163:/usr/include/c++/4.6.3/fstream ****        *  When valid, _M_ext_next corresponds to egptr().
 164:/usr/include/c++/4.6.3/fstream ****        */
 165:/usr/include/c++/4.6.3/fstream ****       const char*		_M_ext_next;
 166:/usr/include/c++/4.6.3/fstream ****       char*			_M_ext_end;
 167:/usr/include/c++/4.6.3/fstream **** 
 168:/usr/include/c++/4.6.3/fstream ****       /**
 169:/usr/include/c++/4.6.3/fstream ****        *  Initializes pback buffers, and moves normal buffers to safety.
 170:/usr/include/c++/4.6.3/fstream ****        *  Assumptions:
 171:/usr/include/c++/4.6.3/fstream ****        *  _M_in_cur has already been moved back
 172:/usr/include/c++/4.6.3/fstream ****        */
 173:/usr/include/c++/4.6.3/fstream ****       void
 174:/usr/include/c++/4.6.3/fstream ****       _M_create_pback()
 175:/usr/include/c++/4.6.3/fstream ****       {
 176:/usr/include/c++/4.6.3/fstream **** 	if (!_M_pback_init)
 177:/usr/include/c++/4.6.3/fstream **** 	  {
 178:/usr/include/c++/4.6.3/fstream **** 	    _M_pback_cur_save = this->gptr();
 179:/usr/include/c++/4.6.3/fstream **** 	    _M_pback_end_save = this->egptr();
 180:/usr/include/c++/4.6.3/fstream **** 	    this->setg(&_M_pback, &_M_pback, &_M_pback + 1);
 181:/usr/include/c++/4.6.3/fstream **** 	    _M_pback_init = true;
 182:/usr/include/c++/4.6.3/fstream **** 	  }
 183:/usr/include/c++/4.6.3/fstream ****       }
 184:/usr/include/c++/4.6.3/fstream **** 
 185:/usr/include/c++/4.6.3/fstream ****       /**
 186:/usr/include/c++/4.6.3/fstream ****        *  Deactivates pback buffer contents, and restores normal buffer.
 187:/usr/include/c++/4.6.3/fstream ****        *  Assumptions:
 188:/usr/include/c++/4.6.3/fstream ****        *  The pback buffer has only moved forward.
 189:/usr/include/c++/4.6.3/fstream ****        */
 190:/usr/include/c++/4.6.3/fstream ****       void
 191:/usr/include/c++/4.6.3/fstream ****       _M_destroy_pback() throw()
 192:/usr/include/c++/4.6.3/fstream ****       {
 193:/usr/include/c++/4.6.3/fstream **** 	if (_M_pback_init)
 194:/usr/include/c++/4.6.3/fstream **** 	  {
 195:/usr/include/c++/4.6.3/fstream **** 	    // Length _M_in_cur moved in the pback buffer.
 196:/usr/include/c++/4.6.3/fstream **** 	    _M_pback_cur_save += this->gptr() != this->eback();
 197:/usr/include/c++/4.6.3/fstream **** 	    this->setg(_M_buf, _M_pback_cur_save, _M_pback_end_save);
 198:/usr/include/c++/4.6.3/fstream **** 	    _M_pback_init = false;
 199:/usr/include/c++/4.6.3/fstream **** 	  }
 200:/usr/include/c++/4.6.3/fstream ****       }
 201:/usr/include/c++/4.6.3/fstream **** 
 202:/usr/include/c++/4.6.3/fstream ****     public:
 203:/usr/include/c++/4.6.3/fstream ****       // Constructors/destructor:
 204:/usr/include/c++/4.6.3/fstream ****       /**
 205:/usr/include/c++/4.6.3/fstream ****        *  @brief  Does not open any files.
 206:/usr/include/c++/4.6.3/fstream ****        *
 207:/usr/include/c++/4.6.3/fstream ****        *  The default constructor initializes the parent class using its
 208:/usr/include/c++/4.6.3/fstream ****        *  own default ctor.
 209:/usr/include/c++/4.6.3/fstream ****        */
 210:/usr/include/c++/4.6.3/fstream ****       basic_filebuf();
 211:/usr/include/c++/4.6.3/fstream **** 
 212:/usr/include/c++/4.6.3/fstream ****       /**
 213:/usr/include/c++/4.6.3/fstream ****        *  @brief  The destructor closes the file first.
 214:/usr/include/c++/4.6.3/fstream ****        */
 215:/usr/include/c++/4.6.3/fstream ****       virtual
 216:/usr/include/c++/4.6.3/fstream ****       ~basic_filebuf()
 217:/usr/include/c++/4.6.3/fstream ****       { this->close(); }
 218:/usr/include/c++/4.6.3/fstream **** 
 219:/usr/include/c++/4.6.3/fstream ****       // Members:
 220:/usr/include/c++/4.6.3/fstream ****       /**
 221:/usr/include/c++/4.6.3/fstream ****        *  @brief  Returns true if the external file is open.
 222:/usr/include/c++/4.6.3/fstream ****        */
 223:/usr/include/c++/4.6.3/fstream ****       bool
 224:/usr/include/c++/4.6.3/fstream ****       is_open() const throw()
 225:/usr/include/c++/4.6.3/fstream ****       { return _M_file.is_open(); }
 226:/usr/include/c++/4.6.3/fstream **** 
 227:/usr/include/c++/4.6.3/fstream ****       /**
 228:/usr/include/c++/4.6.3/fstream ****        *  @brief  Opens an external file.
 229:/usr/include/c++/4.6.3/fstream ****        *  @param  s  The name of the file.
 230:/usr/include/c++/4.6.3/fstream ****        *  @param  mode  The open mode flags.
 231:/usr/include/c++/4.6.3/fstream ****        *  @return  @c this on success, NULL on failure
 232:/usr/include/c++/4.6.3/fstream ****        *
 233:/usr/include/c++/4.6.3/fstream ****        *  If a file is already open, this function immediately fails.
 234:/usr/include/c++/4.6.3/fstream ****        *  Otherwise it tries to open the file named @a s using the flags
 235:/usr/include/c++/4.6.3/fstream ****        *  given in @a mode.
 236:/usr/include/c++/4.6.3/fstream ****        *
 237:/usr/include/c++/4.6.3/fstream ****        *  Table 92, adapted here, gives the relation between openmode
 238:/usr/include/c++/4.6.3/fstream ****        *  combinations and the equivalent fopen() flags.
 239:/usr/include/c++/4.6.3/fstream ****        *  (NB: lines app, in|out|app, in|app, binary|app, binary|in|out|app,
 240:/usr/include/c++/4.6.3/fstream ****        *  and binary|in|app per DR 596)
 241:/usr/include/c++/4.6.3/fstream ****        *  +---------------------------------------------------------+
 242:/usr/include/c++/4.6.3/fstream ****        *  | ios_base Flag combination            stdio equivalent   |
 243:/usr/include/c++/4.6.3/fstream ****        *  |binary  in  out  trunc  app                              |
 244:/usr/include/c++/4.6.3/fstream ****        *  +---------------------------------------------------------+
 245:/usr/include/c++/4.6.3/fstream ****        *  |             +                        w                  |
 246:/usr/include/c++/4.6.3/fstream ****        *  |             +           +            a                  |
 247:/usr/include/c++/4.6.3/fstream ****        *  |                         +            a                  |
 248:/usr/include/c++/4.6.3/fstream ****        *  |             +     +                  w                  |
 249:/usr/include/c++/4.6.3/fstream ****        *  |         +                            r                  |
 250:/usr/include/c++/4.6.3/fstream ****        *  |         +   +                        r+                 |
 251:/usr/include/c++/4.6.3/fstream ****        *  |         +   +     +                  w+                 |
 252:/usr/include/c++/4.6.3/fstream ****        *  |         +   +           +            a+                 |
 253:/usr/include/c++/4.6.3/fstream ****        *  |         +               +            a+                 |
 254:/usr/include/c++/4.6.3/fstream ****        *  +---------------------------------------------------------+
 255:/usr/include/c++/4.6.3/fstream ****        *  |   +         +                        wb                 |
 256:/usr/include/c++/4.6.3/fstream ****        *  |   +         +           +            ab                 |
 257:/usr/include/c++/4.6.3/fstream ****        *  |   +                     +            ab                 |
 258:/usr/include/c++/4.6.3/fstream ****        *  |   +         +     +                  wb                 |
 259:/usr/include/c++/4.6.3/fstream ****        *  |   +     +                            rb                 |
 260:/usr/include/c++/4.6.3/fstream ****        *  |   +     +   +                        r+b                |
 261:/usr/include/c++/4.6.3/fstream ****        *  |   +     +   +     +                  w+b                |
 262:/usr/include/c++/4.6.3/fstream ****        *  |   +     +   +           +            a+b                |
 263:/usr/include/c++/4.6.3/fstream ****        *  |   +     +               +            a+b                |
 264:/usr/include/c++/4.6.3/fstream ****        *  +---------------------------------------------------------+
 265:/usr/include/c++/4.6.3/fstream ****        */
 266:/usr/include/c++/4.6.3/fstream ****       __filebuf_type*
 267:/usr/include/c++/4.6.3/fstream ****       open(const char* __s, ios_base::openmode __mode);
 268:/usr/include/c++/4.6.3/fstream **** 
 269:/usr/include/c++/4.6.3/fstream **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 270:/usr/include/c++/4.6.3/fstream ****       /**
 271:/usr/include/c++/4.6.3/fstream ****        *  @brief  Opens an external file.
 272:/usr/include/c++/4.6.3/fstream ****        *  @param  s  The name of the file.
 273:/usr/include/c++/4.6.3/fstream ****        *  @param  mode  The open mode flags.
 274:/usr/include/c++/4.6.3/fstream ****        *  @return  @c this on success, NULL on failure
 275:/usr/include/c++/4.6.3/fstream ****        */
 276:/usr/include/c++/4.6.3/fstream ****       __filebuf_type*
 277:/usr/include/c++/4.6.3/fstream ****       open(const std::string& __s, ios_base::openmode __mode)
 278:/usr/include/c++/4.6.3/fstream ****       { return open(__s.c_str(), __mode); }
 279:/usr/include/c++/4.6.3/fstream **** #endif
 280:/usr/include/c++/4.6.3/fstream **** 
 281:/usr/include/c++/4.6.3/fstream ****       /**
 282:/usr/include/c++/4.6.3/fstream ****        *  @brief  Closes the currently associated file.
 283:/usr/include/c++/4.6.3/fstream ****        *  @return  @c this on success, NULL on failure
 284:/usr/include/c++/4.6.3/fstream ****        *
 285:/usr/include/c++/4.6.3/fstream ****        *  If no file is currently open, this function immediately fails.
 286:/usr/include/c++/4.6.3/fstream ****        *
 287:/usr/include/c++/4.6.3/fstream ****        *  If a <em>put buffer area</em> exists, @c overflow(eof) is
 288:/usr/include/c++/4.6.3/fstream ****        *  called to flush all the characters.  The file is then
 289:/usr/include/c++/4.6.3/fstream ****        *  closed.
 290:/usr/include/c++/4.6.3/fstream ****        *
 291:/usr/include/c++/4.6.3/fstream ****        *  If any operations fail, this function also fails.
 292:/usr/include/c++/4.6.3/fstream ****        */
 293:/usr/include/c++/4.6.3/fstream ****       __filebuf_type*
 294:/usr/include/c++/4.6.3/fstream ****       close();
 295:/usr/include/c++/4.6.3/fstream **** 
 296:/usr/include/c++/4.6.3/fstream ****     protected:
 297:/usr/include/c++/4.6.3/fstream ****       void
 298:/usr/include/c++/4.6.3/fstream ****       _M_allocate_internal_buffer();
 299:/usr/include/c++/4.6.3/fstream **** 
 300:/usr/include/c++/4.6.3/fstream ****       void
 301:/usr/include/c++/4.6.3/fstream ****       _M_destroy_internal_buffer() throw();
 302:/usr/include/c++/4.6.3/fstream **** 
 303:/usr/include/c++/4.6.3/fstream ****       // [27.8.1.4] overridden virtual functions
 304:/usr/include/c++/4.6.3/fstream ****       virtual streamsize
 305:/usr/include/c++/4.6.3/fstream ****       showmanyc();
 306:/usr/include/c++/4.6.3/fstream **** 
 307:/usr/include/c++/4.6.3/fstream ****       // Stroustrup, 1998, p. 628
 308:/usr/include/c++/4.6.3/fstream ****       // underflow() and uflow() functions are called to get the next
 309:/usr/include/c++/4.6.3/fstream ****       // character from the real input source when the buffer is empty.
 310:/usr/include/c++/4.6.3/fstream ****       // Buffered input uses underflow()
 311:/usr/include/c++/4.6.3/fstream **** 
 312:/usr/include/c++/4.6.3/fstream ****       virtual int_type
 313:/usr/include/c++/4.6.3/fstream ****       underflow();
 314:/usr/include/c++/4.6.3/fstream **** 
 315:/usr/include/c++/4.6.3/fstream ****       virtual int_type
 316:/usr/include/c++/4.6.3/fstream ****       pbackfail(int_type __c = _Traits::eof());
 317:/usr/include/c++/4.6.3/fstream **** 
 318:/usr/include/c++/4.6.3/fstream ****       // Stroustrup, 1998, p 648
 319:/usr/include/c++/4.6.3/fstream ****       // The overflow() function is called to transfer characters to the
 320:/usr/include/c++/4.6.3/fstream ****       // real output destination when the buffer is full. A call to
 321:/usr/include/c++/4.6.3/fstream ****       // overflow(c) outputs the contents of the buffer plus the
 322:/usr/include/c++/4.6.3/fstream ****       // character c.
 323:/usr/include/c++/4.6.3/fstream ****       // 27.5.2.4.5
 324:/usr/include/c++/4.6.3/fstream ****       // Consume some sequence of the characters in the pending sequence.
 325:/usr/include/c++/4.6.3/fstream ****       virtual int_type
 326:/usr/include/c++/4.6.3/fstream ****       overflow(int_type __c = _Traits::eof());
 327:/usr/include/c++/4.6.3/fstream **** 
 328:/usr/include/c++/4.6.3/fstream ****       // Convert internal byte sequence to external, char-based
 329:/usr/include/c++/4.6.3/fstream ****       // sequence via codecvt.
 330:/usr/include/c++/4.6.3/fstream ****       bool
 331:/usr/include/c++/4.6.3/fstream ****       _M_convert_to_external(char_type*, streamsize);
 332:/usr/include/c++/4.6.3/fstream **** 
 333:/usr/include/c++/4.6.3/fstream ****       /**
 334:/usr/include/c++/4.6.3/fstream ****        *  @brief  Manipulates the buffer.
 335:/usr/include/c++/4.6.3/fstream ****        *  @param  s  Pointer to a buffer area.
 336:/usr/include/c++/4.6.3/fstream ****        *  @param  n  Size of @a s.
 337:/usr/include/c++/4.6.3/fstream ****        *  @return  @c this
 338:/usr/include/c++/4.6.3/fstream ****        *
 339:/usr/include/c++/4.6.3/fstream ****        *  If no file has been opened, and both @a s and @a n are zero, then
 340:/usr/include/c++/4.6.3/fstream ****        *  the stream becomes unbuffered.  Otherwise, @c s is used as a
 341:/usr/include/c++/4.6.3/fstream ****        *  buffer; see
 342:/usr/include/c++/4.6.3/fstream ****        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt11ch25s02.html
 343:/usr/include/c++/4.6.3/fstream ****        *  for more.
 344:/usr/include/c++/4.6.3/fstream ****        */
 345:/usr/include/c++/4.6.3/fstream ****       virtual __streambuf_type*
 346:/usr/include/c++/4.6.3/fstream ****       setbuf(char_type* __s, streamsize __n);
 347:/usr/include/c++/4.6.3/fstream **** 
 348:/usr/include/c++/4.6.3/fstream ****       virtual pos_type
 349:/usr/include/c++/4.6.3/fstream ****       seekoff(off_type __off, ios_base::seekdir __way,
 350:/usr/include/c++/4.6.3/fstream **** 	      ios_base::openmode __mode = ios_base::in | ios_base::out);
 351:/usr/include/c++/4.6.3/fstream **** 
 352:/usr/include/c++/4.6.3/fstream ****       virtual pos_type
 353:/usr/include/c++/4.6.3/fstream ****       seekpos(pos_type __pos,
 354:/usr/include/c++/4.6.3/fstream **** 	      ios_base::openmode __mode = ios_base::in | ios_base::out);
 355:/usr/include/c++/4.6.3/fstream **** 
 356:/usr/include/c++/4.6.3/fstream ****       // Common code for seekoff, seekpos, and overflow
 357:/usr/include/c++/4.6.3/fstream ****       pos_type
 358:/usr/include/c++/4.6.3/fstream ****       _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state);
 359:/usr/include/c++/4.6.3/fstream ****       
 360:/usr/include/c++/4.6.3/fstream ****       int
 361:/usr/include/c++/4.6.3/fstream ****       _M_get_ext_pos(__state_type &__state);
 362:/usr/include/c++/4.6.3/fstream **** 
 363:/usr/include/c++/4.6.3/fstream ****       virtual int
 364:/usr/include/c++/4.6.3/fstream ****       sync();
 365:/usr/include/c++/4.6.3/fstream **** 
 366:/usr/include/c++/4.6.3/fstream ****       virtual void
 367:/usr/include/c++/4.6.3/fstream ****       imbue(const locale& __loc);
 368:/usr/include/c++/4.6.3/fstream **** 
 369:/usr/include/c++/4.6.3/fstream ****       virtual streamsize
 370:/usr/include/c++/4.6.3/fstream ****       xsgetn(char_type* __s, streamsize __n);
 371:/usr/include/c++/4.6.3/fstream **** 
 372:/usr/include/c++/4.6.3/fstream ****       virtual streamsize
 373:/usr/include/c++/4.6.3/fstream ****       xsputn(const char_type* __s, streamsize __n);
 374:/usr/include/c++/4.6.3/fstream **** 
 375:/usr/include/c++/4.6.3/fstream ****       // Flushes output buffer, then writes unshift sequence.
 376:/usr/include/c++/4.6.3/fstream ****       bool
 377:/usr/include/c++/4.6.3/fstream ****       _M_terminate_output();
 378:/usr/include/c++/4.6.3/fstream **** 
 379:/usr/include/c++/4.6.3/fstream ****       /**
 380:/usr/include/c++/4.6.3/fstream ****        *  This function sets the pointers of the internal buffer, both get
 381:/usr/include/c++/4.6.3/fstream ****        *  and put areas. Typically:
 382:/usr/include/c++/4.6.3/fstream ****        *
 383:/usr/include/c++/4.6.3/fstream ****        *   __off == egptr() - eback() upon underflow/uflow (@b read mode);
 384:/usr/include/c++/4.6.3/fstream ****        *   __off == 0 upon overflow (@b write mode);
 385:/usr/include/c++/4.6.3/fstream ****        *   __off == -1 upon open, setbuf, seekoff/pos (@b uncommitted mode).
 386:/usr/include/c++/4.6.3/fstream ****        *
 387:/usr/include/c++/4.6.3/fstream ****        *  NB: epptr() - pbase() == _M_buf_size - 1, since _M_buf_size
 388:/usr/include/c++/4.6.3/fstream ****        *  reflects the actual allocated memory and the last cell is reserved
 389:/usr/include/c++/4.6.3/fstream ****        *  for the overflow char of a full put area.
 390:/usr/include/c++/4.6.3/fstream ****        */
 391:/usr/include/c++/4.6.3/fstream ****       void
 392:/usr/include/c++/4.6.3/fstream ****       _M_set_buffer(streamsize __off)
 393:/usr/include/c++/4.6.3/fstream ****       {
 394:/usr/include/c++/4.6.3/fstream ****  	const bool __testin = _M_mode & ios_base::in;
 395:/usr/include/c++/4.6.3/fstream ****  	const bool __testout = _M_mode & ios_base::out;
 396:/usr/include/c++/4.6.3/fstream **** 	
 397:/usr/include/c++/4.6.3/fstream **** 	if (__testin && __off > 0)
 398:/usr/include/c++/4.6.3/fstream **** 	  this->setg(_M_buf, _M_buf, _M_buf + __off);
 399:/usr/include/c++/4.6.3/fstream **** 	else
 400:/usr/include/c++/4.6.3/fstream **** 	  this->setg(_M_buf, _M_buf, _M_buf);
 401:/usr/include/c++/4.6.3/fstream **** 
 402:/usr/include/c++/4.6.3/fstream **** 	if (__testout && __off == 0 && _M_buf_size > 1 )
 403:/usr/include/c++/4.6.3/fstream **** 	  this->setp(_M_buf, _M_buf + _M_buf_size - 1);
 404:/usr/include/c++/4.6.3/fstream **** 	else
 405:/usr/include/c++/4.6.3/fstream **** 	  this->setp(0, 0);
 406:/usr/include/c++/4.6.3/fstream ****       }
 407:/usr/include/c++/4.6.3/fstream ****     };
 408:/usr/include/c++/4.6.3/fstream **** 
 409:/usr/include/c++/4.6.3/fstream ****   // [27.8.1.5] Template class basic_ifstream
 410:/usr/include/c++/4.6.3/fstream ****   /**
 411:/usr/include/c++/4.6.3/fstream ****    *  @brief  Controlling input for files.
 412:/usr/include/c++/4.6.3/fstream ****    *  @ingroup io
 413:/usr/include/c++/4.6.3/fstream ****    *
 414:/usr/include/c++/4.6.3/fstream ****    *  This class supports reading from named files, using the inherited
 415:/usr/include/c++/4.6.3/fstream ****    *  functions from std::basic_istream.  To control the associated
 416:/usr/include/c++/4.6.3/fstream ****    *  sequence, an instance of std::basic_filebuf is used, which this page
 417:/usr/include/c++/4.6.3/fstream ****    *  refers to as @c sb.
 418:/usr/include/c++/4.6.3/fstream ****    */
 419:/usr/include/c++/4.6.3/fstream ****   template<typename _CharT, typename _Traits>
 420:/usr/include/c++/4.6.3/fstream ****     class basic_ifstream : public basic_istream<_CharT, _Traits>
 421:/usr/include/c++/4.6.3/fstream ****     {
 422:/usr/include/c++/4.6.3/fstream ****     public:
 423:/usr/include/c++/4.6.3/fstream ****       // Types:
 424:/usr/include/c++/4.6.3/fstream ****       typedef _CharT 					char_type;
 425:/usr/include/c++/4.6.3/fstream ****       typedef _Traits 					traits_type;
 426:/usr/include/c++/4.6.3/fstream ****       typedef typename traits_type::int_type 		int_type;
 427:/usr/include/c++/4.6.3/fstream ****       typedef typename traits_type::pos_type 		pos_type;
 428:/usr/include/c++/4.6.3/fstream ****       typedef typename traits_type::off_type 		off_type;
 429:/usr/include/c++/4.6.3/fstream **** 
 430:/usr/include/c++/4.6.3/fstream ****       // Non-standard types:
 431:/usr/include/c++/4.6.3/fstream ****       typedef basic_filebuf<char_type, traits_type> 	__filebuf_type;
 432:/usr/include/c++/4.6.3/fstream ****       typedef basic_istream<char_type, traits_type>	__istream_type;
 433:/usr/include/c++/4.6.3/fstream **** 
 434:/usr/include/c++/4.6.3/fstream ****     private:
 435:/usr/include/c++/4.6.3/fstream ****       __filebuf_type	_M_filebuf;
 436:/usr/include/c++/4.6.3/fstream **** 
 437:/usr/include/c++/4.6.3/fstream ****     public:
 438:/usr/include/c++/4.6.3/fstream ****       // Constructors/Destructors:
 439:/usr/include/c++/4.6.3/fstream ****       /**
 440:/usr/include/c++/4.6.3/fstream ****        *  @brief  Default constructor.
 441:/usr/include/c++/4.6.3/fstream ****        *
 442:/usr/include/c++/4.6.3/fstream ****        *  Initializes @c sb using its default constructor, and passes
 443:/usr/include/c++/4.6.3/fstream ****        *  @c &sb to the base class initializer.  Does not open any files
 444:/usr/include/c++/4.6.3/fstream ****        *  (you haven't given it a filename to open).
 445:/usr/include/c++/4.6.3/fstream ****        */
 446:/usr/include/c++/4.6.3/fstream ****       basic_ifstream() : __istream_type(), _M_filebuf()
 447:/usr/include/c++/4.6.3/fstream ****       { this->init(&_M_filebuf); }
 448:/usr/include/c++/4.6.3/fstream **** 
 449:/usr/include/c++/4.6.3/fstream ****       /**
 450:/usr/include/c++/4.6.3/fstream ****        *  @brief  Create an input file stream.
 451:/usr/include/c++/4.6.3/fstream ****        *  @param  s  Null terminated string specifying the filename.
 452:/usr/include/c++/4.6.3/fstream ****        *  @param  mode  Open file in specified mode (see std::ios_base).
 453:/usr/include/c++/4.6.3/fstream ****        *
 454:/usr/include/c++/4.6.3/fstream ****        *  @c ios_base::in is automatically included in @a mode.
 455:/usr/include/c++/4.6.3/fstream ****        *
 456:/usr/include/c++/4.6.3/fstream ****        *  Tip:  When using std::string to hold the filename, you must use
 457:/usr/include/c++/4.6.3/fstream ****        *  .c_str() before passing it to this constructor.
 458:/usr/include/c++/4.6.3/fstream ****        */
 459:/usr/include/c++/4.6.3/fstream ****       explicit
 460:/usr/include/c++/4.6.3/fstream ****       basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)
 461:/usr/include/c++/4.6.3/fstream ****       : __istream_type(), _M_filebuf()
 462:/usr/include/c++/4.6.3/fstream ****       {
 463:/usr/include/c++/4.6.3/fstream **** 	this->init(&_M_filebuf);
 464:/usr/include/c++/4.6.3/fstream **** 	this->open(__s, __mode);
 465:/usr/include/c++/4.6.3/fstream ****       }
 466:/usr/include/c++/4.6.3/fstream **** 
 467:/usr/include/c++/4.6.3/fstream **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 468:/usr/include/c++/4.6.3/fstream ****       /**
 469:/usr/include/c++/4.6.3/fstream ****        *  @brief  Create an input file stream.
 470:/usr/include/c++/4.6.3/fstream ****        *  @param  s  std::string specifying the filename.
 471:/usr/include/c++/4.6.3/fstream ****        *  @param  mode  Open file in specified mode (see std::ios_base).
 472:/usr/include/c++/4.6.3/fstream ****        *
 473:/usr/include/c++/4.6.3/fstream ****        *  @c ios_base::in is automatically included in @a mode.
 474:/usr/include/c++/4.6.3/fstream ****        */
 475:/usr/include/c++/4.6.3/fstream ****       explicit
 476:/usr/include/c++/4.6.3/fstream ****       basic_ifstream(const std::string& __s,
 477:/usr/include/c++/4.6.3/fstream **** 		     ios_base::openmode __mode = ios_base::in)
 478:/usr/include/c++/4.6.3/fstream ****       : __istream_type(), _M_filebuf()
 479:/usr/include/c++/4.6.3/fstream ****       {
 480:/usr/include/c++/4.6.3/fstream **** 	this->init(&_M_filebuf);
 481:/usr/include/c++/4.6.3/fstream **** 	this->open(__s, __mode);
 482:/usr/include/c++/4.6.3/fstream ****       }
 483:/usr/include/c++/4.6.3/fstream **** #endif
 484:/usr/include/c++/4.6.3/fstream **** 
 485:/usr/include/c++/4.6.3/fstream ****       /**
 486:/usr/include/c++/4.6.3/fstream ****        *  @brief  The destructor does nothing.
 487:/usr/include/c++/4.6.3/fstream ****        *
 488:/usr/include/c++/4.6.3/fstream ****        *  The file is closed by the filebuf object, not the formatting
 489:/usr/include/c++/4.6.3/fstream ****        *  stream.
 490:/usr/include/c++/4.6.3/fstream ****        */
 491:/usr/include/c++/4.6.3/fstream ****       ~basic_ifstream()
 492:/usr/include/c++/4.6.3/fstream ****       { }
 493:/usr/include/c++/4.6.3/fstream **** 
 494:/usr/include/c++/4.6.3/fstream ****       // Members:
 495:/usr/include/c++/4.6.3/fstream ****       /**
 496:/usr/include/c++/4.6.3/fstream ****        *  @brief  Accessing the underlying buffer.
 497:/usr/include/c++/4.6.3/fstream ****        *  @return  The current basic_filebuf buffer.
 498:/usr/include/c++/4.6.3/fstream ****        *
 499:/usr/include/c++/4.6.3/fstream ****        *  This hides both signatures of std::basic_ios::rdbuf().
 500:/usr/include/c++/4.6.3/fstream ****        */
 501:/usr/include/c++/4.6.3/fstream ****       __filebuf_type*
 502:/usr/include/c++/4.6.3/fstream ****       rdbuf() const
 503:/usr/include/c++/4.6.3/fstream ****       { return const_cast<__filebuf_type*>(&_M_filebuf); }
 504:/usr/include/c++/4.6.3/fstream **** 
 505:/usr/include/c++/4.6.3/fstream ****       /**
 506:/usr/include/c++/4.6.3/fstream ****        *  @brief  Wrapper to test for an open file.
 507:/usr/include/c++/4.6.3/fstream ****        *  @return  @c rdbuf()->is_open()
 508:/usr/include/c++/4.6.3/fstream ****        */
 509:/usr/include/c++/4.6.3/fstream ****       bool
 510:/usr/include/c++/4.6.3/fstream ****       is_open()
 511:/usr/include/c++/4.6.3/fstream ****       { return _M_filebuf.is_open(); }
 512:/usr/include/c++/4.6.3/fstream **** 
 513:/usr/include/c++/4.6.3/fstream ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 514:/usr/include/c++/4.6.3/fstream ****       // 365. Lack of const-qualification in clause 27
 515:/usr/include/c++/4.6.3/fstream ****       bool
 516:/usr/include/c++/4.6.3/fstream ****       is_open() const
 517:/usr/include/c++/4.6.3/fstream ****       { return _M_filebuf.is_open(); }
 518:/usr/include/c++/4.6.3/fstream **** 
 519:/usr/include/c++/4.6.3/fstream ****       /**
 520:/usr/include/c++/4.6.3/fstream ****        *  @brief  Opens an external file.
 521:/usr/include/c++/4.6.3/fstream ****        *  @param  s  The name of the file.
 522:/usr/include/c++/4.6.3/fstream ****        *  @param  mode  The open mode flags.
 523:/usr/include/c++/4.6.3/fstream ****        *
 524:/usr/include/c++/4.6.3/fstream ****        *  Calls @c std::basic_filebuf::open(s,mode|in).  If that function
 525:/usr/include/c++/4.6.3/fstream ****        *  fails, @c failbit is set in the stream's error state.
 526:/usr/include/c++/4.6.3/fstream ****        *
 527:/usr/include/c++/4.6.3/fstream ****        *  Tip:  When using std::string to hold the filename, you must use
 528:/usr/include/c++/4.6.3/fstream ****        *  .c_str() before passing it to this constructor.
 529:/usr/include/c++/4.6.3/fstream ****        */
 530:/usr/include/c++/4.6.3/fstream ****       void
 531:/usr/include/c++/4.6.3/fstream ****       open(const char* __s, ios_base::openmode __mode = ios_base::in)
 532:/usr/include/c++/4.6.3/fstream ****       {
 533:/usr/include/c++/4.6.3/fstream **** 	if (!_M_filebuf.open(__s, __mode | ios_base::in))
 534:/usr/include/c++/4.6.3/fstream **** 	  this->setstate(ios_base::failbit);
 535:/usr/include/c++/4.6.3/fstream **** 	else
 536:/usr/include/c++/4.6.3/fstream **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 537:/usr/include/c++/4.6.3/fstream **** 	  // 409. Closing an fstream should clear error state
 538:/usr/include/c++/4.6.3/fstream **** 	  this->clear();
 539:/usr/include/c++/4.6.3/fstream ****       }
 540:/usr/include/c++/4.6.3/fstream **** 
 541:/usr/include/c++/4.6.3/fstream **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 542:/usr/include/c++/4.6.3/fstream ****       /**
 543:/usr/include/c++/4.6.3/fstream ****        *  @brief  Opens an external file.
 544:/usr/include/c++/4.6.3/fstream ****        *  @param  s  The name of the file.
 545:/usr/include/c++/4.6.3/fstream ****        *  @param  mode  The open mode flags.
 546:/usr/include/c++/4.6.3/fstream ****        *
 547:/usr/include/c++/4.6.3/fstream ****        *  Calls @c std::basic_filebuf::open(s,mode|in).  If that function
 548:/usr/include/c++/4.6.3/fstream ****        *  fails, @c failbit is set in the stream's error state.
 549:/usr/include/c++/4.6.3/fstream ****        */
 550:/usr/include/c++/4.6.3/fstream ****       void
 551:/usr/include/c++/4.6.3/fstream ****       open(const std::string& __s, ios_base::openmode __mode = ios_base::in)
 552:/usr/include/c++/4.6.3/fstream ****       {
 553:/usr/include/c++/4.6.3/fstream **** 	if (!_M_filebuf.open(__s, __mode | ios_base::in))
 554:/usr/include/c++/4.6.3/fstream **** 	  this->setstate(ios_base::failbit);
 555:/usr/include/c++/4.6.3/fstream **** 	else
 556:/usr/include/c++/4.6.3/fstream **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 557:/usr/include/c++/4.6.3/fstream **** 	  // 409. Closing an fstream should clear error state
 558:/usr/include/c++/4.6.3/fstream **** 	  this->clear();
 559:/usr/include/c++/4.6.3/fstream ****       }
 560:/usr/include/c++/4.6.3/fstream **** #endif
 561:/usr/include/c++/4.6.3/fstream **** 
 562:/usr/include/c++/4.6.3/fstream ****       /**
 563:/usr/include/c++/4.6.3/fstream ****        *  @brief  Close the file.
 564:/usr/include/c++/4.6.3/fstream ****        *
 565:/usr/include/c++/4.6.3/fstream ****        *  Calls @c std::basic_filebuf::close().  If that function
 566:/usr/include/c++/4.6.3/fstream ****        *  fails, @c failbit is set in the stream's error state.
 567:/usr/include/c++/4.6.3/fstream ****        */
 568:/usr/include/c++/4.6.3/fstream ****       void
 569:/usr/include/c++/4.6.3/fstream ****       close()
 570:/usr/include/c++/4.6.3/fstream ****       {
 1157              		.loc	27 570 2
 1158              	.Ltmp381:
 1159 04e7 488DBD90 		leaq	-880(%rbp), %rdi        # /usr/include/c++/4.6.3/fstream:570:2[ ./matrix-util.C:490:4 ]
 1159      FCFFFF
 1160 04ee E8000000 		callq	_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv
 1160      00
 1161              	.Ltmp306:
 1162              	# BB#25:                                # %.noexc
 1163              	.Ltmp382:
 1164              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 1165              	.Ltmp383:
 1166              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 1167 04f3 4885C0   		testq	%rax, %rax              # /usr/include/c++/4.6.3/fstream:570:2[ ./matrix-util.C:490:4 ]
 1168 04f6 7522     		jne	.LBB1_27
 1169              	# BB#26:
 1170              	.Ltmp384:
 1171              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 1172              	.Ltmp385:
 1173              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 571:/usr/include/c++/4.6.3/fstream **** 	if (!_M_filebuf.close())
 1174              		.loc	27 571 4
 1175              	.Ltmp386:
 1176 04f8 488B8580 		movq	-896(%rbp), %rax        # /usr/include/c++/4.6.3/fstream:571:4[ ./matrix-util.C:490:4 ]
 1176      FCFFFF
 1177 04ff 488B40E8 		movq	-24(%rax), %rax         # /usr/include/c++/4.6.3/fstream:571:4[ ./matrix-util.C:490:4 ]
   1:/usr/include/c++/4.6.3/bits/basic_ios.h **** // Iostreams base classes -*- C++ -*-
   2:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
   3:/usr/include/c++/4.6.3/bits/basic_ios.h **** // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
   4:/usr/include/c++/4.6.3/bits/basic_ios.h **** // 2006, 2007, 2008, 2009, 2010, 2011
   5:/usr/include/c++/4.6.3/bits/basic_ios.h **** // Free Software Foundation, Inc.
   6:/usr/include/c++/4.6.3/bits/basic_ios.h **** //
   7:/usr/include/c++/4.6.3/bits/basic_ios.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   8:/usr/include/c++/4.6.3/bits/basic_ios.h **** // software; you can redistribute it and/or modify it under the
   9:/usr/include/c++/4.6.3/bits/basic_ios.h **** // terms of the GNU General Public License as published by the
  10:/usr/include/c++/4.6.3/bits/basic_ios.h **** // Free Software Foundation; either version 3, or (at your option)
  11:/usr/include/c++/4.6.3/bits/basic_ios.h **** // any later version.
  12:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
  13:/usr/include/c++/4.6.3/bits/basic_ios.h **** // This library is distributed in the hope that it will be useful,
  14:/usr/include/c++/4.6.3/bits/basic_ios.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:/usr/include/c++/4.6.3/bits/basic_ios.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:/usr/include/c++/4.6.3/bits/basic_ios.h **** // GNU General Public License for more details.
  17:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
  18:/usr/include/c++/4.6.3/bits/basic_ios.h **** // Under Section 7 of GPL version 3, you are granted additional
  19:/usr/include/c++/4.6.3/bits/basic_ios.h **** // permissions described in the GCC Runtime Library Exception, version
  20:/usr/include/c++/4.6.3/bits/basic_ios.h **** // 3.1, as published by the Free Software Foundation.
  21:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
  22:/usr/include/c++/4.6.3/bits/basic_ios.h **** // You should have received a copy of the GNU General Public License and
  23:/usr/include/c++/4.6.3/bits/basic_ios.h **** // a copy of the GCC Runtime Library Exception along with this program;
  24:/usr/include/c++/4.6.3/bits/basic_ios.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  25:/usr/include/c++/4.6.3/bits/basic_ios.h **** // <http://www.gnu.org/licenses/>.
  26:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
  27:/usr/include/c++/4.6.3/bits/basic_ios.h **** /** @file bits/basic_ios.h
  28:/usr/include/c++/4.6.3/bits/basic_ios.h ****  *  This is an internal header file, included by other library headers.
  29:/usr/include/c++/4.6.3/bits/basic_ios.h ****  *  Do not attempt to use it directly. @headername{ios}
  30:/usr/include/c++/4.6.3/bits/basic_ios.h ****  */
  31:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
  32:/usr/include/c++/4.6.3/bits/basic_ios.h **** #ifndef _BASIC_IOS_H
  33:/usr/include/c++/4.6.3/bits/basic_ios.h **** #define _BASIC_IOS_H 1
  34:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
  35:/usr/include/c++/4.6.3/bits/basic_ios.h **** #pragma GCC system_header
  36:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
  37:/usr/include/c++/4.6.3/bits/basic_ios.h **** #include <bits/localefwd.h>
  38:/usr/include/c++/4.6.3/bits/basic_ios.h **** #include <bits/locale_classes.h>
  39:/usr/include/c++/4.6.3/bits/basic_ios.h **** #include <bits/locale_facets.h>
  40:/usr/include/c++/4.6.3/bits/basic_ios.h **** #include <bits/streambuf_iterator.h>
  41:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
  42:/usr/include/c++/4.6.3/bits/basic_ios.h **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/usr/include/c++/4.6.3/bits/basic_ios.h **** {
  44:/usr/include/c++/4.6.3/bits/basic_ios.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
  46:/usr/include/c++/4.6.3/bits/basic_ios.h ****   template<typename _Facet>
  47:/usr/include/c++/4.6.3/bits/basic_ios.h ****     inline const _Facet&
  48:/usr/include/c++/4.6.3/bits/basic_ios.h ****     __check_facet(const _Facet* __f)
  49:/usr/include/c++/4.6.3/bits/basic_ios.h ****     {
  50:/usr/include/c++/4.6.3/bits/basic_ios.h ****       if (!__f)
  51:/usr/include/c++/4.6.3/bits/basic_ios.h **** 	__throw_bad_cast();
  52:/usr/include/c++/4.6.3/bits/basic_ios.h ****       return *__f;
  53:/usr/include/c++/4.6.3/bits/basic_ios.h ****     }
  54:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
  55:/usr/include/c++/4.6.3/bits/basic_ios.h ****   // 27.4.5  Template class basic_ios
  56:/usr/include/c++/4.6.3/bits/basic_ios.h ****   /**
  57:/usr/include/c++/4.6.3/bits/basic_ios.h ****    *  @brief  Virtual base class for all stream classes.
  58:/usr/include/c++/4.6.3/bits/basic_ios.h ****    *  @ingroup io
  59:/usr/include/c++/4.6.3/bits/basic_ios.h ****    *
  60:/usr/include/c++/4.6.3/bits/basic_ios.h ****    *  Most of the member functions called dispatched on stream objects
  61:/usr/include/c++/4.6.3/bits/basic_ios.h ****    *  (e.g., @c std::cout.foo(bar);) are consolidated in this class.
  62:/usr/include/c++/4.6.3/bits/basic_ios.h ****   */
  63:/usr/include/c++/4.6.3/bits/basic_ios.h ****   template<typename _CharT, typename _Traits>
  64:/usr/include/c++/4.6.3/bits/basic_ios.h ****     class basic_ios : public ios_base
  65:/usr/include/c++/4.6.3/bits/basic_ios.h ****     {
  66:/usr/include/c++/4.6.3/bits/basic_ios.h ****     public:
  67:/usr/include/c++/4.6.3/bits/basic_ios.h ****       //@{
  68:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
  69:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  These are standard types.  They permit a standardized way of
  70:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  referring to names of (or names dependant on) the template
  71:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  parameters, which are specific to the implementation.
  72:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
  73:/usr/include/c++/4.6.3/bits/basic_ios.h ****       typedef _CharT                                 char_type;
  74:/usr/include/c++/4.6.3/bits/basic_ios.h ****       typedef typename _Traits::int_type             int_type;
  75:/usr/include/c++/4.6.3/bits/basic_ios.h ****       typedef typename _Traits::pos_type             pos_type;
  76:/usr/include/c++/4.6.3/bits/basic_ios.h ****       typedef typename _Traits::off_type             off_type;
  77:/usr/include/c++/4.6.3/bits/basic_ios.h ****       typedef _Traits                                traits_type;
  78:/usr/include/c++/4.6.3/bits/basic_ios.h ****       //@}
  79:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
  80:/usr/include/c++/4.6.3/bits/basic_ios.h ****       //@{
  81:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
  82:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  These are non-standard types.
  83:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
  84:/usr/include/c++/4.6.3/bits/basic_ios.h ****       typedef ctype<_CharT>                          __ctype_type;
  85:/usr/include/c++/4.6.3/bits/basic_ios.h ****       typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
  86:/usr/include/c++/4.6.3/bits/basic_ios.h **** 						     __num_put_type;
  87:/usr/include/c++/4.6.3/bits/basic_ios.h ****       typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
  88:/usr/include/c++/4.6.3/bits/basic_ios.h **** 						     __num_get_type;
  89:/usr/include/c++/4.6.3/bits/basic_ios.h ****       //@}
  90:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
  91:/usr/include/c++/4.6.3/bits/basic_ios.h ****       // Data members:
  92:/usr/include/c++/4.6.3/bits/basic_ios.h ****     protected:
  93:/usr/include/c++/4.6.3/bits/basic_ios.h ****       basic_ostream<_CharT, _Traits>*                _M_tie;
  94:/usr/include/c++/4.6.3/bits/basic_ios.h ****       mutable char_type                              _M_fill;
  95:/usr/include/c++/4.6.3/bits/basic_ios.h ****       mutable bool                                   _M_fill_init;
  96:/usr/include/c++/4.6.3/bits/basic_ios.h ****       basic_streambuf<_CharT, _Traits>*              _M_streambuf;
  97:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
  98:/usr/include/c++/4.6.3/bits/basic_ios.h ****       // Cached use_facet<ctype>, which is based on the current locale info.
  99:/usr/include/c++/4.6.3/bits/basic_ios.h ****       const __ctype_type*                            _M_ctype;
 100:/usr/include/c++/4.6.3/bits/basic_ios.h ****       // For ostream.
 101:/usr/include/c++/4.6.3/bits/basic_ios.h ****       const __num_put_type*                          _M_num_put;
 102:/usr/include/c++/4.6.3/bits/basic_ios.h ****       // For istream.
 103:/usr/include/c++/4.6.3/bits/basic_ios.h ****       const __num_get_type*                          _M_num_get;
 104:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 105:/usr/include/c++/4.6.3/bits/basic_ios.h ****     public:
 106:/usr/include/c++/4.6.3/bits/basic_ios.h ****       //@{
 107:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 108:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  The quick-and-easy status check.
 109:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 110:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  This allows you to write constructs such as
 111:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  <code>if (!a_stream) ...</code> and <code>while (a_stream) ...</code>
 112:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 113:/usr/include/c++/4.6.3/bits/basic_ios.h ****       operator void*() const
 114:/usr/include/c++/4.6.3/bits/basic_ios.h ****       { return this->fail() ? 0 : const_cast<basic_ios*>(this); }
 115:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 116:/usr/include/c++/4.6.3/bits/basic_ios.h ****       bool
 117:/usr/include/c++/4.6.3/bits/basic_ios.h ****       operator!() const
 118:/usr/include/c++/4.6.3/bits/basic_ios.h ****       { return this->fail(); }
 119:/usr/include/c++/4.6.3/bits/basic_ios.h ****       //@}
 120:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 121:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 122:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Returns the error state of the stream buffer.
 123:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @return  A bit pattern (well, isn't everything?)
 124:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 125:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  See std::ios_base::iostate for the possible bit values.  Most
 126:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  users will call one of the interpreting wrappers, e.g., good().
 127:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 128:/usr/include/c++/4.6.3/bits/basic_ios.h ****       iostate
 129:/usr/include/c++/4.6.3/bits/basic_ios.h ****       rdstate() const
 1178              		.loc	14 129 9
 1179              	.Ltmp387:
 1180 0503 8BB405A0 		movl	-864(%rbp,%rax), %esi   # /usr/include/c++/4.6.3/bits/basic_ios.h:129:9[ /usr/include/c++/4.6
 1180      FCFFFF
   1:/usr/include/c++/4.6.3/bits/ios_base.h **** // Iostreams base classes -*- C++ -*-
   2:/usr/include/c++/4.6.3/bits/ios_base.h **** 
   3:/usr/include/c++/4.6.3/bits/ios_base.h **** // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
   4:/usr/include/c++/4.6.3/bits/ios_base.h **** // 2006, 2007, 2008, 2009, 2010
   5:/usr/include/c++/4.6.3/bits/ios_base.h **** // Free Software Foundation, Inc.
   6:/usr/include/c++/4.6.3/bits/ios_base.h **** //
   7:/usr/include/c++/4.6.3/bits/ios_base.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   8:/usr/include/c++/4.6.3/bits/ios_base.h **** // software; you can redistribute it and/or modify it under the
   9:/usr/include/c++/4.6.3/bits/ios_base.h **** // terms of the GNU General Public License as published by the
  10:/usr/include/c++/4.6.3/bits/ios_base.h **** // Free Software Foundation; either version 3, or (at your option)
  11:/usr/include/c++/4.6.3/bits/ios_base.h **** // any later version.
  12:/usr/include/c++/4.6.3/bits/ios_base.h **** 
  13:/usr/include/c++/4.6.3/bits/ios_base.h **** // This library is distributed in the hope that it will be useful,
  14:/usr/include/c++/4.6.3/bits/ios_base.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:/usr/include/c++/4.6.3/bits/ios_base.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:/usr/include/c++/4.6.3/bits/ios_base.h **** // GNU General Public License for more details.
  17:/usr/include/c++/4.6.3/bits/ios_base.h **** 
  18:/usr/include/c++/4.6.3/bits/ios_base.h **** // Under Section 7 of GPL version 3, you are granted additional
  19:/usr/include/c++/4.6.3/bits/ios_base.h **** // permissions described in the GCC Runtime Library Exception, version
  20:/usr/include/c++/4.6.3/bits/ios_base.h **** // 3.1, as published by the Free Software Foundation.
  21:/usr/include/c++/4.6.3/bits/ios_base.h **** 
  22:/usr/include/c++/4.6.3/bits/ios_base.h **** // You should have received a copy of the GNU General Public License and
  23:/usr/include/c++/4.6.3/bits/ios_base.h **** // a copy of the GCC Runtime Library Exception along with this program;
  24:/usr/include/c++/4.6.3/bits/ios_base.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  25:/usr/include/c++/4.6.3/bits/ios_base.h **** // <http://www.gnu.org/licenses/>.
  26:/usr/include/c++/4.6.3/bits/ios_base.h **** 
  27:/usr/include/c++/4.6.3/bits/ios_base.h **** /** @file bits/ios_base.h
  28:/usr/include/c++/4.6.3/bits/ios_base.h ****  *  This is an internal header file, included by other library headers.
  29:/usr/include/c++/4.6.3/bits/ios_base.h ****  *  Do not attempt to use it directly. @headername{ios}
  30:/usr/include/c++/4.6.3/bits/ios_base.h ****  */
  31:/usr/include/c++/4.6.3/bits/ios_base.h **** 
  32:/usr/include/c++/4.6.3/bits/ios_base.h **** //
  33:/usr/include/c++/4.6.3/bits/ios_base.h **** // ISO C++ 14882: 27.4  Iostreams base classes
  34:/usr/include/c++/4.6.3/bits/ios_base.h **** //
  35:/usr/include/c++/4.6.3/bits/ios_base.h **** 
  36:/usr/include/c++/4.6.3/bits/ios_base.h **** #ifndef _IOS_BASE_H
  37:/usr/include/c++/4.6.3/bits/ios_base.h **** #define _IOS_BASE_H 1
  38:/usr/include/c++/4.6.3/bits/ios_base.h **** 
  39:/usr/include/c++/4.6.3/bits/ios_base.h **** #pragma GCC system_header
  40:/usr/include/c++/4.6.3/bits/ios_base.h **** 
  41:/usr/include/c++/4.6.3/bits/ios_base.h **** #include <ext/atomicity.h>
  42:/usr/include/c++/4.6.3/bits/ios_base.h **** #include <bits/localefwd.h>
  43:/usr/include/c++/4.6.3/bits/ios_base.h **** #include <bits/locale_classes.h>
  44:/usr/include/c++/4.6.3/bits/ios_base.h **** 
  45:/usr/include/c++/4.6.3/bits/ios_base.h **** namespace std _GLIBCXX_VISIBILITY(default)
  46:/usr/include/c++/4.6.3/bits/ios_base.h **** {
  47:/usr/include/c++/4.6.3/bits/ios_base.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  48:/usr/include/c++/4.6.3/bits/ios_base.h **** 
  49:/usr/include/c++/4.6.3/bits/ios_base.h ****   // The following definitions of bitmask types are enums, not ints,
  50:/usr/include/c++/4.6.3/bits/ios_base.h ****   // as permitted (but not required) in the standard, in order to provide
  51:/usr/include/c++/4.6.3/bits/ios_base.h ****   // better type safety in iostream calls.  A side effect is that
  52:/usr/include/c++/4.6.3/bits/ios_base.h ****   // expressions involving them are no longer compile-time constants.
  53:/usr/include/c++/4.6.3/bits/ios_base.h ****   enum _Ios_Fmtflags 
  54:/usr/include/c++/4.6.3/bits/ios_base.h ****     { 
  55:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_boolalpha 	= 1L << 0,
  56:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_dec 		= 1L << 1,
  57:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_fixed 		= 1L << 2,
  58:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_hex 		= 1L << 3,
  59:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_internal 	= 1L << 4,
  60:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_left 		= 1L << 5,
  61:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_oct 		= 1L << 6,
  62:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_right 		= 1L << 7,
  63:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_scientific 	= 1L << 8,
  64:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_showbase 	= 1L << 9,
  65:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_showpoint 	= 1L << 10,
  66:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_showpos 	= 1L << 11,
  67:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_skipws 	= 1L << 12,
  68:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_unitbuf 	= 1L << 13,
  69:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_uppercase 	= 1L << 14,
  70:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_adjustfield 	= _S_left | _S_right | _S_internal,
  71:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_basefield 	= _S_dec | _S_oct | _S_hex,
  72:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_floatfield 	= _S_scientific | _S_fixed,
  73:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_ios_fmtflags_end = 1L << 16 
  74:/usr/include/c++/4.6.3/bits/ios_base.h ****     };
  75:/usr/include/c++/4.6.3/bits/ios_base.h **** 
  76:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  77:/usr/include/c++/4.6.3/bits/ios_base.h ****   operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  78:/usr/include/c++/4.6.3/bits/ios_base.h ****   { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }
  79:/usr/include/c++/4.6.3/bits/ios_base.h **** 
  80:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  81:/usr/include/c++/4.6.3/bits/ios_base.h ****   operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  82:/usr/include/c++/4.6.3/bits/ios_base.h ****   { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }
  83:/usr/include/c++/4.6.3/bits/ios_base.h **** 
  84:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  85:/usr/include/c++/4.6.3/bits/ios_base.h ****   operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  86:/usr/include/c++/4.6.3/bits/ios_base.h ****   { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }
  87:/usr/include/c++/4.6.3/bits/ios_base.h **** 
  88:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  89:/usr/include/c++/4.6.3/bits/ios_base.h ****   operator~(_Ios_Fmtflags __a)
  90:/usr/include/c++/4.6.3/bits/ios_base.h ****   { return _Ios_Fmtflags(~static_cast<int>(__a)); }
  91:/usr/include/c++/4.6.3/bits/ios_base.h **** 
  92:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline const _Ios_Fmtflags&
  93:/usr/include/c++/4.6.3/bits/ios_base.h ****   operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  94:/usr/include/c++/4.6.3/bits/ios_base.h ****   { return __a = __a | __b; }
  95:/usr/include/c++/4.6.3/bits/ios_base.h **** 
  96:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline const _Ios_Fmtflags&
  97:/usr/include/c++/4.6.3/bits/ios_base.h ****   operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  98:/usr/include/c++/4.6.3/bits/ios_base.h ****   { return __a = __a & __b; }
  99:/usr/include/c++/4.6.3/bits/ios_base.h **** 
 100:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline const _Ios_Fmtflags&
 101:/usr/include/c++/4.6.3/bits/ios_base.h ****   operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
 102:/usr/include/c++/4.6.3/bits/ios_base.h ****   { return __a = __a ^ __b; }
 103:/usr/include/c++/4.6.3/bits/ios_base.h **** 
 104:/usr/include/c++/4.6.3/bits/ios_base.h **** 
 105:/usr/include/c++/4.6.3/bits/ios_base.h ****   enum _Ios_Openmode 
 106:/usr/include/c++/4.6.3/bits/ios_base.h ****     { 
 107:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_app 		= 1L << 0,
 108:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_ate 		= 1L << 1,
 109:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_bin 		= 1L << 2,
 110:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_in 		= 1L << 3,
 111:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_out 		= 1L << 4,
 112:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_trunc 		= 1L << 5,
 113:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_ios_openmode_end = 1L << 16 
 114:/usr/include/c++/4.6.3/bits/ios_base.h ****     };
 115:/usr/include/c++/4.6.3/bits/ios_base.h **** 
 116:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Openmode
 117:/usr/include/c++/4.6.3/bits/ios_base.h ****   operator&(_Ios_Openmode __a, _Ios_Openmode __b)
 118:/usr/include/c++/4.6.3/bits/ios_base.h ****   { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }
 119:/usr/include/c++/4.6.3/bits/ios_base.h **** 
 120:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Openmode
 121:/usr/include/c++/4.6.3/bits/ios_base.h ****   operator|(_Ios_Openmode __a, _Ios_Openmode __b)
 122:/usr/include/c++/4.6.3/bits/ios_base.h ****   { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }
 123:/usr/include/c++/4.6.3/bits/ios_base.h **** 
 124:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Openmode
 125:/usr/include/c++/4.6.3/bits/ios_base.h ****   operator^(_Ios_Openmode __a, _Ios_Openmode __b)
 126:/usr/include/c++/4.6.3/bits/ios_base.h ****   { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }
 127:/usr/include/c++/4.6.3/bits/ios_base.h **** 
 128:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Openmode
 129:/usr/include/c++/4.6.3/bits/ios_base.h ****   operator~(_Ios_Openmode __a)
 130:/usr/include/c++/4.6.3/bits/ios_base.h ****   { return _Ios_Openmode(~static_cast<int>(__a)); }
 131:/usr/include/c++/4.6.3/bits/ios_base.h **** 
 132:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline const _Ios_Openmode&
 133:/usr/include/c++/4.6.3/bits/ios_base.h ****   operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
 134:/usr/include/c++/4.6.3/bits/ios_base.h ****   { return __a = __a | __b; }
 135:/usr/include/c++/4.6.3/bits/ios_base.h **** 
 136:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline const _Ios_Openmode&
 137:/usr/include/c++/4.6.3/bits/ios_base.h ****   operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
 138:/usr/include/c++/4.6.3/bits/ios_base.h ****   { return __a = __a & __b; }
 139:/usr/include/c++/4.6.3/bits/ios_base.h **** 
 140:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline const _Ios_Openmode&
 141:/usr/include/c++/4.6.3/bits/ios_base.h ****   operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
 142:/usr/include/c++/4.6.3/bits/ios_base.h ****   { return __a = __a ^ __b; }
 143:/usr/include/c++/4.6.3/bits/ios_base.h **** 
 144:/usr/include/c++/4.6.3/bits/ios_base.h **** 
 145:/usr/include/c++/4.6.3/bits/ios_base.h ****   enum _Ios_Iostate
 146:/usr/include/c++/4.6.3/bits/ios_base.h ****     { 
 147:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_goodbit 		= 0,
 148:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_badbit 		= 1L << 0,
 149:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_eofbit 		= 1L << 1,
 150:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_failbit		= 1L << 2,
 151:/usr/include/c++/4.6.3/bits/ios_base.h ****       _S_ios_iostate_end = 1L << 16 
 152:/usr/include/c++/4.6.3/bits/ios_base.h ****     };
 153:/usr/include/c++/4.6.3/bits/ios_base.h **** 
 154:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Iostate
 155:/usr/include/c++/4.6.3/bits/ios_base.h ****   operator&(_Ios_Iostate __a, _Ios_Iostate __b)
 156:/usr/include/c++/4.6.3/bits/ios_base.h ****   { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }
 157:/usr/include/c++/4.6.3/bits/ios_base.h **** 
 158:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Iostate
 1181              		.loc	8 158 26
 1182              	.Ltmp388:
 1183              		#DEBUG_VALUE: operator|:__a <- ESI+0 # /usr/include/c++/4.6.3/bits/ios_base.h:158:26[ /usr/include
 130:/usr/include/c++/4.6.3/bits/basic_ios.h ****       { return _M_streambuf_state; }
 131:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 132:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 133:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  [Re]sets the error state.
 134:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @param  state  The new state flag(s) to set.
 135:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 136:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  See std::ios_base::iostate for the possible bit values.  Most
 137:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  users will not need to pass an argument.
 138:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 139:/usr/include/c++/4.6.3/bits/basic_ios.h ****       void
 140:/usr/include/c++/4.6.3/bits/basic_ios.h ****       clear(iostate __state = goodbit);
 141:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 142:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 143:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Sets additional flags in the error state.
 144:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @param  state  The additional state flag(s) to set.
 145:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 146:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  See std::ios_base::iostate for the possible bit values.
 147:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 148:/usr/include/c++/4.6.3/bits/basic_ios.h ****       void
 1184              		.loc	14 148 7
 1185              	.Ltmp389:
 1186              		#DEBUG_VALUE: setstate:this <- RDI+0 # /usr/include/c++/4.6.3/bits/basic_ios.h:148:7[ /usr/include
 1187              		.loc	14 148 24
 1188              	.Ltmp390:
 1189              		#DEBUG_VALUE: setstate:__state <- 4+0 # /usr/include/c++/4.6.3/bits/basic_ios.h:148:24[ /usr/inclu
 128:/usr/include/c++/4.6.3/bits/basic_ios.h ****       iostate
 1190              		.loc	14 128 7
 1191              	.Ltmp391:
 1192              		#DEBUG_VALUE: rdstate:this <- RDI+0 # /usr/include/c++/4.6.3/bits/basic_ios.h:128:7[ /usr/include/
 1193              	.Ltmp307:
 1194              	.Ltmp392:
 1195              		.loc	27 571 4
 1196              	.Ltmp393:
 1197 050a 488DBC05 		leaq	-896(%rbp,%rax), %rdi   # /usr/include/c++/4.6.3/fstream:571:4[ ./matrix-util.C:490:4 ]
 1197      80FCFFFF 
 1198              	.Ltmp394:
 1199              		#DEBUG_VALUE: operator|:__a <- undef
 159:/usr/include/c++/4.6.3/bits/ios_base.h ****   operator|(_Ios_Iostate __a, _Ios_Iostate __b)
 1200              		.loc	8 159 5
 1201              	.Ltmp395:
 1202 0512 83CE04   		orl	$4, %esi                # /usr/include/c++/4.6.3/bits/ios_base.h:159:5[ /usr/include/c++/4.6.3
 158:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Iostate
 1203              		.loc	8 158 44
 1204              	.Ltmp396:
 1205              		#DEBUG_VALUE: operator|:__b <- 4+0 # /usr/include/c++/4.6.3/bits/ios_base.h:158:44[ /usr/include/c
 1206 0515 E8000000 		callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate
 1206      00
 1207              	.Ltmp308:
 1208              	.LBB1_27:                               # %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit
 1209              	.Ltmp397:
 1210              		#DEBUG_VALUE: process_mem_usage:vm_usage <- R14+0
 1211              	.Ltmp398:
 1212              		#DEBUG_VALUE: process_mem_usage:vm_usage <- undef
 1213              	.Ltmp399:
 1214              		#DEBUG_VALUE: process_mem_usage:resident_set <- RBX+0
 1215              	.Ltmp400:
 1216              		#DEBUG_VALUE: process_mem_usage:resident_set <- undef
 1217 051a BF1E0000 		movl	$30, %edi
 1217      00
 1218              	.Ltmp401:
 486:./matrix-util.C **** 			   >> tpgid >> flags >> minflt >> cminflt >> majflt >> cmajflt
 487:./matrix-util.C **** 			   >> utime >> stime >> cutime >> cstime >> priority >> nice
 488:./matrix-util.C **** 			   >> O >> itrealvalue >> starttime >> vsize >> rss; // don't care about the rest
 489:./matrix-util.C **** 
 490:./matrix-util.C ****    stat_stream.close();
 491:./matrix-util.C **** 
 492:./matrix-util.C ****    long page_size_kb = sysconf(_SC_PAGE_SIZE) / 1024; // in case x86-64 is configured to use 2MB pa
 1219              		.loc	2 492 53
 1220              	.Ltmp402:
 1221 051f E8000000 		callq	sysconf                 # ./matrix-util.C:492:53
 1221      00
 493:./matrix-util.C ****    vm_usage     = vsize / 1024.0;
 1222              		.loc	2 493 4
 1223              	.Ltmp403:
 1224 0524 488B8DC8 		movq	-1080(%rbp), %rcx       # ./matrix-util.C:493:4
 1224      FBFFFF
 1225 052b 89CA     		movl	%ecx, %edx              # ./matrix-util.C:493:4
 1226 052d 48BE0000 		movabsq	$4841369599423283200, %rsi # imm = 0x4330000000000000
 1226      00000000 
 1226      3043
 1227 0537 4809D6   		orq	%rdx, %rsi              # ./matrix-util.C:493:4
 1228 053a 48C1E920 		shrq	$32, %rcx               # ./matrix-util.C:493:4
 1229 053e 48BA0000 		movabsq	$4985484787499139072, %rdx # imm = 0x4530000000000000
 1229      00000000 
 1229      3045
 1230 0548 4809CA   		orq	%rcx, %rdx              # ./matrix-util.C:493:4
 1231 054b 66480F6E 		movd	%rdx, %xmm0             # ./matrix-util.C:493:4
 1231      C2
 1232 0550 F20F5C05 		subsd	.LCPI1_0(%rip), %xmm0   # ./matrix-util.C:493:4
 1232      00000000 
 1233 0558 66480F6E 		movd	%rsi, %xmm1             # ./matrix-util.C:493:4
 1233      CE
 492:./matrix-util.C ****    long page_size_kb = sysconf(_SC_PAGE_SIZE) / 1024; // in case x86-64 is configured to use 2MB pa
 1234              		.loc	2 492 53
 1235              	.Ltmp404:
 1236 055d 4889C1   		movq	%rax, %rcx              # ./matrix-util.C:492:53
 1237 0560 48C1F93F 		sarq	$63, %rcx               # ./matrix-util.C:492:53
 1238 0564 48C1E936 		shrq	$54, %rcx               # ./matrix-util.C:492:53
 1239 0568 4801C1   		addq	%rax, %rcx              # ./matrix-util.C:492:53
 1240 056b 48C1F90A 		sarq	$10, %rcx               # ./matrix-util.C:492:53
 1241 056f 41BF0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r15d
 1241      0000
 1242              		.loc	2 493 4
 1243              	.Ltmp405:
 1244 0575 F20F58C8 		addsd	%xmm0, %xmm1            # ./matrix-util.C:493:4
 1245 0579 F20F5E0D 		divsd	.LCPI1_1(%rip), %xmm1   # ./matrix-util.C:493:4
 1245      00000000 
 1246 0581 F2410F11 		movsd	%xmm1, (%r14)           # ./matrix-util.C:493:4
 1246      0E
 494:./matrix-util.C ****    resident_set = rss * page_size_kb;
 1247              		.loc	2 494 4
 1248              	.Ltmp406:
 1249 0586 480FAF8D 		imulq	-1088(%rbp), %rcx       # ./matrix-util.C:494:4
 1249      C0FBFFFF 
 1250 058e F2480F2A 		cvtsi2sdq	%rcx, %xmm0     # ./matrix-util.C:494:4
 1250      C1
 1251 0593 F20F1103 		movsd	%xmm0, (%rbx)           # ./matrix-util.C:494:4
 1252 0597 488BBDD0 		movq	-1072(%rbp), %rdi
 1252      FBFFFF
 1253 059e 488D5FE8 		leaq	-24(%rdi), %rbx
 1254 05a2 4C39FB   		cmpq	%r15, %rbx
 1255 05a5 7434     		je	.LBB1_33
 1256              	# BB#28:
 1257 05a7 4883C7F8 		addq	$-8, %rdi
 1258 05ab B8000000 		movl	$pthread_cancel, %eax
 1258      00
 1259 05b0 4885C0   		testq	%rax, %rax
 1260              	.Ltmp407:
 1261              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1262 05b3 740C     		je	.LBB1_30
 1263              	# BB#29:
 1264              	.Ltmp408:
 1265              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1266 05b5 BEFFFFFF 		movl	$-1, %esi
 1266      FF
 1267 05ba E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 1267      00
 1268 05bf EB07     		jmp	.LBB1_31
 1269              	.LBB1_30:
 1270              	.Ltmp409:
 1271              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1272              	.Ltmp410:
 1273              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 1274 05c1 8B07     		movl	(%rdi), %eax
 1275              	.Ltmp411:
 1276              		#DEBUG_VALUE: __result <- EAX+0
 1277 05c3 8D48FF   		leal	-1(%rax), %ecx
 1278 05c6 890F     		movl	%ecx, (%rdi)
 1279              	.Ltmp412:
 1280              		#DEBUG_VALUE: __result <- undef
 1281              	.LBB1_31:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 1282              	.Ltmp413:
 1283              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1284 05c8 85C0     		testl	%eax, %eax
 1285 05ca 7F0F     		jg	.LBB1_33
 1286              	# BB#32:
 1287              	.Ltmp414:
 1288              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1289 05cc 488DB5E0 		leaq	-288(%rbp), %rsi
 1289      FEFFFF
 1290 05d3 4889DF   		movq	%rbx, %rdi
 1291 05d6 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 1291      00
 1292              	.LBB1_33:                               # %_ZNSsD1Ev.exit34
 1293 05db 488BBDD8 		movq	-1064(%rbp), %rdi
 1293      FBFFFF
 1294 05e2 488D5FE8 		leaq	-24(%rdi), %rbx
 1295 05e6 4C39FB   		cmpq	%r15, %rbx
 1296 05e9 7434     		je	.LBB1_39
 1297              	# BB#34:
 1298 05eb 4883C7F8 		addq	$-8, %rdi
 1299 05ef B8000000 		movl	$pthread_cancel, %eax
 1299      00
 1300 05f4 4885C0   		testq	%rax, %rax
 1301              	.Ltmp415:
 1302              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1303 05f7 740C     		je	.LBB1_36
 1304              	# BB#35:
 1305              	.Ltmp416:
 1306              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1307 05f9 BEFFFFFF 		movl	$-1, %esi
 1307      FF
 1308 05fe E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 1308      00
 1309 0603 EB07     		jmp	.LBB1_37
 1310              	.LBB1_36:
 1311              	.Ltmp417:
 1312              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1313              	.Ltmp418:
 1314              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 1315 0605 8B07     		movl	(%rdi), %eax
 1316              	.Ltmp419:
 1317              		#DEBUG_VALUE: __result <- EAX+0
 1318 0607 8D48FF   		leal	-1(%rax), %ecx
 1319 060a 890F     		movl	%ecx, (%rdi)
 1320              	.Ltmp420:
 1321              		#DEBUG_VALUE: __result <- undef
 1322              	.LBB1_37:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 1323              	.Ltmp421:
 1324              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1325 060c 85C0     		testl	%eax, %eax
 1326 060e 7F0F     		jg	.LBB1_39
 1327              	# BB#38:
 1328              	.Ltmp422:
 1329              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1330 0610 488DB5E8 		leaq	-280(%rbp), %rsi
 1330      FEFFFF
 1331 0617 4889DF   		movq	%rbx, %rdi
 1332 061a E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 1332      00
 1333              	.LBB1_39:                               # %_ZNSsD1Ev.exit37
 1334 061f 488BBDE0 		movq	-1056(%rbp), %rdi
 1334      FBFFFF
 1335 0626 488D5FE8 		leaq	-24(%rdi), %rbx
 1336 062a 41BE0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r14d
 1336      0000
 1337 0630 4C39F3   		cmpq	%r14, %rbx
 1338 0633 7434     		je	.LBB1_45
 1339              	# BB#40:
 1340 0635 4883C7F8 		addq	$-8, %rdi
 1341 0639 B8000000 		movl	$pthread_cancel, %eax
 1341      00
 1342 063e 4885C0   		testq	%rax, %rax
 1343              	.Ltmp423:
 1344              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1345 0641 740C     		je	.LBB1_42
 1346              	# BB#41:
 1347              	.Ltmp424:
 1348              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1349 0643 BEFFFFFF 		movl	$-1, %esi
 1349      FF
 1350 0648 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 1350      00
 1351 064d EB07     		jmp	.LBB1_43
 1352              	.LBB1_42:
 1353              	.Ltmp425:
 1354              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1355              	.Ltmp426:
 1356              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 1357 064f 8B07     		movl	(%rdi), %eax
 1358              	.Ltmp427:
 1359              		#DEBUG_VALUE: __result <- EAX+0
 1360 0651 8D48FF   		leal	-1(%rax), %ecx
 1361 0654 890F     		movl	%ecx, (%rdi)
 1362              	.Ltmp428:
 1363              		#DEBUG_VALUE: __result <- undef
 1364              	.LBB1_43:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 1365              	.Ltmp429:
 1366              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1367 0656 85C0     		testl	%eax, %eax
 1368 0658 7F0F     		jg	.LBB1_45
 1369              	# BB#44:
 1370              	.Ltmp430:
 1371              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1372 065a 488DB5F0 		leaq	-272(%rbp), %rsi
 1372      FEFFFF
 1373 0661 4889DF   		movq	%rbx, %rdi
 1374 0664 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 1374      00
 1375              	.LBB1_45:                               # %_ZNSsD1Ev.exit40
 1376 0669 488BBDE8 		movq	-1048(%rbp), %rdi
 1376      FBFFFF
 1377 0670 488D5FE8 		leaq	-24(%rdi), %rbx
 1378 0674 4C39F3   		cmpq	%r14, %rbx
 1379 0677 7434     		je	.LBB1_51
 1380              	# BB#46:
 1381 0679 4883C7F8 		addq	$-8, %rdi
 1382 067d B8000000 		movl	$pthread_cancel, %eax
 1382      00
 1383 0682 4885C0   		testq	%rax, %rax
 1384              	.Ltmp431:
 1385              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1386 0685 740C     		je	.LBB1_48
 1387              	# BB#47:
 1388              	.Ltmp432:
 1389              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1390 0687 BEFFFFFF 		movl	$-1, %esi
 1390      FF
 1391 068c E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 1391      00
 1392 0691 EB07     		jmp	.LBB1_49
 1393              	.LBB1_48:
 1394              	.Ltmp433:
 1395              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1396              	.Ltmp434:
 1397              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 1398 0693 8B07     		movl	(%rdi), %eax
 1399              	.Ltmp435:
 1400              		#DEBUG_VALUE: __result <- EAX+0
 1401 0695 8D48FF   		leal	-1(%rax), %ecx
 1402 0698 890F     		movl	%ecx, (%rdi)
 1403              	.Ltmp436:
 1404              		#DEBUG_VALUE: __result <- undef
 1405              	.LBB1_49:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 1406              	.Ltmp437:
 1407              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1408 069a 85C0     		testl	%eax, %eax
 1409 069c 7F0F     		jg	.LBB1_51
 1410              	# BB#50:
 1411              	.Ltmp438:
 1412              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1413 069e 488DB5F8 		leaq	-264(%rbp), %rsi
 1413      FEFFFF
 1414 06a5 4889DF   		movq	%rbx, %rdi
 1415 06a8 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 1415      00
 1416              	.LBB1_51:                               # %_ZNSsD1Ev.exit43
 1417 06ad 488BBDF0 		movq	-1040(%rbp), %rdi
 1417      FBFFFF
 1418 06b4 488D5FE8 		leaq	-24(%rdi), %rbx
 1419 06b8 41BE0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r14d
 1419      0000
 1420 06be 4C39F3   		cmpq	%r14, %rbx
 1421 06c1 7434     		je	.LBB1_57
 1422              	# BB#52:
 1423 06c3 4883C7F8 		addq	$-8, %rdi
 1424 06c7 B8000000 		movl	$pthread_cancel, %eax
 1424      00
 1425 06cc 4885C0   		testq	%rax, %rax
 1426              	.Ltmp439:
 1427              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1428 06cf 740C     		je	.LBB1_54
 1429              	# BB#53:
 1430              	.Ltmp440:
 1431              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1432 06d1 BEFFFFFF 		movl	$-1, %esi
 1432      FF
 1433 06d6 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 1433      00
 1434 06db EB07     		jmp	.LBB1_55
 1435              	.LBB1_54:
 1436              	.Ltmp441:
 1437              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1438              	.Ltmp442:
 1439              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 1440 06dd 8B07     		movl	(%rdi), %eax
 1441              	.Ltmp443:
 1442              		#DEBUG_VALUE: __result <- EAX+0
 1443 06df 8D48FF   		leal	-1(%rax), %ecx
 1444 06e2 890F     		movl	%ecx, (%rdi)
 1445              	.Ltmp444:
 1446              		#DEBUG_VALUE: __result <- undef
 1447              	.LBB1_55:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 1448              	.Ltmp445:
 1449              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1450 06e4 85C0     		testl	%eax, %eax
 1451 06e6 7F0F     		jg	.LBB1_57
 1452              	# BB#56:
 1453              	.Ltmp446:
 1454              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1455 06e8 488DB500 		leaq	-256(%rbp), %rsi
 1455      FFFFFF
 1456 06ef 4889DF   		movq	%rbx, %rdi
 1457 06f2 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 1457      00
 1458              	.LBB1_57:                               # %_ZNSsD1Ev.exit46
 1459 06f7 488BBDF8 		movq	-1032(%rbp), %rdi
 1459      FBFFFF
 1460 06fe 488D5FE8 		leaq	-24(%rdi), %rbx
 1461 0702 4C39F3   		cmpq	%r14, %rbx
 1462 0705 7434     		je	.LBB1_63
 1463              	# BB#58:
 1464 0707 4883C7F8 		addq	$-8, %rdi
 1465 070b B8000000 		movl	$pthread_cancel, %eax
 1465      00
 1466 0710 4885C0   		testq	%rax, %rax
 1467              	.Ltmp447:
 1468              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1469 0713 740C     		je	.LBB1_60
 1470              	# BB#59:
 1471              	.Ltmp448:
 1472              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1473 0715 BEFFFFFF 		movl	$-1, %esi
 1473      FF
 1474 071a E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 1474      00
 1475 071f EB07     		jmp	.LBB1_61
 1476              	.LBB1_60:
 1477              	.Ltmp449:
 1478              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1479              	.Ltmp450:
 1480              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 1481 0721 8B07     		movl	(%rdi), %eax
 1482              	.Ltmp451:
 1483              		#DEBUG_VALUE: __result <- EAX+0
 1484 0723 8D48FF   		leal	-1(%rax), %ecx
 1485 0726 890F     		movl	%ecx, (%rdi)
 1486              	.Ltmp452:
 1487              		#DEBUG_VALUE: __result <- undef
 1488              	.LBB1_61:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 1489              	.Ltmp453:
 1490              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1491 0728 85C0     		testl	%eax, %eax
 1492 072a 7F0F     		jg	.LBB1_63
 1493              	# BB#62:
 1494              	.Ltmp454:
 1495              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1496 072c 488DB508 		leaq	-248(%rbp), %rsi
 1496      FFFFFF
 1497 0733 4889DF   		movq	%rbx, %rdi
 1498 0736 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 1498      00
 1499              	.LBB1_63:                               # %_ZNSsD1Ev.exit49
 1500 073b 488BBD00 		movq	-1024(%rbp), %rdi
 1500      FCFFFF
 1501 0742 488D5FE8 		leaq	-24(%rdi), %rbx
 1502 0746 41BE0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r14d
 1502      0000
 1503 074c 4C39F3   		cmpq	%r14, %rbx
 1504 074f 7434     		je	.LBB1_69
 1505              	# BB#64:
 1506 0751 4883C7F8 		addq	$-8, %rdi
 1507 0755 B8000000 		movl	$pthread_cancel, %eax
 1507      00
 1508 075a 4885C0   		testq	%rax, %rax
 1509              	.Ltmp455:
 1510              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1511 075d 740C     		je	.LBB1_66
 1512              	# BB#65:
 1513              	.Ltmp456:
 1514              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1515 075f BEFFFFFF 		movl	$-1, %esi
 1515      FF
 1516 0764 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 1516      00
 1517 0769 EB07     		jmp	.LBB1_67
 1518              	.LBB1_66:
 1519              	.Ltmp457:
 1520              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1521              	.Ltmp458:
 1522              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 1523 076b 8B07     		movl	(%rdi), %eax
 1524              	.Ltmp459:
 1525              		#DEBUG_VALUE: __result <- EAX+0
 1526 076d 8D48FF   		leal	-1(%rax), %ecx
 1527 0770 890F     		movl	%ecx, (%rdi)
 1528              	.Ltmp460:
 1529              		#DEBUG_VALUE: __result <- undef
 1530              	.LBB1_67:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 1531              	.Ltmp461:
 1532              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1533 0772 85C0     		testl	%eax, %eax
 1534 0774 7F0F     		jg	.LBB1_69
 1535              	# BB#68:
 1536              	.Ltmp462:
 1537              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1538 0776 488DB510 		leaq	-240(%rbp), %rsi
 1538      FFFFFF
 1539 077d 4889DF   		movq	%rbx, %rdi
 1540 0780 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 1540      00
 1541              	.LBB1_69:                               # %_ZNSsD1Ev.exit52
 1542 0785 488BBD08 		movq	-1016(%rbp), %rdi
 1542      FCFFFF
 1543 078c 488D5FE8 		leaq	-24(%rdi), %rbx
 1544 0790 4C39F3   		cmpq	%r14, %rbx
 1545 0793 7434     		je	.LBB1_75
 1546              	# BB#70:
 1547 0795 4883C7F8 		addq	$-8, %rdi
 1548 0799 B8000000 		movl	$pthread_cancel, %eax
 1548      00
 1549 079e 4885C0   		testq	%rax, %rax
 1550              	.Ltmp463:
 1551              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1552 07a1 740C     		je	.LBB1_72
 1553              	# BB#71:
 1554              	.Ltmp464:
 1555              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1556 07a3 BEFFFFFF 		movl	$-1, %esi
 1556      FF
 1557 07a8 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 1557      00
 1558 07ad EB07     		jmp	.LBB1_73
 1559              	.LBB1_72:
 1560              	.Ltmp465:
 1561              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1562              	.Ltmp466:
 1563              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 1564 07af 8B07     		movl	(%rdi), %eax
 1565              	.Ltmp467:
 1566              		#DEBUG_VALUE: __result <- EAX+0
 1567 07b1 8D48FF   		leal	-1(%rax), %ecx
 1568 07b4 890F     		movl	%ecx, (%rdi)
 1569              	.Ltmp468:
 1570              		#DEBUG_VALUE: __result <- undef
 1571              	.LBB1_73:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 1572              	.Ltmp469:
 1573              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1574 07b6 85C0     		testl	%eax, %eax
 1575 07b8 7F0F     		jg	.LBB1_75
 1576              	# BB#74:
 1577              	.Ltmp470:
 1578              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1579 07ba 488DB518 		leaq	-232(%rbp), %rsi
 1579      FFFFFF
 1580 07c1 4889DF   		movq	%rbx, %rdi
 1581 07c4 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 1581      00
 1582              	.LBB1_75:                               # %_ZNSsD1Ev.exit55
 1583 07c9 488BBD10 		movq	-1008(%rbp), %rdi
 1583      FCFFFF
 1584 07d0 488D5FE8 		leaq	-24(%rdi), %rbx
 1585 07d4 41BE0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r14d
 1585      0000
 1586 07da 4C39F3   		cmpq	%r14, %rbx
 1587 07dd 7434     		je	.LBB1_81
 1588              	# BB#76:
 1589 07df 4883C7F8 		addq	$-8, %rdi
 1590 07e3 B8000000 		movl	$pthread_cancel, %eax
 1590      00
 1591 07e8 4885C0   		testq	%rax, %rax
 1592              	.Ltmp471:
 1593              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1594 07eb 740C     		je	.LBB1_78
 1595              	# BB#77:
 1596              	.Ltmp472:
 1597              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1598 07ed BEFFFFFF 		movl	$-1, %esi
 1598      FF
 1599 07f2 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 1599      00
 1600 07f7 EB07     		jmp	.LBB1_79
 1601              	.LBB1_78:
 1602              	.Ltmp473:
 1603              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1604              	.Ltmp474:
 1605              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 1606 07f9 8B07     		movl	(%rdi), %eax
 1607              	.Ltmp475:
 1608              		#DEBUG_VALUE: __result <- EAX+0
 1609 07fb 8D48FF   		leal	-1(%rax), %ecx
 1610 07fe 890F     		movl	%ecx, (%rdi)
 1611              	.Ltmp476:
 1612              		#DEBUG_VALUE: __result <- undef
 1613              	.LBB1_79:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 1614              	.Ltmp477:
 1615              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1616 0800 85C0     		testl	%eax, %eax
 1617 0802 7F0F     		jg	.LBB1_81
 1618              	# BB#80:
 1619              	.Ltmp478:
 1620              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1621 0804 488DB520 		leaq	-224(%rbp), %rsi
 1621      FFFFFF
 1622 080b 4889DF   		movq	%rbx, %rdi
 1623 080e E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 1623      00
 1624              	.LBB1_81:                               # %_ZNSsD1Ev.exit58
 1625 0813 488BBD18 		movq	-1000(%rbp), %rdi
 1625      FCFFFF
 1626 081a 488D5FE8 		leaq	-24(%rdi), %rbx
 1627 081e 4C39F3   		cmpq	%r14, %rbx
 1628 0821 7434     		je	.LBB1_87
 1629              	# BB#82:
 1630 0823 4883C7F8 		addq	$-8, %rdi
 1631 0827 B8000000 		movl	$pthread_cancel, %eax
 1631      00
 1632 082c 4885C0   		testq	%rax, %rax
 1633              	.Ltmp479:
 1634              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1635 082f 740C     		je	.LBB1_84
 1636              	# BB#83:
 1637              	.Ltmp480:
 1638              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1639 0831 BEFFFFFF 		movl	$-1, %esi
 1639      FF
 1640 0836 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 1640      00
 1641 083b EB07     		jmp	.LBB1_85
 1642              	.LBB1_84:
 1643              	.Ltmp481:
 1644              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1645              	.Ltmp482:
 1646              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 1647 083d 8B07     		movl	(%rdi), %eax
 1648              	.Ltmp483:
 1649              		#DEBUG_VALUE: __result <- EAX+0
 1650 083f 8D48FF   		leal	-1(%rax), %ecx
 1651 0842 890F     		movl	%ecx, (%rdi)
 1652              	.Ltmp484:
 1653              		#DEBUG_VALUE: __result <- undef
 1654              	.LBB1_85:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 1655              	.Ltmp485:
 1656              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1657 0844 85C0     		testl	%eax, %eax
 1658 0846 7F0F     		jg	.LBB1_87
 1659              	# BB#86:
 1660              	.Ltmp486:
 1661              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1662 0848 488DB528 		leaq	-216(%rbp), %rsi
 1662      FFFFFF
 1663 084f 4889DF   		movq	%rbx, %rdi
 1664 0852 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 1664      00
 1665              	.LBB1_87:                               # %_ZNSsD1Ev.exit61
 1666 0857 488BBD20 		movq	-992(%rbp), %rdi
 1666      FCFFFF
 1667 085e 488D5FE8 		leaq	-24(%rdi), %rbx
 1668 0862 41BE0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r14d
 1668      0000
 1669 0868 4C39F3   		cmpq	%r14, %rbx
 1670 086b 7434     		je	.LBB1_93
 1671              	# BB#88:
 1672 086d 4883C7F8 		addq	$-8, %rdi
 1673 0871 B8000000 		movl	$pthread_cancel, %eax
 1673      00
 1674 0876 4885C0   		testq	%rax, %rax
 1675              	.Ltmp487:
 1676              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1677 0879 740C     		je	.LBB1_90
 1678              	# BB#89:
 1679              	.Ltmp488:
 1680              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1681 087b BEFFFFFF 		movl	$-1, %esi
 1681      FF
 1682 0880 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 1682      00
 1683 0885 EB07     		jmp	.LBB1_91
 1684              	.LBB1_90:
 1685              	.Ltmp489:
 1686              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1687              	.Ltmp490:
 1688              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 1689 0887 8B07     		movl	(%rdi), %eax
 1690              	.Ltmp491:
 1691              		#DEBUG_VALUE: __result <- EAX+0
 1692 0889 8D48FF   		leal	-1(%rax), %ecx
 1693 088c 890F     		movl	%ecx, (%rdi)
 1694              	.Ltmp492:
 1695              		#DEBUG_VALUE: __result <- undef
 1696              	.LBB1_91:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 1697              	.Ltmp493:
 1698              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1699 088e 85C0     		testl	%eax, %eax
 1700 0890 7F0F     		jg	.LBB1_93
 1701              	# BB#92:
 1702              	.Ltmp494:
 1703              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1704 0892 488DB530 		leaq	-208(%rbp), %rsi
 1704      FFFFFF
 1705 0899 4889DF   		movq	%rbx, %rdi
 1706 089c E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 1706      00
 1707              	.LBB1_93:                               # %_ZNSsD1Ev.exit64
 1708 08a1 488BBD28 		movq	-984(%rbp), %rdi
 1708      FCFFFF
 1709 08a8 488D5FE8 		leaq	-24(%rdi), %rbx
 1710 08ac 4C39F3   		cmpq	%r14, %rbx
 1711 08af 7434     		je	.LBB1_99
 1712              	# BB#94:
 1713 08b1 4883C7F8 		addq	$-8, %rdi
 1714 08b5 B8000000 		movl	$pthread_cancel, %eax
 1714      00
 1715 08ba 4885C0   		testq	%rax, %rax
 1716              	.Ltmp495:
 1717              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1718 08bd 740C     		je	.LBB1_96
 1719              	# BB#95:
 1720              	.Ltmp496:
 1721              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1722 08bf BEFFFFFF 		movl	$-1, %esi
 1722      FF
 1723 08c4 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 1723      00
 1724 08c9 EB07     		jmp	.LBB1_97
 1725              	.LBB1_96:
 1726              	.Ltmp497:
 1727              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1728              	.Ltmp498:
 1729              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 1730 08cb 8B07     		movl	(%rdi), %eax
 1731              	.Ltmp499:
 1732              		#DEBUG_VALUE: __result <- EAX+0
 1733 08cd 8D48FF   		leal	-1(%rax), %ecx
 1734 08d0 890F     		movl	%ecx, (%rdi)
 1735              	.Ltmp500:
 1736              		#DEBUG_VALUE: __result <- undef
 1737              	.LBB1_97:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 1738              	.Ltmp501:
 1739              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1740 08d2 85C0     		testl	%eax, %eax
 1741 08d4 7F0F     		jg	.LBB1_99
 1742              	# BB#98:
 1743              	.Ltmp502:
 1744              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1745 08d6 488DB538 		leaq	-200(%rbp), %rsi
 1745      FFFFFF
 1746 08dd 4889DF   		movq	%rbx, %rdi
 1747 08e0 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 1747      00
 1748              	.LBB1_99:                               # %_ZNSsD1Ev.exit67
 1749 08e5 488BBD30 		movq	-976(%rbp), %rdi
 1749      FCFFFF
 1750 08ec 488D5FE8 		leaq	-24(%rdi), %rbx
 1751 08f0 41BE0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r14d
 1751      0000
 1752 08f6 4C39F3   		cmpq	%r14, %rbx
 1753 08f9 7434     		je	.LBB1_105
 1754              	# BB#100:
 1755 08fb 4883C7F8 		addq	$-8, %rdi
 1756 08ff B8000000 		movl	$pthread_cancel, %eax
 1756      00
 1757 0904 4885C0   		testq	%rax, %rax
 1758              	.Ltmp503:
 1759              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1760 0907 740C     		je	.LBB1_102
 1761              	# BB#101:
 1762              	.Ltmp504:
 1763              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1764 0909 BEFFFFFF 		movl	$-1, %esi
 1764      FF
 1765 090e E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 1765      00
 1766 0913 EB07     		jmp	.LBB1_103
 1767              	.LBB1_102:
 1768              	.Ltmp505:
 1769              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1770              	.Ltmp506:
 1771              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 1772 0915 8B07     		movl	(%rdi), %eax
 1773              	.Ltmp507:
 1774              		#DEBUG_VALUE: __result <- EAX+0
 1775 0917 8D48FF   		leal	-1(%rax), %ecx
 1776 091a 890F     		movl	%ecx, (%rdi)
 1777              	.Ltmp508:
 1778              		#DEBUG_VALUE: __result <- undef
 1779              	.LBB1_103:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 1780              	.Ltmp509:
 1781              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1782 091c 85C0     		testl	%eax, %eax
 1783 091e 7F0F     		jg	.LBB1_105
 1784              	# BB#104:
 1785              	.Ltmp510:
 1786              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1787 0920 488DB540 		leaq	-192(%rbp), %rsi
 1787      FFFFFF
 1788 0927 4889DF   		movq	%rbx, %rdi
 1789 092a E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 1789      00
 1790              	.LBB1_105:                              # %_ZNSsD1Ev.exit70
 1791 092f 488BBD38 		movq	-968(%rbp), %rdi
 1791      FCFFFF
 1792 0936 488D5FE8 		leaq	-24(%rdi), %rbx
 1793 093a 4C39F3   		cmpq	%r14, %rbx
 1794 093d 7434     		je	.LBB1_111
 1795              	# BB#106:
 1796 093f 4883C7F8 		addq	$-8, %rdi
 1797 0943 B8000000 		movl	$pthread_cancel, %eax
 1797      00
 1798 0948 4885C0   		testq	%rax, %rax
 1799              	.Ltmp511:
 1800              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1801 094b 740C     		je	.LBB1_108
 1802              	# BB#107:
 1803              	.Ltmp512:
 1804              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1805 094d BEFFFFFF 		movl	$-1, %esi
 1805      FF
 1806 0952 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 1806      00
 1807 0957 EB07     		jmp	.LBB1_109
 1808              	.LBB1_108:
 1809              	.Ltmp513:
 1810              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1811              	.Ltmp514:
 1812              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 1813 0959 8B07     		movl	(%rdi), %eax
 1814              	.Ltmp515:
 1815              		#DEBUG_VALUE: __result <- EAX+0
 1816 095b 8D48FF   		leal	-1(%rax), %ecx
 1817 095e 890F     		movl	%ecx, (%rdi)
 1818              	.Ltmp516:
 1819              		#DEBUG_VALUE: __result <- undef
 1820              	.LBB1_109:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 1821              	.Ltmp517:
 1822              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1823 0960 85C0     		testl	%eax, %eax
 1824 0962 7F0F     		jg	.LBB1_111
 1825              	# BB#110:
 1826              	.Ltmp518:
 1827              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1828 0964 488DB548 		leaq	-184(%rbp), %rsi
 1828      FFFFFF
 1829 096b 4889DF   		movq	%rbx, %rdi
 1830 096e E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 1830      00
 1831              	.LBB1_111:                              # %_ZNSsD1Ev.exit73
 1832 0973 488BBD40 		movq	-960(%rbp), %rdi
 1832      FCFFFF
 1833 097a 488D5FE8 		leaq	-24(%rdi), %rbx
 1834 097e 41BE0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r14d
 1834      0000
 1835 0984 4C39F3   		cmpq	%r14, %rbx
 1836 0987 7434     		je	.LBB1_117
 1837              	# BB#112:
 1838 0989 4883C7F8 		addq	$-8, %rdi
 1839 098d B8000000 		movl	$pthread_cancel, %eax
 1839      00
 1840 0992 4885C0   		testq	%rax, %rax
 1841              	.Ltmp519:
 1842              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1843 0995 740C     		je	.LBB1_114
 1844              	# BB#113:
 1845              	.Ltmp520:
 1846              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1847 0997 BEFFFFFF 		movl	$-1, %esi
 1847      FF
 1848 099c E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 1848      00
 1849 09a1 EB07     		jmp	.LBB1_115
 1850              	.LBB1_114:
 1851              	.Ltmp521:
 1852              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1853              	.Ltmp522:
 1854              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 1855 09a3 8B07     		movl	(%rdi), %eax
 1856              	.Ltmp523:
 1857              		#DEBUG_VALUE: __result <- EAX+0
 1858 09a5 8D48FF   		leal	-1(%rax), %ecx
 1859 09a8 890F     		movl	%ecx, (%rdi)
 1860              	.Ltmp524:
 1861              		#DEBUG_VALUE: __result <- undef
 1862              	.LBB1_115:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 1863              	.Ltmp525:
 1864              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1865 09aa 85C0     		testl	%eax, %eax
 1866 09ac 7F0F     		jg	.LBB1_117
 1867              	# BB#116:
 1868              	.Ltmp526:
 1869              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1870 09ae 488DB550 		leaq	-176(%rbp), %rsi
 1870      FFFFFF
 1871 09b5 4889DF   		movq	%rbx, %rdi
 1872 09b8 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 1872      00
 1873              	.LBB1_117:                              # %_ZNSsD1Ev.exit76
 1874 09bd 488BBD48 		movq	-952(%rbp), %rdi
 1874      FCFFFF
 1875 09c4 488D5FE8 		leaq	-24(%rdi), %rbx
 1876 09c8 4C39F3   		cmpq	%r14, %rbx
 1877 09cb 7434     		je	.LBB1_123
 1878              	# BB#118:
 1879 09cd 4883C7F8 		addq	$-8, %rdi
 1880 09d1 B8000000 		movl	$pthread_cancel, %eax
 1880      00
 1881 09d6 4885C0   		testq	%rax, %rax
 1882              	.Ltmp527:
 1883              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1884 09d9 740C     		je	.LBB1_120
 1885              	# BB#119:
 1886              	.Ltmp528:
 1887              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1888 09db BEFFFFFF 		movl	$-1, %esi
 1888      FF
 1889 09e0 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 1889      00
 1890 09e5 EB07     		jmp	.LBB1_121
 1891              	.LBB1_120:
 1892              	.Ltmp529:
 1893              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1894              	.Ltmp530:
 1895              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 1896 09e7 8B07     		movl	(%rdi), %eax
 1897              	.Ltmp531:
 1898              		#DEBUG_VALUE: __result <- EAX+0
 1899 09e9 8D48FF   		leal	-1(%rax), %ecx
 1900 09ec 890F     		movl	%ecx, (%rdi)
 1901              	.Ltmp532:
 1902              		#DEBUG_VALUE: __result <- undef
 1903              	.LBB1_121:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 1904              	.Ltmp533:
 1905              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1906 09ee 85C0     		testl	%eax, %eax
 1907 09f0 7F0F     		jg	.LBB1_123
 1908              	# BB#122:
 1909              	.Ltmp534:
 1910              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1911 09f2 488DB558 		leaq	-168(%rbp), %rsi
 1911      FFFFFF
 1912 09f9 4889DF   		movq	%rbx, %rdi
 1913 09fc E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 1913      00
 1914              	.LBB1_123:                              # %_ZNSsD1Ev.exit79
 1915 0a01 488BBD50 		movq	-944(%rbp), %rdi
 1915      FCFFFF
 1916 0a08 488D5FE8 		leaq	-24(%rdi), %rbx
 1917 0a0c 41BE0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r14d
 1917      0000
 1918 0a12 4C39F3   		cmpq	%r14, %rbx
 1919 0a15 7434     		je	.LBB1_129
 1920              	# BB#124:
 1921 0a17 4883C7F8 		addq	$-8, %rdi
 1922 0a1b B8000000 		movl	$pthread_cancel, %eax
 1922      00
 1923 0a20 4885C0   		testq	%rax, %rax
 1924              	.Ltmp535:
 1925              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1926 0a23 740C     		je	.LBB1_126
 1927              	# BB#125:
 1928              	.Ltmp536:
 1929              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1930 0a25 BEFFFFFF 		movl	$-1, %esi
 1930      FF
 1931 0a2a E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 1931      00
 1932 0a2f EB07     		jmp	.LBB1_127
 1933              	.LBB1_126:
 1934              	.Ltmp537:
 1935              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1936              	.Ltmp538:
 1937              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 1938 0a31 8B07     		movl	(%rdi), %eax
 1939              	.Ltmp539:
 1940              		#DEBUG_VALUE: __result <- EAX+0
 1941 0a33 8D48FF   		leal	-1(%rax), %ecx
 1942 0a36 890F     		movl	%ecx, (%rdi)
 1943              	.Ltmp540:
 1944              		#DEBUG_VALUE: __result <- undef
 1945              	.LBB1_127:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 1946              	.Ltmp541:
 1947              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1948 0a38 85C0     		testl	%eax, %eax
 1949 0a3a 7F0F     		jg	.LBB1_129
 1950              	# BB#128:
 1951              	.Ltmp542:
 1952              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1953 0a3c 488DB560 		leaq	-160(%rbp), %rsi
 1953      FFFFFF
 1954 0a43 4889DF   		movq	%rbx, %rdi
 1955 0a46 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 1955      00
 1956              	.LBB1_129:                              # %_ZNSsD1Ev.exit82
 1957 0a4b 488BBD58 		movq	-936(%rbp), %rdi
 1957      FCFFFF
 1958 0a52 488D5FE8 		leaq	-24(%rdi), %rbx
 1959 0a56 4C39F3   		cmpq	%r14, %rbx
 1960 0a59 7434     		je	.LBB1_135
 1961              	# BB#130:
 1962 0a5b 4883C7F8 		addq	$-8, %rdi
 1963 0a5f B8000000 		movl	$pthread_cancel, %eax
 1963      00
 1964 0a64 4885C0   		testq	%rax, %rax
 1965              	.Ltmp543:
 1966              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1967 0a67 740C     		je	.LBB1_132
 1968              	# BB#131:
 1969              	.Ltmp544:
 1970              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1971 0a69 BEFFFFFF 		movl	$-1, %esi
 1971      FF
 1972 0a6e E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 1972      00
 1973 0a73 EB07     		jmp	.LBB1_133
 1974              	.LBB1_132:
 1975              	.Ltmp545:
 1976              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1977              	.Ltmp546:
 1978              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 1979 0a75 8B07     		movl	(%rdi), %eax
 1980              	.Ltmp547:
 1981              		#DEBUG_VALUE: __result <- EAX+0
 1982 0a77 8D48FF   		leal	-1(%rax), %ecx
 1983 0a7a 890F     		movl	%ecx, (%rdi)
 1984              	.Ltmp548:
 1985              		#DEBUG_VALUE: __result <- undef
 1986              	.LBB1_133:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 1987              	.Ltmp549:
 1988              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1989 0a7c 85C0     		testl	%eax, %eax
 1990 0a7e 7F0F     		jg	.LBB1_135
 1991              	# BB#134:
 1992              	.Ltmp550:
 1993              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 1994 0a80 488DB568 		leaq	-152(%rbp), %rsi
 1994      FFFFFF
 1995 0a87 4889DF   		movq	%rbx, %rdi
 1996 0a8a E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 1996      00
 1997              	.LBB1_135:                              # %_ZNSsD1Ev.exit85
 1998 0a8f 488BBD60 		movq	-928(%rbp), %rdi
 1998      FCFFFF
 1999 0a96 488D5FE8 		leaq	-24(%rdi), %rbx
 2000 0a9a 41BE0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r14d
 2000      0000
 2001 0aa0 4C39F3   		cmpq	%r14, %rbx
 2002 0aa3 7434     		je	.LBB1_141
 2003              	# BB#136:
 2004 0aa5 4883C7F8 		addq	$-8, %rdi
 2005 0aa9 B8000000 		movl	$pthread_cancel, %eax
 2005      00
 2006 0aae 4885C0   		testq	%rax, %rax
 2007              	.Ltmp551:
 2008              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2009 0ab1 740C     		je	.LBB1_138
 2010              	# BB#137:
 2011              	.Ltmp552:
 2012              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2013 0ab3 BEFFFFFF 		movl	$-1, %esi
 2013      FF
 2014 0ab8 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2014      00
 2015 0abd EB07     		jmp	.LBB1_139
 2016              	.LBB1_138:
 2017              	.Ltmp553:
 2018              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2019              	.Ltmp554:
 2020              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2021 0abf 8B07     		movl	(%rdi), %eax
 2022              	.Ltmp555:
 2023              		#DEBUG_VALUE: __result <- EAX+0
 2024 0ac1 8D48FF   		leal	-1(%rax), %ecx
 2025 0ac4 890F     		movl	%ecx, (%rdi)
 2026              	.Ltmp556:
 2027              		#DEBUG_VALUE: __result <- undef
 2028              	.LBB1_139:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2029              	.Ltmp557:
 2030              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2031 0ac6 85C0     		testl	%eax, %eax
 2032 0ac8 7F0F     		jg	.LBB1_141
 2033              	# BB#140:
 2034              	.Ltmp558:
 2035              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2036 0aca 488DB570 		leaq	-144(%rbp), %rsi
 2036      FFFFFF
 2037 0ad1 4889DF   		movq	%rbx, %rdi
 2038 0ad4 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2038      00
 2039              	.LBB1_141:                              # %_ZNSsD1Ev.exit88
 2040 0ad9 488BBD68 		movq	-920(%rbp), %rdi
 2040      FCFFFF
 2041 0ae0 488D5FE8 		leaq	-24(%rdi), %rbx
 2042 0ae4 4C39F3   		cmpq	%r14, %rbx
 2043 0ae7 7434     		je	.LBB1_147
 2044              	# BB#142:
 2045 0ae9 4883C7F8 		addq	$-8, %rdi
 2046 0aed B8000000 		movl	$pthread_cancel, %eax
 2046      00
 2047 0af2 4885C0   		testq	%rax, %rax
 2048              	.Ltmp559:
 2049              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2050 0af5 740C     		je	.LBB1_144
 2051              	# BB#143:
 2052              	.Ltmp560:
 2053              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2054 0af7 BEFFFFFF 		movl	$-1, %esi
 2054      FF
 2055 0afc E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2055      00
 2056 0b01 EB07     		jmp	.LBB1_145
 2057              	.LBB1_144:
 2058              	.Ltmp561:
 2059              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2060              	.Ltmp562:
 2061              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2062 0b03 8B07     		movl	(%rdi), %eax
 2063              	.Ltmp563:
 2064              		#DEBUG_VALUE: __result <- EAX+0
 2065 0b05 8D48FF   		leal	-1(%rax), %ecx
 2066 0b08 890F     		movl	%ecx, (%rdi)
 2067              	.Ltmp564:
 2068              		#DEBUG_VALUE: __result <- undef
 2069              	.LBB1_145:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2070              	.Ltmp565:
 2071              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2072 0b0a 85C0     		testl	%eax, %eax
 2073 0b0c 7F0F     		jg	.LBB1_147
 2074              	# BB#146:
 2075              	.Ltmp566:
 2076              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2077 0b0e 488DB578 		leaq	-136(%rbp), %rsi
 2077      FFFFFF
 2078 0b15 4889DF   		movq	%rbx, %rdi
 2079 0b18 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2079      00
 2080              	.LBB1_147:                              # %_ZNSsD1Ev.exit91
 2081 0b1d 488BBD70 		movq	-912(%rbp), %rdi
 2081      FCFFFF
 2082 0b24 488D5FE8 		leaq	-24(%rdi), %rbx
 2083 0b28 41BE0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r14d
 2083      0000
 2084 0b2e 4C39F3   		cmpq	%r14, %rbx
 2085 0b31 7431     		je	.LBB1_153
 2086              	# BB#148:
 2087 0b33 4883C7F8 		addq	$-8, %rdi
 2088 0b37 B8000000 		movl	$pthread_cancel, %eax
 2088      00
 2089 0b3c 4885C0   		testq	%rax, %rax
 2090              	.Ltmp567:
 2091              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2092 0b3f 740C     		je	.LBB1_150
 2093              	# BB#149:
 2094              	.Ltmp568:
 2095              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2096 0b41 BEFFFFFF 		movl	$-1, %esi
 2096      FF
 2097 0b46 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2097      00
 2098 0b4b EB07     		jmp	.LBB1_151
 2099              	.LBB1_150:
 2100              	.Ltmp569:
 2101              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2102              	.Ltmp570:
 2103              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2104 0b4d 8B07     		movl	(%rdi), %eax
 2105              	.Ltmp571:
 2106              		#DEBUG_VALUE: __result <- EAX+0
 2107 0b4f 8D48FF   		leal	-1(%rax), %ecx
 2108 0b52 890F     		movl	%ecx, (%rdi)
 2109              	.Ltmp572:
 2110              		#DEBUG_VALUE: __result <- undef
 2111              	.LBB1_151:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2112              	.Ltmp573:
 2113              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2114 0b54 85C0     		testl	%eax, %eax
 2115 0b56 7F0C     		jg	.LBB1_153
 2116              	# BB#152:
 2117              	.Ltmp574:
 2118              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2119 0b58 488D7580 		leaq	-128(%rbp), %rsi
 2120 0b5c 4889DF   		movq	%rbx, %rdi
 2121 0b5f E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2121      00
 2122              	.LBB1_153:                              # %_ZNSsD1Ev.exit94
 2123 0b64 488BBD78 		movq	-904(%rbp), %rdi
 2123      FCFFFF
 2124 0b6b 488D5FE8 		leaq	-24(%rdi), %rbx
 2125 0b6f 4C39F3   		cmpq	%r14, %rbx
 2126 0b72 7431     		je	.LBB1_159
 2127              	# BB#154:
 2128 0b74 4883C7F8 		addq	$-8, %rdi
 2129 0b78 B8000000 		movl	$pthread_cancel, %eax
 2129      00
 2130 0b7d 4885C0   		testq	%rax, %rax
 2131              	.Ltmp575:
 2132              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2133 0b80 740C     		je	.LBB1_156
 2134              	# BB#155:
 2135              	.Ltmp576:
 2136              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2137 0b82 BEFFFFFF 		movl	$-1, %esi
 2137      FF
 2138 0b87 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2138      00
 2139 0b8c EB07     		jmp	.LBB1_157
 2140              	.LBB1_156:
 2141              	.Ltmp577:
 2142              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2143              	.Ltmp578:
 2144              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2145 0b8e 8B07     		movl	(%rdi), %eax
 2146              	.Ltmp579:
 2147              		#DEBUG_VALUE: __result <- EAX+0
 2148 0b90 8D48FF   		leal	-1(%rax), %ecx
 2149 0b93 890F     		movl	%ecx, (%rdi)
 2150              	.Ltmp580:
 2151              		#DEBUG_VALUE: __result <- undef
 2152              	.LBB1_157:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2153              	.Ltmp581:
 2154              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2155 0b95 85C0     		testl	%eax, %eax
 2156 0b97 7F0C     		jg	.LBB1_159
 2157              	# BB#158:
 2158              	.Ltmp582:
 2159              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2160 0b99 488D7588 		leaq	-120(%rbp), %rsi
 2161 0b9d 4889DF   		movq	%rbx, %rdi
 2162 0ba0 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2162      00
 2163              	.LBB1_159:                              # %_ZNSsD1Ev.exit97
 2164 0ba5 488DBD80 		leaq	-896(%rbp), %rdi
 2164      FCFFFF
 495:./matrix-util.C **** }
 2165              		.loc	2 495 1
 2166              	.Ltmp583:
 2167 0bac E8000000 		callq	_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev # ./matrix-util.C:495:1
 2167      00
 2168 0bb1 4881C428 		addq	$1064, %rsp             # ./matrix-util.C:495:1
 2168      040000
 2169              	                                        # imm = 0x428
 2170 0bb8 5B       		popq	%rbx                    # ./matrix-util.C:495:1
 2171 0bb9 415E     		popq	%r14                    # ./matrix-util.C:495:1
 2172 0bbb 415F     		popq	%r15                    # ./matrix-util.C:495:1
 2173 0bbd 5D       		popq	%rbp                    # ./matrix-util.C:495:1
 2174 0bbe C3       		ret                             # ./matrix-util.C:495:1
 2175              	.LBB1_160:
 2176              	.Ltmp309:
 485:./matrix-util.C ****    stat_stream >> pid >> comm >> state >> ppid >> pgrp >> session >> tty_nr
 2177              		.loc	2 485 4
 2178              	.Ltmp584:
 2179 0bbf 4889C3   		movq	%rax, %rbx              # ./matrix-util.C:485:4
 2180 0bc2 488BBDD0 		movq	-1072(%rbp), %rdi
 2180      FBFFFF
 2181 0bc9 4C8D77E8 		leaq	-24(%rdi), %r14
 2182 0bcd 41BF0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r15d
 2182      0000
 2183 0bd3 4D39FE   		cmpq	%r15, %r14
 2184 0bd6 7431     		je	.LBB1_166
 2185              	# BB#161:
 2186 0bd8 4883C7F8 		addq	$-8, %rdi
 2187 0bdc B8000000 		movl	$pthread_cancel, %eax
 2187      00
 2188 0be1 4885C0   		testq	%rax, %rax
 2189              	.Ltmp585:
 2190              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2191 0be4 740C     		je	.LBB1_163
 2192              	# BB#162:
 2193              	.Ltmp586:
 2194              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2195 0be6 BEFFFFFF 		movl	$-1, %esi
 2195      FF
 2196 0beb E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2196      00
 2197 0bf0 EB07     		jmp	.LBB1_164
 2198              	.LBB1_163:
 2199              	.Ltmp587:
 2200              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2201              	.Ltmp588:
 2202              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2203 0bf2 8B07     		movl	(%rdi), %eax
 2204              	.Ltmp589:
 2205              		#DEBUG_VALUE: __result <- EAX+0
 2206 0bf4 8D48FF   		leal	-1(%rax), %ecx
 2207 0bf7 890F     		movl	%ecx, (%rdi)
 2208              	.Ltmp590:
 2209              		#DEBUG_VALUE: __result <- undef
 2210              	.LBB1_164:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2211              	.Ltmp591:
 2212              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2213 0bf9 85C0     		testl	%eax, %eax
 2214 0bfb 7F0C     		jg	.LBB1_166
 2215              	# BB#165:
 2216              	.Ltmp592:
 2217              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2218 0bfd 488D7590 		leaq	-112(%rbp), %rsi
 2219 0c01 4C89F7   		movq	%r14, %rdi
 2220 0c04 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2220      00
 2221              	.LBB1_166:                              # %_ZNSsD1Ev.exit100
 2222 0c09 488BBDD8 		movq	-1064(%rbp), %rdi
 2222      FBFFFF
 2223 0c10 4C8D77E8 		leaq	-24(%rdi), %r14
 2224 0c14 4D39FE   		cmpq	%r15, %r14
 2225 0c17 7431     		je	.LBB1_172
 2226              	# BB#167:
 2227 0c19 4883C7F8 		addq	$-8, %rdi
 2228 0c1d B8000000 		movl	$pthread_cancel, %eax
 2228      00
 2229 0c22 4885C0   		testq	%rax, %rax
 2230              	.Ltmp593:
 2231              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2232 0c25 740C     		je	.LBB1_169
 2233              	# BB#168:
 2234              	.Ltmp594:
 2235              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2236 0c27 BEFFFFFF 		movl	$-1, %esi
 2236      FF
 2237 0c2c E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2237      00
 2238 0c31 EB07     		jmp	.LBB1_170
 2239              	.LBB1_169:
 2240              	.Ltmp595:
 2241              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2242              	.Ltmp596:
 2243              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2244 0c33 8B07     		movl	(%rdi), %eax
 2245              	.Ltmp597:
 2246              		#DEBUG_VALUE: __result <- EAX+0
 2247 0c35 8D48FF   		leal	-1(%rax), %ecx
 2248 0c38 890F     		movl	%ecx, (%rdi)
 2249              	.Ltmp598:
 2250              		#DEBUG_VALUE: __result <- undef
 2251              	.LBB1_170:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2252              	.Ltmp599:
 2253              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2254 0c3a 85C0     		testl	%eax, %eax
 2255 0c3c 7F0C     		jg	.LBB1_172
 2256              	# BB#171:
 2257              	.Ltmp600:
 2258              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2259 0c3e 488D7598 		leaq	-104(%rbp), %rsi
 2260 0c42 4C89F7   		movq	%r14, %rdi
 2261 0c45 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2261      00
 2262              	.LBB1_172:                              # %_ZNSsD1Ev.exit103
 2263 0c4a 488BBDE0 		movq	-1056(%rbp), %rdi
 2263      FBFFFF
 2264 0c51 4C8D77E8 		leaq	-24(%rdi), %r14
 2265 0c55 41BF0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r15d
 2265      0000
 2266 0c5b 4D39FE   		cmpq	%r15, %r14
 2267 0c5e 7431     		je	.LBB1_178
 2268              	# BB#173:
 2269 0c60 4883C7F8 		addq	$-8, %rdi
 2270 0c64 B8000000 		movl	$pthread_cancel, %eax
 2270      00
 2271 0c69 4885C0   		testq	%rax, %rax
 2272              	.Ltmp601:
 2273              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2274 0c6c 740C     		je	.LBB1_175
 2275              	# BB#174:
 2276              	.Ltmp602:
 2277              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2278 0c6e BEFFFFFF 		movl	$-1, %esi
 2278      FF
 2279 0c73 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2279      00
 2280 0c78 EB07     		jmp	.LBB1_176
 2281              	.LBB1_175:
 2282              	.Ltmp603:
 2283              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2284              	.Ltmp604:
 2285              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2286 0c7a 8B07     		movl	(%rdi), %eax
 2287              	.Ltmp605:
 2288              		#DEBUG_VALUE: __result <- EAX+0
 2289 0c7c 8D48FF   		leal	-1(%rax), %ecx
 2290 0c7f 890F     		movl	%ecx, (%rdi)
 2291              	.Ltmp606:
 2292              		#DEBUG_VALUE: __result <- undef
 2293              	.LBB1_176:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2294              	.Ltmp607:
 2295              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2296 0c81 85C0     		testl	%eax, %eax
 2297 0c83 7F0C     		jg	.LBB1_178
 2298              	# BB#177:
 2299              	.Ltmp608:
 2300              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2301 0c85 488D75A0 		leaq	-96(%rbp), %rsi
 2302 0c89 4C89F7   		movq	%r14, %rdi
 2303 0c8c E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2303      00
 2304              	.LBB1_178:                              # %_ZNSsD1Ev.exit106
 2305 0c91 488BBDE8 		movq	-1048(%rbp), %rdi
 2305      FBFFFF
 2306 0c98 4C8D77E8 		leaq	-24(%rdi), %r14
 2307 0c9c 4D39FE   		cmpq	%r15, %r14
 2308 0c9f 7431     		je	.LBB1_184
 2309              	# BB#179:
 2310 0ca1 4883C7F8 		addq	$-8, %rdi
 2311 0ca5 B8000000 		movl	$pthread_cancel, %eax
 2311      00
 2312 0caa 4885C0   		testq	%rax, %rax
 2313              	.Ltmp609:
 2314              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2315 0cad 740C     		je	.LBB1_181
 2316              	# BB#180:
 2317              	.Ltmp610:
 2318              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2319 0caf BEFFFFFF 		movl	$-1, %esi
 2319      FF
 2320 0cb4 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2320      00
 2321 0cb9 EB07     		jmp	.LBB1_182
 2322              	.LBB1_181:
 2323              	.Ltmp611:
 2324              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2325              	.Ltmp612:
 2326              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2327 0cbb 8B07     		movl	(%rdi), %eax
 2328              	.Ltmp613:
 2329              		#DEBUG_VALUE: __result <- EAX+0
 2330 0cbd 8D48FF   		leal	-1(%rax), %ecx
 2331 0cc0 890F     		movl	%ecx, (%rdi)
 2332              	.Ltmp614:
 2333              		#DEBUG_VALUE: __result <- undef
 2334              	.LBB1_182:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2335              	.Ltmp615:
 2336              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2337 0cc2 85C0     		testl	%eax, %eax
 2338 0cc4 7F0C     		jg	.LBB1_184
 2339              	# BB#183:
 2340              	.Ltmp616:
 2341              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2342 0cc6 488D75A8 		leaq	-88(%rbp), %rsi
 2343 0cca 4C89F7   		movq	%r14, %rdi
 2344 0ccd E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2344      00
 2345              	.LBB1_184:                              # %_ZNSsD1Ev.exit109
 2346 0cd2 488BBDF0 		movq	-1040(%rbp), %rdi
 2346      FBFFFF
 2347 0cd9 4C8D77E8 		leaq	-24(%rdi), %r14
 2348 0cdd 41BF0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r15d
 2348      0000
 2349 0ce3 4D39FE   		cmpq	%r15, %r14
 2350 0ce6 7431     		je	.LBB1_190
 2351              	# BB#185:
 2352 0ce8 4883C7F8 		addq	$-8, %rdi
 2353 0cec B8000000 		movl	$pthread_cancel, %eax
 2353      00
 2354 0cf1 4885C0   		testq	%rax, %rax
 2355              	.Ltmp617:
 2356              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2357 0cf4 740C     		je	.LBB1_187
 2358              	# BB#186:
 2359              	.Ltmp618:
 2360              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2361 0cf6 BEFFFFFF 		movl	$-1, %esi
 2361      FF
 2362 0cfb E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2362      00
 2363 0d00 EB07     		jmp	.LBB1_188
 2364              	.LBB1_187:
 2365              	.Ltmp619:
 2366              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2367              	.Ltmp620:
 2368              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2369 0d02 8B07     		movl	(%rdi), %eax
 2370              	.Ltmp621:
 2371              		#DEBUG_VALUE: __result <- EAX+0
 2372 0d04 8D48FF   		leal	-1(%rax), %ecx
 2373 0d07 890F     		movl	%ecx, (%rdi)
 2374              	.Ltmp622:
 2375              		#DEBUG_VALUE: __result <- undef
 2376              	.LBB1_188:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2377              	.Ltmp623:
 2378              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2379 0d09 85C0     		testl	%eax, %eax
 2380 0d0b 7F0C     		jg	.LBB1_190
 2381              	# BB#189:
 2382              	.Ltmp624:
 2383              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2384 0d0d 488D75B0 		leaq	-80(%rbp), %rsi
 2385 0d11 4C89F7   		movq	%r14, %rdi
 2386 0d14 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2386      00
 2387              	.LBB1_190:                              # %_ZNSsD1Ev.exit112
 2388 0d19 488BBDF8 		movq	-1032(%rbp), %rdi
 2388      FBFFFF
 2389 0d20 4C8D77E8 		leaq	-24(%rdi), %r14
 2390 0d24 4D39FE   		cmpq	%r15, %r14
 2391 0d27 7431     		je	.LBB1_196
 2392              	# BB#191:
 2393 0d29 4883C7F8 		addq	$-8, %rdi
 2394 0d2d B8000000 		movl	$pthread_cancel, %eax
 2394      00
 2395 0d32 4885C0   		testq	%rax, %rax
 2396              	.Ltmp625:
 2397              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2398 0d35 740C     		je	.LBB1_193
 2399              	# BB#192:
 2400              	.Ltmp626:
 2401              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2402 0d37 BEFFFFFF 		movl	$-1, %esi
 2402      FF
 2403 0d3c E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2403      00
 2404 0d41 EB07     		jmp	.LBB1_194
 2405              	.LBB1_193:
 2406              	.Ltmp627:
 2407              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2408              	.Ltmp628:
 2409              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2410 0d43 8B07     		movl	(%rdi), %eax
 2411              	.Ltmp629:
 2412              		#DEBUG_VALUE: __result <- EAX+0
 2413 0d45 8D48FF   		leal	-1(%rax), %ecx
 2414 0d48 890F     		movl	%ecx, (%rdi)
 2415              	.Ltmp630:
 2416              		#DEBUG_VALUE: __result <- undef
 2417              	.LBB1_194:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2418              	.Ltmp631:
 2419              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2420 0d4a 85C0     		testl	%eax, %eax
 2421 0d4c 7F0C     		jg	.LBB1_196
 2422              	# BB#195:
 2423              	.Ltmp632:
 2424              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2425 0d4e 488D75B8 		leaq	-72(%rbp), %rsi
 2426 0d52 4C89F7   		movq	%r14, %rdi
 2427 0d55 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2427      00
 2428              	.LBB1_196:                              # %_ZNSsD1Ev.exit115
 2429 0d5a 488BBD00 		movq	-1024(%rbp), %rdi
 2429      FCFFFF
 2430 0d61 4C8D77E8 		leaq	-24(%rdi), %r14
 2431 0d65 41BF0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r15d
 2431      0000
 2432 0d6b 4D39FE   		cmpq	%r15, %r14
 2433 0d6e 7431     		je	.LBB1_202
 2434              	# BB#197:
 2435 0d70 4883C7F8 		addq	$-8, %rdi
 2436 0d74 B8000000 		movl	$pthread_cancel, %eax
 2436      00
 2437 0d79 4885C0   		testq	%rax, %rax
 2438              	.Ltmp633:
 2439              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2440 0d7c 740C     		je	.LBB1_199
 2441              	# BB#198:
 2442              	.Ltmp634:
 2443              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2444 0d7e BEFFFFFF 		movl	$-1, %esi
 2444      FF
 2445 0d83 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2445      00
 2446 0d88 EB07     		jmp	.LBB1_200
 2447              	.LBB1_199:
 2448              	.Ltmp635:
 2449              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2450              	.Ltmp636:
 2451              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2452 0d8a 8B07     		movl	(%rdi), %eax
 2453              	.Ltmp637:
 2454              		#DEBUG_VALUE: __result <- EAX+0
 2455 0d8c 8D48FF   		leal	-1(%rax), %ecx
 2456 0d8f 890F     		movl	%ecx, (%rdi)
 2457              	.Ltmp638:
 2458              		#DEBUG_VALUE: __result <- undef
 2459              	.LBB1_200:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2460              	.Ltmp639:
 2461              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2462 0d91 85C0     		testl	%eax, %eax
 2463 0d93 7F0C     		jg	.LBB1_202
 2464              	# BB#201:
 2465              	.Ltmp640:
 2466              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2467 0d95 488D75C0 		leaq	-64(%rbp), %rsi
 2468 0d99 4C89F7   		movq	%r14, %rdi
 2469 0d9c E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2469      00
 2470              	.LBB1_202:                              # %_ZNSsD1Ev.exit118
 2471 0da1 488BBD08 		movq	-1016(%rbp), %rdi
 2471      FCFFFF
 2472 0da8 4C8D77E8 		leaq	-24(%rdi), %r14
 2473 0dac 4D39FE   		cmpq	%r15, %r14
 2474 0daf 7431     		je	.LBB1_208
 2475              	# BB#203:
 2476 0db1 4883C7F8 		addq	$-8, %rdi
 2477 0db5 B8000000 		movl	$pthread_cancel, %eax
 2477      00
 2478 0dba 4885C0   		testq	%rax, %rax
 2479              	.Ltmp641:
 2480              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2481 0dbd 740C     		je	.LBB1_205
 2482              	# BB#204:
 2483              	.Ltmp642:
 2484              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2485 0dbf BEFFFFFF 		movl	$-1, %esi
 2485      FF
 2486 0dc4 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2486      00
 2487 0dc9 EB07     		jmp	.LBB1_206
 2488              	.LBB1_205:
 2489              	.Ltmp643:
 2490              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2491              	.Ltmp644:
 2492              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2493 0dcb 8B07     		movl	(%rdi), %eax
 2494              	.Ltmp645:
 2495              		#DEBUG_VALUE: __result <- EAX+0
 2496 0dcd 8D48FF   		leal	-1(%rax), %ecx
 2497 0dd0 890F     		movl	%ecx, (%rdi)
 2498              	.Ltmp646:
 2499              		#DEBUG_VALUE: __result <- undef
 2500              	.LBB1_206:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2501              	.Ltmp647:
 2502              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2503 0dd2 85C0     		testl	%eax, %eax
 2504 0dd4 7F0C     		jg	.LBB1_208
 2505              	# BB#207:
 2506              	.Ltmp648:
 2507              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2508 0dd6 488D75C8 		leaq	-56(%rbp), %rsi
 2509 0dda 4C89F7   		movq	%r14, %rdi
 2510 0ddd E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2510      00
 2511              	.LBB1_208:                              # %_ZNSsD1Ev.exit121
 2512 0de2 488BBD10 		movq	-1008(%rbp), %rdi
 2512      FCFFFF
 2513 0de9 4C8D77E8 		leaq	-24(%rdi), %r14
 2514 0ded 41BF0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r15d
 2514      0000
 2515 0df3 4D39FE   		cmpq	%r15, %r14
 2516 0df6 7431     		je	.LBB1_214
 2517              	# BB#209:
 2518 0df8 4883C7F8 		addq	$-8, %rdi
 2519 0dfc B8000000 		movl	$pthread_cancel, %eax
 2519      00
 2520 0e01 4885C0   		testq	%rax, %rax
 2521              	.Ltmp649:
 2522              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2523 0e04 740C     		je	.LBB1_211
 2524              	# BB#210:
 2525              	.Ltmp650:
 2526              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2527 0e06 BEFFFFFF 		movl	$-1, %esi
 2527      FF
 2528 0e0b E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2528      00
 2529 0e10 EB07     		jmp	.LBB1_212
 2530              	.LBB1_211:
 2531              	.Ltmp651:
 2532              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2533              	.Ltmp652:
 2534              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2535 0e12 8B07     		movl	(%rdi), %eax
 2536              	.Ltmp653:
 2537              		#DEBUG_VALUE: __result <- EAX+0
 2538 0e14 8D48FF   		leal	-1(%rax), %ecx
 2539 0e17 890F     		movl	%ecx, (%rdi)
 2540              	.Ltmp654:
 2541              		#DEBUG_VALUE: __result <- undef
 2542              	.LBB1_212:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2543              	.Ltmp655:
 2544              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2545 0e19 85C0     		testl	%eax, %eax
 2546 0e1b 7F0C     		jg	.LBB1_214
 2547              	# BB#213:
 2548              	.Ltmp656:
 2549              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2550 0e1d 488D75D0 		leaq	-48(%rbp), %rsi
 2551 0e21 4C89F7   		movq	%r14, %rdi
 2552 0e24 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2552      00
 2553              	.LBB1_214:                              # %_ZNSsD1Ev.exit124
 2554 0e29 488BBD18 		movq	-1000(%rbp), %rdi
 2554      FCFFFF
 2555 0e30 4C8D77E8 		leaq	-24(%rdi), %r14
 2556 0e34 4D39FE   		cmpq	%r15, %r14
 2557 0e37 7431     		je	.LBB1_220
 2558              	# BB#215:
 2559 0e39 4883C7F8 		addq	$-8, %rdi
 2560 0e3d B8000000 		movl	$pthread_cancel, %eax
 2560      00
 2561 0e42 4885C0   		testq	%rax, %rax
 2562              	.Ltmp657:
 2563              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2564 0e45 740C     		je	.LBB1_217
 2565              	# BB#216:
 2566              	.Ltmp658:
 2567              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2568 0e47 BEFFFFFF 		movl	$-1, %esi
 2568      FF
 2569 0e4c E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2569      00
 2570 0e51 EB07     		jmp	.LBB1_218
 2571              	.LBB1_217:
 2572              	.Ltmp659:
 2573              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2574              	.Ltmp660:
 2575              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2576 0e53 8B07     		movl	(%rdi), %eax
 2577              	.Ltmp661:
 2578              		#DEBUG_VALUE: __result <- EAX+0
 2579 0e55 8D48FF   		leal	-1(%rax), %ecx
 2580 0e58 890F     		movl	%ecx, (%rdi)
 2581              	.Ltmp662:
 2582              		#DEBUG_VALUE: __result <- undef
 2583              	.LBB1_218:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2584              	.Ltmp663:
 2585              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2586 0e5a 85C0     		testl	%eax, %eax
 2587 0e5c 7F0C     		jg	.LBB1_220
 2588              	# BB#219:
 2589              	.Ltmp664:
 2590              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2591 0e5e 488D75D8 		leaq	-40(%rbp), %rsi
 2592 0e62 4C89F7   		movq	%r14, %rdi
 2593 0e65 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2593      00
 2594              	.LBB1_220:                              # %_ZNSsD1Ev.exit127
 2595 0e6a 488BBD20 		movq	-992(%rbp), %rdi
 2595      FCFFFF
 2596 0e71 4C8D77E8 		leaq	-24(%rdi), %r14
 2597 0e75 41BF0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r15d
 2597      0000
 2598 0e7b 4D39FE   		cmpq	%r15, %r14
 2599 0e7e 7431     		je	.LBB1_226
 2600              	# BB#221:
 2601 0e80 4883C7F8 		addq	$-8, %rdi
 2602 0e84 B8000000 		movl	$pthread_cancel, %eax
 2602      00
 2603 0e89 4885C0   		testq	%rax, %rax
 2604              	.Ltmp665:
 2605              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2606 0e8c 740C     		je	.LBB1_223
 2607              	# BB#222:
 2608              	.Ltmp666:
 2609              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2610 0e8e BEFFFFFF 		movl	$-1, %esi
 2610      FF
 2611 0e93 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2611      00
 2612 0e98 EB07     		jmp	.LBB1_224
 2613              	.LBB1_223:
 2614              	.Ltmp667:
 2615              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2616              	.Ltmp668:
 2617              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2618 0e9a 8B07     		movl	(%rdi), %eax
 2619              	.Ltmp669:
 2620              		#DEBUG_VALUE: __result <- EAX+0
 2621 0e9c 8D48FF   		leal	-1(%rax), %ecx
 2622 0e9f 890F     		movl	%ecx, (%rdi)
 2623              	.Ltmp670:
 2624              		#DEBUG_VALUE: __result <- undef
 2625              	.LBB1_224:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2626              	.Ltmp671:
 2627              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2628 0ea1 85C0     		testl	%eax, %eax
 2629 0ea3 7F0C     		jg	.LBB1_226
 2630              	# BB#225:
 2631              	.Ltmp672:
 2632              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2633 0ea5 488D75E0 		leaq	-32(%rbp), %rsi
 2634 0ea9 4C89F7   		movq	%r14, %rdi
 2635 0eac E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2635      00
 2636              	.LBB1_226:                              # %_ZNSsD1Ev.exit130
 2637 0eb1 488BBD28 		movq	-984(%rbp), %rdi
 2637      FCFFFF
 2638 0eb8 4C8D77E8 		leaq	-24(%rdi), %r14
 2639 0ebc 4D39FE   		cmpq	%r15, %r14
 2640 0ebf 7434     		je	.LBB1_232
 2641              	# BB#227:
 2642 0ec1 4883C7F8 		addq	$-8, %rdi
 2643 0ec5 B8000000 		movl	$pthread_cancel, %eax
 2643      00
 2644 0eca 4885C0   		testq	%rax, %rax
 2645              	.Ltmp673:
 2646              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2647 0ecd 740C     		je	.LBB1_229
 2648              	# BB#228:
 2649              	.Ltmp674:
 2650              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2651 0ecf BEFFFFFF 		movl	$-1, %esi
 2651      FF
 2652 0ed4 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2652      00
 2653 0ed9 EB07     		jmp	.LBB1_230
 2654              	.LBB1_229:
 2655              	.Ltmp675:
 2656              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2657              	.Ltmp676:
 2658              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2659 0edb 8B07     		movl	(%rdi), %eax
 2660              	.Ltmp677:
 2661              		#DEBUG_VALUE: __result <- EAX+0
 2662 0edd 8D48FF   		leal	-1(%rax), %ecx
 2663 0ee0 890F     		movl	%ecx, (%rdi)
 2664              	.Ltmp678:
 2665              		#DEBUG_VALUE: __result <- undef
 2666              	.LBB1_230:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2667              	.Ltmp679:
 2668              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2669 0ee2 85C0     		testl	%eax, %eax
 2670 0ee4 7F0F     		jg	.LBB1_232
 2671              	# BB#231:
 2672              	.Ltmp680:
 2673              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2674 0ee6 488DB5D8 		leaq	-296(%rbp), %rsi
 2674      FEFFFF
 2675 0eed 4C89F7   		movq	%r14, %rdi
 2676 0ef0 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2676      00
 2677              	.LBB1_232:                              # %_ZNSsD1Ev.exit30
 2678 0ef5 488BBD30 		movq	-976(%rbp), %rdi
 2678      FCFFFF
 2679 0efc 4C8D77E8 		leaq	-24(%rdi), %r14
 2680 0f00 41BF0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r15d
 2680      0000
 2681 0f06 4D39FE   		cmpq	%r15, %r14
 2682 0f09 7434     		je	.LBB1_238
 2683              	# BB#233:
 2684 0f0b 4883C7F8 		addq	$-8, %rdi
 2685 0f0f B8000000 		movl	$pthread_cancel, %eax
 2685      00
 2686 0f14 4885C0   		testq	%rax, %rax
 2687              	.Ltmp681:
 2688              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2689 0f17 740C     		je	.LBB1_235
 2690              	# BB#234:
 2691              	.Ltmp682:
 2692              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2693 0f19 BEFFFFFF 		movl	$-1, %esi
 2693      FF
 2694 0f1e E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2694      00
 2695 0f23 EB07     		jmp	.LBB1_236
 2696              	.LBB1_235:
 2697              	.Ltmp683:
 2698              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2699              	.Ltmp684:
 2700              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2701 0f25 8B07     		movl	(%rdi), %eax
 2702              	.Ltmp685:
 2703              		#DEBUG_VALUE: __result <- EAX+0
 2704 0f27 8D48FF   		leal	-1(%rax), %ecx
 2705 0f2a 890F     		movl	%ecx, (%rdi)
 2706              	.Ltmp686:
 2707              		#DEBUG_VALUE: __result <- undef
 2708              	.LBB1_236:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2709              	.Ltmp687:
 2710              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2711 0f2c 85C0     		testl	%eax, %eax
 2712 0f2e 7F0F     		jg	.LBB1_238
 2713              	# BB#237:
 2714              	.Ltmp688:
 2715              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2716 0f30 488DB5D0 		leaq	-304(%rbp), %rsi
 2716      FEFFFF
 2717 0f37 4C89F7   		movq	%r14, %rdi
 2718 0f3a E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2718      00
 2719              	.LBB1_238:                              # %_ZNSsD1Ev.exit27
 2720 0f3f 488BBD38 		movq	-968(%rbp), %rdi
 2720      FCFFFF
 2721 0f46 4C8D77E8 		leaq	-24(%rdi), %r14
 2722 0f4a 4D39FE   		cmpq	%r15, %r14
 2723 0f4d 7434     		je	.LBB1_244
 2724              	# BB#239:
 2725 0f4f 4883C7F8 		addq	$-8, %rdi
 2726 0f53 B8000000 		movl	$pthread_cancel, %eax
 2726      00
 2727 0f58 4885C0   		testq	%rax, %rax
 2728              	.Ltmp689:
 2729              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2730 0f5b 740C     		je	.LBB1_241
 2731              	# BB#240:
 2732              	.Ltmp690:
 2733              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2734 0f5d BEFFFFFF 		movl	$-1, %esi
 2734      FF
 2735 0f62 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2735      00
 2736 0f67 EB07     		jmp	.LBB1_242
 2737              	.LBB1_241:
 2738              	.Ltmp691:
 2739              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2740              	.Ltmp692:
 2741              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2742 0f69 8B07     		movl	(%rdi), %eax
 2743              	.Ltmp693:
 2744              		#DEBUG_VALUE: __result <- EAX+0
 2745 0f6b 8D48FF   		leal	-1(%rax), %ecx
 2746 0f6e 890F     		movl	%ecx, (%rdi)
 2747              	.Ltmp694:
 2748              		#DEBUG_VALUE: __result <- undef
 2749              	.LBB1_242:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2750              	.Ltmp695:
 2751              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2752 0f70 85C0     		testl	%eax, %eax
 2753 0f72 7F0F     		jg	.LBB1_244
 2754              	# BB#243:
 2755              	.Ltmp696:
 2756              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2757 0f74 488DB5C8 		leaq	-312(%rbp), %rsi
 2757      FEFFFF
 2758 0f7b 4C89F7   		movq	%r14, %rdi
 2759 0f7e E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2759      00
 2760              	.LBB1_244:                              # %_ZNSsD1Ev.exit24
 2761 0f83 488BBD40 		movq	-960(%rbp), %rdi
 2761      FCFFFF
 2762 0f8a 4C8D77E8 		leaq	-24(%rdi), %r14
 2763 0f8e 41BF0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r15d
 2763      0000
 2764 0f94 4D39FE   		cmpq	%r15, %r14
 2765 0f97 7434     		je	.LBB1_250
 2766              	# BB#245:
 2767 0f99 4883C7F8 		addq	$-8, %rdi
 2768 0f9d B8000000 		movl	$pthread_cancel, %eax
 2768      00
 2769 0fa2 4885C0   		testq	%rax, %rax
 2770              	.Ltmp697:
 2771              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2772 0fa5 740C     		je	.LBB1_247
 2773              	# BB#246:
 2774              	.Ltmp698:
 2775              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2776 0fa7 BEFFFFFF 		movl	$-1, %esi
 2776      FF
 2777 0fac E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2777      00
 2778 0fb1 EB07     		jmp	.LBB1_248
 2779              	.LBB1_247:
 2780              	.Ltmp699:
 2781              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2782              	.Ltmp700:
 2783              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2784 0fb3 8B07     		movl	(%rdi), %eax
 2785              	.Ltmp701:
 2786              		#DEBUG_VALUE: __result <- EAX+0
 2787 0fb5 8D48FF   		leal	-1(%rax), %ecx
 2788 0fb8 890F     		movl	%ecx, (%rdi)
 2789              	.Ltmp702:
 2790              		#DEBUG_VALUE: __result <- undef
 2791              	.LBB1_248:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2792              	.Ltmp703:
 2793              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2794 0fba 85C0     		testl	%eax, %eax
 2795 0fbc 7F0F     		jg	.LBB1_250
 2796              	# BB#249:
 2797              	.Ltmp704:
 2798              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2799 0fbe 488DB5C0 		leaq	-320(%rbp), %rsi
 2799      FEFFFF
 2800 0fc5 4C89F7   		movq	%r14, %rdi
 2801 0fc8 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2801      00
 2802              	.LBB1_250:                              # %_ZNSsD1Ev.exit21
 2803 0fcd 488BBD48 		movq	-952(%rbp), %rdi
 2803      FCFFFF
 2804 0fd4 4C8D77E8 		leaq	-24(%rdi), %r14
 2805 0fd8 4D39FE   		cmpq	%r15, %r14
 2806 0fdb 7434     		je	.LBB1_256
 2807              	# BB#251:
 2808 0fdd 4883C7F8 		addq	$-8, %rdi
 2809 0fe1 B8000000 		movl	$pthread_cancel, %eax
 2809      00
 2810 0fe6 4885C0   		testq	%rax, %rax
 2811              	.Ltmp705:
 2812              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2813 0fe9 740C     		je	.LBB1_253
 2814              	# BB#252:
 2815              	.Ltmp706:
 2816              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2817 0feb BEFFFFFF 		movl	$-1, %esi
 2817      FF
 2818 0ff0 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2818      00
 2819 0ff5 EB07     		jmp	.LBB1_254
 2820              	.LBB1_253:
 2821              	.Ltmp707:
 2822              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2823              	.Ltmp708:
 2824              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2825 0ff7 8B07     		movl	(%rdi), %eax
 2826              	.Ltmp709:
 2827              		#DEBUG_VALUE: __result <- EAX+0
 2828 0ff9 8D48FF   		leal	-1(%rax), %ecx
 2829 0ffc 890F     		movl	%ecx, (%rdi)
 2830              	.Ltmp710:
 2831              		#DEBUG_VALUE: __result <- undef
 2832              	.LBB1_254:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2833              	.Ltmp711:
 2834              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2835 0ffe 85C0     		testl	%eax, %eax
 2836 1000 7F0F     		jg	.LBB1_256
 2837              	# BB#255:
 2838              	.Ltmp712:
 2839              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2840 1002 488DB5B8 		leaq	-328(%rbp), %rsi
 2840      FEFFFF
 2841 1009 4C89F7   		movq	%r14, %rdi
 2842 100c E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2842      00
 2843              	.LBB1_256:                              # %_ZNSsD1Ev.exit18
 2844 1011 488BBD50 		movq	-944(%rbp), %rdi
 2844      FCFFFF
 2845 1018 4C8D77E8 		leaq	-24(%rdi), %r14
 2846 101c 41BF0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r15d
 2846      0000
 2847 1022 4D39FE   		cmpq	%r15, %r14
 2848 1025 7434     		je	.LBB1_262
 2849              	# BB#257:
 2850 1027 4883C7F8 		addq	$-8, %rdi
 2851 102b B8000000 		movl	$pthread_cancel, %eax
 2851      00
 2852 1030 4885C0   		testq	%rax, %rax
 2853              	.Ltmp713:
 2854              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2855 1033 740C     		je	.LBB1_259
 2856              	# BB#258:
 2857              	.Ltmp714:
 2858              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2859 1035 BEFFFFFF 		movl	$-1, %esi
 2859      FF
 2860 103a E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2860      00
 2861 103f EB07     		jmp	.LBB1_260
 2862              	.LBB1_259:
 2863              	.Ltmp715:
 2864              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2865              	.Ltmp716:
 2866              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2867 1041 8B07     		movl	(%rdi), %eax
 2868              	.Ltmp717:
 2869              		#DEBUG_VALUE: __result <- EAX+0
 2870 1043 8D48FF   		leal	-1(%rax), %ecx
 2871 1046 890F     		movl	%ecx, (%rdi)
 2872              	.Ltmp718:
 2873              		#DEBUG_VALUE: __result <- undef
 2874              	.LBB1_260:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2875              	.Ltmp719:
 2876              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2877 1048 85C0     		testl	%eax, %eax
 2878 104a 7F0F     		jg	.LBB1_262
 2879              	# BB#261:
 2880              	.Ltmp720:
 2881              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2882 104c 488DB5B0 		leaq	-336(%rbp), %rsi
 2882      FEFFFF
 2883 1053 4C89F7   		movq	%r14, %rdi
 2884 1056 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2884      00
 2885              	.LBB1_262:                              # %_ZNSsD1Ev.exit15
 2886 105b 488BBD58 		movq	-936(%rbp), %rdi
 2886      FCFFFF
 2887 1062 4C8D77E8 		leaq	-24(%rdi), %r14
 2888 1066 4D39FE   		cmpq	%r15, %r14
 2889 1069 7434     		je	.LBB1_268
 2890              	# BB#263:
 2891 106b 4883C7F8 		addq	$-8, %rdi
 2892 106f B8000000 		movl	$pthread_cancel, %eax
 2892      00
 2893 1074 4885C0   		testq	%rax, %rax
 2894              	.Ltmp721:
 2895              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2896 1077 740C     		je	.LBB1_265
 2897              	# BB#264:
 2898              	.Ltmp722:
 2899              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2900 1079 BEFFFFFF 		movl	$-1, %esi
 2900      FF
 2901 107e E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2901      00
 2902 1083 EB07     		jmp	.LBB1_266
 2903              	.LBB1_265:
 2904              	.Ltmp723:
 2905              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2906              	.Ltmp724:
 2907              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2908 1085 8B07     		movl	(%rdi), %eax
 2909              	.Ltmp725:
 2910              		#DEBUG_VALUE: __result <- EAX+0
 2911 1087 8D48FF   		leal	-1(%rax), %ecx
 2912 108a 890F     		movl	%ecx, (%rdi)
 2913              	.Ltmp726:
 2914              		#DEBUG_VALUE: __result <- undef
 2915              	.LBB1_266:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2916              	.Ltmp727:
 2917              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2918 108c 85C0     		testl	%eax, %eax
 2919 108e 7F0F     		jg	.LBB1_268
 2920              	# BB#267:
 2921              	.Ltmp728:
 2922              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2923 1090 488DB5A8 		leaq	-344(%rbp), %rsi
 2923      FEFFFF
 2924 1097 4C89F7   		movq	%r14, %rdi
 2925 109a E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2925      00
 2926              	.LBB1_268:                              # %_ZNSsD1Ev.exit12
 2927 109f 488BBD60 		movq	-928(%rbp), %rdi
 2927      FCFFFF
 2928 10a6 4C8D77E8 		leaq	-24(%rdi), %r14
 2929 10aa 41BF0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r15d
 2929      0000
 2930 10b0 4D39FE   		cmpq	%r15, %r14
 2931 10b3 7434     		je	.LBB1_274
 2932              	# BB#269:
 2933 10b5 4883C7F8 		addq	$-8, %rdi
 2934 10b9 B8000000 		movl	$pthread_cancel, %eax
 2934      00
 2935 10be 4885C0   		testq	%rax, %rax
 2936              	.Ltmp729:
 2937              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2938 10c1 740C     		je	.LBB1_271
 2939              	# BB#270:
 2940              	.Ltmp730:
 2941              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2942 10c3 BEFFFFFF 		movl	$-1, %esi
 2942      FF
 2943 10c8 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2943      00
 2944 10cd EB07     		jmp	.LBB1_272
 2945              	.LBB1_271:
 2946              	.Ltmp731:
 2947              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2948              	.Ltmp732:
 2949              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2950 10cf 8B07     		movl	(%rdi), %eax
 2951              	.Ltmp733:
 2952              		#DEBUG_VALUE: __result <- EAX+0
 2953 10d1 8D48FF   		leal	-1(%rax), %ecx
 2954 10d4 890F     		movl	%ecx, (%rdi)
 2955              	.Ltmp734:
 2956              		#DEBUG_VALUE: __result <- undef
 2957              	.LBB1_272:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2958              	.Ltmp735:
 2959              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2960 10d6 85C0     		testl	%eax, %eax
 2961 10d8 7F0F     		jg	.LBB1_274
 2962              	# BB#273:
 2963              	.Ltmp736:
 2964              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2965 10da 488DB5A0 		leaq	-352(%rbp), %rsi
 2965      FEFFFF
 2966 10e1 4C89F7   		movq	%r14, %rdi
 2967 10e4 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 2967      00
 2968              	.LBB1_274:                              # %_ZNSsD1Ev.exit9
 2969 10e9 488BBD68 		movq	-920(%rbp), %rdi
 2969      FCFFFF
 2970 10f0 4C8D77E8 		leaq	-24(%rdi), %r14
 2971 10f4 4D39FE   		cmpq	%r15, %r14
 2972 10f7 7434     		je	.LBB1_280
 2973              	# BB#275:
 2974 10f9 4883C7F8 		addq	$-8, %rdi
 2975 10fd B8000000 		movl	$pthread_cancel, %eax
 2975      00
 2976 1102 4885C0   		testq	%rax, %rax
 2977              	.Ltmp737:
 2978              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2979 1105 740C     		je	.LBB1_277
 2980              	# BB#276:
 2981              	.Ltmp738:
 2982              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2983 1107 BEFFFFFF 		movl	$-1, %esi
 2983      FF
 2984 110c E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 2984      00
 2985 1111 EB07     		jmp	.LBB1_278
 2986              	.LBB1_277:
 2987              	.Ltmp739:
 2988              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 2989              	.Ltmp740:
 2990              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 2991 1113 8B07     		movl	(%rdi), %eax
 2992              	.Ltmp741:
 2993              		#DEBUG_VALUE: __result <- EAX+0
 2994 1115 8D48FF   		leal	-1(%rax), %ecx
 2995 1118 890F     		movl	%ecx, (%rdi)
 2996              	.Ltmp742:
 2997              		#DEBUG_VALUE: __result <- undef
 2998              	.LBB1_278:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 2999              	.Ltmp743:
 3000              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 3001 111a 85C0     		testl	%eax, %eax
 3002 111c 7F0F     		jg	.LBB1_280
 3003              	# BB#279:
 3004              	.Ltmp744:
 3005              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 3006 111e 488DB598 		leaq	-360(%rbp), %rsi
 3006      FEFFFF
 3007 1125 4C89F7   		movq	%r14, %rdi
 3008 1128 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 3008      00
 3009              	.LBB1_280:                              # %_ZNSsD1Ev.exit6
 3010 112d 488BBD70 		movq	-912(%rbp), %rdi
 3010      FCFFFF
 3011 1134 4C8D77E8 		leaq	-24(%rdi), %r14
 3012 1138 41BF0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r15d
 3012      0000
 3013 113e 4D39FE   		cmpq	%r15, %r14
 3014 1141 7434     		je	.LBB1_286
 3015              	# BB#281:
 3016 1143 4883C7F8 		addq	$-8, %rdi
 3017 1147 B8000000 		movl	$pthread_cancel, %eax
 3017      00
 3018 114c 4885C0   		testq	%rax, %rax
 3019              	.Ltmp745:
 3020              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 3021 114f 740C     		je	.LBB1_283
 3022              	# BB#282:
 3023              	.Ltmp746:
 3024              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 3025 1151 BEFFFFFF 		movl	$-1, %esi
 3025      FF
 3026 1156 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 3026      00
 3027 115b EB07     		jmp	.LBB1_284
 3028              	.LBB1_283:
 3029              	.Ltmp747:
 3030              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 3031              	.Ltmp748:
 3032              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 3033 115d 8B07     		movl	(%rdi), %eax
 3034              	.Ltmp749:
 3035              		#DEBUG_VALUE: __result <- EAX+0
 3036 115f 8D48FF   		leal	-1(%rax), %ecx
 3037 1162 890F     		movl	%ecx, (%rdi)
 3038              	.Ltmp750:
 3039              		#DEBUG_VALUE: __result <- undef
 3040              	.LBB1_284:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 3041              	.Ltmp751:
 3042              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 3043 1164 85C0     		testl	%eax, %eax
 3044 1166 7F0F     		jg	.LBB1_286
 3045              	# BB#285:
 3046              	.Ltmp752:
 3047              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 3048 1168 488DB590 		leaq	-368(%rbp), %rsi
 3048      FEFFFF
 3049 116f 4C89F7   		movq	%r14, %rdi
 3050 1172 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 3050      00
 3051              	.LBB1_286:                              # %_ZNSsD1Ev.exit3
 3052 1177 488BBD78 		movq	-904(%rbp), %rdi
 3052      FCFFFF
 3053 117e 4C8D77E8 		leaq	-24(%rdi), %r14
 3054 1182 4D39FE   		cmpq	%r15, %r14
 3055 1185 7434     		je	.LBB1_292
 3056              	# BB#287:
 3057 1187 4883C7F8 		addq	$-8, %rdi
 3058 118b B8000000 		movl	$pthread_cancel, %eax
 3058      00
 3059 1190 4885C0   		testq	%rax, %rax
 3060              	.Ltmp753:
 3061              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 3062 1193 740C     		je	.LBB1_289
 3063              	# BB#288:
 3064              	.Ltmp754:
 3065              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 3066 1195 BEFFFFFF 		movl	$-1, %esi
 3066      FF
 3067 119a E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 3067      00
 3068 119f EB07     		jmp	.LBB1_290
 3069              	.LBB1_289:
 3070              	.Ltmp755:
 3071              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 3072              	.Ltmp756:
 3073              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 3074 11a1 8B07     		movl	(%rdi), %eax
 3075              	.Ltmp757:
 3076              		#DEBUG_VALUE: __result <- EAX+0
 3077 11a3 8D48FF   		leal	-1(%rax), %ecx
 3078 11a6 890F     		movl	%ecx, (%rdi)
 3079              	.Ltmp758:
 3080              		#DEBUG_VALUE: __result <- undef
 3081              	.LBB1_290:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 3082              	.Ltmp759:
 3083              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 3084 11a8 85C0     		testl	%eax, %eax
 3085 11aa 7F0F     		jg	.LBB1_292
 3086              	# BB#291:
 3087              	.Ltmp760:
 3088              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 3089 11ac 488DB588 		leaq	-376(%rbp), %rsi
 3089      FEFFFF
 3090 11b3 4C89F7   		movq	%r14, %rdi
 3091 11b6 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 3091      00
 3092              	.LBB1_292:                              # %_ZNSsD1Ev.exit
 3093              		.loc	2 495 1
 3094              	.Ltmp761:
 3095              	.Ltmp310:                               # ./matrix-util.C:495:1
 3096 11bb 488DBD80 		leaq	-896(%rbp), %rdi
 3096      FCFFFF
 3097 11c2 E8000000 		callq	_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev # ./matrix-util.C:495:1
 3097      00
 3098              	.Ltmp311:                               # ./matrix-util.C:495:1
 3099              	# BB#293:
 485:./matrix-util.C ****    stat_stream >> pid >> comm >> state >> ppid >> pgrp >> session >> tty_nr
 3100              		.loc	2 485 4
 3101              	.Ltmp762:
 3102 11c7 4889DF   		movq	%rbx, %rdi              # ./matrix-util.C:485:4
 475:./matrix-util.C ****    string pid, comm, state, ppid, pgrp, session, tty_nr;
 3103              		.loc	2 475 56
 3104              	.Ltmp763:
 3105 11ca E8000000 		callq	_Unwind_Resume_or_Rethrow # ./matrix-util.C:475:56
 3105      00
 3106              	.LBB1_294:
 3107              	.Ltmp312:
 3108              		.loc	2 495 1
 3109              	.Ltmp764:
 3110 11cf E8000000 		callq	_ZSt9terminatev         # ./matrix-util.C:495:1
 3110      00
 3111              	.Ltmp765:
 3112              	.Ltmp766:
 3114              	.Lfunc_end1:
 3115              	.Leh_func_end1:
 3116              		.section	.gcc_except_table,"a",@progbits
 3117              		.align	4
 3118              	GCC_except_table1:
 3119              	.Lexception1:
 3120 004c FF       		.byte	255                     # @LPStart Encoding = omit
 3121 004d 03       		.byte	3                       # @TType Encoding = udata4
 3122 004e 49       		.byte	73                      # @TType base offset
 3123 004f 03       		.byte	3                       # Call site Encoding = udata4
 3124 0050 41       		.byte	65                      # Call site table length
 3125              	.Lset13 = .Leh_func_begin1-.Leh_func_begin1 # Region start
 3126 0051 00000000 		.long	.Lset13
 3127              	.Lset14 = .Ltmp257-.Leh_func_begin1     # Region length
 3128 0055 36010000 		.long	.Lset14
 3129 0059 00000000 		.long	0                       # Landing pad
 3130 005d 00       		.byte	0                       # Action
 3131              	.Lset15 = .Ltmp257-.Leh_func_begin1     # Region start
 3132 005e 36010000 		.long	.Lset15
 3133              	.Lset16 = .Ltmp308-.Ltmp257             # Region length
 3134 0062 94010000 		.long	.Lset16
 3135              	.Lset17 = .Ltmp309-.Leh_func_begin1     # Landing pad
 3136 0066 6F090000 		.long	.Lset17
 3137 006a 01       		.byte	1                       # Action
 3138              	.Lset18 = .Ltmp308-.Leh_func_begin1     # Region start
 3139 006b CA020000 		.long	.Lset18
 3140              	.Lset19 = .Ltmp310-.Ltmp308             # Region length
 3141 006f A10C0000 		.long	.Lset19
 3142 0073 00000000 		.long	0                       # Landing pad
 3143 0077 00       		.byte	0                       # Action
 3144              	.Lset20 = .Ltmp310-.Leh_func_begin1     # Region start
 3145 0078 6B0F0000 		.long	.Lset20
 3146              	.Lset21 = .Ltmp311-.Ltmp310             # Region length
 3147 007c 0C000000 		.long	.Lset21
 3148              	.Lset22 = .Ltmp312-.Leh_func_begin1     # Landing pad
 3149 0080 7F0F0000 		.long	.Lset22
 3150 0084 01       		.byte	1                       # Action
 3151              	.Lset23 = .Ltmp311-.Leh_func_begin1     # Region start
 3152 0085 770F0000 		.long	.Lset23
 3153              	.Lset24 = .Leh_func_end1-.Ltmp311       # Region length
 3154 0089 0D000000 		.long	.Lset24
 3155 008d 00000000 		.long	0                       # Landing pad
 3156 0091 00       		.byte	0                       # Action
 3157              	                                        # -- Action Record Table --
 3158              	                                        # Action Record
 3159 0092 01       		.byte	1                       #   TypeInfo index
 3160 0093 00       		.byte	0                       #   Next action
 3161              	                                        # -- Catch TypeInfos --
 3162 0094 00000000 		.long	0                       # TypeInfo
 3163              		.align	4
 3164              	
 3165              		.text
 3166              		.globl	_ZN10MatrixUtil13loadF4ModulusEPKc
 3167 11d4 6666662E 		.align	16, 0x90
 3167      0F1F8400 
 3167      00000000 
 3169              	_ZN10MatrixUtil13loadF4ModulusEPKc:     # @_ZN10MatrixUtil13loadF4ModulusEPKc
 3170              	.Leh_func_begin2:
 3171              	.Lfunc_begin2:
  47:./matrix-util.C **** {
 3172              		.loc	2 47 0
 3173              	.Ltmp770:
 3174              	# BB#0:
 3175 11e0 55       		pushq	%rbp
 3176              	.Ltmp767:
 3177 11e1 4889E5   		movq	%rsp, %rbp
 3178              	.Ltmp768:
 3179 11e4 4157     		pushq	%r15
 3180 11e6 4156     		pushq	%r14
 3181 11e8 53       		pushq	%rbx
 3182 11e9 50       		pushq	%rax
 3183              	.Ltmp769:
 3184              		#DEBUG_VALUE: loadF4Modulus:fileName <- RDI+0 # ./matrix-util.C:46:46
 3185 11ea 4889FB   		movq	%rdi, %rbx
 3186              	.Ltmp771:
 3187              		#DEBUG_VALUE: loadF4Modulus:fileName <- RBX+0
  50:./matrix-util.C ****         std::ostream &report = commentator.report (Commentator::LEVEL_IMPORTANT, INTERNAL_ERROR);
 3188              		.loc	2 50 97
 3189              	.Ltmp772:
 3190 11ed BF000000 		movl	$_ZN4LELA11commentatorE, %edi # ./matrix-util.C:50:97
 3190      00
 3191 11f2 BE010000 		movl	$1, %esi
 3191      00
 3192 11f7 BA000000 		movl	$.L.str8, %edx          # ./matrix-util.C:50:97
 3192      00
 3193 11fc E8000000 		callq	_ZN4LELA11Commentator6reportElPKc # ./matrix-util.C:50:97
 3193      00
 3194 1201 4989C6   		movq	%rax, %r14              # ./matrix-util.C:50:97
  50:./matrix-util.C ****         std::ostream &report = commentator.report (Commentator::LEVEL_IMPORTANT, INTERNAL_ERROR);
 3195              		.loc	2 50 97
 3196              	.Ltmp773:
 3197              		#DEBUG_VALUE: report <- R14+0   # ./matrix-util.C:50:97
  52:./matrix-util.C **** 	FILE *f = fopen(fileName, "r");
 3198              		.loc	2 52 32
 3199              	.Ltmp774:
 3200 1204 BE000000 		movl	$.L.str9, %esi          # ./matrix-util.C:52:32
 3200      00
 3201 1209 4889DF   		movq	%rbx, %rdi              # ./matrix-util.C:52:32
 3202 120c E8000000 		callq	fopen                   # ./matrix-util.C:52:32
 3202      00
  52:./matrix-util.C **** 	FILE *f = fopen(fileName, "r");
 3203              		.loc	2 52 32
 3204              	.Ltmp775:
 3205              		#DEBUG_VALUE: f <- RAX+0        # ./matrix-util.C:52:32
 3206 1211 4885C0   		testq	%rax, %rax              # ./matrix-util.C:52:32
 3207              	.Ltmp776:
 3208              		#DEBUG_VALUE: report <- undef
 3209              	.Ltmp777:
 3210              		#DEBUG_VALUE: loadF4Modulus:fileName <- undef
  53:./matrix-util.C **** 	if (f == NULL)
 3211              		.loc	2 53 2
 3212              	.Ltmp778:
 3213 1214 0F85A200 		jne	.LBB2_9                 # ./matrix-util.C:53:2
 3213      0000
 3214              	# BB#1:
 3215              		.loc	12 509 46
 3216              	.Ltmp779:
 3217              		#DEBUG_VALUE: operator<<:__out <- R14+0 # /usr/include/c++/4.6.3/ostream:509:46[ ./matrix-util.C:5
 510:/usr/include/c++/4.6.3/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
 511:/usr/include/c++/4.6.3/ostream ****     {
 512:/usr/include/c++/4.6.3/ostream ****       if (!__s)
 513:/usr/include/c++/4.6.3/ostream **** 	__out.setstate(ios_base::badbit);
 514:/usr/include/c++/4.6.3/ostream ****       else
 515:/usr/include/c++/4.6.3/ostream **** 	__ostream_insert(__out, __s,
 3218              		.loc	12 515 29
 3219              	.Ltmp780:
 3220 121a BE000000 		movl	$.L.str10, %esi         # /usr/include/c++/4.6.3/ostream:515:29[ ./matrix-util.C:55:3 ]
 3220      00
 3221              		.loc	11 259 31
 3222              	.Ltmp781:
 3223              		#DEBUG_VALUE: length:__s <- RSI+0 # /usr/include/c++/4.6.3/bits/char_traits.h:259:31[ /usr/include
 3224 121f BA0B0000 		movl	$11, %edx
 3224      00
 3225              		.loc	12 515 29
 3226              	.Ltmp782:
 3227 1224 4C89F7   		movq	%r14, %rdi              # /usr/include/c++/4.6.3/ostream:515:29[ ./matrix-util.C:55:3 ]
 3228              	.Ltmp783:
 3229              		#DEBUG_VALUE: length:__s <- undef
 3230 1227 E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l # /usr/include
 3230      00
 509:/usr/include/c++/4.6.3/ostream ****     inline basic_ostream<char, _Traits>&
 3231              		.loc	12 509 65
 3232              	.Ltmp784:
 3233              		#DEBUG_VALUE: operator<<:__s <- RBX+0 # /usr/include/c++/4.6.3/ostream:509:65[ ./matrix-util.C:55:
 511:/usr/include/c++/4.6.3/ostream ****     {
 3234              		.loc	12 511 7
 3235              	.Ltmp785:
 3236 122c 4885DB   		testq	%rbx, %rbx              # /usr/include/c++/4.6.3/ostream:511:7[ ./matrix-util.C:55:3 ]
 3237 122f 7519     		jne	.LBB2_3                 # /usr/include/c++/4.6.3/ostream:511:7[ ./matrix-util.C:55:3 ]
 3238              	# BB#2:
 3239              	.Ltmp786:
 3240              		#DEBUG_VALUE: operator<<:__out <- R14+0
 512:/usr/include/c++/4.6.3/ostream ****       if (!__s)
 3241              		.loc	12 512 2
 3242              	.Ltmp787:
 3243 1231 498B1E   		movq	(%r14), %rbx            # /usr/include/c++/4.6.3/ostream:512:2[ ./matrix-util.C:55:3 ]
 3244 1234 488B7BE8 		movq	-24(%rbx), %rdi         # /usr/include/c++/4.6.3/ostream:512:2[ ./matrix-util.C:55:3 ]
 129:/usr/include/c++/4.6.3/bits/basic_ios.h ****       rdstate() const
 3245              		.loc	14 129 9
 3246              	.Ltmp788:
 3247 1238 418B743E 		movl	32(%r14,%rdi), %esi     # /usr/include/c++/4.6.3/bits/basic_ios.h:129:9[ /usr/include/c++/4.6
 3247      20
 3248              	.Ltmp789:
 158:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Iostate
 3249              		.loc	8 158 26
 3250              	.Ltmp790:
 3251              		#DEBUG_VALUE: operator|:__a <- ESI+0 # /usr/include/c++/4.6.3/bits/ios_base.h:158:26[ /usr/include
 3252              		.loc	14 148 7
 3253              	.Ltmp791:
 3254              		#DEBUG_VALUE: setstate:this <- RDI+0 # /usr/include/c++/4.6.3/bits/basic_ios.h:148:7[ /usr/include
 3255              		.loc	14 148 24
 3256              	.Ltmp792:
 3257              		#DEBUG_VALUE: setstate:__state <- 1+0 # /usr/include/c++/4.6.3/bits/basic_ios.h:148:24[ /usr/inclu
 128:/usr/include/c++/4.6.3/bits/basic_ios.h ****       iostate
 3258              		.loc	14 128 7
 3259              	.Ltmp793:
 3260              		#DEBUG_VALUE: rdstate:this <- RDI+0 # /usr/include/c++/4.6.3/bits/basic_ios.h:128:7[ /usr/include/
 512:/usr/include/c++/4.6.3/ostream ****       if (!__s)
 3261              		.loc	12 512 2
 3262              	.Ltmp794:
 3263 123d 4C01F7   		addq	%r14, %rdi              # /usr/include/c++/4.6.3/ostream:512:2[ ./matrix-util.C:55:3 ]
 3264              	.Ltmp795:
 3265              		#DEBUG_VALUE: operator|:__a <- undef
 3266              		.loc	8 159 5
 3267              	.Ltmp796:
 3268 1240 83CE01   		orl	$1, %esi                # /usr/include/c++/4.6.3/bits/ios_base.h:159:5[ /usr/include/c++/4.6.3
 3269              	.Ltmp797:
 158:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Iostate
 3270              		.loc	8 158 44
 3271              	.Ltmp798:
 3272              		#DEBUG_VALUE: operator|:__b <- 1+0 # /usr/include/c++/4.6.3/bits/ios_base.h:158:44[ /usr/include/c
 149:/usr/include/c++/4.6.3/bits/basic_ios.h ****       setstate(iostate __state)
 3273              		.loc	14 149 9
 3274              	.Ltmp799:
 3275 1243 E8000000 		callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate # /usr/include/c++/4.6.3/bits/ba
 3275      00
 3276 1248 EB16     		jmp	.LBB2_4
 3277              	.LBB2_3:
 3278              	.Ltmp800:
 3279              		#DEBUG_VALUE: operator<<:__out <- R14+0
 3280              	.Ltmp801:
 3281              		#DEBUG_VALUE: operator<<:__s <- RBX+0
 3282              	.Ltmp802:
 3283              		#DEBUG_VALUE: length:__s <- RBX+0
 3284              	.Ltmp803:
 260:/usr/include/c++/4.6.3/bits/char_traits.h ****       length(const char_type* __s)
 3285              		.loc	11 260 9
 3286              	.Ltmp804:
 3287 124a 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/bits/char_traits.h:260:9[ /usr/include/c++/4
 3288 124d E8000000 		callq	strlen                  # /usr/include/c++/4.6.3/bits/char_traits.h:260:9[ /usr/include/c++/
 3288      00
 3289              	.Ltmp805:
 3290              		.loc	12 515 29
 3291              	.Ltmp806:
 3292 1252 4C89F7   		movq	%r14, %rdi              # /usr/include/c++/4.6.3/ostream:515:29[ ./matrix-util.C:55:3 ]
 3293 1255 4889DE   		movq	%rbx, %rsi              # /usr/include/c++/4.6.3/ostream:515:29[ ./matrix-util.C:55:3 ]
 3294              	.Ltmp807:
 3295              		#DEBUG_VALUE: operator<<:__s <- undef
 3296              	.Ltmp808:
 3297              		#DEBUG_VALUE: length:__s <- undef
 3298 1258 4889C2   		movq	%rax, %rdx              # /usr/include/c++/4.6.3/ostream:515:29[ ./matrix-util.C:55:3 ]
 3299 125b E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l # /usr/include
 3299      00
 3300              	.LBB2_4:
 3301 1260 4C89F3   		movq	%r14, %rbx
 3302 1263 4C89F0   		movq	%r14, %rax
 3303              	.Ltmp809:
 3304              		#DEBUG_VALUE: operator<<:__out <- R14+0
 516:/usr/include/c++/4.6.3/ostream **** 			 static_cast<streamsize>(_Traits::length(__s)));
 517:/usr/include/c++/4.6.3/ostream ****       return __out;
 518:/usr/include/c++/4.6.3/ostream ****     }
 519:/usr/include/c++/4.6.3/ostream **** 
 520:/usr/include/c++/4.6.3/ostream ****   // Signed and unsigned
 521:/usr/include/c++/4.6.3/ostream ****   template<class _Traits>
 522:/usr/include/c++/4.6.3/ostream ****     inline basic_ostream<char, _Traits>&
 523:/usr/include/c++/4.6.3/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
 524:/usr/include/c++/4.6.3/ostream ****     { return (__out << reinterpret_cast<const char*>(__s)); }
 525:/usr/include/c++/4.6.3/ostream **** 
 526:/usr/include/c++/4.6.3/ostream ****   template<class _Traits>
 527:/usr/include/c++/4.6.3/ostream ****     inline basic_ostream<char, _Traits> &
 528:/usr/include/c++/4.6.3/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
 529:/usr/include/c++/4.6.3/ostream ****     { return (__out << reinterpret_cast<const char*>(__s)); }
 530:/usr/include/c++/4.6.3/ostream ****   //@}
 531:/usr/include/c++/4.6.3/ostream **** 
 532:/usr/include/c++/4.6.3/ostream ****   // [27.6.2.7] standard basic_ostream manipulators
 533:/usr/include/c++/4.6.3/ostream ****   /**
 534:/usr/include/c++/4.6.3/ostream ****    *  @brief  Write a newline and flush the stream.
 535:/usr/include/c++/4.6.3/ostream ****    *
 536:/usr/include/c++/4.6.3/ostream ****    *  This manipulator is often mistakenly used when a simple newline is
 537:/usr/include/c++/4.6.3/ostream ****    *  desired, leading to poor buffering performance.  See
 538:/usr/include/c++/4.6.3/ostream ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt11ch25s02.html
 539:/usr/include/c++/4.6.3/ostream ****    *  for more on this subject.
 540:/usr/include/c++/4.6.3/ostream ****   */
 541:/usr/include/c++/4.6.3/ostream ****   template<typename _CharT, typename _Traits>
 542:/usr/include/c++/4.6.3/ostream ****     inline basic_ostream<_CharT, _Traits>& 
 543:/usr/include/c++/4.6.3/ostream ****     endl(basic_ostream<_CharT, _Traits>& __os)
 3305              		.loc	12 543 7
 3306              	.Ltmp810:
 3307 1266 488B00   		movq	(%rax), %rax            # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 3308 1269 488B40E8 		movq	-24(%rax), %rax         # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 150:/usr/include/c++/4.6.3/bits/basic_ios.h ****       { this->clear(this->rdstate() | __state); }
 151:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 152:/usr/include/c++/4.6.3/bits/basic_ios.h ****       // Flip the internal state on for the proper state bits, then re
 153:/usr/include/c++/4.6.3/bits/basic_ios.h ****       // throws the propagated exception if bit also set in
 154:/usr/include/c++/4.6.3/bits/basic_ios.h ****       // exceptions().
 155:/usr/include/c++/4.6.3/bits/basic_ios.h ****       void
 156:/usr/include/c++/4.6.3/bits/basic_ios.h ****       _M_setstate(iostate __state)
 157:/usr/include/c++/4.6.3/bits/basic_ios.h ****       {
 158:/usr/include/c++/4.6.3/bits/basic_ios.h **** 	// 27.6.1.2.1 Common requirements.
 159:/usr/include/c++/4.6.3/bits/basic_ios.h **** 	// Turn this on without causing an ios::failure to be thrown.
 160:/usr/include/c++/4.6.3/bits/basic_ios.h **** 	_M_streambuf_state |= __state;
 161:/usr/include/c++/4.6.3/bits/basic_ios.h **** 	if (this->exceptions() & __state)
 162:/usr/include/c++/4.6.3/bits/basic_ios.h **** 	  __throw_exception_again;
 163:/usr/include/c++/4.6.3/bits/basic_ios.h ****       }
 164:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 165:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 166:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Fast error checking.
 167:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @return  True if no error flags are set.
 168:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 169:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  A wrapper around rdstate.
 170:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 171:/usr/include/c++/4.6.3/bits/basic_ios.h ****       bool
 172:/usr/include/c++/4.6.3/bits/basic_ios.h ****       good() const
 173:/usr/include/c++/4.6.3/bits/basic_ios.h ****       { return this->rdstate() == 0; }
 174:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 175:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 176:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Fast error checking.
 177:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @return  True if the eofbit is set.
 178:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 179:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  Note that other iostate flags may also be set.
 180:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 181:/usr/include/c++/4.6.3/bits/basic_ios.h ****       bool
 182:/usr/include/c++/4.6.3/bits/basic_ios.h ****       eof() const
 183:/usr/include/c++/4.6.3/bits/basic_ios.h ****       { return (this->rdstate() & eofbit) != 0; }
 184:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 185:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 186:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Fast error checking.
 187:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @return  True if either the badbit or the failbit is set.
 188:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 189:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  Checking the badbit in fail() is historical practice.
 190:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  Note that other iostate flags may also be set.
 191:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 192:/usr/include/c++/4.6.3/bits/basic_ios.h ****       bool
 193:/usr/include/c++/4.6.3/bits/basic_ios.h ****       fail() const
 194:/usr/include/c++/4.6.3/bits/basic_ios.h ****       { return (this->rdstate() & (badbit | failbit)) != 0; }
 195:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 196:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 197:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Fast error checking.
 198:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @return  True if the badbit is set.
 199:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 200:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  Note that other iostate flags may also be set.
 201:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 202:/usr/include/c++/4.6.3/bits/basic_ios.h ****       bool
 203:/usr/include/c++/4.6.3/bits/basic_ios.h ****       bad() const
 204:/usr/include/c++/4.6.3/bits/basic_ios.h ****       { return (this->rdstate() & badbit) != 0; }
 205:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 206:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 207:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Throwing exceptions on errors.
 208:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @return  The current exceptions mask.
 209:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 210:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  This changes nothing in the stream.  See the one-argument version
 211:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  of exceptions(iostate) for the meaning of the return value.
 212:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 213:/usr/include/c++/4.6.3/bits/basic_ios.h ****       iostate
 214:/usr/include/c++/4.6.3/bits/basic_ios.h ****       exceptions() const
 215:/usr/include/c++/4.6.3/bits/basic_ios.h ****       { return _M_exception; }
 216:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 217:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 218:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Throwing exceptions on errors.
 219:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @param  except  The new exceptions mask.
 220:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 221:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  By default, error flags are set silently.  You can set an
 222:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  exceptions mask for each stream; if a bit in the mask becomes set
 223:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  in the error flags, then an exception of type
 224:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  std::ios_base::failure is thrown.
 225:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 226:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  If the error flag is already set when the exceptions mask is
 227:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  added, the exception is immediately thrown.  Try running the
 228:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  following under GCC 3.1 or later:
 229:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @code
 230:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  #include <iostream>
 231:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  #include <fstream>
 232:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  #include <exception>
 233:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 234:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  int main()
 235:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  {
 236:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *      std::set_terminate (__gnu_cxx::__verbose_terminate_handler);
 237:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 238:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *      std::ifstream f ("/etc/motd");
 239:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 240:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *      std::cerr << "Setting badbit\n";
 241:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *      f.setstate (std::ios_base::badbit);
 242:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 243:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *      std::cerr << "Setting exception mask\n";
 244:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *      f.exceptions (std::ios_base::badbit);
 245:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  }
 246:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @endcode
 247:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 248:/usr/include/c++/4.6.3/bits/basic_ios.h ****       void
 249:/usr/include/c++/4.6.3/bits/basic_ios.h ****       exceptions(iostate __except)
 250:/usr/include/c++/4.6.3/bits/basic_ios.h ****       {
 251:/usr/include/c++/4.6.3/bits/basic_ios.h ****         _M_exception = __except;
 252:/usr/include/c++/4.6.3/bits/basic_ios.h ****         this->clear(_M_streambuf_state);
 253:/usr/include/c++/4.6.3/bits/basic_ios.h ****       }
 254:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 255:/usr/include/c++/4.6.3/bits/basic_ios.h ****       // Constructor/destructor:
 256:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 257:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Constructor performs initialization.
 258:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 259:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  The parameter is passed by derived streams.
 260:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 261:/usr/include/c++/4.6.3/bits/basic_ios.h ****       explicit
 262:/usr/include/c++/4.6.3/bits/basic_ios.h ****       basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
 263:/usr/include/c++/4.6.3/bits/basic_ios.h ****       : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 264:/usr/include/c++/4.6.3/bits/basic_ios.h **** 	_M_ctype(0), _M_num_put(0), _M_num_get(0)
 265:/usr/include/c++/4.6.3/bits/basic_ios.h ****       { this->init(__sb); }
 266:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 267:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 268:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Empty.
 269:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 270:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  The destructor does nothing.  More specifically, it does not
 271:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  destroy the streambuf held by rdbuf().
 272:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 273:/usr/include/c++/4.6.3/bits/basic_ios.h ****       virtual
 274:/usr/include/c++/4.6.3/bits/basic_ios.h ****       ~basic_ios() { }
 275:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 276:/usr/include/c++/4.6.3/bits/basic_ios.h ****       // Members:
 277:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 278:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Fetches the current @e tied stream.
 279:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @return  A pointer to the tied stream, or NULL if the stream is
 280:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *           not tied.
 281:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 282:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  A stream may be @e tied (or synchronized) to a second output
 283:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  stream.  When this stream performs any I/O, the tied stream is
 284:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  first flushed.  For example, @c std::cin is tied to @c std::cout.
 285:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 286:/usr/include/c++/4.6.3/bits/basic_ios.h ****       basic_ostream<_CharT, _Traits>*
 287:/usr/include/c++/4.6.3/bits/basic_ios.h ****       tie() const
 288:/usr/include/c++/4.6.3/bits/basic_ios.h ****       { return _M_tie; }
 289:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 290:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 291:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Ties this stream to an output stream.
 292:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @param  tiestr  The output stream.
 293:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @return  The previously tied output stream, or NULL if the stream
 294:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *           was not tied.
 295:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 296:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  This sets up a new tie; see tie() for more.
 297:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 298:/usr/include/c++/4.6.3/bits/basic_ios.h ****       basic_ostream<_CharT, _Traits>*
 299:/usr/include/c++/4.6.3/bits/basic_ios.h ****       tie(basic_ostream<_CharT, _Traits>* __tiestr)
 300:/usr/include/c++/4.6.3/bits/basic_ios.h ****       {
 301:/usr/include/c++/4.6.3/bits/basic_ios.h ****         basic_ostream<_CharT, _Traits>* __old = _M_tie;
 302:/usr/include/c++/4.6.3/bits/basic_ios.h ****         _M_tie = __tiestr;
 303:/usr/include/c++/4.6.3/bits/basic_ios.h ****         return __old;
 304:/usr/include/c++/4.6.3/bits/basic_ios.h ****       }
 305:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 306:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 307:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Accessing the underlying buffer.
 308:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @return  The current stream buffer.
 309:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 310:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  This does not change the state of the stream.
 311:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 312:/usr/include/c++/4.6.3/bits/basic_ios.h ****       basic_streambuf<_CharT, _Traits>*
 313:/usr/include/c++/4.6.3/bits/basic_ios.h ****       rdbuf() const
 314:/usr/include/c++/4.6.3/bits/basic_ios.h ****       { return _M_streambuf; }
 315:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 316:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 317:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Changing the underlying buffer.
 318:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @param  sb  The new stream buffer.
 319:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @return  The previous stream buffer.
 320:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 321:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  Associates a new buffer with the current stream, and clears the
 322:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  error state.
 323:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 324:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  Due to historical accidents which the LWG refuses to correct, the
 325:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  I/O library suffers from a design error:  this function is hidden
 326:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  in derived classes by overrides of the zero-argument @c rdbuf(),
 327:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  which is non-virtual for hysterical raisins.  As a result, you
 328:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  must use explicit qualifications to access this function via any
 329:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  derived class.  For example:
 330:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 331:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @code
 332:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  std::fstream     foo;         // or some other derived type
 333:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  std::streambuf*  p = .....;
 334:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 335:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  foo.ios::rdbuf(p);            // ios == basic_ios<char>
 336:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @endcode
 337:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 338:/usr/include/c++/4.6.3/bits/basic_ios.h ****       basic_streambuf<_CharT, _Traits>*
 339:/usr/include/c++/4.6.3/bits/basic_ios.h ****       rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
 340:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 341:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 342:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Copies fields of __rhs into this.
 343:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @param  __rhs  The source values for the copies.
 344:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @return  Reference to this object.
 345:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 346:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  All fields of __rhs are copied into this object except that rdbuf()
 347:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  and rdstate() remain unchanged.  All values in the pword and iword
 348:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  arrays are copied.  Before copying, each callback is invoked with
 349:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  erase_event.  After copying, each (new) callback is invoked with
 350:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  copyfmt_event.  The final step is to copy exceptions().
 351:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 352:/usr/include/c++/4.6.3/bits/basic_ios.h ****       basic_ios&
 353:/usr/include/c++/4.6.3/bits/basic_ios.h ****       copyfmt(const basic_ios& __rhs);
 354:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 355:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 356:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Retrieves the @a empty character.
 357:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @return  The current fill character.
 358:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 359:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  It defaults to a space (' ') in the current locale.
 360:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 361:/usr/include/c++/4.6.3/bits/basic_ios.h ****       char_type
 362:/usr/include/c++/4.6.3/bits/basic_ios.h ****       fill() const
 363:/usr/include/c++/4.6.3/bits/basic_ios.h ****       {
 364:/usr/include/c++/4.6.3/bits/basic_ios.h **** 	if (!_M_fill_init)
 365:/usr/include/c++/4.6.3/bits/basic_ios.h **** 	  {
 366:/usr/include/c++/4.6.3/bits/basic_ios.h **** 	    _M_fill = this->widen(' ');
 367:/usr/include/c++/4.6.3/bits/basic_ios.h **** 	    _M_fill_init = true;
 368:/usr/include/c++/4.6.3/bits/basic_ios.h **** 	  }
 369:/usr/include/c++/4.6.3/bits/basic_ios.h **** 	return _M_fill;
 370:/usr/include/c++/4.6.3/bits/basic_ios.h ****       }
 371:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 372:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 373:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Sets a new @a empty character.
 374:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @param  ch  The new character.
 375:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @return  The previous fill character.
 376:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 377:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  The fill character is used to fill out space when P+ characters
 378:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  have been requested (e.g., via setw), Q characters are actually
 379:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  used, and Q<P.  It defaults to a space (' ') in the current locale.
 380:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 381:/usr/include/c++/4.6.3/bits/basic_ios.h ****       char_type
 382:/usr/include/c++/4.6.3/bits/basic_ios.h ****       fill(char_type __ch)
 383:/usr/include/c++/4.6.3/bits/basic_ios.h ****       {
 384:/usr/include/c++/4.6.3/bits/basic_ios.h **** 	char_type __old = this->fill();
 385:/usr/include/c++/4.6.3/bits/basic_ios.h **** 	_M_fill = __ch;
 386:/usr/include/c++/4.6.3/bits/basic_ios.h **** 	return __old;
 387:/usr/include/c++/4.6.3/bits/basic_ios.h ****       }
 388:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 389:/usr/include/c++/4.6.3/bits/basic_ios.h ****       // Locales:
 390:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 391:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Moves to a new locale.
 392:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @param  loc  The new locale.
 393:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @return  The previous locale.
 394:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 395:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  Calls @c ios_base::imbue(loc), and if a stream buffer is associated
 396:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  with this stream, calls that buffer's @c pubimbue(loc).
 397:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 398:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  Additional l10n notes are at
 399:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/localization.html
 400:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 401:/usr/include/c++/4.6.3/bits/basic_ios.h ****       locale
 402:/usr/include/c++/4.6.3/bits/basic_ios.h ****       imbue(const locale& __loc);
 403:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 404:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 405:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Squeezes characters.
 406:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @param  c  The character to narrow.
 407:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @param  dfault  The character to narrow.
 408:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @return  The narrowed character.
 409:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 410:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  Maps a character of @c char_type to a character of @c char,
 411:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  if possible.
 412:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 413:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  Returns the result of
 414:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @code
 415:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *    std::use_facet<ctype<char_type> >(getloc()).narrow(c,dfault)
 416:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @endcode
 417:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 418:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  Additional l10n notes are at
 419:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/localization.html
 420:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 421:/usr/include/c++/4.6.3/bits/basic_ios.h ****       char
 422:/usr/include/c++/4.6.3/bits/basic_ios.h ****       narrow(char_type __c, char __dfault) const
 423:/usr/include/c++/4.6.3/bits/basic_ios.h ****       { return __check_facet(_M_ctype).narrow(__c, __dfault); }
 424:/usr/include/c++/4.6.3/bits/basic_ios.h **** 
 425:/usr/include/c++/4.6.3/bits/basic_ios.h ****       /**
 426:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @brief  Widens characters.
 427:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @param  c  The character to widen.
 428:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @return  The widened character.
 429:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 430:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  Maps a character of @c char to a character of @c char_type.
 431:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 432:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  Returns the result of
 433:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @code
 434:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *    std::use_facet<ctype<char_type> >(getloc()).widen(c)
 435:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  @endcode
 436:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *
 437:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  Additional l10n notes are at
 438:/usr/include/c++/4.6.3/bits/basic_ios.h ****        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/localization.html
 439:/usr/include/c++/4.6.3/bits/basic_ios.h ****       */
 440:/usr/include/c++/4.6.3/bits/basic_ios.h ****       char_type
 3309              		.loc	14 440 18
 3310              	.Ltmp811:
 3311              		#DEBUG_VALUE: widen:__c <- 10+0 # /usr/include/c++/4.6.3/bits/basic_ios.h:440:18[ /usr/include/c++
 441:/usr/include/c++/4.6.3/bits/basic_ios.h ****       widen(char __c) const
 3312              		.loc	14 441 9
 3313              	.Ltmp812:
 3314 126d 488B9C18 		movq	240(%rax,%rbx), %rbx    # /usr/include/c++/4.6.3/bits/basic_ios.h:441:9[ /usr/include/c++/4.6
 3314      F0000000 
  47:/usr/include/c++/4.6.3/bits/basic_ios.h ****     inline const _Facet&
 3315              		.loc	14 47 33
 3316              	.Ltmp813:
 3317              		#DEBUG_VALUE: __check_facet:__f <- RBX+0 # /usr/include/c++/4.6.3/bits/basic_ios.h:47:33[ /usr/inc
 3318              		.loc	14 441 9
 3319              	.Ltmp814:
 3320 1275 4885DB   		testq	%rbx, %rbx              # /usr/include/c++/4.6.3/bits/basic_ios.h:441:9[ /usr/include/c++/4.
 3321 1278 0F844301 		je	.LBB2_20
 3321      0000
 3322              	# BB#5:                                 # %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
 3323              	.Ltmp815:
 3324              		#DEBUG_VALUE: operator<<:__out <- R14+0
 3325              	.Ltmp816:
 3326              		#DEBUG_VALUE: widen:__c <- 10+0
 3327              	.Ltmp817:
 3328              		#DEBUG_VALUE: __check_facet:__f <- RBX+0
   1:/usr/include/c++/4.6.3/bits/locale_facets.h **** // Locale support -*- C++ -*-
   2:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
   3:/usr/include/c++/4.6.3/bits/locale_facets.h **** // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
   4:/usr/include/c++/4.6.3/bits/locale_facets.h **** // 2006, 2007, 2008, 2009, 2010, 2011
   5:/usr/include/c++/4.6.3/bits/locale_facets.h **** // Free Software Foundation, Inc.
   6:/usr/include/c++/4.6.3/bits/locale_facets.h **** //
   7:/usr/include/c++/4.6.3/bits/locale_facets.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   8:/usr/include/c++/4.6.3/bits/locale_facets.h **** // software; you can redistribute it and/or modify it under the
   9:/usr/include/c++/4.6.3/bits/locale_facets.h **** // terms of the GNU General Public License as published by the
  10:/usr/include/c++/4.6.3/bits/locale_facets.h **** // Free Software Foundation; either version 3, or (at your option)
  11:/usr/include/c++/4.6.3/bits/locale_facets.h **** // any later version.
  12:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
  13:/usr/include/c++/4.6.3/bits/locale_facets.h **** // This library is distributed in the hope that it will be useful,
  14:/usr/include/c++/4.6.3/bits/locale_facets.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:/usr/include/c++/4.6.3/bits/locale_facets.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:/usr/include/c++/4.6.3/bits/locale_facets.h **** // GNU General Public License for more details.
  17:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
  18:/usr/include/c++/4.6.3/bits/locale_facets.h **** // Under Section 7 of GPL version 3, you are granted additional
  19:/usr/include/c++/4.6.3/bits/locale_facets.h **** // permissions described in the GCC Runtime Library Exception, version
  20:/usr/include/c++/4.6.3/bits/locale_facets.h **** // 3.1, as published by the Free Software Foundation.
  21:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
  22:/usr/include/c++/4.6.3/bits/locale_facets.h **** // You should have received a copy of the GNU General Public License and
  23:/usr/include/c++/4.6.3/bits/locale_facets.h **** // a copy of the GCC Runtime Library Exception along with this program;
  24:/usr/include/c++/4.6.3/bits/locale_facets.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  25:/usr/include/c++/4.6.3/bits/locale_facets.h **** // <http://www.gnu.org/licenses/>.
  26:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
  27:/usr/include/c++/4.6.3/bits/locale_facets.h **** /** @file bits/locale_facets.h
  28:/usr/include/c++/4.6.3/bits/locale_facets.h ****  *  This is an internal header file, included by other library headers.
  29:/usr/include/c++/4.6.3/bits/locale_facets.h ****  *  Do not attempt to use it directly. @headername{locale}
  30:/usr/include/c++/4.6.3/bits/locale_facets.h ****  */
  31:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
  32:/usr/include/c++/4.6.3/bits/locale_facets.h **** //
  33:/usr/include/c++/4.6.3/bits/locale_facets.h **** // ISO C++ 14882: 22.1  Locales
  34:/usr/include/c++/4.6.3/bits/locale_facets.h **** //
  35:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
  36:/usr/include/c++/4.6.3/bits/locale_facets.h **** #ifndef _LOCALE_FACETS_H
  37:/usr/include/c++/4.6.3/bits/locale_facets.h **** #define _LOCALE_FACETS_H 1
  38:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
  39:/usr/include/c++/4.6.3/bits/locale_facets.h **** #pragma GCC system_header
  40:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
  41:/usr/include/c++/4.6.3/bits/locale_facets.h **** #include <cwctype>	// For wctype_t
  42:/usr/include/c++/4.6.3/bits/locale_facets.h **** #include <cctype>
  43:/usr/include/c++/4.6.3/bits/locale_facets.h **** #include <bits/ctype_base.h>	
  44:/usr/include/c++/4.6.3/bits/locale_facets.h **** #include <iosfwd>
  45:/usr/include/c++/4.6.3/bits/locale_facets.h **** #include <bits/ios_base.h>  // For ios_base, ios_base::iostate
  46:/usr/include/c++/4.6.3/bits/locale_facets.h **** #include <streambuf>
  47:/usr/include/c++/4.6.3/bits/locale_facets.h **** #include <bits/cpp_type_traits.h>
  48:/usr/include/c++/4.6.3/bits/locale_facets.h **** #include <ext/type_traits.h>
  49:/usr/include/c++/4.6.3/bits/locale_facets.h **** #include <ext/numeric_traits.h>
  50:/usr/include/c++/4.6.3/bits/locale_facets.h **** #include <bits/streambuf_iterator.h>
  51:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
  52:/usr/include/c++/4.6.3/bits/locale_facets.h **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/include/c++/4.6.3/bits/locale_facets.h **** {
  54:/usr/include/c++/4.6.3/bits/locale_facets.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
  56:/usr/include/c++/4.6.3/bits/locale_facets.h ****   // NB: Don't instantiate required wchar_t facets if no wchar_t support.
  57:/usr/include/c++/4.6.3/bits/locale_facets.h **** #ifdef _GLIBCXX_USE_WCHAR_T
  58:/usr/include/c++/4.6.3/bits/locale_facets.h **** # define  _GLIBCXX_NUM_FACETS 28
  59:/usr/include/c++/4.6.3/bits/locale_facets.h **** #else
  60:/usr/include/c++/4.6.3/bits/locale_facets.h **** # define  _GLIBCXX_NUM_FACETS 14
  61:/usr/include/c++/4.6.3/bits/locale_facets.h **** #endif
  62:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
  63:/usr/include/c++/4.6.3/bits/locale_facets.h ****   // Convert string to numeric value of type _Tp and store results.
  64:/usr/include/c++/4.6.3/bits/locale_facets.h ****   // NB: This is specialized for all required types, there is no
  65:/usr/include/c++/4.6.3/bits/locale_facets.h ****   // generic definition.
  66:/usr/include/c++/4.6.3/bits/locale_facets.h ****   template<typename _Tp>
  67:/usr/include/c++/4.6.3/bits/locale_facets.h ****     void
  68:/usr/include/c++/4.6.3/bits/locale_facets.h ****     __convert_to_v(const char*, _Tp&, ios_base::iostate&,
  69:/usr/include/c++/4.6.3/bits/locale_facets.h **** 		   const __c_locale&) throw();
  70:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
  71:/usr/include/c++/4.6.3/bits/locale_facets.h ****   // Explicit specializations for required types.
  72:/usr/include/c++/4.6.3/bits/locale_facets.h ****   template<>
  73:/usr/include/c++/4.6.3/bits/locale_facets.h ****     void
  74:/usr/include/c++/4.6.3/bits/locale_facets.h ****     __convert_to_v(const char*, float&, ios_base::iostate&,
  75:/usr/include/c++/4.6.3/bits/locale_facets.h **** 		   const __c_locale&) throw();
  76:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
  77:/usr/include/c++/4.6.3/bits/locale_facets.h ****   template<>
  78:/usr/include/c++/4.6.3/bits/locale_facets.h ****     void
  79:/usr/include/c++/4.6.3/bits/locale_facets.h ****     __convert_to_v(const char*, double&, ios_base::iostate&,
  80:/usr/include/c++/4.6.3/bits/locale_facets.h **** 		   const __c_locale&) throw();
  81:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
  82:/usr/include/c++/4.6.3/bits/locale_facets.h ****   template<>
  83:/usr/include/c++/4.6.3/bits/locale_facets.h ****     void
  84:/usr/include/c++/4.6.3/bits/locale_facets.h ****     __convert_to_v(const char*, long double&, ios_base::iostate&,
  85:/usr/include/c++/4.6.3/bits/locale_facets.h **** 		   const __c_locale&) throw();
  86:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
  87:/usr/include/c++/4.6.3/bits/locale_facets.h ****   // NB: __pad is a struct, rather than a function, so it can be
  88:/usr/include/c++/4.6.3/bits/locale_facets.h ****   // partially-specialized.
  89:/usr/include/c++/4.6.3/bits/locale_facets.h ****   template<typename _CharT, typename _Traits>
  90:/usr/include/c++/4.6.3/bits/locale_facets.h ****     struct __pad
  91:/usr/include/c++/4.6.3/bits/locale_facets.h ****     {
  92:/usr/include/c++/4.6.3/bits/locale_facets.h ****       static void
  93:/usr/include/c++/4.6.3/bits/locale_facets.h ****       _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
  94:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	     const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
  95:/usr/include/c++/4.6.3/bits/locale_facets.h ****     };
  96:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
  97:/usr/include/c++/4.6.3/bits/locale_facets.h ****   // Used by both numeric and monetary facets.
  98:/usr/include/c++/4.6.3/bits/locale_facets.h ****   // Inserts "group separator" characters into an array of characters.
  99:/usr/include/c++/4.6.3/bits/locale_facets.h ****   // It's recursive, one iteration per group.  It moves the characters
 100:/usr/include/c++/4.6.3/bits/locale_facets.h ****   // in the buffer this way: "xxxx12345" -> "12,345xxx".  Call this
 101:/usr/include/c++/4.6.3/bits/locale_facets.h ****   // only with __gsize != 0.
 102:/usr/include/c++/4.6.3/bits/locale_facets.h ****   template<typename _CharT>
 103:/usr/include/c++/4.6.3/bits/locale_facets.h ****     _CharT*
 104:/usr/include/c++/4.6.3/bits/locale_facets.h ****     __add_grouping(_CharT* __s, _CharT __sep,
 105:/usr/include/c++/4.6.3/bits/locale_facets.h **** 		   const char* __gbeg, size_t __gsize,
 106:/usr/include/c++/4.6.3/bits/locale_facets.h **** 		   const _CharT* __first, const _CharT* __last);
 107:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 108:/usr/include/c++/4.6.3/bits/locale_facets.h ****   // This template permits specializing facet output code for
 109:/usr/include/c++/4.6.3/bits/locale_facets.h ****   // ostreambuf_iterator.  For ostreambuf_iterator, sputn is
 110:/usr/include/c++/4.6.3/bits/locale_facets.h ****   // significantly more efficient than incrementing iterators.
 111:/usr/include/c++/4.6.3/bits/locale_facets.h ****   template<typename _CharT>
 112:/usr/include/c++/4.6.3/bits/locale_facets.h ****     inline
 113:/usr/include/c++/4.6.3/bits/locale_facets.h ****     ostreambuf_iterator<_CharT>
 114:/usr/include/c++/4.6.3/bits/locale_facets.h ****     __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
 115:/usr/include/c++/4.6.3/bits/locale_facets.h ****     {
 116:/usr/include/c++/4.6.3/bits/locale_facets.h ****       __s._M_put(__ws, __len);
 117:/usr/include/c++/4.6.3/bits/locale_facets.h ****       return __s;
 118:/usr/include/c++/4.6.3/bits/locale_facets.h ****     }
 119:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 120:/usr/include/c++/4.6.3/bits/locale_facets.h ****   // This is the unspecialized form of the template.
 121:/usr/include/c++/4.6.3/bits/locale_facets.h ****   template<typename _CharT, typename _OutIter>
 122:/usr/include/c++/4.6.3/bits/locale_facets.h ****     inline
 123:/usr/include/c++/4.6.3/bits/locale_facets.h ****     _OutIter
 124:/usr/include/c++/4.6.3/bits/locale_facets.h ****     __write(_OutIter __s, const _CharT* __ws, int __len)
 125:/usr/include/c++/4.6.3/bits/locale_facets.h ****     {
 126:/usr/include/c++/4.6.3/bits/locale_facets.h ****       for (int __j = 0; __j < __len; __j++, ++__s)
 127:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	*__s = __ws[__j];
 128:/usr/include/c++/4.6.3/bits/locale_facets.h ****       return __s;
 129:/usr/include/c++/4.6.3/bits/locale_facets.h ****     }
 130:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 131:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 132:/usr/include/c++/4.6.3/bits/locale_facets.h ****   // 22.2.1.1  Template class ctype
 133:/usr/include/c++/4.6.3/bits/locale_facets.h ****   // Include host and configuration specific ctype enums for ctype_base.
 134:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 135:/usr/include/c++/4.6.3/bits/locale_facets.h ****   /**
 136:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  @brief  Common base for ctype facet
 137:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *
 138:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  This template class provides implementations of the public functions
 139:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  that forward to the protected virtual functions.
 140:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *
 141:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  This template also provides abstract stubs for the protected virtual
 142:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  functions.
 143:/usr/include/c++/4.6.3/bits/locale_facets.h ****   */
 144:/usr/include/c++/4.6.3/bits/locale_facets.h ****   template<typename _CharT>
 145:/usr/include/c++/4.6.3/bits/locale_facets.h ****     class __ctype_abstract_base : public locale::facet, public ctype_base
 146:/usr/include/c++/4.6.3/bits/locale_facets.h ****     {
 147:/usr/include/c++/4.6.3/bits/locale_facets.h ****     public:
 148:/usr/include/c++/4.6.3/bits/locale_facets.h ****       // Types:
 149:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /// Typedef for the template parameter
 150:/usr/include/c++/4.6.3/bits/locale_facets.h ****       typedef _CharT char_type;
 151:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 152:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 153:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Test char_type classification.
 154:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 155:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function finds a mask M for @a c and compares it to mask @a m.
 156:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  It does so by returning the value of ctype<char_type>::do_is().
 157:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 158:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param c  The char_type to compare the mask of.
 159:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param m  The mask to compare against.
 160:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  (M & m) != 0.
 161:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 162:/usr/include/c++/4.6.3/bits/locale_facets.h ****       bool
 163:/usr/include/c++/4.6.3/bits/locale_facets.h ****       is(mask __m, char_type __c) const
 164:/usr/include/c++/4.6.3/bits/locale_facets.h ****       { return this->do_is(__m, __c); }
 165:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 166:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 167:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Return a mask array.
 168:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 169:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function finds the mask for each char_type in the range [lo,hi)
 170:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  and successively writes it to vec.  vec must have as many elements
 171:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  as the char array.  It does so by returning the value of
 172:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  ctype<char_type>::do_is().
 173:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 174:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to start of range.
 175:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 176:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param vec  Pointer to an array of mask storage.
 177:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  @a hi.
 178:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 179:/usr/include/c++/4.6.3/bits/locale_facets.h ****       const char_type*
 180:/usr/include/c++/4.6.3/bits/locale_facets.h ****       is(const char_type *__lo, const char_type *__hi, mask *__vec) const
 181:/usr/include/c++/4.6.3/bits/locale_facets.h ****       { return this->do_is(__lo, __hi, __vec); }
 182:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 183:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 184:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Find char_type matching a mask
 185:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 186:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function searches for and returns the first char_type c in
 187:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  [lo,hi) for which is(m,c) is true.  It does so by returning
 188:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  ctype<char_type>::do_scan_is().
 189:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 190:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param m  The mask to compare against.
 191:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to start of range.
 192:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 193:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  Pointer to matching char_type if found, else @a hi.
 194:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 195:/usr/include/c++/4.6.3/bits/locale_facets.h ****       const char_type*
 196:/usr/include/c++/4.6.3/bits/locale_facets.h ****       scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
 197:/usr/include/c++/4.6.3/bits/locale_facets.h ****       { return this->do_scan_is(__m, __lo, __hi); }
 198:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 199:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 200:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Find char_type not matching a mask
 201:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 202:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function searches for and returns the first char_type c in
 203:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  [lo,hi) for which is(m,c) is false.  It does so by returning
 204:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  ctype<char_type>::do_scan_not().
 205:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 206:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param m  The mask to compare against.
 207:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to first char in range.
 208:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 209:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  Pointer to non-matching char if found, else @a hi.
 210:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 211:/usr/include/c++/4.6.3/bits/locale_facets.h ****       const char_type*
 212:/usr/include/c++/4.6.3/bits/locale_facets.h ****       scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
 213:/usr/include/c++/4.6.3/bits/locale_facets.h ****       { return this->do_scan_not(__m, __lo, __hi); }
 214:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 215:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 216:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Convert to uppercase.
 217:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 218:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function converts the argument to uppercase if possible.
 219:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  If not possible (for example, '2'), returns the argument.  It does
 220:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  so by returning ctype<char_type>::do_toupper().
 221:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 222:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param c  The char_type to convert.
 223:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  The uppercase char_type if convertible, else @a c.
 224:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 225:/usr/include/c++/4.6.3/bits/locale_facets.h ****       char_type
 226:/usr/include/c++/4.6.3/bits/locale_facets.h ****       toupper(char_type __c) const
 227:/usr/include/c++/4.6.3/bits/locale_facets.h ****       { return this->do_toupper(__c); }
 228:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 229:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 230:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Convert array to uppercase.
 231:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 232:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function converts each char_type in the range [lo,hi) to
 233:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  uppercase if possible.  Other elements remain untouched.  It does so
 234:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  by returning ctype<char_type>:: do_toupper(lo, hi).
 235:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 236:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to start of range.
 237:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 238:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  @a hi.
 239:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 240:/usr/include/c++/4.6.3/bits/locale_facets.h ****       const char_type*
 241:/usr/include/c++/4.6.3/bits/locale_facets.h ****       toupper(char_type *__lo, const char_type* __hi) const
 242:/usr/include/c++/4.6.3/bits/locale_facets.h ****       { return this->do_toupper(__lo, __hi); }
 243:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 244:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 245:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Convert to lowercase.
 246:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 247:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function converts the argument to lowercase if possible.  If
 248:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  not possible (for example, '2'), returns the argument.  It does so
 249:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  by returning ctype<char_type>::do_tolower(c).
 250:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 251:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param c  The char_type to convert.
 252:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  The lowercase char_type if convertible, else @a c.
 253:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 254:/usr/include/c++/4.6.3/bits/locale_facets.h ****       char_type
 255:/usr/include/c++/4.6.3/bits/locale_facets.h ****       tolower(char_type __c) const
 256:/usr/include/c++/4.6.3/bits/locale_facets.h ****       { return this->do_tolower(__c); }
 257:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 258:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 259:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Convert array to lowercase.
 260:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 261:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function converts each char_type in the range [lo,hi) to
 262:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  lowercase if possible.  Other elements remain untouched.  It does so
 263:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  by returning ctype<char_type>:: do_tolower(lo, hi).
 264:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 265:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to start of range.
 266:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 267:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  @a hi.
 268:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 269:/usr/include/c++/4.6.3/bits/locale_facets.h ****       const char_type*
 270:/usr/include/c++/4.6.3/bits/locale_facets.h ****       tolower(char_type* __lo, const char_type* __hi) const
 271:/usr/include/c++/4.6.3/bits/locale_facets.h ****       { return this->do_tolower(__lo, __hi); }
 272:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 273:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 274:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Widen char to char_type
 275:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 276:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function converts the char argument to char_type using the
 277:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  simplest reasonable transformation.  It does so by returning
 278:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  ctype<char_type>::do_widen(c).
 279:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 280:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 281:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  codecvt for that.
 282:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 283:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param c  The char to convert.
 284:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  The converted char_type.
 285:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 286:/usr/include/c++/4.6.3/bits/locale_facets.h ****       char_type
 287:/usr/include/c++/4.6.3/bits/locale_facets.h ****       widen(char __c) const
 288:/usr/include/c++/4.6.3/bits/locale_facets.h ****       { return this->do_widen(__c); }
 289:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 290:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 291:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Widen array to char_type
 292:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 293:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function converts each char in the input to char_type using the
 294:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  simplest reasonable transformation.  It does so by returning
 295:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  ctype<char_type>::do_widen(c).
 296:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 297:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 298:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  codecvt for that.
 299:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 300:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to start of range.
 301:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 302:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param to  Pointer to the destination array.
 303:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  @a hi.
 304:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 305:/usr/include/c++/4.6.3/bits/locale_facets.h ****       const char*
 306:/usr/include/c++/4.6.3/bits/locale_facets.h ****       widen(const char* __lo, const char* __hi, char_type* __to) const
 307:/usr/include/c++/4.6.3/bits/locale_facets.h ****       { return this->do_widen(__lo, __hi, __to); }
 308:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 309:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 310:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Narrow char_type to char
 311:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 312:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function converts the char_type to char using the simplest
 313:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  reasonable transformation.  If the conversion fails, dfault is
 314:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  returned instead.  It does so by returning
 315:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  ctype<char_type>::do_narrow(c).
 316:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 317:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 318:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  codecvt for that.
 319:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 320:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param c  The char_type to convert.
 321:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param dfault  Char to return if conversion fails.
 322:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  The converted char.
 323:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 324:/usr/include/c++/4.6.3/bits/locale_facets.h ****       char
 325:/usr/include/c++/4.6.3/bits/locale_facets.h ****       narrow(char_type __c, char __dfault) const
 326:/usr/include/c++/4.6.3/bits/locale_facets.h ****       { return this->do_narrow(__c, __dfault); }
 327:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 328:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 329:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Narrow array to char array
 330:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 331:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function converts each char_type in the input to char using the
 332:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  simplest reasonable transformation and writes the results to the
 333:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  destination array.  For any char_type in the input that cannot be
 334:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  converted, @a dfault is used instead.  It does so by returning
 335:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  ctype<char_type>::do_narrow(lo, hi, dfault, to).
 336:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 337:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 338:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  codecvt for that.
 339:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 340:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to start of range.
 341:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 342:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param dfault  Char to use if conversion fails.
 343:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param to  Pointer to the destination array.
 344:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  @a hi.
 345:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 346:/usr/include/c++/4.6.3/bits/locale_facets.h ****       const char_type*
 347:/usr/include/c++/4.6.3/bits/locale_facets.h ****       narrow(const char_type* __lo, const char_type* __hi,
 348:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	      char __dfault, char *__to) const
 349:/usr/include/c++/4.6.3/bits/locale_facets.h ****       { return this->do_narrow(__lo, __hi, __dfault, __to); }
 350:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 351:/usr/include/c++/4.6.3/bits/locale_facets.h ****     protected:
 352:/usr/include/c++/4.6.3/bits/locale_facets.h ****       explicit
 353:/usr/include/c++/4.6.3/bits/locale_facets.h ****       __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }
 354:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 355:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual
 356:/usr/include/c++/4.6.3/bits/locale_facets.h ****       ~__ctype_abstract_base() { }
 357:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 358:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 359:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Test char_type classification.
 360:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 361:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function finds a mask M for @a c and compares it to mask @a m.
 362:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 363:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  do_is() is a hook for a derived facet to change the behavior of
 364:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  classifying.  do_is() must always return the same result for the
 365:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  same input.
 366:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 367:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param c  The char_type to find the mask of.
 368:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param m  The mask to compare against.
 369:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  (M & m) != 0.
 370:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 371:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual bool
 372:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_is(mask __m, char_type __c) const = 0;
 373:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 374:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 375:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Return a mask array.
 376:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 377:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function finds the mask for each char_type in the range [lo,hi)
 378:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  and successively writes it to vec.  vec must have as many elements
 379:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  as the input.
 380:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 381:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  do_is() is a hook for a derived facet to change the behavior of
 382:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  classifying.  do_is() must always return the same result for the
 383:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  same input.
 384:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 385:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to start of range.
 386:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 387:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param vec  Pointer to an array of mask storage.
 388:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  @a hi.
 389:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 390:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual const char_type*
 391:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_is(const char_type* __lo, const char_type* __hi,
 392:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	    mask* __vec) const = 0;
 393:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 394:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 395:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Find char_type matching mask
 396:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 397:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function searches for and returns the first char_type c in
 398:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  [lo,hi) for which is(m,c) is true.
 399:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 400:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  do_scan_is() is a hook for a derived facet to change the behavior of
 401:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  match searching.  do_is() must always return the same result for the
 402:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  same input.
 403:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 404:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param m  The mask to compare against.
 405:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to start of range.
 406:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 407:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  Pointer to a matching char_type if found, else @a hi.
 408:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 409:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual const char_type*
 410:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_scan_is(mask __m, const char_type* __lo,
 411:/usr/include/c++/4.6.3/bits/locale_facets.h **** 		 const char_type* __hi) const = 0;
 412:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 413:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 414:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Find char_type not matching mask
 415:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 416:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function searches for and returns a pointer to the first
 417:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  char_type c of [lo,hi) for which is(m,c) is false.
 418:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 419:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  do_scan_is() is a hook for a derived facet to change the behavior of
 420:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  match searching.  do_is() must always return the same result for the
 421:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  same input.
 422:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 423:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param m  The mask to compare against.
 424:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to start of range.
 425:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 426:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  Pointer to a non-matching char_type if found, else @a hi.
 427:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 428:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual const char_type*
 429:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_scan_not(mask __m, const char_type* __lo,
 430:/usr/include/c++/4.6.3/bits/locale_facets.h **** 		  const char_type* __hi) const = 0;
 431:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 432:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 433:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Convert to uppercase.
 434:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 435:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This virtual function converts the char_type argument to uppercase
 436:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  if possible.  If not possible (for example, '2'), returns the
 437:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  argument.
 438:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 439:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  do_toupper() is a hook for a derived facet to change the behavior of
 440:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  uppercasing.  do_toupper() must always return the same result for
 441:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  the same input.
 442:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 443:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param c  The char_type to convert.
 444:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  The uppercase char_type if convertible, else @a c.
 445:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 446:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual char_type
 447:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_toupper(char_type) const = 0;
 448:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 449:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 450:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Convert array to uppercase.
 451:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 452:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This virtual function converts each char_type in the range [lo,hi)
 453:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  to uppercase if possible.  Other elements remain untouched.
 454:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 455:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  do_toupper() is a hook for a derived facet to change the behavior of
 456:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  uppercasing.  do_toupper() must always return the same result for
 457:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  the same input.
 458:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 459:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to start of range.
 460:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 461:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  @a hi.
 462:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 463:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual const char_type*
 464:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_toupper(char_type* __lo, const char_type* __hi) const = 0;
 465:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 466:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 467:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Convert to lowercase.
 468:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 469:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This virtual function converts the argument to lowercase if
 470:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  possible.  If not possible (for example, '2'), returns the argument.
 471:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 472:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  do_tolower() is a hook for a derived facet to change the behavior of
 473:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  lowercasing.  do_tolower() must always return the same result for
 474:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  the same input.
 475:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 476:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param c  The char_type to convert.
 477:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  The lowercase char_type if convertible, else @a c.
 478:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 479:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual char_type
 480:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_tolower(char_type) const = 0;
 481:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 482:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 483:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Convert array to lowercase.
 484:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 485:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This virtual function converts each char_type in the range [lo,hi)
 486:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  to lowercase if possible.  Other elements remain untouched.
 487:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 488:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  do_tolower() is a hook for a derived facet to change the behavior of
 489:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  lowercasing.  do_tolower() must always return the same result for
 490:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  the same input.
 491:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 492:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to start of range.
 493:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 494:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  @a hi.
 495:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 496:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual const char_type*
 497:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_tolower(char_type* __lo, const char_type* __hi) const = 0;
 498:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 499:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 500:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Widen char
 501:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 502:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This virtual function converts the char to char_type using the
 503:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  simplest reasonable transformation.
 504:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 505:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  do_widen() is a hook for a derived facet to change the behavior of
 506:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  widening.  do_widen() must always return the same result for the
 507:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  same input.
 508:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 509:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 510:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  codecvt for that.
 511:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 512:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param c  The char to convert.
 513:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  The converted char_type
 514:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 515:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual char_type
 516:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_widen(char) const = 0;
 517:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 518:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 519:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Widen char array
 520:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 521:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function converts each char in the input to char_type using the
 522:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  simplest reasonable transformation.
 523:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 524:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  do_widen() is a hook for a derived facet to change the behavior of
 525:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  widening.  do_widen() must always return the same result for the
 526:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  same input.
 527:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 528:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 529:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  codecvt for that.
 530:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 531:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to start range.
 532:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 533:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param to  Pointer to the destination array.
 534:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  @a hi.
 535:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 536:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual const char*
 537:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_widen(const char* __lo, const char* __hi,
 538:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	       char_type* __dest) const = 0;
 539:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 540:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 541:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Narrow char_type to char
 542:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 543:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This virtual function converts the argument to char using the
 544:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  simplest reasonable transformation.  If the conversion fails, dfault
 545:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  is returned instead.
 546:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 547:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  do_narrow() is a hook for a derived facet to change the behavior of
 548:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  narrowing.  do_narrow() must always return the same result for the
 549:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  same input.
 550:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 551:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 552:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  codecvt for that.
 553:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 554:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param c  The char_type to convert.
 555:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param dfault  Char to return if conversion fails.
 556:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  The converted char.
 557:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 558:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual char
 559:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_narrow(char_type, char __dfault) const = 0;
 560:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 561:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 562:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Narrow char_type array to char
 563:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 564:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This virtual function converts each char_type in the range [lo,hi) to
 565:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  char using the simplest reasonable transformation and writes the
 566:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  results to the destination array.  For any element in the input that
 567:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  cannot be converted, @a dfault is used instead.
 568:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 569:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  do_narrow() is a hook for a derived facet to change the behavior of
 570:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  narrowing.  do_narrow() must always return the same result for the
 571:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  same input.
 572:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 573:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 574:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  codecvt for that.
 575:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 576:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to start of range.
 577:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 578:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param dfault  Char to use if conversion fails.
 579:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param to  Pointer to the destination array.
 580:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  @a hi.
 581:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 582:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual const char_type*
 583:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_narrow(const char_type* __lo, const char_type* __hi,
 584:/usr/include/c++/4.6.3/bits/locale_facets.h **** 		char __dfault, char* __dest) const = 0;
 585:/usr/include/c++/4.6.3/bits/locale_facets.h ****     };
 586:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 587:/usr/include/c++/4.6.3/bits/locale_facets.h ****   /**
 588:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  @brief  Primary class template ctype facet.
 589:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  @ingroup locales
 590:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *
 591:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  This template class defines classification and conversion functions for
 592:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  character sets.  It wraps cctype functionality.  Ctype gets used by
 593:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  streams for many I/O operations.
 594:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *
 595:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  This template provides the protected virtual functions the developer
 596:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  will have to replace in a derived class or specialization to make a
 597:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  working facet.  The public functions that access them are defined in
 598:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  __ctype_abstract_base, to allow for implementation flexibility.  See
 599:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  ctype<wchar_t> for an example.  The functions are documented in
 600:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  __ctype_abstract_base.
 601:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *
 602:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  Note: implementations are provided for all the protected virtual
 603:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  functions, but will likely not be useful.
 604:/usr/include/c++/4.6.3/bits/locale_facets.h ****   */
 605:/usr/include/c++/4.6.3/bits/locale_facets.h ****   template<typename _CharT>
 606:/usr/include/c++/4.6.3/bits/locale_facets.h ****     class ctype : public __ctype_abstract_base<_CharT>
 607:/usr/include/c++/4.6.3/bits/locale_facets.h ****     {
 608:/usr/include/c++/4.6.3/bits/locale_facets.h ****     public:
 609:/usr/include/c++/4.6.3/bits/locale_facets.h ****       // Types:
 610:/usr/include/c++/4.6.3/bits/locale_facets.h ****       typedef _CharT			char_type;
 611:/usr/include/c++/4.6.3/bits/locale_facets.h ****       typedef typename __ctype_abstract_base<_CharT>::mask mask;
 612:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 613:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /// The facet id for ctype<char_type>
 614:/usr/include/c++/4.6.3/bits/locale_facets.h ****       static locale::id			id;
 615:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 616:/usr/include/c++/4.6.3/bits/locale_facets.h ****       explicit
 617:/usr/include/c++/4.6.3/bits/locale_facets.h ****       ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }
 618:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 619:/usr/include/c++/4.6.3/bits/locale_facets.h ****    protected:
 620:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual
 621:/usr/include/c++/4.6.3/bits/locale_facets.h ****       ~ctype();
 622:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 623:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual bool
 624:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_is(mask __m, char_type __c) const;
 625:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 626:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual const char_type*
 627:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
 628:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 629:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual const char_type*
 630:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
 631:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 632:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual const char_type*
 633:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_scan_not(mask __m, const char_type* __lo,
 634:/usr/include/c++/4.6.3/bits/locale_facets.h **** 		  const char_type* __hi) const;
 635:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 636:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual char_type
 637:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_toupper(char_type __c) const;
 638:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 639:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual const char_type*
 640:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_toupper(char_type* __lo, const char_type* __hi) const;
 641:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 642:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual char_type
 643:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_tolower(char_type __c) const;
 644:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 645:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual const char_type*
 646:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_tolower(char_type* __lo, const char_type* __hi) const;
 647:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 648:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual char_type
 649:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_widen(char __c) const;
 650:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 651:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual const char*
 652:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_widen(const char* __lo, const char* __hi, char_type* __dest) const;
 653:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 654:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual char
 655:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_narrow(char_type, char __dfault) const;
 656:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 657:/usr/include/c++/4.6.3/bits/locale_facets.h ****       virtual const char_type*
 658:/usr/include/c++/4.6.3/bits/locale_facets.h ****       do_narrow(const char_type* __lo, const char_type* __hi,
 659:/usr/include/c++/4.6.3/bits/locale_facets.h **** 		char __dfault, char* __dest) const;
 660:/usr/include/c++/4.6.3/bits/locale_facets.h ****     };
 661:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 662:/usr/include/c++/4.6.3/bits/locale_facets.h ****   template<typename _CharT>
 663:/usr/include/c++/4.6.3/bits/locale_facets.h ****     locale::id ctype<_CharT>::id;
 664:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 665:/usr/include/c++/4.6.3/bits/locale_facets.h ****   /**
 666:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  @brief  The ctype<char> specialization.
 667:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  @ingroup locales
 668:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *
 669:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  This class defines classification and conversion functions for
 670:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  the char type.  It gets used by char streams for many I/O
 671:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  operations.  The char specialization provides a number of
 672:/usr/include/c++/4.6.3/bits/locale_facets.h ****    *  optimizations as well.
 673:/usr/include/c++/4.6.3/bits/locale_facets.h ****   */
 674:/usr/include/c++/4.6.3/bits/locale_facets.h ****   template<>
 675:/usr/include/c++/4.6.3/bits/locale_facets.h ****     class ctype<char> : public locale::facet, public ctype_base
 676:/usr/include/c++/4.6.3/bits/locale_facets.h ****     {
 677:/usr/include/c++/4.6.3/bits/locale_facets.h ****     public:
 678:/usr/include/c++/4.6.3/bits/locale_facets.h ****       // Types:
 679:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /// Typedef for the template parameter char.
 680:/usr/include/c++/4.6.3/bits/locale_facets.h ****       typedef char		char_type;
 681:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 682:/usr/include/c++/4.6.3/bits/locale_facets.h ****     protected:
 683:/usr/include/c++/4.6.3/bits/locale_facets.h ****       // Data Members:
 684:/usr/include/c++/4.6.3/bits/locale_facets.h ****       __c_locale		_M_c_locale_ctype;
 685:/usr/include/c++/4.6.3/bits/locale_facets.h ****       bool			_M_del;
 686:/usr/include/c++/4.6.3/bits/locale_facets.h ****       __to_type			_M_toupper;
 687:/usr/include/c++/4.6.3/bits/locale_facets.h ****       __to_type			_M_tolower;
 688:/usr/include/c++/4.6.3/bits/locale_facets.h ****       const mask*		_M_table;
 689:/usr/include/c++/4.6.3/bits/locale_facets.h ****       mutable char		_M_widen_ok;
 690:/usr/include/c++/4.6.3/bits/locale_facets.h ****       mutable char		_M_widen[1 + static_cast<unsigned char>(-1)];
 691:/usr/include/c++/4.6.3/bits/locale_facets.h ****       mutable char		_M_narrow[1 + static_cast<unsigned char>(-1)];
 692:/usr/include/c++/4.6.3/bits/locale_facets.h ****       mutable char		_M_narrow_ok;	// 0 uninitialized, 1 init,
 693:/usr/include/c++/4.6.3/bits/locale_facets.h **** 						// 2 memcpy can't be used
 694:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 695:/usr/include/c++/4.6.3/bits/locale_facets.h ****     public:
 696:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /// The facet id for ctype<char>
 697:/usr/include/c++/4.6.3/bits/locale_facets.h ****       static locale::id        id;
 698:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /// The size of the mask table.  It is SCHAR_MAX + 1.
 699:/usr/include/c++/4.6.3/bits/locale_facets.h ****       static const size_t      table_size = 1 + static_cast<unsigned char>(-1);
 700:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 701:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 702:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Constructor performs initialization.
 703:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 704:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This is the constructor provided by the standard.
 705:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 706:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param table If non-zero, table is used as the per-char mask.
 707:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *               Else classic_table() is used.
 708:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param del   If true, passes ownership of table to this facet.
 709:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param refs  Passed to the base facet class.
 710:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 711:/usr/include/c++/4.6.3/bits/locale_facets.h ****       explicit
 712:/usr/include/c++/4.6.3/bits/locale_facets.h ****       ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
 713:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 714:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 715:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Constructor performs static initialization.
 716:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 717:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This constructor is used to construct the initial C locale facet.
 718:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 719:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param cloc  Handle to C locale data.
 720:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param table If non-zero, table is used as the per-char mask.
 721:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param del   If true, passes ownership of table to this facet.
 722:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param refs  Passed to the base facet class.
 723:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 724:/usr/include/c++/4.6.3/bits/locale_facets.h ****       explicit
 725:/usr/include/c++/4.6.3/bits/locale_facets.h ****       ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
 726:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	    size_t __refs = 0);
 727:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 728:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 729:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Test char classification.
 730:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 731:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function compares the mask table[c] to @a m.
 732:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 733:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param c  The char to compare the mask of.
 734:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param m  The mask to compare against.
 735:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  True if m & table[c] is true, false otherwise.
 736:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 737:/usr/include/c++/4.6.3/bits/locale_facets.h ****       inline bool
 738:/usr/include/c++/4.6.3/bits/locale_facets.h ****       is(mask __m, char __c) const;
 739:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 740:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 741:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Return a mask array.
 742:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 743:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function finds the mask for each char in the range [lo, hi) and
 744:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  successively writes it to vec.  vec must have as many elements as
 745:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  the char array.
 746:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 747:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to start of range.
 748:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 749:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param vec  Pointer to an array of mask storage.
 750:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  @a hi.
 751:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 752:/usr/include/c++/4.6.3/bits/locale_facets.h ****       inline const char*
 753:/usr/include/c++/4.6.3/bits/locale_facets.h ****       is(const char* __lo, const char* __hi, mask* __vec) const;
 754:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 755:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 756:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Find char matching a mask
 757:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 758:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function searches for and returns the first char in [lo,hi) for
 759:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  which is(m,char) is true.
 760:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 761:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param m  The mask to compare against.
 762:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to start of range.
 763:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 764:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  Pointer to a matching char if found, else @a hi.
 765:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 766:/usr/include/c++/4.6.3/bits/locale_facets.h ****       inline const char*
 767:/usr/include/c++/4.6.3/bits/locale_facets.h ****       scan_is(mask __m, const char* __lo, const char* __hi) const;
 768:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 769:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 770:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Find char not matching a mask
 771:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 772:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function searches for and returns a pointer to the first char
 773:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  in [lo,hi) for which is(m,char) is false.
 774:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 775:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param m  The mask to compare against.
 776:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to start of range.
 777:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 778:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  Pointer to a non-matching char if found, else @a hi.
 779:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 780:/usr/include/c++/4.6.3/bits/locale_facets.h ****       inline const char*
 781:/usr/include/c++/4.6.3/bits/locale_facets.h ****       scan_not(mask __m, const char* __lo, const char* __hi) const;
 782:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 783:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 784:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Convert to uppercase.
 785:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 786:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function converts the char argument to uppercase if possible.
 787:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  If not possible (for example, '2'), returns the argument.
 788:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 789:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  toupper() acts as if it returns ctype<char>::do_toupper(c).
 790:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  do_toupper() must always return the same result for the same input.
 791:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 792:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param c  The char to convert.
 793:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  The uppercase char if convertible, else @a c.
 794:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 795:/usr/include/c++/4.6.3/bits/locale_facets.h ****       char_type
 796:/usr/include/c++/4.6.3/bits/locale_facets.h ****       toupper(char_type __c) const
 797:/usr/include/c++/4.6.3/bits/locale_facets.h ****       { return this->do_toupper(__c); }
 798:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 799:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 800:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Convert array to uppercase.
 801:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 802:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function converts each char in the range [lo,hi) to uppercase
 803:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  if possible.  Other chars remain untouched.
 804:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 805:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  toupper() acts as if it returns ctype<char>:: do_toupper(lo, hi).
 806:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  do_toupper() must always return the same result for the same input.
 807:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 808:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to first char in range.
 809:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 810:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  @a hi.
 811:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 812:/usr/include/c++/4.6.3/bits/locale_facets.h ****       const char_type*
 813:/usr/include/c++/4.6.3/bits/locale_facets.h ****       toupper(char_type *__lo, const char_type* __hi) const
 814:/usr/include/c++/4.6.3/bits/locale_facets.h ****       { return this->do_toupper(__lo, __hi); }
 815:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 816:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 817:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Convert to lowercase.
 818:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 819:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function converts the char argument to lowercase if possible.
 820:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  If not possible (for example, '2'), returns the argument.
 821:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 822:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  tolower() acts as if it returns ctype<char>::do_tolower(c).
 823:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  do_tolower() must always return the same result for the same input.
 824:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 825:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param c  The char to convert.
 826:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  The lowercase char if convertible, else @a c.
 827:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 828:/usr/include/c++/4.6.3/bits/locale_facets.h ****       char_type
 829:/usr/include/c++/4.6.3/bits/locale_facets.h ****       tolower(char_type __c) const
 830:/usr/include/c++/4.6.3/bits/locale_facets.h ****       { return this->do_tolower(__c); }
 831:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 832:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 833:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Convert array to lowercase.
 834:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 835:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function converts each char in the range [lo,hi) to lowercase
 836:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  if possible.  Other chars remain untouched.
 837:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 838:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  tolower() acts as if it returns ctype<char>:: do_tolower(lo, hi).
 839:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  do_tolower() must always return the same result for the same input.
 840:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 841:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param lo  Pointer to first char in range.
 842:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param hi  Pointer to end of range.
 843:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  @a hi.
 844:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 845:/usr/include/c++/4.6.3/bits/locale_facets.h ****       const char_type*
 846:/usr/include/c++/4.6.3/bits/locale_facets.h ****       tolower(char_type* __lo, const char_type* __hi) const
 847:/usr/include/c++/4.6.3/bits/locale_facets.h ****       { return this->do_tolower(__lo, __hi); }
 848:/usr/include/c++/4.6.3/bits/locale_facets.h **** 
 849:/usr/include/c++/4.6.3/bits/locale_facets.h ****       /**
 850:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @brief  Widen char
 851:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 852:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function converts the char to char_type using the simplest
 853:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  reasonable transformation.  For an underived ctype<char> facet, the
 854:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  argument will be returned unchanged.
 855:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 856:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  This function works as if it returns ctype<char>::do_widen(c).
 857:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  do_widen() must always return the same result for the same input.
 858:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 859:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 860:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  codecvt for that.
 861:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *
 862:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @param c  The char to convert.
 863:/usr/include/c++/4.6.3/bits/locale_facets.h ****        *  @return  The converted character.
 864:/usr/include/c++/4.6.3/bits/locale_facets.h ****       */
 865:/usr/include/c++/4.6.3/bits/locale_facets.h ****       char_type
 866:/usr/include/c++/4.6.3/bits/locale_facets.h ****       widen(char __c) const
 867:/usr/include/c++/4.6.3/bits/locale_facets.h ****       {
 3329              		.loc	24 867 2
 3330              	.Ltmp818:
 3331 127e 807B3800 		cmpb	$0, 56(%rbx)            # /usr/include/c++/4.6.3/bits/locale_facets.h:867:2[ /usr/include/c++
 865:/usr/include/c++/4.6.3/bits/locale_facets.h ****       char_type
 3332              		.loc	24 865 7
 3333              	.Ltmp819:
 3334              		#DEBUG_VALUE: widen:this <- RBX+0 # /usr/include/c++/4.6.3/bits/locale_facets.h:865:7[ /usr/includ
 865:/usr/include/c++/4.6.3/bits/locale_facets.h ****       char_type
 3335              		.loc	24 865 18
 3336              	.Ltmp820:
 3337              		#DEBUG_VALUE: widen:__c <- 10+0 # /usr/include/c++/4.6.3/bits/locale_facets.h:865:18[ /usr/include
 3338              		.loc	24 867 2
 3339              	.Ltmp821:
 3340 1282 7405     		je	.LBB2_7                 # /usr/include/c++/4.6.3/bits/locale_facets.h:867:2[ /usr/include/c++/4
 3341              	# BB#6:
 3342              	.Ltmp822:
 3343              		#DEBUG_VALUE: operator<<:__out <- R14+0
 3344              	.Ltmp823:
 3345              		#DEBUG_VALUE: widen:__c <- 10+0
 3346              	.Ltmp824:
 3347              		#DEBUG_VALUE: __check_facet:__f <- RBX+0
 3348              	.Ltmp825:
 3349              		#DEBUG_VALUE: widen:__c <- 10+0
 3350              	.Ltmp826:
 3351              		#DEBUG_VALUE: widen:this <- RBX+0
 868:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	if (_M_widen_ok)
 3352              		.loc	24 868 4
 3353              	.Ltmp827:
 3354 1284 8A4343   		movb	67(%rbx), %al           # /usr/include/c++/4.6.3/bits/locale_facets.h:868:4[ /usr/include/c++
 3355              	.Ltmp828:
 3356              		#DEBUG_VALUE: widen:this <- undef
 3357              	.Ltmp829:
 3358              		#DEBUG_VALUE: __check_facet:__f <- undef
 3359 1287 EB16     		jmp	.LBB2_8
 3360              	.LBB2_7:
 3361              	.Ltmp830:
 3362              		#DEBUG_VALUE: operator<<:__out <- R14+0
 3363              	.Ltmp831:
 3364              		#DEBUG_VALUE: widen:__c <- 10+0
 3365              	.Ltmp832:
 3366              		#DEBUG_VALUE: __check_facet:__f <- RBX+0
 3367              	.Ltmp833:
 3368              		#DEBUG_VALUE: widen:__c <- 10+0
 3369              	.Ltmp834:
 3370              		#DEBUG_VALUE: widen:this <- RBX+0
 869:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	  return _M_widen[static_cast<unsigned char>(__c)];
 3371              		.loc	24 869 2
 3372              	.Ltmp835:
 3373 1289 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/bits/locale_facets.h:869:2[ /usr/include/c++
 3374 128c E8000000 		callq	_ZNKSt5ctypeIcE13_M_widen_initEv # /usr/include/c++/4.6.3/bits/locale_facets.h:869:2[ /usr/i
 3374      00
 870:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	this->_M_widen_init();
 3375              		.loc	24 870 2
 3376              	.Ltmp836:
 3377 1291 488B03   		movq	(%rbx), %rax            # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c++
 3378 1294 BE0A0000 		movl	$10, %esi
 3378      00
 3379 1299 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c++
 3380              	.Ltmp837:
 3381              		#DEBUG_VALUE: widen:this <- undef
 3382              	.Ltmp838:
 3383              		#DEBUG_VALUE: __check_facet:__f <- undef
 3384 129c FF5030   		callq	*48(%rax)               # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c+
 3385              	.LBB2_8:                                # %_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES
 3386              	.Ltmp839:
 3387              		#DEBUG_VALUE: operator<<:__out <- R14+0
 3388              	.Ltmp840:
 3389              		#DEBUG_VALUE: widen:__c <- 10+0
 3390              	.Ltmp841:
 3391              		#DEBUG_VALUE: widen:__c <- 10+0
 3392              	.Ltmp842:
 3393              		.loc	12 543 7
 3394              	.Ltmp843:
 3395 129f 0FBEF0   		movsbl	%al, %esi               # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostr
 3396 12a2 4C89F7   		movq	%r14, %rdi              # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 3397              	.Ltmp844:
 3398              		#DEBUG_VALUE: operator<<:__out <- undef
 3399 12a5 E8000000 		callq	_ZNSo3putEc             # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostre
 3399      00
 544:/usr/include/c++/4.6.3/ostream ****     { return flush(__os.put(__os.widen('\n'))); }
 545:/usr/include/c++/4.6.3/ostream **** 
 546:/usr/include/c++/4.6.3/ostream ****   /**
 547:/usr/include/c++/4.6.3/ostream ****    *  @brief  Write a null character into the output sequence.
 548:/usr/include/c++/4.6.3/ostream ****    *
 549:/usr/include/c++/4.6.3/ostream ****    *  <em>Null character</em> is @c CharT() by definition.  For CharT of @c char,
 550:/usr/include/c++/4.6.3/ostream ****    *  this correctly writes the ASCII @c NUL character string terminator.
 551:/usr/include/c++/4.6.3/ostream ****   */
 552:/usr/include/c++/4.6.3/ostream ****   template<typename _CharT, typename _Traits>
 553:/usr/include/c++/4.6.3/ostream ****     inline basic_ostream<_CharT, _Traits>& 
 554:/usr/include/c++/4.6.3/ostream ****     ends(basic_ostream<_CharT, _Traits>& __os)
 555:/usr/include/c++/4.6.3/ostream ****     { return __os.put(_CharT()); }
 556:/usr/include/c++/4.6.3/ostream ****   
 557:/usr/include/c++/4.6.3/ostream ****   /**
 558:/usr/include/c++/4.6.3/ostream ****    *  @brief  Flushes the output stream.
 559:/usr/include/c++/4.6.3/ostream ****    *
 560:/usr/include/c++/4.6.3/ostream ****    *  This manipulator simply calls the stream's @c flush() member function.
 561:/usr/include/c++/4.6.3/ostream ****   */
 562:/usr/include/c++/4.6.3/ostream ****   template<typename _CharT, typename _Traits>
 563:/usr/include/c++/4.6.3/ostream ****     inline basic_ostream<_CharT, _Traits>& 
 3400              		.loc	12 563 43
 3401              	.Ltmp845:
 3402              		#DEBUG_VALUE: flush:__os <- RAX+0 # /usr/include/c++/4.6.3/ostream:563:43[ /usr/include/c++/4.6.3/
 564:/usr/include/c++/4.6.3/ostream ****     flush(basic_ostream<_CharT, _Traits>& __os)
 3403              		.loc	12 564 7
 3404              	.Ltmp846:
 3405 12aa 4889C7   		movq	%rax, %rdi              # /usr/include/c++/4.6.3/ostream:564:7[ /usr/include/c++/4.6.3/ostrea
 3406              	.Ltmp847:
 3407              		#DEBUG_VALUE: flush:__os <- undef
 3408 12ad E8000000 		callq	_ZNSo5flushEv           # /usr/include/c++/4.6.3/ostream:564:7[ /usr/include/c++/4.6.3/ostre
 3408      00
 3409 12b2 BF010000 		movl	$1, %edi
 3409      00
 3410              	.Ltmp848:
  56:./matrix-util.C **** 		exit(1);
 3411              		.loc	2 56 3
 3412              	.Ltmp849:
 3413 12b7 E8000000 		callq	exit                    # ./matrix-util.C:56:3
 3413      00
 3414              	.LBB2_9:
 3415              	.Ltmp850:
 3416              		#DEBUG_VALUE: f <- RAX+0
 3417              	.Ltmp851:
  52:./matrix-util.C **** 	FILE *f = fopen(fileName, "r");
 3418              		.loc	2 52 32
 3419              	.Ltmp852:
 3420 12bc 4989C7   		movq	%rax, %r15              # ./matrix-util.C:52:32
 3421              	.Ltmp853:
 3422              		#DEBUG_VALUE: f <- undef
 3423 12bf BE080000 		movl	$8, %esi
 3423      00
 3424 12c4 31D2     		xorl	%edx, %edx
  59:./matrix-util.C **** 	fseek(f, 2 * sizeof(uint32), SEEK_SET);
 3425              		.loc	2 59 2
 3426              	.Ltmp854:
 3427 12c6 4C89FF   		movq	%r15, %rdi              # ./matrix-util.C:59:2
 3428 12c9 E8000000 		callq	fseek                   # ./matrix-util.C:59:2
 3428      00
 3429 12ce 488D7DE4 		leaq	-28(%rbp), %rdi
 3430 12d2 BE040000 		movl	$4, %esi
 3430      00
 3431 12d7 BA010000 		movl	$1, %edx
 3431      00
  60:./matrix-util.C **** 	if(fread(&mod, sizeof(uint32),     1,f) != 1)
 3432              		.loc	2 60 2
 3433              	.Ltmp855:
 3434 12dc 4C89F9   		movq	%r15, %rcx              # ./matrix-util.C:60:2
 3435 12df E8000000 		callq	fread                   # ./matrix-util.C:60:2
 3435      00
 3436 12e4 4883F801 		cmpq	$1, %rax                # ./matrix-util.C:60:2
 3437 12e8 0F84B600 		je	.LBB2_18                # ./matrix-util.C:60:2
 3437      0000
 3438              	# BB#10:
 3439              	.Ltmp856:
 3440              		#DEBUG_VALUE: operator<<:__out <- R14+0
 515:/usr/include/c++/4.6.3/ostream **** 	__ostream_insert(__out, __s,
 3441              		.loc	12 515 29
 3442              	.Ltmp857:
 3443 12ee BE000000 		movl	$.L.str11, %esi         # /usr/include/c++/4.6.3/ostream:515:29[ ./matrix-util.C:62:3 ]
 3443      00
 3444              	.Ltmp858:
 3445              		#DEBUG_VALUE: length:__s <- RSI+0
 3446 12f3 BA190000 		movl	$25, %edx
 3446      00
 3447 12f8 4C89F7   		movq	%r14, %rdi              # /usr/include/c++/4.6.3/ostream:515:29[ ./matrix-util.C:62:3 ]
 3448              	.Ltmp859:
 3449              		#DEBUG_VALUE: length:__s <- undef
 3450 12fb E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l # /usr/include
 3450      00
 3451              	.Ltmp860:
 3452              		#DEBUG_VALUE: operator<<:__s <- RBX+0
 511:/usr/include/c++/4.6.3/ostream ****     {
 3453              		.loc	12 511 7
 3454              	.Ltmp861:
 3455 1300 4885DB   		testq	%rbx, %rbx              # /usr/include/c++/4.6.3/ostream:511:7[ ./matrix-util.C:62:3 ]
 3456 1303 7519     		jne	.LBB2_12                # /usr/include/c++/4.6.3/ostream:511:7[ ./matrix-util.C:62:3 ]
 3457              	# BB#11:
 3458              	.Ltmp862:
 3459              		#DEBUG_VALUE: operator<<:__out <- R14+0
 512:/usr/include/c++/4.6.3/ostream ****       if (!__s)
 3460              		.loc	12 512 2
 3461              	.Ltmp863:
 3462 1305 498B1E   		movq	(%r14), %rbx            # /usr/include/c++/4.6.3/ostream:512:2[ ./matrix-util.C:62:3 ]
 3463 1308 488B7BE8 		movq	-24(%rbx), %rdi         # /usr/include/c++/4.6.3/ostream:512:2[ ./matrix-util.C:62:3 ]
 129:/usr/include/c++/4.6.3/bits/basic_ios.h ****       rdstate() const
 3464              		.loc	14 129 9
 3465              	.Ltmp864:
 3466 130c 418B743E 		movl	32(%r14,%rdi), %esi     # /usr/include/c++/4.6.3/bits/basic_ios.h:129:9[ /usr/include/c++/4.6
 3466      20
 3467              	.Ltmp865:
 3468              		#DEBUG_VALUE: operator|:__a <- ESI+0
 3469              	.Ltmp866:
 3470              		#DEBUG_VALUE: setstate:this <- RDI+0
 3471              	.Ltmp867:
 3472              		#DEBUG_VALUE: setstate:__state <- 1+0
 3473              	.Ltmp868:
 3474              		#DEBUG_VALUE: rdstate:this <- RDI+0
 3475              	.Ltmp869:
 512:/usr/include/c++/4.6.3/ostream ****       if (!__s)
 3476              		.loc	12 512 2
 3477              	.Ltmp870:
 3478 1311 4C01F7   		addq	%r14, %rdi              # /usr/include/c++/4.6.3/ostream:512:2[ ./matrix-util.C:62:3 ]
 3479              	.Ltmp871:
 3480              		#DEBUG_VALUE: operator|:__a <- undef
 3481              		.loc	8 159 5
 3482              	.Ltmp872:
 3483 1314 83CE01   		orl	$1, %esi                # /usr/include/c++/4.6.3/bits/ios_base.h:159:5[ /usr/include/c++/4.6.3
 3484              	.Ltmp873:
 3485              		#DEBUG_VALUE: operator|:__b <- 1+0
 3486              	.Ltmp874:
 149:/usr/include/c++/4.6.3/bits/basic_ios.h ****       setstate(iostate __state)
 3487              		.loc	14 149 9
 3488              	.Ltmp875:
 3489 1317 E8000000 		callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate # /usr/include/c++/4.6.3/bits/ba
 3489      00
 3490 131c EB16     		jmp	.LBB2_13
 3491              	.LBB2_12:
 3492              	.Ltmp876:
 3493              		#DEBUG_VALUE: operator<<:__out <- R14+0
 3494              	.Ltmp877:
 3495              		#DEBUG_VALUE: operator<<:__s <- RBX+0
 3496              	.Ltmp878:
 3497              		#DEBUG_VALUE: length:__s <- RBX+0
 3498              	.Ltmp879:
 3499              		.loc	11 260 9
 3500              	.Ltmp880:
 3501 131e 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/bits/char_traits.h:260:9[ /usr/include/c++/4
 3502 1321 E8000000 		callq	strlen                  # /usr/include/c++/4.6.3/bits/char_traits.h:260:9[ /usr/include/c++/
 3502      00
 3503              	.Ltmp881:
 515:/usr/include/c++/4.6.3/ostream **** 	__ostream_insert(__out, __s,
 3504              		.loc	12 515 29
 3505              	.Ltmp882:
 3506 1326 4C89F7   		movq	%r14, %rdi              # /usr/include/c++/4.6.3/ostream:515:29[ ./matrix-util.C:62:3 ]
 3507 1329 4889DE   		movq	%rbx, %rsi              # /usr/include/c++/4.6.3/ostream:515:29[ ./matrix-util.C:62:3 ]
 3508              	.Ltmp883:
 3509              		#DEBUG_VALUE: operator<<:__s <- undef
 3510              	.Ltmp884:
 3511              		#DEBUG_VALUE: length:__s <- undef
 3512 132c 4889C2   		movq	%rax, %rdx              # /usr/include/c++/4.6.3/ostream:515:29[ ./matrix-util.C:62:3 ]
 3513 132f E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l # /usr/include
 3513      00
 3514              	.LBB2_13:
 3515 1334 4C89F3   		movq	%r14, %rbx
 3516 1337 4D89F7   		movq	%r14, %r15
 3517              	.Ltmp885:
 3518              		#DEBUG_VALUE: operator<<:__out <- R14+0
 543:/usr/include/c++/4.6.3/ostream ****     endl(basic_ostream<_CharT, _Traits>& __os)
 3519              		.loc	12 543 7
 3520              	.Ltmp886:
 3521 133a 4D8B3F   		movq	(%r15), %r15            # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 3522 133d 4D8B7FE8 		movq	-24(%r15), %r15         # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 3523              	.Ltmp887:
 3524              		#DEBUG_VALUE: widen:__c <- 10+0
 3525              		.loc	14 441 9
 3526              	.Ltmp888:
 3527 1341 4D8BBC1F 		movq	240(%r15,%rbx), %r15    # /usr/include/c++/4.6.3/bits/basic_ios.h:441:9[ /usr/include/c++/4.6
 3527      F0000000 
 3528              	.Ltmp889:
 3529              		#DEBUG_VALUE: __check_facet:__f <- R15+0
 3530 1349 4D85FF   		testq	%r15, %r15              # /usr/include/c++/4.6.3/bits/basic_ios.h:441:9[ /usr/include/c++/4.
 3531 134c 7473     		je	.LBB2_20
 3532              	# BB#14:                                # %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i5
 3533              	.Ltmp890:
 3534              		#DEBUG_VALUE: operator<<:__out <- R14+0
 3535              	.Ltmp891:
 3536              		#DEBUG_VALUE: widen:__c <- 10+0
 3537              	.Ltmp892:
 3538              		#DEBUG_VALUE: __check_facet:__f <- R15+0
 867:/usr/include/c++/4.6.3/bits/locale_facets.h ****       {
 3539              		.loc	24 867 2
 3540              	.Ltmp893:
 3541 134e 41807F38 		cmpb	$0, 56(%r15)            # /usr/include/c++/4.6.3/bits/locale_facets.h:867:2[ /usr/include/c++
 3541      00
 3542              	.Ltmp894:
 3543              		#DEBUG_VALUE: widen:this <- R15+0
 3544              	.Ltmp895:
 3545              		#DEBUG_VALUE: widen:__c <- 10+0
 3546 1353 7406     		je	.LBB2_16                # /usr/include/c++/4.6.3/bits/locale_facets.h:867:2[ /usr/include/c++/4
 3547              	# BB#15:
 3548              	.Ltmp896:
 3549              		#DEBUG_VALUE: operator<<:__out <- R14+0
 3550              	.Ltmp897:
 3551              		#DEBUG_VALUE: widen:__c <- 10+0
 3552              	.Ltmp898:
 3553              		#DEBUG_VALUE: __check_facet:__f <- R15+0
 3554              	.Ltmp899:
 3555              		#DEBUG_VALUE: widen:__c <- 10+0
 3556              	.Ltmp900:
 3557              		#DEBUG_VALUE: widen:this <- R15+0
 868:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	if (_M_widen_ok)
 3558              		.loc	24 868 4
 3559              	.Ltmp901:
 3560 1355 418A4743 		movb	67(%r15), %al           # /usr/include/c++/4.6.3/bits/locale_facets.h:868:4[ /usr/include/c++
 3561              	.Ltmp902:
 3562              		#DEBUG_VALUE: widen:this <- undef
 3563              	.Ltmp903:
 3564              		#DEBUG_VALUE: __check_facet:__f <- undef
 3565 1359 EB16     		jmp	.LBB2_17
 3566              	.LBB2_16:
 3567              	.Ltmp904:
 3568              		#DEBUG_VALUE: operator<<:__out <- R14+0
 3569              	.Ltmp905:
 3570              		#DEBUG_VALUE: widen:__c <- 10+0
 3571              	.Ltmp906:
 3572              		#DEBUG_VALUE: __check_facet:__f <- R15+0
 3573              	.Ltmp907:
 3574              		#DEBUG_VALUE: widen:__c <- 10+0
 3575              	.Ltmp908:
 3576              		#DEBUG_VALUE: widen:this <- R15+0
 869:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	  return _M_widen[static_cast<unsigned char>(__c)];
 3577              		.loc	24 869 2
 3578              	.Ltmp909:
 3579 135b 4C89FF   		movq	%r15, %rdi              # /usr/include/c++/4.6.3/bits/locale_facets.h:869:2[ /usr/include/c++
 3580 135e E8000000 		callq	_ZNKSt5ctypeIcE13_M_widen_initEv # /usr/include/c++/4.6.3/bits/locale_facets.h:869:2[ /usr/i
 3580      00
 3581              		.loc	24 870 2
 3582              	.Ltmp910:
 3583 1363 498B07   		movq	(%r15), %rax            # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c++
 3584 1366 BE0A0000 		movl	$10, %esi
 3584      00
 3585 136b 4C89FF   		movq	%r15, %rdi              # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c++
 3586              	.Ltmp911:
 3587              		#DEBUG_VALUE: widen:this <- undef
 3588              	.Ltmp912:
 3589              		#DEBUG_VALUE: __check_facet:__f <- undef
 3590 136e FF5030   		callq	*48(%rax)               # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c+
 3591              	.LBB2_17:                               # %_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES
 3592              	.Ltmp913:
 3593              		#DEBUG_VALUE: operator<<:__out <- R14+0
 3594              	.Ltmp914:
 3595              		#DEBUG_VALUE: widen:__c <- 10+0
 3596              	.Ltmp915:
 3597              		#DEBUG_VALUE: widen:__c <- 10+0
 3598              	.Ltmp916:
 543:/usr/include/c++/4.6.3/ostream ****     endl(basic_ostream<_CharT, _Traits>& __os)
 3599              		.loc	12 543 7
 3600              	.Ltmp917:
 3601 1371 0FBEF0   		movsbl	%al, %esi               # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostr
 3602 1374 4C89F7   		movq	%r14, %rdi              # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 3603              	.Ltmp918:
 3604              		#DEBUG_VALUE: operator<<:__out <- undef
 3605 1377 E8000000 		callq	_ZNSo3putEc             # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostre
 3605      00
 3606              	.Ltmp919:
 3607              		#DEBUG_VALUE: flush:__os <- RAX+0
 3608              		.loc	12 564 7
 3609              	.Ltmp920:
 3610 137c 4889C7   		movq	%rax, %rdi              # /usr/include/c++/4.6.3/ostream:564:7[ /usr/include/c++/4.6.3/ostrea
 3611              	.Ltmp921:
 3612              		#DEBUG_VALUE: flush:__os <- undef
 3613 137f E8000000 		callq	_ZNSo5flushEv           # /usr/include/c++/4.6.3/ostream:564:7[ /usr/include/c++/4.6.3/ostre
 3613      00
 3614 1384 BF080000 		movl	$8, %edi
 3614      00
 3615              	.Ltmp922:
  63:./matrix-util.C **** 		throw "Error while reading file";
 3616              		.loc	2 63 3
 3617              	.Ltmp923:
 3618 1389 E8000000 		callq	__cxa_allocate_exception # ./matrix-util.C:63:3
 3618      00
 3619 138e BE000000 		movl	$_ZTIPKc, %esi          # ./matrix-util.C:63:3
 3619      00
 3620 1393 31D2     		xorl	%edx, %edx
 3621 1395 48C70000 		movq	$.L.str12, (%rax)       # ./matrix-util.C:63:3
 3621      000000
 3622 139c 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:63:3
 3623 139f E8000000 		callq	__cxa_throw             # ./matrix-util.C:63:3
 3623      00
 3624              	.Ltmp924:
 3625              	.LBB2_18:
  66:./matrix-util.C **** 	assert(mod >= 2);
 3626              		.loc	2 66 2
 3627              	.Ltmp925:
 3628 13a4 8B5DE4   		movl	-28(%rbp), %ebx         # ./matrix-util.C:66:2
 3629 13a7 83FB01   		cmpl	$1, %ebx                # ./matrix-util.C:66:2
 3630 13aa 761A     		jbe	.LBB2_21
 3631              	# BB#19:
  68:./matrix-util.C **** 	fclose(f);
 3632              		.loc	2 68 2
 3633              	.Ltmp926:
 3634 13ac 4C89FF   		movq	%r15, %rdi              # ./matrix-util.C:68:2
 3635 13af E8000000 		callq	fclose                  # ./matrix-util.C:68:2
 3635      00
  69:./matrix-util.C **** 	return mod;
 3636              		.loc	2 69 2
 3637              	.Ltmp927:
 3638 13b4 89D8     		movl	%ebx, %eax              # ./matrix-util.C:69:2
 3639 13b6 4883C408 		addq	$8, %rsp                # ./matrix-util.C:69:2
 3640 13ba 5B       		popq	%rbx                    # ./matrix-util.C:69:2
 3641 13bb 415E     		popq	%r14                    # ./matrix-util.C:69:2
 3642 13bd 415F     		popq	%r15                    # ./matrix-util.C:69:2
 3643 13bf 5D       		popq	%rbp                    # ./matrix-util.C:69:2
 3644 13c0 C3       		ret                             # ./matrix-util.C:69:2
 3645              	.LBB2_20:
 3646              	.Ltmp928:
 3647              		#DEBUG_VALUE: widen:__c <- 10+0
  50:/usr/include/c++/4.6.3/bits/basic_ios.h ****       if (!__f)
 3648              		.loc	14 50 2
 3649              	.Ltmp929:
 3650 13c1 E8000000 		callq	_ZSt16__throw_bad_castv # /usr/include/c++/4.6.3/bits/basic_ios.h:50:2[ /usr/include/c++/4.6
 3650      00
 3651              	.Ltmp930:
 3652              	.LBB2_21:
  66:./matrix-util.C **** 	assert(mod >= 2);
 3653              		.loc	2 66 2
 3654              	.Ltmp931:
 3655 13c6 BF000000 		movl	$.L.str13, %edi         # ./matrix-util.C:66:2
 3655      00
 3656 13cb BE000000 		movl	$.L.str14, %esi         # ./matrix-util.C:66:2
 3656      00
 3657 13d0 BA420000 		movl	$66, %edx
 3657      00
 3658 13d5 B9000000 		movl	$.L__PRETTY_FUNCTION__._ZN10MatrixUtil13loadF4ModulusEPKc, %ecx # ./matrix-util.C:66:2
 3658      00
 3659 13da E8000000 		callq	__assert_fail           # ./matrix-util.C:66:2
 3659      00
 3660              	.Ltmp932:
 3661              	.Ltmp933:
 3663              	.Lfunc_end2:
 3664              	.Leh_func_end2:
 3665              	
 3666              		.globl	_ZN10MatrixUtil30getOutputFileNameWithExtensionEPKcS1_S1_
 3667 13df 90       		.align	16, 0x90
 3669              	_ZN10MatrixUtil30getOutputFileNameWithExtensionEPKcS1_S1_: # @_ZN10MatrixUtil30getOutputFileNameWit
 3670              	.Leh_func_begin3:
 3671              	.Lfunc_begin3:
 291:./matrix-util.C **** {
 3672              		.loc	2 291 0
 3673              	.Ltmp994:
 3674              	# BB#0:
 3675 13e0 55       		pushq	%rbp
 3676              	.Ltmp991:
 3677 13e1 4889E5   		movq	%rsp, %rbp
 3678              	.Ltmp992:
 3679 13e4 4157     		pushq	%r15
 3680 13e6 4156     		pushq	%r14
 3681 13e8 4155     		pushq	%r13
 3682 13ea 4154     		pushq	%r12
 3683 13ec 53       		pushq	%rbx
 3684 13ed 4881EC58 		subq	$600, %rsp              # imm = 0x258
 3684      020000
 3685              	.Ltmp993:
 3686              		#DEBUG_VALUE: getOutputFileNameWithExtension:inputfile <- RSI+0 # ./matrix-util.C:290:68
 3687              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- RDX+0 # ./matrix-util.C:290:91
 3688              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RCX+0 # ./matrix-util.C:290:111
 3689 13f4 4889CB   		movq	%rcx, %rbx
 3690              	.Ltmp995:
 3691              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 3692 13f7 4989D6   		movq	%rdx, %r14
 3693              	.Ltmp996:
 3694              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 3695 13fa 4989FF   		movq	%rdi, %r15
 292:./matrix-util.C **** 	std::string f (inputfile), pre (prefix), suff (suffix);
 3696              		.loc	2 292 56
 3697              	.Ltmp997:
 3698              	.Ltmp934:                               # ./matrix-util.C:292:56
 3699 13fd 488DBD40 		leaq	-192(%rbp), %rdi
 3699      FFFFFF
 3700 1404 488D9538 		leaq	-200(%rbp), %rdx
 3700      FFFFFF
 3701 140b E8000000 		callq	_ZNSsC1EPKcRKSaIcE      # ./matrix-util.C:292:56
 3701      00
 3702              	.Ltmp998:
 3703              		#DEBUG_VALUE: getOutputFileNameWithExtension:inputfile <- undef
 3704              	.Ltmp935:                               # ./matrix-util.C:292:56
 3705              	# BB#1:
 3706              	.Ltmp937:                               # ./matrix-util.C:292:56
 3707              	.Ltmp999:
 3708              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 3709              	.Ltmp1000:
 3710              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 3711 1410 488DBD30 		leaq	-208(%rbp), %rdi
 3711      FFFFFF
 3712 1417 488D9528 		leaq	-216(%rbp), %rdx
 3712      FFFFFF
 3713 141e 4C89F6   		movq	%r14, %rsi              # ./matrix-util.C:292:56
 3714 1421 E8000000 		callq	_ZNSsC1EPKcRKSaIcE      # ./matrix-util.C:292:56
 3714      00
 3715              	.Ltmp938:                               # ./matrix-util.C:292:56
 292:./matrix-util.C **** 	std::string f (inputfile), pre (prefix), suff (suffix);
 3716              		.loc	2 292 29
 3717              	.Ltmp1001:
 3718              		#DEBUG_VALUE: pre <- [%rbp+$-208]+$0 # ./matrix-util.C:292:29
 3719              	# BB#2:
 292:./matrix-util.C **** 	std::string f (inputfile), pre (prefix), suff (suffix);
 3720              		.loc	2 292 56
 3721              	.Ltmp1002:
 3722              	.Ltmp940:                               # ./matrix-util.C:292:56
 3723              	.Ltmp1003:
 3724              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 3725              	.Ltmp1004:
 3726              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 3727 1426 488DBD20 		leaq	-224(%rbp), %rdi
 3727      FFFFFF
 3728 142d 488D9518 		leaq	-232(%rbp), %rdx
 3728      FFFFFF
 3729 1434 4889DE   		movq	%rbx, %rsi              # ./matrix-util.C:292:56
 3730 1437 E8000000 		callq	_ZNSsC1EPKcRKSaIcE      # ./matrix-util.C:292:56
 3730      00
 3731              	.Ltmp941:                               # ./matrix-util.C:292:56
 292:./matrix-util.C **** 	std::string f (inputfile), pre (prefix), suff (suffix);
 3732              		.loc	2 292 43
 3733              	.Ltmp1005:
 3734              		#DEBUG_VALUE: suff <- [%rbp+$-224]+$0 # ./matrix-util.C:292:43
 3735              	# BB#3:
 293:./matrix-util.C **** 	std::string file, dir;
 3736              		.loc	2 293 14
 3737              	.Ltmp1006:
 3738              		#DEBUG_VALUE: file <- [%rbp+$-240]+$0 # ./matrix-util.C:293:14
 3739              	.Ltmp1007:
 3740              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 3741              	.Ltmp1008:
 3742              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 3743 143c 48C78510 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -240(%rbp)
 3743      FFFFFF00 
 3743      000000
 3744 1447 48C78508 		movq	$_ZNSs4_Rep20_S_empty_rep_storageE+24, -248(%rbp)
 3744      FFFFFF00 
 3744      000000
 293:./matrix-util.C **** 	std::string file, dir;
 3745              		.loc	2 293 20
 3746              	.Ltmp1009:
 3747              		#DEBUG_VALUE: dir <- [%rbp+$-248]+$0 # ./matrix-util.C:293:20
 3748              	.Ltmp943:
 3749 1452 488DBD40 		leaq	-192(%rbp), %rdi
 3749      FFFFFF
2001:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
 3750              		.loc	3 2001 7
 3751              	.Ltmp1010:
 3752              		#DEBUG_VALUE: find_last_of:this <- RDI+0 # /usr/include/c++/4.6.3/bits/basic_string.h:2001:7[ ./ma
 3753 1459 BE000000 		movl	$.L.str15, %esi
 3753      00
2001:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
 3754              		.loc	3 2001 49
 3755              	.Ltmp1011:
 3756              		#DEBUG_VALUE: find_last_of:__pos <- -1+0 # /usr/include/c++/4.6.3/bits/basic_string.h:2001:49[ ./m
 259:/usr/include/c++/4.6.3/bits/char_traits.h ****       static size_t
 3757              		.loc	11 259 31
 3758              	.Ltmp1012:
 3759              		#DEBUG_VALUE: length:__s <- RSI+0 # /usr/include/c++/4.6.3/bits/char_traits.h:259:31[ /usr/include
 3760 145e 48C7C2FF 		movq	$-1, %rdx
 3760      FFFFFF
 3761 1465 B9010000 		movl	$1, %ecx
 3761      00
 3762              	.Ltmp1013:
 3763              		#DEBUG_VALUE: length:__s <- undef
 3764              	.Ltmp1014:
 3765              		#DEBUG_VALUE: find_last_of:this <- undef
 3766 146a E8000000 		callq	_ZNKSs12find_last_ofEPKcmm
 3766      00
 3767              	.Ltmp944:
 3768              	# BB#4:                                 # %_ZNKSs12find_last_ofEPKcm.exit
 3769              	.Ltmp1015:
 3770              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 3771              	.Ltmp1016:
 3772              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 3773              	.Ltmp1017:
 3774              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 3775 146f 4989C4   		movq	%rax, %r12
 296:./matrix-util.C **** 	found = f.find_last_of("/");
 3776              		.loc	2 296 2
 3777              	.Ltmp1018:
 3778              		#DEBUG_VALUE: found <- R12+0    # ./matrix-util.C:296:2
 298:./matrix-util.C **** 	file = f.substr(found+1);
 3779              		.loc	2 298 2
 3780              	.Ltmp1019:
 3781 1472 498D5424 		leaq	1(%r12), %rdx           # ./matrix-util.C:298:2
 3781      01
2154:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string
 3782              		.loc	3 2154 45
 3783              	.Ltmp1020:
 3784              		#DEBUG_VALUE: substr:__n <- -1+0 # /usr/include/c++/4.6.3/bits/basic_string.h:2154:45[ ./matrix-ut
 315:/usr/include/c++/4.6.3/bits/basic_string.h ****       size_type
 3785              		.loc	3 315 26
 3786              	.Ltmp1021:
 3787              		#DEBUG_VALUE: _M_check:__pos <- RDX+0 # /usr/include/c++/4.6.3/bits/basic_string.h:315:26[ /usr/in
2154:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string
 3788              		.loc	3 2154 24
 3789              	.Ltmp1022:
 3790              		#DEBUG_VALUE: substr:__pos <- RDX+0 # /usr/include/c++/4.6.3/bits/basic_string.h:2154:24[ ./matrix
 287:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_data() const
 3791              		.loc	3 287 9
 3792              	.Ltmp1023:
 3793 1477 488B8540 		movq	-192(%rbp), %rax        # /usr/include/c++/4.6.3/bits/basic_string.h:287:9[ /usr/include/c++/
 3793      FFFFFF
 3794              	.Ltmp1024:
 710:/usr/include/c++/4.6.3/bits/basic_string.h ****       size() const
 3795              		.loc	3 710 9
 3796              	.Ltmp1025:
 3797 147e 483950E8 		cmpq	%rdx, -24(%rax)         # /usr/include/c++/4.6.3/bits/basic_string.h:710:9[ /usr/include/c++/
 3798 1482 730A     		jae	.LBB3_6
 3799              	# BB#5:
 3800              	.Ltmp988:
 3801              	.Ltmp1026:
 3802              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 3803              	.Ltmp1027:
 3804              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 3805              	.Ltmp1028:
 3806              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 3807              	.Ltmp1029:
 3808              		#DEBUG_VALUE: substr:__n <- -1+0
 3809 1484 BF000000 		movl	$.L.str31, %edi
 3809      00
 3810 1489 E8000000 		callq	_ZSt20__throw_out_of_rangePKc
 3810      00
 3811              	.Ltmp989:
 3812              	.LBB3_6:                                # %_ZNKSs8_M_checkEmPKc.exit.i
 3813              	.Ltmp945:
 3814              	.Ltmp1030:
 3815              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 3816              	.Ltmp1031:
 3817              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 3818              	.Ltmp1032:
 3819              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 3820              	.Ltmp1033:
 3821              		#DEBUG_VALUE: found <- R12+0
 3822              	.Ltmp1034:
 3823              		#DEBUG_VALUE: substr:__pos <- RDX+0
 3824              	.Ltmp1035:
 3825              		#DEBUG_VALUE: _M_check:__pos <- RDX+0
 3826              	.Ltmp1036:
 3827              		#DEBUG_VALUE: substr:__n <- -1+0
 3828 148e 488DBD00 		leaq	-256(%rbp), %rdi
 3828      FFFFFF
 3829 1495 488DB540 		leaq	-192(%rbp), %rsi
 3829      FFFFFF
 3830 149c 48C7C1FF 		movq	$-1, %rcx
 3830      FFFFFF
 3831              	.Ltmp1037:
 3832              		#DEBUG_VALUE: _M_check:__pos <- undef
 3833              	.Ltmp1038:
 3834              		#DEBUG_VALUE: substr:__pos <- undef
 3835 14a3 E8000000 		callq	_ZNSsC1ERKSsmm
 3835      00
 3836              	.Ltmp946:
 3837              	# BB#7:                                 # %_ZNKSs6substrEmm.exit
 3838              	.Ltmp947:
 3839              	.Ltmp1039:
 3840              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 3841              	.Ltmp1040:
 3842              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 3843              	.Ltmp1041:
 3844              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 3845              	.Ltmp1042:
 3846              		#DEBUG_VALUE: found <- R12+0
 3847              	.Ltmp1043:
 3848              		#DEBUG_VALUE: substr:__n <- -1+0
 3849 14a8 488DBD10 		leaq	-240(%rbp), %rdi
 3849      FFFFFF
 540:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
 3850              		.loc	3 540 7
 3851              	.Ltmp1044:
 3852              		#DEBUG_VALUE: operator=:this <- RDI+0 # /usr/include/c++/4.6.3/bits/basic_string.h:540:7[ ./matrix
 3853 14af 488DB500 		leaq	-256(%rbp), %rsi
 3853      FFFFFF
 3854              	.Ltmp1045:
 3855              		#DEBUG_VALUE: operator=:__str <- undef
 540:/usr/include/c++/4.6.3/bits/basic_string.h ****       basic_string&
 3856              		.loc	3 540 37
 3857              	.Ltmp1046:
 3858              		#DEBUG_VALUE: operator=:__str <- RSI+0 # /usr/include/c++/4.6.3/bits/basic_string.h:540:37[ ./matr
 3859              	.Ltmp1047:
 3860              		#DEBUG_VALUE: operator=:this <- undef
 3861 14b6 E8000000 		callq	_ZNSs6assignERKSs
 3861      00
 3862              	.Ltmp948:
 3863              	# BB#8:                                 # %_ZNSsaSERKSs.exit
 3864              	.Ltmp1048:
 3865              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 3866              	.Ltmp1049:
 3867              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 3868              	.Ltmp1050:
 3869              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 3870              	.Ltmp1051:
 3871              		#DEBUG_VALUE: found <- R12+0
 3872              	.Ltmp1052:
 3873              		#DEBUG_VALUE: substr:__n <- -1+0
 3874 14bb 488BBD00 		movq	-256(%rbp), %rdi
 3874      FFFFFF
 3875 14c2 4C8D6FE8 		leaq	-24(%rdi), %r13
 3876 14c6 B8000000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %eax
 3876      00
 3877 14cb 4939C5   		cmpq	%rax, %r13
 3878 14ce 7434     		je	.LBB3_14
 3879              	# BB#9:
 3880              	.Ltmp1053:
 3881              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 3882              	.Ltmp1054:
 3883              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 3884              	.Ltmp1055:
 3885              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 3886              	.Ltmp1056:
 3887              		#DEBUG_VALUE: found <- R12+0
 3888              	.Ltmp1057:
 3889              		#DEBUG_VALUE: substr:__n <- -1+0
 3890 14d0 4883C7F8 		addq	$-8, %rdi
 3891 14d4 B8000000 		movl	$pthread_cancel, %eax
 3891      00
 3892 14d9 4885C0   		testq	%rax, %rax
 3893              	.Ltmp1058:
 3894              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 3895 14dc 740C     		je	.LBB3_11
 3896              	# BB#10:
 3897              	.Ltmp1059:
 3898              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 3899              	.Ltmp1060:
 3900              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 3901              	.Ltmp1061:
 3902              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 3903              	.Ltmp1062:
 3904              		#DEBUG_VALUE: found <- R12+0
 3905              	.Ltmp1063:
 3906              		#DEBUG_VALUE: substr:__n <- -1+0
 3907              	.Ltmp1064:
 3908              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 3909 14de BEFFFFFF 		movl	$-1, %esi
 3909      FF
 3910 14e3 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 3910      00
 3911 14e8 EB07     		jmp	.LBB3_12
 3912              	.LBB3_11:
 3913              	.Ltmp1065:
 3914              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 3915              	.Ltmp1066:
 3916              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 3917              	.Ltmp1067:
 3918              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 3919              	.Ltmp1068:
 3920              		#DEBUG_VALUE: found <- R12+0
 3921              	.Ltmp1069:
 3922              		#DEBUG_VALUE: substr:__n <- -1+0
 3923              	.Ltmp1070:
 3924              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 3925              	.Ltmp1071:
 3926              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 3927 14ea 8B07     		movl	(%rdi), %eax
 3928              	.Ltmp1072:
 3929              		#DEBUG_VALUE: __result <- EAX+0
 3930 14ec 8D48FF   		leal	-1(%rax), %ecx
 3931 14ef 890F     		movl	%ecx, (%rdi)
 3932              	.Ltmp1073:
 3933              		#DEBUG_VALUE: __result <- undef
 3934              	.LBB3_12:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 3935              	.Ltmp1074:
 3936              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 3937              	.Ltmp1075:
 3938              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 3939              	.Ltmp1076:
 3940              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 3941              	.Ltmp1077:
 3942              		#DEBUG_VALUE: found <- R12+0
 3943              	.Ltmp1078:
 3944              		#DEBUG_VALUE: substr:__n <- -1+0
 3945              	.Ltmp1079:
 3946              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 3947 14f1 85C0     		testl	%eax, %eax
 3948 14f3 7F0F     		jg	.LBB3_14
 3949              	# BB#13:
 3950              	.Ltmp1080:
 3951              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 3952              	.Ltmp1081:
 3953              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 3954              	.Ltmp1082:
 3955              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 3956              	.Ltmp1083:
 3957              		#DEBUG_VALUE: found <- R12+0
 3958              	.Ltmp1084:
 3959              		#DEBUG_VALUE: substr:__n <- -1+0
 3960              	.Ltmp1085:
 3961              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 3962 14f5 488DB568 		leaq	-152(%rbp), %rsi
 3962      FFFFFF
 3963 14fc 4C89EF   		movq	%r13, %rdi
 3964 14ff E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 3964      00
 3965              	.LBB3_14:                               # %_ZNKSs8_M_checkEmPKc.exit.i15
 3966              	.Ltmp950:
 3967              	.Ltmp1086:
 3968              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 3969              	.Ltmp1087:
 3970              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 3971              	.Ltmp1088:
 3972              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 3973              	.Ltmp1089:
 3974              		#DEBUG_VALUE: found <- R12+0
 3975              	.Ltmp1090:
 3976              		#DEBUG_VALUE: substr:__pos <- 0+0
 3977              	.Ltmp1091:
 3978              		#DEBUG_VALUE: substr:__n <- -1+0
 3979 1504 488DBDF8 		leaq	-264(%rbp), %rdi
 3979      FEFFFF
 3980 150b 488DB540 		leaq	-192(%rbp), %rsi
 3980      FFFFFF
 286:/usr/include/c++/4.6.3/bits/basic_string.h ****       _CharT*
 3981              		.loc	3 286 7
 3982              	.Ltmp1092:
 3983              		#DEBUG_VALUE: _M_data:this <- RSI+0 # /usr/include/c++/4.6.3/bits/basic_string.h:286:7[ /usr/inclu
 3984              	.Ltmp1093:
 3985              		#DEBUG_VALUE: _M_check:__pos <- 0+0
 3986 1512 31D2     		xorl	%edx, %edx
 3987              	.Ltmp1094:
 3988              		#DEBUG_VALUE: _M_data:this <- undef
 3989              	.Ltmp1095:
 3990              		#DEBUG_VALUE: substr:__n <- R12+0
 3991 1514 4C89E1   		movq	%r12, %rcx
 3992              	.Ltmp1096:
 3993              		#DEBUG_VALUE: substr:__n <- undef
 3994              	.Ltmp1097:
 3995              		#DEBUG_VALUE: found <- undef
 3996 1517 E8000000 		callq	_ZNSsC1ERKSsmm
 3996      00
 3997              	.Ltmp951:
 3998              	# BB#15:                                # %_ZNKSs6substrEmm.exit18
 3999              	.Ltmp952:
 4000              	.Ltmp1098:
 4001              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4002              	.Ltmp1099:
 4003              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4004              	.Ltmp1100:
 4005              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4006              	.Ltmp1101:
 4007              		#DEBUG_VALUE: substr:__pos <- 0+0
 4008              	.Ltmp1102:
 4009              		#DEBUG_VALUE: _M_check:__pos <- 0+0
 4010 151c 488DBD08 		leaq	-248(%rbp), %rdi
 4010      FFFFFF
 4011              	.Ltmp1103:
 4012              		#DEBUG_VALUE: operator=:this <- RDI+0
 4013 1523 488DB5F8 		leaq	-264(%rbp), %rsi
 4013      FEFFFF
 4014              	.Ltmp1104:
 4015              		#DEBUG_VALUE: operator=:__str <- undef
 4016              	.Ltmp1105:
 4017              		#DEBUG_VALUE: operator=:__str <- RSI+0
 4018              	.Ltmp1106:
 4019              		#DEBUG_VALUE: operator=:this <- undef
 4020 152a E8000000 		callq	_ZNSs6assignERKSs
 4020      00
 4021              	.Ltmp953:
 4022              	# BB#16:                                # %_ZNSsaSERKSs.exit20
 4023              	.Ltmp1107:
 4024              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4025              	.Ltmp1108:
 4026              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4027              	.Ltmp1109:
 4028              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4029              	.Ltmp1110:
 4030              		#DEBUG_VALUE: substr:__pos <- 0+0
 4031              	.Ltmp1111:
 4032              		#DEBUG_VALUE: _M_check:__pos <- 0+0
 4033 152f 488BBDF8 		movq	-264(%rbp), %rdi
 4033      FEFFFF
 4034 1536 4C8D67E8 		leaq	-24(%rdi), %r12
 4035 153a B8000000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %eax
 4035      00
 4036 153f 4939C4   		cmpq	%rax, %r12
 4037 1542 7434     		je	.LBB3_22
 4038              	# BB#17:
 4039              	.Ltmp1112:
 4040              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4041              	.Ltmp1113:
 4042              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4043              	.Ltmp1114:
 4044              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4045              	.Ltmp1115:
 4046              		#DEBUG_VALUE: substr:__pos <- 0+0
 4047              	.Ltmp1116:
 4048              		#DEBUG_VALUE: _M_check:__pos <- 0+0
 4049 1544 4883C7F8 		addq	$-8, %rdi
 4050 1548 B8000000 		movl	$pthread_cancel, %eax
 4050      00
 4051 154d 4885C0   		testq	%rax, %rax
 4052              	.Ltmp1117:
 4053              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4054 1550 740C     		je	.LBB3_19
 4055              	# BB#18:
 4056              	.Ltmp1118:
 4057              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4058              	.Ltmp1119:
 4059              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4060              	.Ltmp1120:
 4061              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4062              	.Ltmp1121:
 4063              		#DEBUG_VALUE: substr:__pos <- 0+0
 4064              	.Ltmp1122:
 4065              		#DEBUG_VALUE: _M_check:__pos <- 0+0
 4066              	.Ltmp1123:
 4067              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4068 1552 BEFFFFFF 		movl	$-1, %esi
 4068      FF
 4069 1557 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 4069      00
 4070 155c EB07     		jmp	.LBB3_20
 4071              	.LBB3_19:
 4072              	.Ltmp1124:
 4073              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4074              	.Ltmp1125:
 4075              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4076              	.Ltmp1126:
 4077              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4078              	.Ltmp1127:
 4079              		#DEBUG_VALUE: substr:__pos <- 0+0
 4080              	.Ltmp1128:
 4081              		#DEBUG_VALUE: _M_check:__pos <- 0+0
 4082              	.Ltmp1129:
 4083              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4084              	.Ltmp1130:
 4085              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 4086 155e 8B07     		movl	(%rdi), %eax
 4087              	.Ltmp1131:
 4088              		#DEBUG_VALUE: __result <- EAX+0
 4089 1560 8D48FF   		leal	-1(%rax), %ecx
 4090 1563 890F     		movl	%ecx, (%rdi)
 4091              	.Ltmp1132:
 4092              		#DEBUG_VALUE: __result <- undef
 4093              	.LBB3_20:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 4094              	.Ltmp1133:
 4095              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4096              	.Ltmp1134:
 4097              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4098              	.Ltmp1135:
 4099              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4100              	.Ltmp1136:
 4101              		#DEBUG_VALUE: substr:__pos <- 0+0
 4102              	.Ltmp1137:
 4103              		#DEBUG_VALUE: _M_check:__pos <- 0+0
 4104              	.Ltmp1138:
 4105              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4106 1565 85C0     		testl	%eax, %eax
 4107 1567 7F0F     		jg	.LBB3_22
 4108              	# BB#21:
 4109              	.Ltmp1139:
 4110              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4111              	.Ltmp1140:
 4112              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4113              	.Ltmp1141:
 4114              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4115              	.Ltmp1142:
 4116              		#DEBUG_VALUE: substr:__pos <- 0+0
 4117              	.Ltmp1143:
 4118              		#DEBUG_VALUE: _M_check:__pos <- 0+0
 4119              	.Ltmp1144:
 4120              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4121 1569 488DB570 		leaq	-144(%rbp), %rsi
 4121      FFFFFF
 4122 1570 4C89E7   		movq	%r12, %rdi
 4123 1573 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 4123      00
 4124              	.LBB3_22:                               # %_ZNSsD1Ev.exit23
 4125              	.Ltmp955:
 4126              	.Ltmp1145:
 4127              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4128              	.Ltmp1146:
 4129              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4130              	.Ltmp1147:
 4131              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4132              	.Ltmp1148:
 4133              		#DEBUG_VALUE: substr:__pos <- 0+0
 4134              	.Ltmp1149:
 4135              		#DEBUG_VALUE: _M_check:__pos <- 0+0
 4136 1578 488DBD08 		leaq	-248(%rbp), %rdi
 4136      FFFFFF
 4137              	.Ltmp1150:
 4138              		#DEBUG_VALUE: find_last_of:this <- RDI+0
 4139 157f BE000000 		movl	$.L.str15, %esi
 4139      00
 4140              	.Ltmp1151:
 4141              		#DEBUG_VALUE: length:__s <- RSI+0
 4142 1584 48C7C2FF 		movq	$-1, %rdx
 4142      FFFFFF
 4143 158b B9010000 		movl	$1, %ecx
 4143      00
 4144              	.Ltmp1152:
 4145              		#DEBUG_VALUE: length:__s <- undef
 4146              	.Ltmp1153:
 4147              		#DEBUG_VALUE: find_last_of:this <- undef
 4148 1590 E8000000 		callq	_ZNKSs12find_last_ofEPKcmm
 4148      00
 4149              	.Ltmp956:
 4150              	# BB#23:                                # %_ZNKSs12find_last_ofEPKcm.exit25
 4151              	.Ltmp1154:
 4152              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4153              	.Ltmp1155:
 4154              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4155              	.Ltmp1156:
 4156              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4157              	.Ltmp1157:
 4158              		#DEBUG_VALUE: found <- RAX+0
 4159              	.Ltmp1158:
 4160              		#DEBUG_VALUE: found <- undef
 4161              	.Ltmp1159:
 4162              		#DEBUG_VALUE: substr:__pos <- 0+0
 4163              	.Ltmp1160:
 4164              		#DEBUG_VALUE: _M_check:__pos <- 0+0
 4165              	.Ltmp1161:
 302:./matrix-util.C **** 	dir = dir.substr(found+1);
 4166              		.loc	2 302 2
 4167              	.Ltmp1162:
 4168 1595 48FFC0   		incq	%rax                    # ./matrix-util.C:302:2
 4169              	.Ltmp1163:
 4170              		#DEBUG_VALUE: substr:__n <- -1+0
 4171              	.Ltmp1164:
 4172              		#DEBUG_VALUE: _M_check:__pos <- RAX+0
 4173              	.Ltmp1165:
 4174              		#DEBUG_VALUE: substr:__pos <- RAX+0
 287:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_data() const
 4175              		.loc	3 287 9
 4176              	.Ltmp1166:
 4177 1598 488B8D08 		movq	-248(%rbp), %rcx        # /usr/include/c++/4.6.3/bits/basic_string.h:287:9[ /usr/include/c++/
 4177      FFFFFF
 4178              	.Ltmp1167:
 710:/usr/include/c++/4.6.3/bits/basic_string.h ****       size() const
 4179              		.loc	3 710 9
 4180              	.Ltmp1168:
 4181 159f 483941E8 		cmpq	%rax, -24(%rcx)         # /usr/include/c++/4.6.3/bits/basic_string.h:710:9[ /usr/include/c++/
 4182 15a3 730A     		jae	.LBB3_25
 4183              	# BB#24:
 4184              	.Ltmp986:
 4185              	.Ltmp1169:
 4186              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4187              	.Ltmp1170:
 4188              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4189              	.Ltmp1171:
 4190              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4191              	.Ltmp1172:
 4192              		#DEBUG_VALUE: substr:__n <- -1+0
 4193 15a5 BF000000 		movl	$.L.str31, %edi
 4193      00
 4194 15aa E8000000 		callq	_ZSt20__throw_out_of_rangePKc
 4194      00
 4195              	.Ltmp987:
 4196              	.LBB3_25:                               # %_ZNKSs8_M_checkEmPKc.exit.i26
 4197              	.Ltmp957:
 4198              	.Ltmp1173:
 4199              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4200              	.Ltmp1174:
 4201              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4202              	.Ltmp1175:
 4203              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4204              	.Ltmp1176:
 4205              		#DEBUG_VALUE: substr:__pos <- RAX+0
 4206              	.Ltmp1177:
 4207              		#DEBUG_VALUE: _M_check:__pos <- RAX+0
 4208              	.Ltmp1178:
 4209              		#DEBUG_VALUE: substr:__n <- -1+0
 4210 15af 488DBDF0 		leaq	-272(%rbp), %rdi
 4210      FEFFFF
 4211 15b6 488DB508 		leaq	-248(%rbp), %rsi
 4211      FFFFFF
 4212 15bd 48C7C1FF 		movq	$-1, %rcx
 4212      FFFFFF
 4213 15c4 4889C2   		movq	%rax, %rdx
 4214              	.Ltmp1179:
 4215              		#DEBUG_VALUE: _M_check:__pos <- undef
 4216              	.Ltmp1180:
 4217              		#DEBUG_VALUE: substr:__pos <- undef
 4218 15c7 E8000000 		callq	_ZNSsC1ERKSsmm
 4218      00
 4219              	.Ltmp958:
 4220              	# BB#26:                                # %_ZNKSs6substrEmm.exit29
 4221              	.Ltmp959:
 4222              	.Ltmp1181:
 4223              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4224              	.Ltmp1182:
 4225              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4226              	.Ltmp1183:
 4227              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4228              	.Ltmp1184:
 4229              		#DEBUG_VALUE: substr:__n <- -1+0
 4230 15cc 488DBD08 		leaq	-248(%rbp), %rdi
 4230      FFFFFF
 4231              	.Ltmp1185:
 4232              		#DEBUG_VALUE: operator=:this <- RDI+0
 4233 15d3 488DB5F0 		leaq	-272(%rbp), %rsi
 4233      FEFFFF
 4234              	.Ltmp1186:
 4235              		#DEBUG_VALUE: operator=:__str <- undef
 4236              	.Ltmp1187:
 4237              		#DEBUG_VALUE: operator=:__str <- RSI+0
 4238              	.Ltmp1188:
 4239              		#DEBUG_VALUE: operator=:this <- undef
 4240 15da E8000000 		callq	_ZNSs6assignERKSs
 4240      00
 4241              	.Ltmp960:
 4242              	# BB#27:                                # %_ZNSsaSERKSs.exit31
 4243              	.Ltmp1189:
 4244              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4245              	.Ltmp1190:
 4246              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4247              	.Ltmp1191:
 4248              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4249              	.Ltmp1192:
 4250              		#DEBUG_VALUE: substr:__n <- -1+0
 4251 15df 488BBDF0 		movq	-272(%rbp), %rdi
 4251      FEFFFF
 4252 15e6 4C8D67E8 		leaq	-24(%rdi), %r12
 4253 15ea B8000000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %eax
 4253      00
 4254 15ef 4939C4   		cmpq	%rax, %r12
 4255 15f2 7434     		je	.LBB3_33
 4256              	# BB#28:
 4257              	.Ltmp1193:
 4258              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4259              	.Ltmp1194:
 4260              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4261              	.Ltmp1195:
 4262              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4263              	.Ltmp1196:
 4264              		#DEBUG_VALUE: substr:__n <- -1+0
 4265 15f4 4883C7F8 		addq	$-8, %rdi
 4266 15f8 B8000000 		movl	$pthread_cancel, %eax
 4266      00
 4267 15fd 4885C0   		testq	%rax, %rax
 4268              	.Ltmp1197:
 4269              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4270 1600 740C     		je	.LBB3_30
 4271              	# BB#29:
 4272              	.Ltmp1198:
 4273              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4274              	.Ltmp1199:
 4275              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4276              	.Ltmp1200:
 4277              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4278              	.Ltmp1201:
 4279              		#DEBUG_VALUE: substr:__n <- -1+0
 4280              	.Ltmp1202:
 4281              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4282 1602 BEFFFFFF 		movl	$-1, %esi
 4282      FF
 4283 1607 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 4283      00
 4284 160c EB07     		jmp	.LBB3_31
 4285              	.LBB3_30:
 4286              	.Ltmp1203:
 4287              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4288              	.Ltmp1204:
 4289              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4290              	.Ltmp1205:
 4291              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4292              	.Ltmp1206:
 4293              		#DEBUG_VALUE: substr:__n <- -1+0
 4294              	.Ltmp1207:
 4295              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4296              	.Ltmp1208:
 4297              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 4298 160e 8B07     		movl	(%rdi), %eax
 4299              	.Ltmp1209:
 4300              		#DEBUG_VALUE: __result <- EAX+0
 4301 1610 8D48FF   		leal	-1(%rax), %ecx
 4302 1613 890F     		movl	%ecx, (%rdi)
 4303              	.Ltmp1210:
 4304              		#DEBUG_VALUE: __result <- undef
 4305              	.LBB3_31:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 4306              	.Ltmp1211:
 4307              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4308              	.Ltmp1212:
 4309              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4310              	.Ltmp1213:
 4311              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4312              	.Ltmp1214:
 4313              		#DEBUG_VALUE: substr:__n <- -1+0
 4314              	.Ltmp1215:
 4315              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4316 1615 85C0     		testl	%eax, %eax
 4317 1617 7F0F     		jg	.LBB3_33
 4318              	# BB#32:
 4319              	.Ltmp1216:
 4320              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4321              	.Ltmp1217:
 4322              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4323              	.Ltmp1218:
 4324              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4325              	.Ltmp1219:
 4326              		#DEBUG_VALUE: substr:__n <- -1+0
 4327              	.Ltmp1220:
 4328              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4329 1619 488DB578 		leaq	-136(%rbp), %rsi
 4329      FFFFFF
 4330 1620 4C89E7   		movq	%r12, %rdi
 4331 1623 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 4331      00
 4332              	.Ltmp1221:
 4333              	.LBB3_33:                               # %_ZNSsD1Ev.exit34
 304:./matrix-util.C **** 	std::stringstream ss;
 4334              		.loc	2 304 22
 4335              	.Ltmp1222:
 4336              	.Ltmp962:                               # ./matrix-util.C:304:22
 4337              	.Ltmp1223:
 4338              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4339              	.Ltmp1224:
 4340              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4341              	.Ltmp1225:
 4342              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4343              	.Ltmp1226:
 4344              		#DEBUG_VALUE: substr:__n <- -1+0
 4345 1628 488DBD80 		leaq	-640(%rbp), %rdi
 4345      FDFFFF
 4346 162f BE180000 		movl	$24, %esi
 4346      00
 4347 1634 E8000000 		callq	_ZNSt18basic_stringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode # ./matrix-util.C:30
 4347      00
 4348              	.Ltmp963:                               # ./matrix-util.C:304:22
 4349              	.Ltmp1227:
 4350              		#DEBUG_VALUE: operator|:__b <- 8+0
 4351              	.Ltmp1228:
 4352              		#DEBUG_VALUE: operator|:__a <- 16+0
 304:./matrix-util.C **** 	std::stringstream ss;
 4353              		.loc	2 304 20
 4354              	.Ltmp1229:
 4355              		#DEBUG_VALUE: ss <- [%rbp+$-640]+$0 # ./matrix-util.C:304:20
 4356              	# BB#34:
 4357              	.Ltmp1230:
 4358              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4359              	.Ltmp1231:
 4360              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4361              	.Ltmp1232:
 4362              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4363              	.Ltmp1233:
 4364              		#DEBUG_VALUE: substr:__n <- -1+0
 4365              	.Ltmp1234:
 4366              		#DEBUG_VALUE: operator|:__a <- 16+0
 4367              	.Ltmp1235:
 4368              		#DEBUG_VALUE: operator|:__b <- 8+0
 511:/usr/include/c++/4.6.3/ostream ****     {
 4369              		.loc	12 511 7
 4370              	.Ltmp1236:
 4371 1639 4D85F6   		testq	%r14, %r14              # /usr/include/c++/4.6.3/ostream:511:7[ ./matrix-util.C:305:2 ]
 4372              	.Ltmp1237:
 305:./matrix-util.C **** 	ss << prefix << dir << "__" << file << suffix;
 4373              		.loc	2 305 2
 4374              	.Ltmp1238:
 4375 163c 4C8DA590 		leaq	-624(%rbp), %r12        # ./matrix-util.C:305:2
 4375      FDFFFF
 509:/usr/include/c++/4.6.3/ostream ****     inline basic_ostream<char, _Traits>&
 4376              		.loc	12 509 65
 4377              	.Ltmp1239:
 4378              		#DEBUG_VALUE: operator<<:__s <- R14+0 # /usr/include/c++/4.6.3/ostream:509:65[ ./matrix-util.C:305
 511:/usr/include/c++/4.6.3/ostream ****     {
 4379              		.loc	12 511 7
 4380              	.Ltmp1240:
 4381 1643 7526     		jne	.LBB3_36                # /usr/include/c++/4.6.3/ostream:511:7[ ./matrix-util.C:305:2 ]
 4382              	# BB#35:
 4383              	.Ltmp1241:
 4384              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4385              	.Ltmp1242:
 4386              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4387              	.Ltmp1243:
 4388              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4389              	.Ltmp1244:
 4390              		#DEBUG_VALUE: substr:__n <- -1+0
 4391              	.Ltmp1245:
 4392              		#DEBUG_VALUE: operator|:__a <- 16+0
 4393              	.Ltmp1246:
 4394              		#DEBUG_VALUE: operator|:__b <- 8+0
 512:/usr/include/c++/4.6.3/ostream ****       if (!__s)
 4395              		.loc	12 512 2
 4396              	.Ltmp1247:
 4397 1645 4C8BB590 		movq	-624(%rbp), %r14        # /usr/include/c++/4.6.3/ostream:512:2[ ./matrix-util.C:305:2 ]
 4397      FDFFFF
 4398 164c 4D8B76E8 		movq	-24(%r14), %r14         # /usr/include/c++/4.6.3/ostream:512:2[ ./matrix-util.C:305:2 ]
 4399 1650 488D8580 		leaq	-640(%rbp), %rax
 4399      FDFFFF
 4400 1657 498D7C06 		leaq	16(%r14,%rax), %rdi     # /usr/include/c++/4.6.3/ostream:512:2[ ./matrix-util.C:305:2 ]
 4400      10
 129:/usr/include/c++/4.6.3/bits/basic_ios.h ****       rdstate() const
 4401              		.loc	14 129 9
 4402              	.Ltmp1248:
 4403 165c 418B7406 		movl	48(%r14,%rax), %esi     # /usr/include/c++/4.6.3/bits/basic_ios.h:129:9[ /usr/include/c++/4.6
 4403      30
 4404              	.Ltmp1249:
 4405              		#DEBUG_VALUE: operator|:__a <- undef
 158:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Iostate
 4406              		.loc	8 158 26
 4407              	.Ltmp1250:
 4408              		#DEBUG_VALUE: operator|:__a <- ESI+0 # /usr/include/c++/4.6.3/bits/ios_base.h:158:26[ /usr/include
 148:/usr/include/c++/4.6.3/bits/basic_ios.h ****       void
 4409              		.loc	14 148 24
 4410              	.Ltmp1251:
 4411              		#DEBUG_VALUE: setstate:__state <- 1+0 # /usr/include/c++/4.6.3/bits/basic_ios.h:148:24[ /usr/inclu
 4412              		.loc	8 159 5
 4413              	.Ltmp1252:
 4414 1661 83CE01   		orl	$1, %esi                # /usr/include/c++/4.6.3/bits/ios_base.h:159:5[ /usr/include/c++/4.6.3
 158:/usr/include/c++/4.6.3/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Iostate
 4415              		.loc	8 158 44
 4416              	.Ltmp1253:
 4417              		#DEBUG_VALUE: operator|:__b <- 1+0 # /usr/include/c++/4.6.3/bits/ios_base.h:158:44[ /usr/include/c
 4418              	.Ltmp966:
 4419 1664 E8000000 		callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate
 4419      00
 4420              	.Ltmp967:
 4421 1669 EB16     		jmp	.LBB3_37
 4422              	.LBB3_36:
 4423              	.Ltmp1254:
 4424              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4425              	.Ltmp1255:
 4426              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4427              	.Ltmp1256:
 4428              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4429              	.Ltmp1257:
 4430              		#DEBUG_VALUE: substr:__n <- -1+0
 4431              	.Ltmp1258:
 4432              		#DEBUG_VALUE: operator|:__a <- 16+0
 4433              	.Ltmp1259:
 4434              		#DEBUG_VALUE: operator|:__b <- 8+0
 4435              	.Ltmp1260:
 4436              		#DEBUG_VALUE: operator<<:__s <- R14+0
 4437              	.Ltmp1261:
 4438              		#DEBUG_VALUE: length:__s <- R14+0
 4439              	.Ltmp1262:
 4440              		.loc	11 260 9
 4441              	.Ltmp1263:
 4442 166b 4C89F7   		movq	%r14, %rdi              # /usr/include/c++/4.6.3/bits/char_traits.h:260:9[ /usr/include/c++/4
 4443 166e E8000000 		callq	strlen                  # /usr/include/c++/4.6.3/bits/char_traits.h:260:9[ /usr/include/c++/
 4443      00
 4444              	.Ltmp964:
 4445 1673 4C89E7   		movq	%r12, %rdi
 4446 1676 4C89F6   		movq	%r14, %rsi
 4447              	.Ltmp1264:
 4448              		#DEBUG_VALUE: operator<<:__s <- undef
 4449              	.Ltmp1265:
 4450              		#DEBUG_VALUE: length:__s <- undef
 4451 1679 4889C2   		movq	%rax, %rdx
 4452 167c E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l
 4452      00
 4453              	.Ltmp965:
 4454              	.LBB3_37:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.
 4455              	.Ltmp1266:
 4456              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4457              	.Ltmp1267:
 4458              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4459              	.Ltmp1268:
 4460              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4461              	.Ltmp1269:
 4462              		#DEBUG_VALUE: substr:__n <- -1+0
 4463              	.Ltmp1270:
 4464              		#DEBUG_VALUE: operator|:__a <- 16+0
 4465              	.Ltmp1271:
 4466              		#DEBUG_VALUE: operator|:__b <- 8+0
 4467              	.Ltmp1272:
 287:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_data() const
 4468              		.loc	3 287 9
 4469              	.Ltmp1273:
 4470 1681 488BB508 		movq	-248(%rbp), %rsi        # /usr/include/c++/4.6.3/bits/basic_string.h:287:9[ /usr/include/c++/
 4470      FFFFFF
 4471              	.Ltmp1274:
 710:/usr/include/c++/4.6.3/bits/basic_string.h ****       size() const
 4472              		.loc	3 710 9
 4473              	.Ltmp1275:
 4474 1688 488B56E8 		movq	-24(%rsi), %rdx         # /usr/include/c++/4.6.3/bits/basic_string.h:710:9[ /usr/include/c++/
 4475              	.Ltmp968:
 4476 168c 4C89E7   		movq	%r12, %rdi
 4477 168f E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l
 4477      00
 4478              	.Ltmp969:
 4479              	# BB#38:                                # %_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_
 4480              	.Ltmp1276:
 4481              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4482              	.Ltmp1277:
 4483              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4484              	.Ltmp1278:
 4485              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4486              	.Ltmp1279:
 4487              		#DEBUG_VALUE: substr:__n <- -1+0
 4488              	.Ltmp1280:
 4489              		#DEBUG_VALUE: operator|:__a <- 16+0
 4490              	.Ltmp1281:
 4491              		#DEBUG_VALUE: operator|:__b <- 8+0
 4492 1694 4989C6   		movq	%rax, %r14
 4493              	.Ltmp970:
 509:/usr/include/c++/4.6.3/ostream ****     inline basic_ostream<char, _Traits>&
 4494              		.loc	12 509 46
 4495              	.Ltmp1282:
 4496              		#DEBUG_VALUE: operator<<:__out <- R14+0 # /usr/include/c++/4.6.3/ostream:509:46[ ./matrix-util.C:3
 4497 1697 BE000000 		movl	$.L.str16, %esi
 4497      00
 4498              	.Ltmp1283:
 4499              		#DEBUG_VALUE: length:__s <- RSI+0
 4500 169c BA020000 		movl	$2, %edx
 4500      00
 4501 16a1 4C89F7   		movq	%r14, %rdi
 4502              	.Ltmp1284:
 4503              		#DEBUG_VALUE: length:__s <- undef
 4504 16a4 E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l
 4504      00
 4505              	.Ltmp971:
 4506              	# BB#39:                                # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.
 4507              	.Ltmp1285:
 4508              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4509              	.Ltmp1286:
 4510              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4511              	.Ltmp1287:
 4512              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4513              	.Ltmp1288:
 4514              		#DEBUG_VALUE: substr:__n <- -1+0
 4515              	.Ltmp1289:
 4516              		#DEBUG_VALUE: operator|:__a <- 16+0
 4517              	.Ltmp1290:
 4518              		#DEBUG_VALUE: operator|:__b <- 8+0
 4519              	.Ltmp1291:
 4520              		#DEBUG_VALUE: operator<<:__out <- R14+0
 287:/usr/include/c++/4.6.3/bits/basic_string.h ****       _M_data() const
 4521              		.loc	3 287 9
 4522              	.Ltmp1292:
 4523 16a9 488BB510 		movq	-240(%rbp), %rsi        # /usr/include/c++/4.6.3/bits/basic_string.h:287:9[ /usr/include/c++/
 4523      FFFFFF
 4524              	.Ltmp1293:
 710:/usr/include/c++/4.6.3/bits/basic_string.h ****       size() const
 4525              		.loc	3 710 9
 4526              	.Ltmp1294:
 4527 16b0 488B56E8 		movq	-24(%rsi), %rdx         # /usr/include/c++/4.6.3/bits/basic_string.h:710:9[ /usr/include/c++/
 4528              	.Ltmp972:
 4529              		.loc	3 2692 48
 4530              	.Ltmp1295:
 4531              		#DEBUG_VALUE: operator<<:__os <- R14+0 # /usr/include/c++/4.6.3/bits/basic_string.h:2692:48[ ./mat
 4532 16b4 4C89F7   		movq	%r14, %rdi
 4533              	.Ltmp1296:
 4534              		#DEBUG_VALUE: operator<<:__os <- undef
 4535              	.Ltmp1297:
 4536              		#DEBUG_VALUE: operator<<:__out <- undef
 4537 16b7 E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l
 4537      00
 4538              	.Ltmp973:
 4539              	# BB#40:                                # %_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_
 4540              	.Ltmp1298:
 4541              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4542              	.Ltmp1299:
 4543              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4544              	.Ltmp1300:
 4545              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4546              	.Ltmp1301:
 4547              		#DEBUG_VALUE: substr:__n <- -1+0
 4548              	.Ltmp1302:
 4549              		#DEBUG_VALUE: operator|:__a <- 16+0
 4550              	.Ltmp1303:
 4551              		#DEBUG_VALUE: operator|:__b <- 8+0
 4552 16bc 4989C6   		movq	%rax, %r14
 4553              	.Ltmp1304:
 511:/usr/include/c++/4.6.3/ostream ****     {
 4554              		.loc	12 511 7
 4555              	.Ltmp1305:
 4556 16bf 4885DB   		testq	%rbx, %rbx              # /usr/include/c++/4.6.3/ostream:511:7[ ./matrix-util.C:305:2 ]
 4557              	.Ltmp1306:
 4558              		#DEBUG_VALUE: operator<<:__s <- RBX+0
 4559 16c2 751C     		jne	.LBB3_42                # /usr/include/c++/4.6.3/ostream:511:7[ ./matrix-util.C:305:2 ]
 4560              	# BB#41:
 4561              	.Ltmp1307:
 4562              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4563              	.Ltmp1308:
 4564              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4565              	.Ltmp1309:
 4566              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4567              	.Ltmp1310:
 4568              		#DEBUG_VALUE: substr:__n <- -1+0
 4569              	.Ltmp1311:
 4570              		#DEBUG_VALUE: operator|:__a <- 16+0
 4571              	.Ltmp1312:
 4572              		#DEBUG_VALUE: operator|:__b <- 8+0
 512:/usr/include/c++/4.6.3/ostream ****       if (!__s)
 4573              		.loc	12 512 2
 4574              	.Ltmp1313:
 4575 16c4 498B1E   		movq	(%r14), %rbx            # /usr/include/c++/4.6.3/ostream:512:2[ ./matrix-util.C:305:2 ]
 4576 16c7 488B5BE8 		movq	-24(%rbx), %rbx         # /usr/include/c++/4.6.3/ostream:512:2[ ./matrix-util.C:305:2 ]
 129:/usr/include/c++/4.6.3/bits/basic_ios.h ****       rdstate() const
 4577              		.loc	14 129 9
 4578              	.Ltmp1314:
 4579 16cb 418B741E 		movl	32(%r14,%rbx), %esi     # /usr/include/c++/4.6.3/bits/basic_ios.h:129:9[ /usr/include/c++/4.6
 4579      20
 148:/usr/include/c++/4.6.3/bits/basic_ios.h ****       void
 4580              		.loc	14 148 7
 4581              	.Ltmp1315:
 4582              		#DEBUG_VALUE: setstate:this <- RDI+0 # /usr/include/c++/4.6.3/bits/basic_ios.h:148:7[ /usr/include
 128:/usr/include/c++/4.6.3/bits/basic_ios.h ****       iostate
 4583              		.loc	14 128 7
 4584              	.Ltmp1316:
 4585              		#DEBUG_VALUE: rdstate:this <- RDI+0 # /usr/include/c++/4.6.3/bits/basic_ios.h:128:7[ /usr/include/
 4586              	.Ltmp1317:
 4587              		#DEBUG_VALUE: operator|:__a <- ESI+0
 4588              	.Ltmp1318:
 4589              		#DEBUG_VALUE: setstate:__state <- 1+0
 4590              	.Ltmp1319:
 512:/usr/include/c++/4.6.3/ostream ****       if (!__s)
 4591              		.loc	12 512 2
 4592              	.Ltmp1320:
 4593 16d0 4C89F7   		movq	%r14, %rdi              # /usr/include/c++/4.6.3/ostream:512:2[ ./matrix-util.C:305:2 ]
 4594 16d3 4801DF   		addq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:512:2[ ./matrix-util.C:305:2 ]
 4595              	.Ltmp1321:
 4596              		#DEBUG_VALUE: operator|:__a <- undef
 4597              		.loc	8 159 5
 4598              	.Ltmp1322:
 4599 16d6 83CE01   		orl	$1, %esi                # /usr/include/c++/4.6.3/bits/ios_base.h:159:5[ /usr/include/c++/4.6.3
 4600              	.Ltmp1323:
 4601              		#DEBUG_VALUE: operator|:__b <- 1+0
 4602              	.Ltmp976:
 4603 16d9 E8000000 		callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate
 4603      00
 4604              	.Ltmp977:
 4605 16de EB16     		jmp	.LBB3_43
 4606              	.LBB3_42:
 4607              	.Ltmp1324:
 4608              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4609              	.Ltmp1325:
 4610              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4611              	.Ltmp1326:
 4612              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4613              	.Ltmp1327:
 4614              		#DEBUG_VALUE: substr:__n <- -1+0
 4615              	.Ltmp1328:
 4616              		#DEBUG_VALUE: operator|:__a <- 16+0
 4617              	.Ltmp1329:
 4618              		#DEBUG_VALUE: operator|:__b <- 8+0
 4619              	.Ltmp1330:
 4620              		#DEBUG_VALUE: operator<<:__s <- RBX+0
 4621              	.Ltmp1331:
 4622              		#DEBUG_VALUE: length:__s <- RBX+0
 4623              	.Ltmp1332:
 4624              		.loc	11 260 9
 4625              	.Ltmp1333:
 4626 16e0 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/bits/char_traits.h:260:9[ /usr/include/c++/4
 4627 16e3 E8000000 		callq	strlen                  # /usr/include/c++/4.6.3/bits/char_traits.h:260:9[ /usr/include/c++/
 4627      00
 4628              	.Ltmp974:
 4629 16e8 4C89F7   		movq	%r14, %rdi
 4630 16eb 4889DE   		movq	%rbx, %rsi
 4631              	.Ltmp1334:
 4632              		#DEBUG_VALUE: operator<<:__s <- undef
 4633              	.Ltmp1335:
 4634              		#DEBUG_VALUE: length:__s <- undef
 4635 16ee 4889C2   		movq	%rax, %rdx
 4636 16f1 E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l
 4636      00
 4637              	.Ltmp975:
 4638              	.LBB3_43:                               # %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.
 4639              	.Ltmp978:
 4640              	.Ltmp1336:
 4641              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4642              	.Ltmp1337:
 4643              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4644              	.Ltmp1338:
 4645              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4646              	.Ltmp1339:
 4647              		#DEBUG_VALUE: substr:__n <- -1+0
 4648              	.Ltmp1340:
 4649              		#DEBUG_VALUE: operator|:__a <- 16+0
 4650              	.Ltmp1341:
 4651              		#DEBUG_VALUE: operator|:__b <- 8+0
 4652              	.Ltmp1342:
   1:/usr/include/c++/4.6.3/sstream **** // String based streams -*- C++ -*-
   2:/usr/include/c++/4.6.3/sstream **** 
   3:/usr/include/c++/4.6.3/sstream **** // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
   4:/usr/include/c++/4.6.3/sstream **** // 2006, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
   5:/usr/include/c++/4.6.3/sstream **** //
   6:/usr/include/c++/4.6.3/sstream **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/usr/include/c++/4.6.3/sstream **** // software; you can redistribute it and/or modify it under the
   8:/usr/include/c++/4.6.3/sstream **** // terms of the GNU General Public License as published by the
   9:/usr/include/c++/4.6.3/sstream **** // Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/4.6.3/sstream **** // any later version.
  11:/usr/include/c++/4.6.3/sstream **** 
  12:/usr/include/c++/4.6.3/sstream **** // This library is distributed in the hope that it will be useful,
  13:/usr/include/c++/4.6.3/sstream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/4.6.3/sstream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/4.6.3/sstream **** // GNU General Public License for more details.
  16:/usr/include/c++/4.6.3/sstream **** 
  17:/usr/include/c++/4.6.3/sstream **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/4.6.3/sstream **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/4.6.3/sstream **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/4.6.3/sstream **** 
  21:/usr/include/c++/4.6.3/sstream **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/4.6.3/sstream **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/4.6.3/sstream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/4.6.3/sstream **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/4.6.3/sstream **** 
  26:/usr/include/c++/4.6.3/sstream **** /** @file include/sstream
  27:/usr/include/c++/4.6.3/sstream ****  *  This is a Standard C++ Library header.
  28:/usr/include/c++/4.6.3/sstream ****  */
  29:/usr/include/c++/4.6.3/sstream **** 
  30:/usr/include/c++/4.6.3/sstream **** //
  31:/usr/include/c++/4.6.3/sstream **** // ISO C++ 14882: 27.7  String-based streams
  32:/usr/include/c++/4.6.3/sstream **** //
  33:/usr/include/c++/4.6.3/sstream **** 
  34:/usr/include/c++/4.6.3/sstream **** #ifndef _GLIBCXX_SSTREAM
  35:/usr/include/c++/4.6.3/sstream **** #define _GLIBCXX_SSTREAM 1
  36:/usr/include/c++/4.6.3/sstream **** 
  37:/usr/include/c++/4.6.3/sstream **** #pragma GCC system_header
  38:/usr/include/c++/4.6.3/sstream **** 
  39:/usr/include/c++/4.6.3/sstream **** #include <istream>
  40:/usr/include/c++/4.6.3/sstream **** #include <ostream>
  41:/usr/include/c++/4.6.3/sstream **** 
  42:/usr/include/c++/4.6.3/sstream **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/usr/include/c++/4.6.3/sstream **** {
  44:/usr/include/c++/4.6.3/sstream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/usr/include/c++/4.6.3/sstream **** 
  46:/usr/include/c++/4.6.3/sstream ****   // [27.7.1] template class basic_stringbuf
  47:/usr/include/c++/4.6.3/sstream ****   /**
  48:/usr/include/c++/4.6.3/sstream ****    *  @brief  The actual work of input and output (for std::string).
  49:/usr/include/c++/4.6.3/sstream ****    *  @ingroup io
  50:/usr/include/c++/4.6.3/sstream ****    *
  51:/usr/include/c++/4.6.3/sstream ****    *  This class associates either or both of its input and output sequences
  52:/usr/include/c++/4.6.3/sstream ****    *  with a sequence of characters, which can be initialized from, or made
  53:/usr/include/c++/4.6.3/sstream ****    *  available as, a @c std::basic_string.  (Paraphrased from [27.7.1]/1.)
  54:/usr/include/c++/4.6.3/sstream ****    *
  55:/usr/include/c++/4.6.3/sstream ****    *  For this class, open modes (of type @c ios_base::openmode) have
  56:/usr/include/c++/4.6.3/sstream ****    *  @c in set if the input sequence can be read, and @c out set if the
  57:/usr/include/c++/4.6.3/sstream ****    *  output sequence can be written.
  58:/usr/include/c++/4.6.3/sstream ****   */
  59:/usr/include/c++/4.6.3/sstream ****   template<typename _CharT, typename _Traits, typename _Alloc>
  60:/usr/include/c++/4.6.3/sstream ****     class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
  61:/usr/include/c++/4.6.3/sstream ****     {
  62:/usr/include/c++/4.6.3/sstream ****     public:
  63:/usr/include/c++/4.6.3/sstream ****       // Types:
  64:/usr/include/c++/4.6.3/sstream ****       typedef _CharT 					char_type;
  65:/usr/include/c++/4.6.3/sstream ****       typedef _Traits 					traits_type;
  66:/usr/include/c++/4.6.3/sstream ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  67:/usr/include/c++/4.6.3/sstream ****       // 251. basic_stringbuf missing allocator_type
  68:/usr/include/c++/4.6.3/sstream ****       typedef _Alloc				       	allocator_type;
  69:/usr/include/c++/4.6.3/sstream ****       typedef typename traits_type::int_type 		int_type;
  70:/usr/include/c++/4.6.3/sstream ****       typedef typename traits_type::pos_type 		pos_type;
  71:/usr/include/c++/4.6.3/sstream ****       typedef typename traits_type::off_type 		off_type;
  72:/usr/include/c++/4.6.3/sstream **** 
  73:/usr/include/c++/4.6.3/sstream ****       typedef basic_streambuf<char_type, traits_type>  	__streambuf_type;
  74:/usr/include/c++/4.6.3/sstream ****       typedef basic_string<char_type, _Traits, _Alloc> 	__string_type;
  75:/usr/include/c++/4.6.3/sstream ****       typedef typename __string_type::size_type		__size_type;
  76:/usr/include/c++/4.6.3/sstream **** 
  77:/usr/include/c++/4.6.3/sstream ****     protected:
  78:/usr/include/c++/4.6.3/sstream ****       /// Place to stash in || out || in | out settings for current stringbuf.
  79:/usr/include/c++/4.6.3/sstream ****       ios_base::openmode 	_M_mode;
  80:/usr/include/c++/4.6.3/sstream **** 
  81:/usr/include/c++/4.6.3/sstream ****       // Data Members:
  82:/usr/include/c++/4.6.3/sstream ****       __string_type 		_M_string;
  83:/usr/include/c++/4.6.3/sstream **** 
  84:/usr/include/c++/4.6.3/sstream ****     public:
  85:/usr/include/c++/4.6.3/sstream ****       // Constructors:
  86:/usr/include/c++/4.6.3/sstream ****       /**
  87:/usr/include/c++/4.6.3/sstream ****        *  @brief  Starts with an empty string buffer.
  88:/usr/include/c++/4.6.3/sstream ****        *  @param  mode  Whether the buffer can read, or write, or both.
  89:/usr/include/c++/4.6.3/sstream ****        *
  90:/usr/include/c++/4.6.3/sstream ****        *  The default constructor initializes the parent class using its
  91:/usr/include/c++/4.6.3/sstream ****        *  own default ctor.
  92:/usr/include/c++/4.6.3/sstream ****       */
  93:/usr/include/c++/4.6.3/sstream ****       explicit
  94:/usr/include/c++/4.6.3/sstream ****       basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)
  95:/usr/include/c++/4.6.3/sstream ****       : __streambuf_type(), _M_mode(__mode), _M_string()
  96:/usr/include/c++/4.6.3/sstream ****       { }
  97:/usr/include/c++/4.6.3/sstream **** 
  98:/usr/include/c++/4.6.3/sstream ****       /**
  99:/usr/include/c++/4.6.3/sstream ****        *  @brief  Starts with an existing string buffer.
 100:/usr/include/c++/4.6.3/sstream ****        *  @param  str  A string to copy as a starting buffer.
 101:/usr/include/c++/4.6.3/sstream ****        *  @param  mode  Whether the buffer can read, or write, or both.
 102:/usr/include/c++/4.6.3/sstream ****        *
 103:/usr/include/c++/4.6.3/sstream ****        *  This constructor initializes the parent class using its
 104:/usr/include/c++/4.6.3/sstream ****        *  own default ctor.
 105:/usr/include/c++/4.6.3/sstream ****       */
 106:/usr/include/c++/4.6.3/sstream ****       explicit
 107:/usr/include/c++/4.6.3/sstream ****       basic_stringbuf(const __string_type& __str,
 108:/usr/include/c++/4.6.3/sstream **** 		      ios_base::openmode __mode = ios_base::in | ios_base::out)
 109:/usr/include/c++/4.6.3/sstream ****       : __streambuf_type(), _M_mode(), _M_string(__str.data(), __str.size())
 110:/usr/include/c++/4.6.3/sstream ****       { _M_stringbuf_init(__mode); }
 111:/usr/include/c++/4.6.3/sstream **** 
 112:/usr/include/c++/4.6.3/sstream ****       // Get and set:
 113:/usr/include/c++/4.6.3/sstream ****       /**
 114:/usr/include/c++/4.6.3/sstream ****        *  @brief  Copying out the string buffer.
 115:/usr/include/c++/4.6.3/sstream ****        *  @return  A copy of one of the underlying sequences.
 116:/usr/include/c++/4.6.3/sstream ****        *
 117:/usr/include/c++/4.6.3/sstream ****        *  <em>If the buffer is only created in input mode, the underlying
 118:/usr/include/c++/4.6.3/sstream ****        *  character sequence is equal to the input sequence; otherwise, it
 119:/usr/include/c++/4.6.3/sstream ****        *  is equal to the output sequence.</em> [27.7.1.2]/1
 120:/usr/include/c++/4.6.3/sstream ****       */
 121:/usr/include/c++/4.6.3/sstream ****       __string_type
 122:/usr/include/c++/4.6.3/sstream ****       str() const
 123:/usr/include/c++/4.6.3/sstream ****       {
 124:/usr/include/c++/4.6.3/sstream **** 	__string_type __ret;
 125:/usr/include/c++/4.6.3/sstream **** 	if (this->pptr())
 126:/usr/include/c++/4.6.3/sstream **** 	  {
 127:/usr/include/c++/4.6.3/sstream **** 	    // The current egptr() may not be the actual string end.
 128:/usr/include/c++/4.6.3/sstream **** 	    if (this->pptr() > this->egptr())
 129:/usr/include/c++/4.6.3/sstream **** 	      __ret = __string_type(this->pbase(), this->pptr());
 130:/usr/include/c++/4.6.3/sstream **** 	    else
 131:/usr/include/c++/4.6.3/sstream ****  	      __ret = __string_type(this->pbase(), this->egptr());
 132:/usr/include/c++/4.6.3/sstream **** 	  }
 133:/usr/include/c++/4.6.3/sstream **** 	else
 134:/usr/include/c++/4.6.3/sstream **** 	  __ret = _M_string;
 135:/usr/include/c++/4.6.3/sstream **** 	return __ret;
 136:/usr/include/c++/4.6.3/sstream ****       }
 137:/usr/include/c++/4.6.3/sstream **** 
 138:/usr/include/c++/4.6.3/sstream ****       /**
 139:/usr/include/c++/4.6.3/sstream ****        *  @brief  Setting a new buffer.
 140:/usr/include/c++/4.6.3/sstream ****        *  @param  s  The string to use as a new sequence.
 141:/usr/include/c++/4.6.3/sstream ****        *
 142:/usr/include/c++/4.6.3/sstream ****        *  Deallocates any previous stored sequence, then copies @a s to
 143:/usr/include/c++/4.6.3/sstream ****        *  use as a new one.
 144:/usr/include/c++/4.6.3/sstream ****       */
 145:/usr/include/c++/4.6.3/sstream ****       void
 146:/usr/include/c++/4.6.3/sstream ****       str(const __string_type& __s)
 147:/usr/include/c++/4.6.3/sstream ****       {
 148:/usr/include/c++/4.6.3/sstream **** 	// Cannot use _M_string = __s, since v3 strings are COW.
 149:/usr/include/c++/4.6.3/sstream **** 	_M_string.assign(__s.data(), __s.size());
 150:/usr/include/c++/4.6.3/sstream **** 	_M_stringbuf_init(_M_mode);
 151:/usr/include/c++/4.6.3/sstream ****       }
 152:/usr/include/c++/4.6.3/sstream **** 
 153:/usr/include/c++/4.6.3/sstream ****     protected:
 154:/usr/include/c++/4.6.3/sstream ****       // Common initialization code goes here.
 155:/usr/include/c++/4.6.3/sstream ****       void
 156:/usr/include/c++/4.6.3/sstream ****       _M_stringbuf_init(ios_base::openmode __mode)
 157:/usr/include/c++/4.6.3/sstream ****       {
 158:/usr/include/c++/4.6.3/sstream **** 	_M_mode = __mode;
 159:/usr/include/c++/4.6.3/sstream **** 	__size_type __len = 0;
 160:/usr/include/c++/4.6.3/sstream **** 	if (_M_mode & (ios_base::ate | ios_base::app))
 161:/usr/include/c++/4.6.3/sstream **** 	  __len = _M_string.size();
 162:/usr/include/c++/4.6.3/sstream **** 	_M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);
 163:/usr/include/c++/4.6.3/sstream ****       }
 164:/usr/include/c++/4.6.3/sstream **** 
 165:/usr/include/c++/4.6.3/sstream ****       virtual streamsize
 166:/usr/include/c++/4.6.3/sstream ****       showmanyc()
 167:/usr/include/c++/4.6.3/sstream ****       { 
 168:/usr/include/c++/4.6.3/sstream **** 	streamsize __ret = -1;
 169:/usr/include/c++/4.6.3/sstream **** 	if (_M_mode & ios_base::in)
 170:/usr/include/c++/4.6.3/sstream **** 	  {
 171:/usr/include/c++/4.6.3/sstream **** 	    _M_update_egptr();
 172:/usr/include/c++/4.6.3/sstream **** 	    __ret = this->egptr() - this->gptr();
 173:/usr/include/c++/4.6.3/sstream **** 	  }
 174:/usr/include/c++/4.6.3/sstream **** 	return __ret;
 175:/usr/include/c++/4.6.3/sstream ****       }
 176:/usr/include/c++/4.6.3/sstream **** 
 177:/usr/include/c++/4.6.3/sstream ****       virtual int_type
 178:/usr/include/c++/4.6.3/sstream ****       underflow();
 179:/usr/include/c++/4.6.3/sstream **** 
 180:/usr/include/c++/4.6.3/sstream ****       virtual int_type
 181:/usr/include/c++/4.6.3/sstream ****       pbackfail(int_type __c = traits_type::eof());
 182:/usr/include/c++/4.6.3/sstream **** 
 183:/usr/include/c++/4.6.3/sstream ****       virtual int_type
 184:/usr/include/c++/4.6.3/sstream ****       overflow(int_type __c = traits_type::eof());
 185:/usr/include/c++/4.6.3/sstream **** 
 186:/usr/include/c++/4.6.3/sstream ****       /**
 187:/usr/include/c++/4.6.3/sstream ****        *  @brief  Manipulates the buffer.
 188:/usr/include/c++/4.6.3/sstream ****        *  @param  s  Pointer to a buffer area.
 189:/usr/include/c++/4.6.3/sstream ****        *  @param  n  Size of @a s.
 190:/usr/include/c++/4.6.3/sstream ****        *  @return  @c this
 191:/usr/include/c++/4.6.3/sstream ****        *
 192:/usr/include/c++/4.6.3/sstream ****        *  If no buffer has already been created, and both @a s and @a n are
 193:/usr/include/c++/4.6.3/sstream ****        *  non-zero, then @c s is used as a buffer; see
 194:/usr/include/c++/4.6.3/sstream ****        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt11ch25s02.html
 195:/usr/include/c++/4.6.3/sstream ****        *  for more.
 196:/usr/include/c++/4.6.3/sstream ****       */
 197:/usr/include/c++/4.6.3/sstream ****       virtual __streambuf_type*
 198:/usr/include/c++/4.6.3/sstream ****       setbuf(char_type* __s, streamsize __n)
 199:/usr/include/c++/4.6.3/sstream ****       {
 200:/usr/include/c++/4.6.3/sstream **** 	if (__s && __n >= 0)
 201:/usr/include/c++/4.6.3/sstream **** 	  {
 202:/usr/include/c++/4.6.3/sstream **** 	    // This is implementation-defined behavior, and assumes
 203:/usr/include/c++/4.6.3/sstream **** 	    // that an external char_type array of length __n exists
 204:/usr/include/c++/4.6.3/sstream **** 	    // and has been pre-allocated. If this is not the case,
 205:/usr/include/c++/4.6.3/sstream **** 	    // things will quickly blow up.
 206:/usr/include/c++/4.6.3/sstream **** 	    
 207:/usr/include/c++/4.6.3/sstream **** 	    // Step 1: Destroy the current internal array.
 208:/usr/include/c++/4.6.3/sstream **** 	    _M_string.clear();
 209:/usr/include/c++/4.6.3/sstream **** 	    
 210:/usr/include/c++/4.6.3/sstream **** 	    // Step 2: Use the external array.
 211:/usr/include/c++/4.6.3/sstream **** 	    _M_sync(__s, __n, 0);
 212:/usr/include/c++/4.6.3/sstream **** 	  }
 213:/usr/include/c++/4.6.3/sstream **** 	return this;
 214:/usr/include/c++/4.6.3/sstream ****       }
 215:/usr/include/c++/4.6.3/sstream **** 
 216:/usr/include/c++/4.6.3/sstream ****       virtual pos_type
 217:/usr/include/c++/4.6.3/sstream ****       seekoff(off_type __off, ios_base::seekdir __way,
 218:/usr/include/c++/4.6.3/sstream **** 	      ios_base::openmode __mode = ios_base::in | ios_base::out);
 219:/usr/include/c++/4.6.3/sstream **** 
 220:/usr/include/c++/4.6.3/sstream ****       virtual pos_type
 221:/usr/include/c++/4.6.3/sstream ****       seekpos(pos_type __sp,
 222:/usr/include/c++/4.6.3/sstream **** 	      ios_base::openmode __mode = ios_base::in | ios_base::out);
 223:/usr/include/c++/4.6.3/sstream **** 
 224:/usr/include/c++/4.6.3/sstream ****       // Internal function for correctly updating the internal buffer
 225:/usr/include/c++/4.6.3/sstream ****       // for a particular _M_string, due to initialization or re-sizing
 226:/usr/include/c++/4.6.3/sstream ****       // of an existing _M_string.
 227:/usr/include/c++/4.6.3/sstream ****       void
 228:/usr/include/c++/4.6.3/sstream ****       _M_sync(char_type* __base, __size_type __i, __size_type __o);
 229:/usr/include/c++/4.6.3/sstream **** 
 230:/usr/include/c++/4.6.3/sstream ****       // Internal function for correctly updating egptr() to the actual
 231:/usr/include/c++/4.6.3/sstream ****       // string end.
 232:/usr/include/c++/4.6.3/sstream ****       void
 233:/usr/include/c++/4.6.3/sstream ****       _M_update_egptr()
 234:/usr/include/c++/4.6.3/sstream ****       {
 235:/usr/include/c++/4.6.3/sstream **** 	const bool __testin = _M_mode & ios_base::in;
 236:/usr/include/c++/4.6.3/sstream **** 	if (this->pptr() && this->pptr() > this->egptr())
 237:/usr/include/c++/4.6.3/sstream **** 	  {
 238:/usr/include/c++/4.6.3/sstream **** 	    if (__testin)
 239:/usr/include/c++/4.6.3/sstream **** 	      this->setg(this->eback(), this->gptr(), this->pptr());
 240:/usr/include/c++/4.6.3/sstream **** 	    else
 241:/usr/include/c++/4.6.3/sstream **** 	      this->setg(this->pptr(), this->pptr(), this->pptr());
 242:/usr/include/c++/4.6.3/sstream **** 	  }
 243:/usr/include/c++/4.6.3/sstream ****       }
 244:/usr/include/c++/4.6.3/sstream **** 
 245:/usr/include/c++/4.6.3/sstream ****       // Works around the issue with pbump, part of the protected
 246:/usr/include/c++/4.6.3/sstream ****       // interface of basic_streambuf, taking just an int.
 247:/usr/include/c++/4.6.3/sstream ****       void
 248:/usr/include/c++/4.6.3/sstream ****       _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off);
 249:/usr/include/c++/4.6.3/sstream ****     };
 250:/usr/include/c++/4.6.3/sstream **** 
 251:/usr/include/c++/4.6.3/sstream **** 
 252:/usr/include/c++/4.6.3/sstream ****   // [27.7.2] Template class basic_istringstream
 253:/usr/include/c++/4.6.3/sstream ****   /**
 254:/usr/include/c++/4.6.3/sstream ****    *  @brief  Controlling input for std::string.
 255:/usr/include/c++/4.6.3/sstream ****    *  @ingroup io
 256:/usr/include/c++/4.6.3/sstream ****    *
 257:/usr/include/c++/4.6.3/sstream ****    *  This class supports reading from objects of type std::basic_string,
 258:/usr/include/c++/4.6.3/sstream ****    *  using the inherited functions from std::basic_istream.  To control
 259:/usr/include/c++/4.6.3/sstream ****    *  the associated sequence, an instance of std::basic_stringbuf is used,
 260:/usr/include/c++/4.6.3/sstream ****    *  which this page refers to as @c sb.
 261:/usr/include/c++/4.6.3/sstream ****   */
 262:/usr/include/c++/4.6.3/sstream ****   template<typename _CharT, typename _Traits, typename _Alloc>
 263:/usr/include/c++/4.6.3/sstream ****     class basic_istringstream : public basic_istream<_CharT, _Traits>
 264:/usr/include/c++/4.6.3/sstream ****     {
 265:/usr/include/c++/4.6.3/sstream ****     public:
 266:/usr/include/c++/4.6.3/sstream ****       // Types:
 267:/usr/include/c++/4.6.3/sstream ****       typedef _CharT 					char_type;
 268:/usr/include/c++/4.6.3/sstream ****       typedef _Traits 					traits_type;
 269:/usr/include/c++/4.6.3/sstream ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 270:/usr/include/c++/4.6.3/sstream ****       // 251. basic_stringbuf missing allocator_type
 271:/usr/include/c++/4.6.3/sstream ****       typedef _Alloc				       	allocator_type;
 272:/usr/include/c++/4.6.3/sstream ****       typedef typename traits_type::int_type 		int_type;
 273:/usr/include/c++/4.6.3/sstream ****       typedef typename traits_type::pos_type 		pos_type;
 274:/usr/include/c++/4.6.3/sstream ****       typedef typename traits_type::off_type 		off_type;
 275:/usr/include/c++/4.6.3/sstream **** 
 276:/usr/include/c++/4.6.3/sstream ****       // Non-standard types:
 277:/usr/include/c++/4.6.3/sstream ****       typedef basic_string<_CharT, _Traits, _Alloc> 	__string_type;
 278:/usr/include/c++/4.6.3/sstream ****       typedef basic_stringbuf<_CharT, _Traits, _Alloc> 	__stringbuf_type;
 279:/usr/include/c++/4.6.3/sstream ****       typedef basic_istream<char_type, traits_type>	__istream_type;
 280:/usr/include/c++/4.6.3/sstream **** 
 281:/usr/include/c++/4.6.3/sstream ****     private:
 282:/usr/include/c++/4.6.3/sstream ****       __stringbuf_type	_M_stringbuf;
 283:/usr/include/c++/4.6.3/sstream **** 
 284:/usr/include/c++/4.6.3/sstream ****     public:
 285:/usr/include/c++/4.6.3/sstream ****       // Constructors:
 286:/usr/include/c++/4.6.3/sstream ****       /**
 287:/usr/include/c++/4.6.3/sstream ****        *  @brief  Default constructor starts with an empty string buffer.
 288:/usr/include/c++/4.6.3/sstream ****        *  @param  mode  Whether the buffer can read, or write, or both.
 289:/usr/include/c++/4.6.3/sstream ****        *
 290:/usr/include/c++/4.6.3/sstream ****        *  @c ios_base::in is automatically included in @a mode.
 291:/usr/include/c++/4.6.3/sstream ****        *
 292:/usr/include/c++/4.6.3/sstream ****        *  Initializes @c sb using @c mode|in, and passes @c &sb to the base
 293:/usr/include/c++/4.6.3/sstream ****        *  class initializer.  Does not allocate any buffer.
 294:/usr/include/c++/4.6.3/sstream ****        *
 295:/usr/include/c++/4.6.3/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 296:/usr/include/c++/4.6.3/sstream ****        *  string class does its own memory management.
 297:/usr/include/c++/4.6.3/sstream ****       */
 298:/usr/include/c++/4.6.3/sstream ****       explicit
 299:/usr/include/c++/4.6.3/sstream ****       basic_istringstream(ios_base::openmode __mode = ios_base::in)
 300:/usr/include/c++/4.6.3/sstream ****       : __istream_type(), _M_stringbuf(__mode | ios_base::in)
 301:/usr/include/c++/4.6.3/sstream ****       { this->init(&_M_stringbuf); }
 302:/usr/include/c++/4.6.3/sstream **** 
 303:/usr/include/c++/4.6.3/sstream ****       /**
 304:/usr/include/c++/4.6.3/sstream ****        *  @brief  Starts with an existing string buffer.
 305:/usr/include/c++/4.6.3/sstream ****        *  @param  str  A string to copy as a starting buffer.
 306:/usr/include/c++/4.6.3/sstream ****        *  @param  mode  Whether the buffer can read, or write, or both.
 307:/usr/include/c++/4.6.3/sstream ****        *
 308:/usr/include/c++/4.6.3/sstream ****        *  @c ios_base::in is automatically included in @a mode.
 309:/usr/include/c++/4.6.3/sstream ****        *
 310:/usr/include/c++/4.6.3/sstream ****        *  Initializes @c sb using @a str and @c mode|in, and passes @c &sb
 311:/usr/include/c++/4.6.3/sstream ****        *  to the base class initializer.
 312:/usr/include/c++/4.6.3/sstream ****        *
 313:/usr/include/c++/4.6.3/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 314:/usr/include/c++/4.6.3/sstream ****        *  string class does its own memory management.
 315:/usr/include/c++/4.6.3/sstream ****       */
 316:/usr/include/c++/4.6.3/sstream ****       explicit
 317:/usr/include/c++/4.6.3/sstream ****       basic_istringstream(const __string_type& __str,
 318:/usr/include/c++/4.6.3/sstream **** 			  ios_base::openmode __mode = ios_base::in)
 319:/usr/include/c++/4.6.3/sstream ****       : __istream_type(), _M_stringbuf(__str, __mode | ios_base::in)
 320:/usr/include/c++/4.6.3/sstream ****       { this->init(&_M_stringbuf); }
 321:/usr/include/c++/4.6.3/sstream **** 
 322:/usr/include/c++/4.6.3/sstream ****       /**
 323:/usr/include/c++/4.6.3/sstream ****        *  @brief  The destructor does nothing.
 324:/usr/include/c++/4.6.3/sstream ****        *
 325:/usr/include/c++/4.6.3/sstream ****        *  The buffer is deallocated by the stringbuf object, not the
 326:/usr/include/c++/4.6.3/sstream ****        *  formatting stream.
 327:/usr/include/c++/4.6.3/sstream ****       */
 328:/usr/include/c++/4.6.3/sstream ****       ~basic_istringstream()
 329:/usr/include/c++/4.6.3/sstream ****       { }
 330:/usr/include/c++/4.6.3/sstream **** 
 331:/usr/include/c++/4.6.3/sstream ****       // Members:
 332:/usr/include/c++/4.6.3/sstream ****       /**
 333:/usr/include/c++/4.6.3/sstream ****        *  @brief  Accessing the underlying buffer.
 334:/usr/include/c++/4.6.3/sstream ****        *  @return  The current basic_stringbuf buffer.
 335:/usr/include/c++/4.6.3/sstream ****        *
 336:/usr/include/c++/4.6.3/sstream ****        *  This hides both signatures of std::basic_ios::rdbuf().
 337:/usr/include/c++/4.6.3/sstream ****       */
 338:/usr/include/c++/4.6.3/sstream ****       __stringbuf_type*
 339:/usr/include/c++/4.6.3/sstream ****       rdbuf() const
 340:/usr/include/c++/4.6.3/sstream ****       { return const_cast<__stringbuf_type*>(&_M_stringbuf); }
 341:/usr/include/c++/4.6.3/sstream **** 
 342:/usr/include/c++/4.6.3/sstream ****       /**
 343:/usr/include/c++/4.6.3/sstream ****        *  @brief  Copying out the string buffer.
 344:/usr/include/c++/4.6.3/sstream ****        *  @return  @c rdbuf()->str()
 345:/usr/include/c++/4.6.3/sstream ****       */
 346:/usr/include/c++/4.6.3/sstream ****       __string_type
 347:/usr/include/c++/4.6.3/sstream ****       str() const
 348:/usr/include/c++/4.6.3/sstream ****       { return _M_stringbuf.str(); }
 349:/usr/include/c++/4.6.3/sstream **** 
 350:/usr/include/c++/4.6.3/sstream ****       /**
 351:/usr/include/c++/4.6.3/sstream ****        *  @brief  Setting a new buffer.
 352:/usr/include/c++/4.6.3/sstream ****        *  @param  s  The string to use as a new sequence.
 353:/usr/include/c++/4.6.3/sstream ****        *
 354:/usr/include/c++/4.6.3/sstream ****        *  Calls @c rdbuf()->str(s).
 355:/usr/include/c++/4.6.3/sstream ****       */
 356:/usr/include/c++/4.6.3/sstream ****       void
 357:/usr/include/c++/4.6.3/sstream ****       str(const __string_type& __s)
 358:/usr/include/c++/4.6.3/sstream ****       { _M_stringbuf.str(__s); }
 359:/usr/include/c++/4.6.3/sstream ****     };
 360:/usr/include/c++/4.6.3/sstream **** 
 361:/usr/include/c++/4.6.3/sstream **** 
 362:/usr/include/c++/4.6.3/sstream ****   // [27.7.3] Template class basic_ostringstream
 363:/usr/include/c++/4.6.3/sstream ****   /**
 364:/usr/include/c++/4.6.3/sstream ****    *  @brief  Controlling output for std::string.
 365:/usr/include/c++/4.6.3/sstream ****    *  @ingroup io
 366:/usr/include/c++/4.6.3/sstream ****    *
 367:/usr/include/c++/4.6.3/sstream ****    *  This class supports writing to objects of type std::basic_string,
 368:/usr/include/c++/4.6.3/sstream ****    *  using the inherited functions from std::basic_ostream.  To control
 369:/usr/include/c++/4.6.3/sstream ****    *  the associated sequence, an instance of std::basic_stringbuf is used,
 370:/usr/include/c++/4.6.3/sstream ****    *  which this page refers to as @c sb.
 371:/usr/include/c++/4.6.3/sstream ****   */
 372:/usr/include/c++/4.6.3/sstream ****   template <typename _CharT, typename _Traits, typename _Alloc>
 373:/usr/include/c++/4.6.3/sstream ****     class basic_ostringstream : public basic_ostream<_CharT, _Traits>
 374:/usr/include/c++/4.6.3/sstream ****     {
 375:/usr/include/c++/4.6.3/sstream ****     public:
 376:/usr/include/c++/4.6.3/sstream ****       // Types:
 377:/usr/include/c++/4.6.3/sstream ****       typedef _CharT 					char_type;
 378:/usr/include/c++/4.6.3/sstream ****       typedef _Traits 					traits_type;
 379:/usr/include/c++/4.6.3/sstream ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 380:/usr/include/c++/4.6.3/sstream ****       // 251. basic_stringbuf missing allocator_type
 381:/usr/include/c++/4.6.3/sstream ****       typedef _Alloc				       	allocator_type;
 382:/usr/include/c++/4.6.3/sstream ****       typedef typename traits_type::int_type 		int_type;
 383:/usr/include/c++/4.6.3/sstream ****       typedef typename traits_type::pos_type 		pos_type;
 384:/usr/include/c++/4.6.3/sstream ****       typedef typename traits_type::off_type 		off_type;
 385:/usr/include/c++/4.6.3/sstream **** 
 386:/usr/include/c++/4.6.3/sstream ****       // Non-standard types:
 387:/usr/include/c++/4.6.3/sstream ****       typedef basic_string<_CharT, _Traits, _Alloc> 	__string_type;
 388:/usr/include/c++/4.6.3/sstream ****       typedef basic_stringbuf<_CharT, _Traits, _Alloc> 	__stringbuf_type;
 389:/usr/include/c++/4.6.3/sstream ****       typedef basic_ostream<char_type, traits_type>	__ostream_type;
 390:/usr/include/c++/4.6.3/sstream **** 
 391:/usr/include/c++/4.6.3/sstream ****     private:
 392:/usr/include/c++/4.6.3/sstream ****       __stringbuf_type	_M_stringbuf;
 393:/usr/include/c++/4.6.3/sstream **** 
 394:/usr/include/c++/4.6.3/sstream ****     public:
 395:/usr/include/c++/4.6.3/sstream ****       // Constructors/destructor:
 396:/usr/include/c++/4.6.3/sstream ****       /**
 397:/usr/include/c++/4.6.3/sstream ****        *  @brief  Default constructor starts with an empty string buffer.
 398:/usr/include/c++/4.6.3/sstream ****        *  @param  mode  Whether the buffer can read, or write, or both.
 399:/usr/include/c++/4.6.3/sstream ****        *
 400:/usr/include/c++/4.6.3/sstream ****        *  @c ios_base::out is automatically included in @a mode.
 401:/usr/include/c++/4.6.3/sstream ****        *
 402:/usr/include/c++/4.6.3/sstream ****        *  Initializes @c sb using @c mode|out, and passes @c &sb to the base
 403:/usr/include/c++/4.6.3/sstream ****        *  class initializer.  Does not allocate any buffer.
 404:/usr/include/c++/4.6.3/sstream ****        *
 405:/usr/include/c++/4.6.3/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 406:/usr/include/c++/4.6.3/sstream ****        *  string class does its own memory management.
 407:/usr/include/c++/4.6.3/sstream ****       */
 408:/usr/include/c++/4.6.3/sstream ****       explicit
 409:/usr/include/c++/4.6.3/sstream ****       basic_ostringstream(ios_base::openmode __mode = ios_base::out)
 410:/usr/include/c++/4.6.3/sstream ****       : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
 411:/usr/include/c++/4.6.3/sstream ****       { this->init(&_M_stringbuf); }
 412:/usr/include/c++/4.6.3/sstream **** 
 413:/usr/include/c++/4.6.3/sstream ****       /**
 414:/usr/include/c++/4.6.3/sstream ****        *  @brief  Starts with an existing string buffer.
 415:/usr/include/c++/4.6.3/sstream ****        *  @param  str  A string to copy as a starting buffer.
 416:/usr/include/c++/4.6.3/sstream ****        *  @param  mode  Whether the buffer can read, or write, or both.
 417:/usr/include/c++/4.6.3/sstream ****        *
 418:/usr/include/c++/4.6.3/sstream ****        *  @c ios_base::out is automatically included in @a mode.
 419:/usr/include/c++/4.6.3/sstream ****        *
 420:/usr/include/c++/4.6.3/sstream ****        *  Initializes @c sb using @a str and @c mode|out, and passes @c &sb
 421:/usr/include/c++/4.6.3/sstream ****        *  to the base class initializer.
 422:/usr/include/c++/4.6.3/sstream ****        *
 423:/usr/include/c++/4.6.3/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 424:/usr/include/c++/4.6.3/sstream ****        *  string class does its own memory management.
 425:/usr/include/c++/4.6.3/sstream ****       */
 426:/usr/include/c++/4.6.3/sstream ****       explicit
 427:/usr/include/c++/4.6.3/sstream ****       basic_ostringstream(const __string_type& __str,
 428:/usr/include/c++/4.6.3/sstream **** 			  ios_base::openmode __mode = ios_base::out)
 429:/usr/include/c++/4.6.3/sstream ****       : __ostream_type(), _M_stringbuf(__str, __mode | ios_base::out)
 430:/usr/include/c++/4.6.3/sstream ****       { this->init(&_M_stringbuf); }
 431:/usr/include/c++/4.6.3/sstream **** 
 432:/usr/include/c++/4.6.3/sstream ****       /**
 433:/usr/include/c++/4.6.3/sstream ****        *  @brief  The destructor does nothing.
 434:/usr/include/c++/4.6.3/sstream ****        *
 435:/usr/include/c++/4.6.3/sstream ****        *  The buffer is deallocated by the stringbuf object, not the
 436:/usr/include/c++/4.6.3/sstream ****        *  formatting stream.
 437:/usr/include/c++/4.6.3/sstream ****       */
 438:/usr/include/c++/4.6.3/sstream ****       ~basic_ostringstream()
 439:/usr/include/c++/4.6.3/sstream ****       { }
 440:/usr/include/c++/4.6.3/sstream **** 
 441:/usr/include/c++/4.6.3/sstream ****       // Members:
 442:/usr/include/c++/4.6.3/sstream ****       /**
 443:/usr/include/c++/4.6.3/sstream ****        *  @brief  Accessing the underlying buffer.
 444:/usr/include/c++/4.6.3/sstream ****        *  @return  The current basic_stringbuf buffer.
 445:/usr/include/c++/4.6.3/sstream ****        *
 446:/usr/include/c++/4.6.3/sstream ****        *  This hides both signatures of std::basic_ios::rdbuf().
 447:/usr/include/c++/4.6.3/sstream ****       */
 448:/usr/include/c++/4.6.3/sstream ****       __stringbuf_type*
 449:/usr/include/c++/4.6.3/sstream ****       rdbuf() const
 450:/usr/include/c++/4.6.3/sstream ****       { return const_cast<__stringbuf_type*>(&_M_stringbuf); }
 451:/usr/include/c++/4.6.3/sstream **** 
 452:/usr/include/c++/4.6.3/sstream ****       /**
 453:/usr/include/c++/4.6.3/sstream ****        *  @brief  Copying out the string buffer.
 454:/usr/include/c++/4.6.3/sstream ****        *  @return  @c rdbuf()->str()
 455:/usr/include/c++/4.6.3/sstream ****       */
 456:/usr/include/c++/4.6.3/sstream ****       __string_type
 457:/usr/include/c++/4.6.3/sstream ****       str() const
 458:/usr/include/c++/4.6.3/sstream ****       { return _M_stringbuf.str(); }
 459:/usr/include/c++/4.6.3/sstream **** 
 460:/usr/include/c++/4.6.3/sstream ****       /**
 461:/usr/include/c++/4.6.3/sstream ****        *  @brief  Setting a new buffer.
 462:/usr/include/c++/4.6.3/sstream ****        *  @param  s  The string to use as a new sequence.
 463:/usr/include/c++/4.6.3/sstream ****        *
 464:/usr/include/c++/4.6.3/sstream ****        *  Calls @c rdbuf()->str(s).
 465:/usr/include/c++/4.6.3/sstream ****       */
 466:/usr/include/c++/4.6.3/sstream ****       void
 467:/usr/include/c++/4.6.3/sstream ****       str(const __string_type& __s)
 468:/usr/include/c++/4.6.3/sstream ****       { _M_stringbuf.str(__s); }
 469:/usr/include/c++/4.6.3/sstream ****     };
 470:/usr/include/c++/4.6.3/sstream **** 
 471:/usr/include/c++/4.6.3/sstream **** 
 472:/usr/include/c++/4.6.3/sstream ****   // [27.7.4] Template class basic_stringstream
 473:/usr/include/c++/4.6.3/sstream ****   /**
 474:/usr/include/c++/4.6.3/sstream ****    *  @brief  Controlling input and output for std::string.
 475:/usr/include/c++/4.6.3/sstream ****    *  @ingroup io
 476:/usr/include/c++/4.6.3/sstream ****    *
 477:/usr/include/c++/4.6.3/sstream ****    *  This class supports reading from and writing to objects of type
 478:/usr/include/c++/4.6.3/sstream ****    *  std::basic_string, using the inherited functions from
 479:/usr/include/c++/4.6.3/sstream ****    *  std::basic_iostream.  To control the associated sequence, an instance
 480:/usr/include/c++/4.6.3/sstream ****    *  of std::basic_stringbuf is used, which this page refers to as @c sb.
 481:/usr/include/c++/4.6.3/sstream ****   */
 482:/usr/include/c++/4.6.3/sstream ****   template <typename _CharT, typename _Traits, typename _Alloc>
 483:/usr/include/c++/4.6.3/sstream ****     class basic_stringstream : public basic_iostream<_CharT, _Traits>
 484:/usr/include/c++/4.6.3/sstream ****     {
 485:/usr/include/c++/4.6.3/sstream ****     public:
 486:/usr/include/c++/4.6.3/sstream ****       // Types:
 487:/usr/include/c++/4.6.3/sstream ****       typedef _CharT 					char_type;
 488:/usr/include/c++/4.6.3/sstream ****       typedef _Traits 					traits_type;
 489:/usr/include/c++/4.6.3/sstream ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 490:/usr/include/c++/4.6.3/sstream ****       // 251. basic_stringbuf missing allocator_type
 491:/usr/include/c++/4.6.3/sstream ****       typedef _Alloc				       	allocator_type;
 492:/usr/include/c++/4.6.3/sstream ****       typedef typename traits_type::int_type 		int_type;
 493:/usr/include/c++/4.6.3/sstream ****       typedef typename traits_type::pos_type 		pos_type;
 494:/usr/include/c++/4.6.3/sstream ****       typedef typename traits_type::off_type 		off_type;
 495:/usr/include/c++/4.6.3/sstream **** 
 496:/usr/include/c++/4.6.3/sstream ****       // Non-standard Types:
 497:/usr/include/c++/4.6.3/sstream ****       typedef basic_string<_CharT, _Traits, _Alloc> 	__string_type;
 498:/usr/include/c++/4.6.3/sstream ****       typedef basic_stringbuf<_CharT, _Traits, _Alloc> 	__stringbuf_type;
 499:/usr/include/c++/4.6.3/sstream ****       typedef basic_iostream<char_type, traits_type>	__iostream_type;
 500:/usr/include/c++/4.6.3/sstream **** 
 501:/usr/include/c++/4.6.3/sstream ****     private:
 502:/usr/include/c++/4.6.3/sstream ****       __stringbuf_type	_M_stringbuf;
 503:/usr/include/c++/4.6.3/sstream **** 
 504:/usr/include/c++/4.6.3/sstream ****     public:
 505:/usr/include/c++/4.6.3/sstream ****       // Constructors/destructors
 506:/usr/include/c++/4.6.3/sstream ****       /**
 507:/usr/include/c++/4.6.3/sstream ****        *  @brief  Default constructor starts with an empty string buffer.
 508:/usr/include/c++/4.6.3/sstream ****        *  @param  mode  Whether the buffer can read, or write, or both.
 509:/usr/include/c++/4.6.3/sstream ****        *
 510:/usr/include/c++/4.6.3/sstream ****        *  Initializes @c sb using @c mode, and passes @c &sb to the base
 511:/usr/include/c++/4.6.3/sstream ****        *  class initializer.  Does not allocate any buffer.
 512:/usr/include/c++/4.6.3/sstream ****        *
 513:/usr/include/c++/4.6.3/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 514:/usr/include/c++/4.6.3/sstream ****        *  string class does its own memory management.
 515:/usr/include/c++/4.6.3/sstream ****       */
 516:/usr/include/c++/4.6.3/sstream ****       explicit
 517:/usr/include/c++/4.6.3/sstream ****       basic_stringstream(ios_base::openmode __m = ios_base::out | ios_base::in)
 518:/usr/include/c++/4.6.3/sstream ****       : __iostream_type(), _M_stringbuf(__m)
 519:/usr/include/c++/4.6.3/sstream ****       { this->init(&_M_stringbuf); }
 520:/usr/include/c++/4.6.3/sstream **** 
 521:/usr/include/c++/4.6.3/sstream ****       /**
 522:/usr/include/c++/4.6.3/sstream ****        *  @brief  Starts with an existing string buffer.
 523:/usr/include/c++/4.6.3/sstream ****        *  @param  str  A string to copy as a starting buffer.
 524:/usr/include/c++/4.6.3/sstream ****        *  @param  mode  Whether the buffer can read, or write, or both.
 525:/usr/include/c++/4.6.3/sstream ****        *
 526:/usr/include/c++/4.6.3/sstream ****        *  Initializes @c sb using @a str and @c mode, and passes @c &sb
 527:/usr/include/c++/4.6.3/sstream ****        *  to the base class initializer.
 528:/usr/include/c++/4.6.3/sstream ****        *
 529:/usr/include/c++/4.6.3/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 530:/usr/include/c++/4.6.3/sstream ****        *  string class does its own memory management.
 531:/usr/include/c++/4.6.3/sstream ****       */
 532:/usr/include/c++/4.6.3/sstream ****       explicit
 533:/usr/include/c++/4.6.3/sstream ****       basic_stringstream(const __string_type& __str,
 534:/usr/include/c++/4.6.3/sstream **** 			 ios_base::openmode __m = ios_base::out | ios_base::in)
 535:/usr/include/c++/4.6.3/sstream ****       : __iostream_type(), _M_stringbuf(__str, __m)
 536:/usr/include/c++/4.6.3/sstream ****       { this->init(&_M_stringbuf); }
 537:/usr/include/c++/4.6.3/sstream **** 
 538:/usr/include/c++/4.6.3/sstream ****       /**
 539:/usr/include/c++/4.6.3/sstream ****        *  @brief  The destructor does nothing.
 540:/usr/include/c++/4.6.3/sstream ****        *
 541:/usr/include/c++/4.6.3/sstream ****        *  The buffer is deallocated by the stringbuf object, not the
 542:/usr/include/c++/4.6.3/sstream ****        *  formatting stream.
 543:/usr/include/c++/4.6.3/sstream ****       */
 544:/usr/include/c++/4.6.3/sstream ****       ~basic_stringstream()
 545:/usr/include/c++/4.6.3/sstream ****       { }
 546:/usr/include/c++/4.6.3/sstream **** 
 547:/usr/include/c++/4.6.3/sstream ****       // Members:
 548:/usr/include/c++/4.6.3/sstream ****       /**
 549:/usr/include/c++/4.6.3/sstream ****        *  @brief  Accessing the underlying buffer.
 550:/usr/include/c++/4.6.3/sstream ****        *  @return  The current basic_stringbuf buffer.
 551:/usr/include/c++/4.6.3/sstream ****        *
 552:/usr/include/c++/4.6.3/sstream ****        *  This hides both signatures of std::basic_ios::rdbuf().
 553:/usr/include/c++/4.6.3/sstream ****       */
 554:/usr/include/c++/4.6.3/sstream ****       __stringbuf_type*
 555:/usr/include/c++/4.6.3/sstream ****       rdbuf() const
 556:/usr/include/c++/4.6.3/sstream ****       { return const_cast<__stringbuf_type*>(&_M_stringbuf); }
 557:/usr/include/c++/4.6.3/sstream **** 
 558:/usr/include/c++/4.6.3/sstream ****       /**
 559:/usr/include/c++/4.6.3/sstream ****        *  @brief  Copying out the string buffer.
 560:/usr/include/c++/4.6.3/sstream ****        *  @return  @c rdbuf()->str()
 561:/usr/include/c++/4.6.3/sstream ****       */
 562:/usr/include/c++/4.6.3/sstream ****       __string_type
 563:/usr/include/c++/4.6.3/sstream ****       str() const
 4653              		.loc	28 563 9
 4654              	.Ltmp1343:
 4655 16f6 488DB598 		leaq	-616(%rbp), %rsi        # /usr/include/c++/4.6.3/sstream:563:9[ ./matrix-util.C:307:2 ]
 4655      FDFFFF
 4656 16fd 4C89FF   		movq	%r15, %rdi
 4657 1700 E8000000 		callq	_ZNKSt15basic_stringbufIcSt11char_traitsIcESaIcEE3strEv
 4657      00
 4658              	.Ltmp979:
 4659              	# BB#44:                                # %_ZNKSt18basic_stringstreamIcSt11char_traitsIcESaIcEE3str
 4660              	.Ltmp1344:
 4661              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4662              	.Ltmp1345:
 4663              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4664              	.Ltmp1346:
 4665              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4666              	.Ltmp1347:
 4667              		#DEBUG_VALUE: substr:__n <- -1+0
 4668              	.Ltmp1348:
 4669              		#DEBUG_VALUE: operator|:__a <- 16+0
 4670              	.Ltmp1349:
 4671              		#DEBUG_VALUE: operator|:__b <- 8+0
 4672 1705 488B0500 		movq	_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE(%rip), %rax
 4672      000000
 4673 170c 48898580 		movq	%rax, -640(%rbp)
 4673      FDFFFF
 4674 1713 488B40E8 		movq	-24(%rax), %rax
 4675 1717 488B0D00 		movq	_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE+64(%rip), %rcx
 4675      000000
 4676 171e 48898C05 		movq	%rcx, -640(%rbp,%rax)
 4676      80FDFFFF 
 4677 1726 488B0500 		movq	_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE+72(%rip), %rax
 4677      000000
 4678 172d 48898590 		movq	%rax, -624(%rbp)
 4678      FDFFFF
 4679 1734 48C78598 		movq	$_ZTVSt15basic_stringbufIcSt11char_traitsIcESaIcEE+16, -616(%rbp)
 4679      FDFFFF00 
 4679      000000
 4680 173f B8000000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %eax
 4680      00
 4681 1744 488BBDE0 		movq	-544(%rbp), %rdi
 4681      FDFFFF
 4682 174b 488D5FE8 		leaq	-24(%rdi), %rbx
 4683 174f 4839C3   		cmpq	%rax, %rbx
 4684 1752 7431     		je	.LBB3_50
 4685              	# BB#45:
 4686              	.Ltmp1350:
 4687              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4688              	.Ltmp1351:
 4689              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4690              	.Ltmp1352:
 4691              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4692              	.Ltmp1353:
 4693              		#DEBUG_VALUE: substr:__n <- -1+0
 4694              	.Ltmp1354:
 4695              		#DEBUG_VALUE: operator|:__a <- 16+0
 4696              	.Ltmp1355:
 4697              		#DEBUG_VALUE: operator|:__b <- 8+0
 4698 1754 4883C7F8 		addq	$-8, %rdi
 4699 1758 B8000000 		movl	$pthread_cancel, %eax
 4699      00
 4700 175d 4885C0   		testq	%rax, %rax
 4701              	.Ltmp1356:
 4702              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4703 1760 740C     		je	.LBB3_47
 4704              	# BB#46:
 4705              	.Ltmp1357:
 4706              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4707              	.Ltmp1358:
 4708              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4709              	.Ltmp1359:
 4710              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4711              	.Ltmp1360:
 4712              		#DEBUG_VALUE: substr:__n <- -1+0
 4713              	.Ltmp1361:
 4714              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4715              	.Ltmp1362:
 4716              		#DEBUG_VALUE: operator|:__a <- 16+0
 4717              	.Ltmp1363:
 4718              		#DEBUG_VALUE: operator|:__b <- 8+0
 4719 1762 BEFFFFFF 		movl	$-1, %esi
 4719      FF
 4720 1767 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 4720      00
 4721 176c EB07     		jmp	.LBB3_48
 4722              	.LBB3_47:
 4723              	.Ltmp1364:
 4724              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4725              	.Ltmp1365:
 4726              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4727              	.Ltmp1366:
 4728              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4729              	.Ltmp1367:
 4730              		#DEBUG_VALUE: substr:__n <- -1+0
 4731              	.Ltmp1368:
 4732              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4733              	.Ltmp1369:
 4734              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 4735              	.Ltmp1370:
 4736              		#DEBUG_VALUE: operator|:__a <- 16+0
 4737              	.Ltmp1371:
 4738              		#DEBUG_VALUE: operator|:__b <- 8+0
 4739 176e 8B07     		movl	(%rdi), %eax
 4740              	.Ltmp1372:
 4741              		#DEBUG_VALUE: __result <- EAX+0
 4742 1770 8D48FF   		leal	-1(%rax), %ecx
 4743 1773 890F     		movl	%ecx, (%rdi)
 4744              	.Ltmp1373:
 4745              		#DEBUG_VALUE: __result <- undef
 4746              	.LBB3_48:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 4747              	.Ltmp1374:
 4748              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4749              	.Ltmp1375:
 4750              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4751              	.Ltmp1376:
 4752              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4753              	.Ltmp1377:
 4754              		#DEBUG_VALUE: substr:__n <- -1+0
 4755              	.Ltmp1378:
 4756              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4757              	.Ltmp1379:
 4758              		#DEBUG_VALUE: operator|:__a <- 16+0
 4759              	.Ltmp1380:
 4760              		#DEBUG_VALUE: operator|:__b <- 8+0
 4761 1775 85C0     		testl	%eax, %eax
 4762 1777 7F0C     		jg	.LBB3_50
 4763              	# BB#49:
 4764              	.Ltmp1381:
 4765              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4766              	.Ltmp1382:
 4767              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4768              	.Ltmp1383:
 4769              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4770              	.Ltmp1384:
 4771              		#DEBUG_VALUE: substr:__n <- -1+0
 4772              	.Ltmp1385:
 4773              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4774              	.Ltmp1386:
 4775              		#DEBUG_VALUE: operator|:__a <- 16+0
 4776              	.Ltmp1387:
 4777              		#DEBUG_VALUE: operator|:__b <- 8+0
 4778 1779 488D75C8 		leaq	-56(%rbp), %rsi
 4779 177d 4889DF   		movq	%rbx, %rdi
 4780 1780 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 4780      00
 4781              	.LBB3_50:
 4782              	.Ltmp1388:
 4783              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4784              	.Ltmp1389:
 4785              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4786              	.Ltmp1390:
 4787              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4788              	.Ltmp1391:
 4789              		#DEBUG_VALUE: substr:__n <- -1+0
 4790              	.Ltmp1392:
 4791              		#DEBUG_VALUE: operator|:__a <- 16+0
 4792              	.Ltmp1393:
 4793              		#DEBUG_VALUE: operator|:__b <- 8+0
 4794 1785 48C78598 		movq	$_ZTVSt15basic_streambufIcSt11char_traitsIcEE+16, -616(%rbp)
 4794      FDFFFF00 
 4794      000000
 4795 1790 488DBDD0 		leaq	-560(%rbp), %rdi
 4795      FDFFFF
 4796 1797 E8000000 		callq	_ZNSt6localeD1Ev
 4796      00
 4797 179c 488B0500 		movq	_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE+8(%rip), %rax
 4797      000000
 4798              	.Ltmp1394:
 4799              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 4800 17a3 48898580 		movq	%rax, -640(%rbp)
 4800      FDFFFF
 4801 17aa 488B40E8 		movq	-24(%rax), %rax
 4802 17ae 488B0D00 		movq	_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE+48(%rip), %rcx
 4802      000000
 4803 17b5 48898C05 		movq	%rcx, -640(%rbp,%rax)
 4803      80FDFFFF 
 4804 17bd 488B0500 		movq	_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE+32(%rip), %rax
 4804      000000
 4805 17c4 48898590 		movq	%rax, -624(%rbp)
 4805      FDFFFF
 4806 17cb 488DBDE8 		leaq	-536(%rbp), %rdi
 4806      FDFFFF
 4807 17d2 488B0D00 		movq	_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE+24(%rip), %rcx
 4807      000000
 4808 17d9 488B1500 		movq	_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE+16(%rip), %rdx
 4808      000000
 4809 17e0 488B3500 		movq	_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE+40(%rip), %rsi
 4809      000000
 4810 17e7 4C8D8580 		leaq	-640(%rbp), %r8
 4810      FDFFFF
 4811 17ee 488B40E8 		movq	-24(%rax), %rax
 4812 17f2 4A897400 		movq	%rsi, 16(%rax,%r8)
 4812      10
 4813 17f7 48899580 		movq	%rdx, -640(%rbp)
 4813      FDFFFF
 4814 17fe 488B42E8 		movq	-24(%rdx), %rax
 4815 1802 48898C05 		movq	%rcx, -640(%rbp,%rax)
 4815      80FDFFFF 
 4816 180a 48C78588 		movq	$0, -632(%rbp)
 4816      FDFFFF00 
 4816      000000
 4817 1815 48C785E8 		movq	$_ZTVSt9basic_iosIcSt11char_traitsIcEE+16, -536(%rbp)
 4817      FDFFFF00 
 4817      000000
 4818              	.Ltmp984:
 4819 1820 E8000000 		callq	_ZNSt8ios_baseD2Ev
 4819      00
 4820              	.Ltmp985:
 4821              	# BB#51:                                # %_ZNSt18basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev.
 4822              	.Ltmp1395:
 4823              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4824              	.Ltmp1396:
 4825              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4826              	.Ltmp1397:
 4827              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4828              	.Ltmp1398:
 4829              		#DEBUG_VALUE: substr:__n <- -1+0
 4830              	.Ltmp1399:
 4831              		#DEBUG_VALUE: operator|:__a <- 16+0
 4832              	.Ltmp1400:
 4833              		#DEBUG_VALUE: operator|:__b <- 8+0
 4834              	.Ltmp1401:
 4835              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 4836 1825 488BBD08 		movq	-248(%rbp), %rdi
 4836      FFFFFF
 4837 182c 488D5FE8 		leaq	-24(%rdi), %rbx
 4838 1830 41BE0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r14d
 4838      0000
 4839 1836 4C39F3   		cmpq	%r14, %rbx
 4840 1839 0F847A02 		je	.LBB3_91
 4840      0000
 4841              	# BB#52:
 4842              	.Ltmp1402:
 4843              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4844              	.Ltmp1403:
 4845              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4846              	.Ltmp1404:
 4847              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4848              	.Ltmp1405:
 4849              		#DEBUG_VALUE: substr:__n <- -1+0
 4850              	.Ltmp1406:
 4851              		#DEBUG_VALUE: operator|:__a <- 16+0
 4852              	.Ltmp1407:
 4853              		#DEBUG_VALUE: operator|:__b <- 8+0
 4854              	.Ltmp1408:
 4855              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 4856 183f 4883C7F8 		addq	$-8, %rdi
 4857 1843 B8000000 		movl	$pthread_cancel, %eax
 4857      00
 4858 1848 4885C0   		testq	%rax, %rax
 4859              	.Ltmp1409:
 4860              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4861 184b 0F845102 		je	.LBB3_88
 4861      0000
 4862              	# BB#53:
 4863              	.Ltmp1410:
 4864              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4865              	.Ltmp1411:
 4866              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4867              	.Ltmp1412:
 4868              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4869              	.Ltmp1413:
 4870              		#DEBUG_VALUE: substr:__n <- -1+0
 4871              	.Ltmp1414:
 4872              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4873              	.Ltmp1415:
 4874              		#DEBUG_VALUE: operator|:__a <- 16+0
 4875              	.Ltmp1416:
 4876              		#DEBUG_VALUE: operator|:__b <- 8+0
 4877              	.Ltmp1417:
 4878              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 4879 1851 BEFFFFFF 		movl	$-1, %esi
 4879      FF
 4880 1856 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 4880      00
 4881 185b E9490200 		jmp	.LBB3_89
 4881      00
 4882              	.LBB3_54:
 4883              	.Ltmp936:
 4884              	.Ltmp1418:
 4885              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4886              	.Ltmp1419:
 4887              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4888              	.Ltmp1420:
 4889              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4890              	.Ltmp1421:
 4891              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4892              	.Ltmp1422:
 292:./matrix-util.C **** 	std::string f (inputfile), pre (prefix), suff (suffix);
 4893              		.loc	2 292 56
 4894              	.Ltmp1423:
 4895 1860 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:292:56
 4896 1863 E8000000 		callq	_Unwind_Resume_or_Rethrow # ./matrix-util.C:292:56
 4896      00
 4897              	.LBB3_55:
 4898              	.Ltmp939:
 4899              	.Ltmp1424:
 4900              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4901              	.Ltmp1425:
 4902              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4903 1868 E9AF0400 		jmp	.LBB3_145
 4903      00
 4904              	.LBB3_56:
 4905              	.Ltmp949:
 4906              	.Ltmp1426:
 4907              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4908              	.Ltmp1427:
 4909              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4910              	.Ltmp1428:
 4911              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4912              	.Ltmp1429:
 4913              		#DEBUG_VALUE: substr:__n <- -1+0
 4914 186d 488BBD00 		movq	-256(%rbp), %rdi
 4914      FFFFFF
 4915 1874 4C8D7FE8 		leaq	-24(%rdi), %r15
 4916 1878 B9000000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %ecx
 4916      00
 4917 187d 4939CF   		cmpq	%rcx, %r15
 298:./matrix-util.C **** 	file = f.substr(found+1);
 4918              		.loc	2 298 2
 4919              	.Ltmp1430:
 4920 1880 4889C3   		movq	%rax, %rbx              # ./matrix-util.C:298:2
 4921 1883 7508     		jne	.LBB3_58
 4922              	# BB#57:
 4923              	.Ltmp1431:
 4924              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4925              	.Ltmp1432:
 4926              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4927              	.Ltmp1433:
 4928              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4929              	.Ltmp1434:
 4930              		#DEBUG_VALUE: substr:__n <- -1+0
 4931 1885 4889D8   		movq	%rbx, %rax
 4932 1888 E9A40200 		jmp	.LBB3_101
 4932      00
 4933              	.LBB3_58:
 4934              	.Ltmp1435:
 4935              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4936              	.Ltmp1436:
 4937              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4938              	.Ltmp1437:
 4939              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4940              	.Ltmp1438:
 4941              		#DEBUG_VALUE: substr:__n <- -1+0
 4942 188d 4883C7F8 		addq	$-8, %rdi
 4943 1891 B8000000 		movl	$pthread_cancel, %eax
 4943      00
 4944 1896 4885C0   		testq	%rax, %rax
 4945              	.Ltmp1439:
 4946              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4947 1899 740C     		je	.LBB3_60
 4948              	# BB#59:
 4949              	.Ltmp1440:
 4950              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4951              	.Ltmp1441:
 4952              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4953              	.Ltmp1442:
 4954              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4955              	.Ltmp1443:
 4956              		#DEBUG_VALUE: substr:__n <- -1+0
 4957              	.Ltmp1444:
 4958              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4959 189b BEFFFFFF 		movl	$-1, %esi
 4959      FF
 4960 18a0 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 4960      00
 4961 18a5 EB07     		jmp	.LBB3_61
 4962              	.LBB3_60:
 4963              	.Ltmp1445:
 4964              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4965              	.Ltmp1446:
 4966              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4967              	.Ltmp1447:
 4968              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4969              	.Ltmp1448:
 4970              		#DEBUG_VALUE: substr:__n <- -1+0
 4971              	.Ltmp1449:
 4972              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4973              	.Ltmp1450:
 4974              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 4975 18a7 8B07     		movl	(%rdi), %eax
 4976              	.Ltmp1451:
 4977              		#DEBUG_VALUE: __result <- EAX+0
 4978 18a9 8D48FF   		leal	-1(%rax), %ecx
 4979 18ac 890F     		movl	%ecx, (%rdi)
 4980              	.Ltmp1452:
 4981              		#DEBUG_VALUE: __result <- undef
 4982              	.LBB3_61:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 4983              	.Ltmp1453:
 4984              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4985              	.Ltmp1454:
 4986              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 4987              	.Ltmp1455:
 4988              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 4989              	.Ltmp1456:
 4990              		#DEBUG_VALUE: substr:__n <- -1+0
 4991              	.Ltmp1457:
 4992              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 4993 18ae 85C0     		testl	%eax, %eax
 4994 18b0 7E08     		jle	.LBB3_63
 4995              	# BB#62:
 4996              	.Ltmp1458:
 4997              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 4998              	.Ltmp1459:
 4999              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5000              	.Ltmp1460:
 5001              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5002              	.Ltmp1461:
 5003              		#DEBUG_VALUE: substr:__n <- -1+0
 5004              	.Ltmp1462:
 5005              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5006 18b2 4889D8   		movq	%rbx, %rax
 5007 18b5 E9770200 		jmp	.LBB3_101
 5007      00
 5008              	.LBB3_63:
 5009              	.Ltmp1463:
 5010              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5011              	.Ltmp1464:
 5012              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5013              	.Ltmp1465:
 5014              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5015              	.Ltmp1466:
 5016              		#DEBUG_VALUE: substr:__n <- -1+0
 5017              	.Ltmp1467:
 5018              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5019 18ba 488D7580 		leaq	-128(%rbp), %rsi
 5020              	.LBB3_64:
 5021 18be 4C89FF   		movq	%r15, %rdi
 5022 18c1 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 5022      00
 5023 18c6 4889D8   		movq	%rbx, %rax
 5024 18c9 E9630200 		jmp	.LBB3_101
 5024      00
 5025              	.LBB3_65:
 5026              	.Ltmp954:
 5027              	.Ltmp1468:
 5028              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5029              	.Ltmp1469:
 5030              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5031              	.Ltmp1470:
 5032              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5033              	.Ltmp1471:
 5034              		#DEBUG_VALUE: substr:__pos <- 0+0
 5035              	.Ltmp1472:
 5036              		#DEBUG_VALUE: _M_check:__pos <- 0+0
 5037 18ce 488BBDF8 		movq	-264(%rbp), %rdi
 5037      FEFFFF
 5038 18d5 4C8D7FE8 		leaq	-24(%rdi), %r15
 5039 18d9 B9000000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %ecx
 5039      00
 5040 18de 4939CF   		cmpq	%rcx, %r15
 299:./matrix-util.C **** 	dir = f.substr(0, found);
 5041              		.loc	2 299 2
 5042              	.Ltmp1473:
 5043 18e1 4889C3   		movq	%rax, %rbx              # ./matrix-util.C:299:2
 5044 18e4 7508     		jne	.LBB3_67
 5045              	# BB#66:
 5046              	.Ltmp1474:
 5047              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5048              	.Ltmp1475:
 5049              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5050              	.Ltmp1476:
 5051              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5052              	.Ltmp1477:
 5053              		#DEBUG_VALUE: substr:__pos <- 0+0
 5054              	.Ltmp1478:
 5055              		#DEBUG_VALUE: _M_check:__pos <- 0+0
 5056 18e6 4889D8   		movq	%rbx, %rax
 5057 18e9 E9430200 		jmp	.LBB3_101
 5057      00
 5058              	.LBB3_67:
 5059              	.Ltmp1479:
 5060              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5061              	.Ltmp1480:
 5062              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5063              	.Ltmp1481:
 5064              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5065              	.Ltmp1482:
 5066              		#DEBUG_VALUE: substr:__pos <- 0+0
 5067              	.Ltmp1483:
 5068              		#DEBUG_VALUE: _M_check:__pos <- 0+0
 5069 18ee 4883C7F8 		addq	$-8, %rdi
 5070 18f2 B8000000 		movl	$pthread_cancel, %eax
 5070      00
 5071 18f7 4885C0   		testq	%rax, %rax
 5072              	.Ltmp1484:
 5073              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5074 18fa 740C     		je	.LBB3_69
 5075              	# BB#68:
 5076              	.Ltmp1485:
 5077              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5078              	.Ltmp1486:
 5079              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5080              	.Ltmp1487:
 5081              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5082              	.Ltmp1488:
 5083              		#DEBUG_VALUE: substr:__pos <- 0+0
 5084              	.Ltmp1489:
 5085              		#DEBUG_VALUE: _M_check:__pos <- 0+0
 5086              	.Ltmp1490:
 5087              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5088 18fc BEFFFFFF 		movl	$-1, %esi
 5088      FF
 5089 1901 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 5089      00
 5090 1906 EB07     		jmp	.LBB3_70
 5091              	.LBB3_69:
 5092              	.Ltmp1491:
 5093              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5094              	.Ltmp1492:
 5095              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5096              	.Ltmp1493:
 5097              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5098              	.Ltmp1494:
 5099              		#DEBUG_VALUE: substr:__pos <- 0+0
 5100              	.Ltmp1495:
 5101              		#DEBUG_VALUE: _M_check:__pos <- 0+0
 5102              	.Ltmp1496:
 5103              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5104              	.Ltmp1497:
 5105              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 5106 1908 8B07     		movl	(%rdi), %eax
 5107              	.Ltmp1498:
 5108              		#DEBUG_VALUE: __result <- EAX+0
 5109 190a 8D48FF   		leal	-1(%rax), %ecx
 5110 190d 890F     		movl	%ecx, (%rdi)
 5111              	.Ltmp1499:
 5112              		#DEBUG_VALUE: __result <- undef
 5113              	.LBB3_70:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 5114              	.Ltmp1500:
 5115              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5116              	.Ltmp1501:
 5117              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5118              	.Ltmp1502:
 5119              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5120              	.Ltmp1503:
 5121              		#DEBUG_VALUE: substr:__pos <- 0+0
 5122              	.Ltmp1504:
 5123              		#DEBUG_VALUE: _M_check:__pos <- 0+0
 5124              	.Ltmp1505:
 5125              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5126 190f 85C0     		testl	%eax, %eax
 5127 1911 7E08     		jle	.LBB3_72
 5128              	# BB#71:
 5129              	.Ltmp1506:
 5130              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5131              	.Ltmp1507:
 5132              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5133              	.Ltmp1508:
 5134              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5135              	.Ltmp1509:
 5136              		#DEBUG_VALUE: substr:__pos <- 0+0
 5137              	.Ltmp1510:
 5138              		#DEBUG_VALUE: _M_check:__pos <- 0+0
 5139              	.Ltmp1511:
 5140              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5141 1913 4889D8   		movq	%rbx, %rax
 5142 1916 E9160200 		jmp	.LBB3_101
 5142      00
 5143              	.LBB3_72:
 5144              	.Ltmp1512:
 5145              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5146              	.Ltmp1513:
 5147              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5148              	.Ltmp1514:
 5149              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5150              	.Ltmp1515:
 5151              		#DEBUG_VALUE: substr:__pos <- 0+0
 5152              	.Ltmp1516:
 5153              		#DEBUG_VALUE: _M_check:__pos <- 0+0
 5154              	.Ltmp1517:
 5155              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5156 191b 488D7588 		leaq	-120(%rbp), %rsi
 5157 191f EB9D     		jmp	.LBB3_64
 5158              	.LBB3_73:
 5159              	.Ltmp961:
 5160              	.Ltmp1518:
 5161              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5162              	.Ltmp1519:
 5163              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5164              	.Ltmp1520:
 5165              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5166              	.Ltmp1521:
 5167              		#DEBUG_VALUE: substr:__n <- -1+0
 5168 1921 488BBDF0 		movq	-272(%rbp), %rdi
 5168      FEFFFF
 5169 1928 4C8D7FE8 		leaq	-24(%rdi), %r15
 5170 192c B9000000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %ecx
 5170      00
 5171 1931 4939CF   		cmpq	%rcx, %r15
 302:./matrix-util.C **** 	dir = dir.substr(found+1);
 5172              		.loc	2 302 2
 5173              	.Ltmp1522:
 5174 1934 4889C3   		movq	%rax, %rbx              # ./matrix-util.C:302:2
 5175 1937 7508     		jne	.LBB3_75
 5176              	# BB#74:
 5177              	.Ltmp1523:
 5178              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5179              	.Ltmp1524:
 5180              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5181              	.Ltmp1525:
 5182              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5183              	.Ltmp1526:
 5184              		#DEBUG_VALUE: substr:__n <- -1+0
 5185 1939 4889D8   		movq	%rbx, %rax
 5186 193c E9F00100 		jmp	.LBB3_101
 5186      00
 5187              	.LBB3_75:
 5188              	.Ltmp1527:
 5189              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5190              	.Ltmp1528:
 5191              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5192              	.Ltmp1529:
 5193              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5194              	.Ltmp1530:
 5195              		#DEBUG_VALUE: substr:__n <- -1+0
 5196 1941 4883C7F8 		addq	$-8, %rdi
 5197 1945 B8000000 		movl	$pthread_cancel, %eax
 5197      00
 5198 194a 4885C0   		testq	%rax, %rax
 5199              	.Ltmp1531:
 5200              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5201 194d 740C     		je	.LBB3_77
 5202              	# BB#76:
 5203              	.Ltmp1532:
 5204              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5205              	.Ltmp1533:
 5206              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5207              	.Ltmp1534:
 5208              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5209              	.Ltmp1535:
 5210              		#DEBUG_VALUE: substr:__n <- -1+0
 5211              	.Ltmp1536:
 5212              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5213 194f BEFFFFFF 		movl	$-1, %esi
 5213      FF
 5214 1954 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 5214      00
 5215 1959 EB07     		jmp	.LBB3_78
 5216              	.LBB3_77:
 5217              	.Ltmp1537:
 5218              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5219              	.Ltmp1538:
 5220              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5221              	.Ltmp1539:
 5222              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5223              	.Ltmp1540:
 5224              		#DEBUG_VALUE: substr:__n <- -1+0
 5225              	.Ltmp1541:
 5226              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5227              	.Ltmp1542:
 5228              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 5229 195b 8B07     		movl	(%rdi), %eax
 5230              	.Ltmp1543:
 5231              		#DEBUG_VALUE: __result <- EAX+0
 5232 195d 8D48FF   		leal	-1(%rax), %ecx
 5233 1960 890F     		movl	%ecx, (%rdi)
 5234              	.Ltmp1544:
 5235              		#DEBUG_VALUE: __result <- undef
 5236              	.LBB3_78:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 5237              	.Ltmp1545:
 5238              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5239              	.Ltmp1546:
 5240              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5241              	.Ltmp1547:
 5242              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5243              	.Ltmp1548:
 5244              		#DEBUG_VALUE: substr:__n <- -1+0
 5245              	.Ltmp1549:
 5246              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5247 1962 85C0     		testl	%eax, %eax
 5248 1964 7E08     		jle	.LBB3_80
 5249              	# BB#79:
 5250              	.Ltmp1550:
 5251              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5252              	.Ltmp1551:
 5253              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5254              	.Ltmp1552:
 5255              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5256              	.Ltmp1553:
 5257              		#DEBUG_VALUE: substr:__n <- -1+0
 5258              	.Ltmp1554:
 5259              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5260 1966 4889D8   		movq	%rbx, %rax
 5261 1969 E9C30100 		jmp	.LBB3_101
 5261      00
 5262              	.LBB3_80:
 5263              	.Ltmp1555:
 5264              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5265              	.Ltmp1556:
 5266              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5267              	.Ltmp1557:
 5268              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5269              	.Ltmp1558:
 5270              		#DEBUG_VALUE: substr:__n <- -1+0
 5271              	.Ltmp1559:
 5272              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5273 196e 488D7590 		leaq	-112(%rbp), %rsi
 5274 1972 E947FFFF 		jmp	.LBB3_64
 5274      FF
 5275              	.LBB3_81:
 5276              	.Ltmp980:
 5277              	.Ltmp1560:
 5278              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5279              	.Ltmp1561:
 5280              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5281              	.Ltmp1562:
 5282              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5283              	.Ltmp1563:
 5284              		#DEBUG_VALUE: substr:__n <- -1+0
 5285              	.Ltmp1564:
 5286              		#DEBUG_VALUE: operator|:__a <- 16+0
 5287              	.Ltmp1565:
 5288              		#DEBUG_VALUE: operator|:__b <- 8+0
 305:./matrix-util.C **** 	ss << prefix << dir << "__" << file << suffix;
 5289              		.loc	2 305 2
 5290              	.Ltmp1566:
 5291 1977 4989C7   		movq	%rax, %r15              # ./matrix-util.C:305:2
 5292 197a 488B0500 		movq	_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE(%rip), %rax
 5292      000000
 5293 1981 48898580 		movq	%rax, -640(%rbp)
 5293      FDFFFF
 5294 1988 488B40E8 		movq	-24(%rax), %rax
 5295 198c 488B0D00 		movq	_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE+64(%rip), %rcx
 5295      000000
 5296 1993 48898C05 		movq	%rcx, -640(%rbp,%rax)
 5296      80FDFFFF 
 5297 199b 488B0500 		movq	_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE+72(%rip), %rax
 5297      000000
 5298 19a2 48898590 		movq	%rax, -624(%rbp)
 5298      FDFFFF
 5299 19a9 48C78598 		movq	$_ZTVSt15basic_stringbufIcSt11char_traitsIcESaIcEE+16, -616(%rbp)
 5299      FDFFFF00 
 5299      000000
 5300 19b4 B8000000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %eax
 5300      00
 5301 19b9 488BBDE0 		movq	-544(%rbp), %rdi
 5301      FDFFFF
 5302 19c0 488D5FE8 		leaq	-24(%rdi), %rbx
 5303 19c4 4839C3   		cmpq	%rax, %rbx
 5304 19c7 7431     		je	.LBB3_87
 5305              	# BB#82:
 5306              	.Ltmp1567:
 5307              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5308              	.Ltmp1568:
 5309              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5310              	.Ltmp1569:
 5311              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5312              	.Ltmp1570:
 5313              		#DEBUG_VALUE: substr:__n <- -1+0
 5314              	.Ltmp1571:
 5315              		#DEBUG_VALUE: operator|:__a <- 16+0
 5316              	.Ltmp1572:
 5317              		#DEBUG_VALUE: operator|:__b <- 8+0
 5318 19c9 4883C7F8 		addq	$-8, %rdi
 5319 19cd B8000000 		movl	$pthread_cancel, %eax
 5319      00
 5320 19d2 4885C0   		testq	%rax, %rax
 5321              	.Ltmp1573:
 5322              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5323 19d5 740C     		je	.LBB3_84
 5324              	# BB#83:
 5325              	.Ltmp1574:
 5326              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5327              	.Ltmp1575:
 5328              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5329              	.Ltmp1576:
 5330              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5331              	.Ltmp1577:
 5332              		#DEBUG_VALUE: substr:__n <- -1+0
 5333              	.Ltmp1578:
 5334              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5335              	.Ltmp1579:
 5336              		#DEBUG_VALUE: operator|:__a <- 16+0
 5337              	.Ltmp1580:
 5338              		#DEBUG_VALUE: operator|:__b <- 8+0
 5339 19d7 BEFFFFFF 		movl	$-1, %esi
 5339      FF
 5340 19dc E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 5340      00
 5341 19e1 EB07     		jmp	.LBB3_85
 5342              	.LBB3_84:
 5343              	.Ltmp1581:
 5344              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5345              	.Ltmp1582:
 5346              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5347              	.Ltmp1583:
 5348              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5349              	.Ltmp1584:
 5350              		#DEBUG_VALUE: substr:__n <- -1+0
 5351              	.Ltmp1585:
 5352              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5353              	.Ltmp1586:
 5354              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 5355              	.Ltmp1587:
 5356              		#DEBUG_VALUE: operator|:__a <- 16+0
 5357              	.Ltmp1588:
 5358              		#DEBUG_VALUE: operator|:__b <- 8+0
 5359 19e3 8B07     		movl	(%rdi), %eax
 5360              	.Ltmp1589:
 5361              		#DEBUG_VALUE: __result <- EAX+0
 5362 19e5 8D48FF   		leal	-1(%rax), %ecx
 5363 19e8 890F     		movl	%ecx, (%rdi)
 5364              	.Ltmp1590:
 5365              		#DEBUG_VALUE: __result <- undef
 5366              	.LBB3_85:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 5367              	.Ltmp1591:
 5368              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5369              	.Ltmp1592:
 5370              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5371              	.Ltmp1593:
 5372              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5373              	.Ltmp1594:
 5374              		#DEBUG_VALUE: substr:__n <- -1+0
 5375              	.Ltmp1595:
 5376              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5377              	.Ltmp1596:
 5378              		#DEBUG_VALUE: operator|:__a <- 16+0
 5379              	.Ltmp1597:
 5380              		#DEBUG_VALUE: operator|:__b <- 8+0
 5381 19ea 85C0     		testl	%eax, %eax
 5382 19ec 7F0C     		jg	.LBB3_87
 5383              	# BB#86:
 5384              	.Ltmp1598:
 5385              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5386              	.Ltmp1599:
 5387              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5388              	.Ltmp1600:
 5389              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5390              	.Ltmp1601:
 5391              		#DEBUG_VALUE: substr:__n <- -1+0
 5392              	.Ltmp1602:
 5393              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5394              	.Ltmp1603:
 5395              		#DEBUG_VALUE: operator|:__a <- 16+0
 5396              	.Ltmp1604:
 5397              		#DEBUG_VALUE: operator|:__b <- 8+0
 5398 19ee 488D75D0 		leaq	-48(%rbp), %rsi
 5399 19f2 4889DF   		movq	%rbx, %rdi
 5400 19f5 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 5400      00
 5401              	.LBB3_87:
 5402              	.Ltmp1605:
 5403              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5404              	.Ltmp1606:
 5405              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5406              	.Ltmp1607:
 5407              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5408              	.Ltmp1608:
 5409              		#DEBUG_VALUE: substr:__n <- -1+0
 5410              	.Ltmp1609:
 5411              		#DEBUG_VALUE: operator|:__a <- 16+0
 5412              	.Ltmp1610:
 5413              		#DEBUG_VALUE: operator|:__b <- 8+0
 5414 19fa 48C78598 		movq	$_ZTVSt15basic_streambufIcSt11char_traitsIcEE+16, -616(%rbp)
 5414      FDFFFF00 
 5414      000000
 5415 1a05 488DBDD0 		leaq	-560(%rbp), %rdi
 5415      FDFFFF
 5416 1a0c E8000000 		callq	_ZNSt6localeD1Ev
 5416      00
 5417 1a11 488B0500 		movq	_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE+8(%rip), %rax
 5417      000000
 5418              	.Ltmp1611:
 5419              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5420 1a18 48898580 		movq	%rax, -640(%rbp)
 5420      FDFFFF
 5421 1a1f 488B40E8 		movq	-24(%rax), %rax
 5422 1a23 488B0D00 		movq	_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE+48(%rip), %rcx
 5422      000000
 5423 1a2a 48898C05 		movq	%rcx, -640(%rbp,%rax)
 5423      80FDFFFF 
 5424 1a32 488B0500 		movq	_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE+32(%rip), %rax
 5424      000000
 5425 1a39 48898590 		movq	%rax, -624(%rbp)
 5425      FDFFFF
 5426 1a40 488DBDE8 		leaq	-536(%rbp), %rdi
 5426      FDFFFF
 5427 1a47 488B0D00 		movq	_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE+24(%rip), %rcx
 5427      000000
 5428 1a4e 488B1500 		movq	_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE+16(%rip), %rdx
 5428      000000
 5429 1a55 488B3500 		movq	_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE+40(%rip), %rsi
 5429      000000
 5430 1a5c 4C8D8580 		leaq	-640(%rbp), %r8
 5430      FDFFFF
 5431 1a63 488B40E8 		movq	-24(%rax), %rax
 5432 1a67 4A897400 		movq	%rsi, 16(%rax,%r8)
 5432      10
 5433 1a6c 48899580 		movq	%rdx, -640(%rbp)
 5433      FDFFFF
 5434 1a73 488B42E8 		movq	-24(%rdx), %rax
 5435 1a77 48898C05 		movq	%rcx, -640(%rbp,%rax)
 5435      80FDFFFF 
 5436 1a7f 48C78588 		movq	$0, -632(%rbp)
 5436      FDFFFF00 
 5436      000000
 5437 1a8a 48C785E8 		movq	$_ZTVSt9basic_iosIcSt11char_traitsIcEE+16, -536(%rbp)
 5437      FDFFFF00 
 5437      000000
 5438              	.Ltmp981:
 5439 1a95 E8000000 		callq	_ZNSt8ios_baseD2Ev
 5439      00
 5440              	.Ltmp982:
 5441 1a9a 4C89F8   		movq	%r15, %rax
 5442 1a9d E98F0000 		jmp	.LBB3_101
 5442      00
 5443              	.LBB3_88:
 5444              	.Ltmp1612:
 5445              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5446              	.Ltmp1613:
 5447              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5448              	.Ltmp1614:
 5449              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5450              	.Ltmp1615:
 5451              		#DEBUG_VALUE: substr:__n <- -1+0
 5452              	.Ltmp1616:
 5453              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5454              	.Ltmp1617:
 5455              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 5456              	.Ltmp1618:
 5457              		#DEBUG_VALUE: operator|:__a <- 16+0
 5458              	.Ltmp1619:
 5459              		#DEBUG_VALUE: operator|:__b <- 8+0
 5460              	.Ltmp1620:
 5461              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5462 1aa2 8B07     		movl	(%rdi), %eax
 5463              	.Ltmp1621:
 5464              		#DEBUG_VALUE: __result <- EAX+0
 5465 1aa4 8D48FF   		leal	-1(%rax), %ecx
 5466 1aa7 890F     		movl	%ecx, (%rdi)
 5467              	.Ltmp1622:
 5468              		#DEBUG_VALUE: __result <- undef
 5469              	.LBB3_89:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 5470              	.Ltmp1623:
 5471              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5472              	.Ltmp1624:
 5473              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5474              	.Ltmp1625:
 5475              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5476              	.Ltmp1626:
 5477              		#DEBUG_VALUE: substr:__n <- -1+0
 5478              	.Ltmp1627:
 5479              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5480              	.Ltmp1628:
 5481              		#DEBUG_VALUE: operator|:__a <- 16+0
 5482              	.Ltmp1629:
 5483              		#DEBUG_VALUE: operator|:__b <- 8+0
 5484              	.Ltmp1630:
 5485              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5486 1aa9 85C0     		testl	%eax, %eax
 5487 1aab 7F0C     		jg	.LBB3_91
 5488              	# BB#90:
 5489              	.Ltmp1631:
 5490              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5491              	.Ltmp1632:
 5492              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5493              	.Ltmp1633:
 5494              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5495              	.Ltmp1634:
 5496              		#DEBUG_VALUE: substr:__n <- -1+0
 5497              	.Ltmp1635:
 5498              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5499              	.Ltmp1636:
 5500              		#DEBUG_VALUE: operator|:__a <- 16+0
 5501              	.Ltmp1637:
 5502              		#DEBUG_VALUE: operator|:__b <- 8+0
 5503              	.Ltmp1638:
 5504              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5505 1aad 488D7598 		leaq	-104(%rbp), %rsi
 5506 1ab1 4889DF   		movq	%rbx, %rdi
 5507 1ab4 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 5507      00
 5508              	.LBB3_91:                               # %_ZNSsD1Ev.exit64
 5509              	.Ltmp1639:
 5510              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5511              	.Ltmp1640:
 5512              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5513              	.Ltmp1641:
 5514              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5515              	.Ltmp1642:
 5516              		#DEBUG_VALUE: substr:__n <- -1+0
 5517              	.Ltmp1643:
 5518              		#DEBUG_VALUE: operator|:__a <- 16+0
 5519              	.Ltmp1644:
 5520              		#DEBUG_VALUE: operator|:__b <- 8+0
 5521              	.Ltmp1645:
 5522              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5523 1ab9 488BBD10 		movq	-240(%rbp), %rdi
 5523      FFFFFF
 5524 1ac0 488D5FE8 		leaq	-24(%rdi), %rbx
 5525 1ac4 4C39F3   		cmpq	%r14, %rbx
 5526 1ac7 7431     		je	.LBB3_97
 5527              	# BB#92:
 5528              	.Ltmp1646:
 5529              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5530              	.Ltmp1647:
 5531              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5532              	.Ltmp1648:
 5533              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5534              	.Ltmp1649:
 5535              		#DEBUG_VALUE: substr:__n <- -1+0
 5536              	.Ltmp1650:
 5537              		#DEBUG_VALUE: operator|:__a <- 16+0
 5538              	.Ltmp1651:
 5539              		#DEBUG_VALUE: operator|:__b <- 8+0
 5540              	.Ltmp1652:
 5541              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5542 1ac9 4883C7F8 		addq	$-8, %rdi
 5543 1acd B8000000 		movl	$pthread_cancel, %eax
 5543      00
 5544 1ad2 4885C0   		testq	%rax, %rax
 5545              	.Ltmp1653:
 5546              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5547 1ad5 740C     		je	.LBB3_94
 5548              	# BB#93:
 5549              	.Ltmp1654:
 5550              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5551              	.Ltmp1655:
 5552              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5553              	.Ltmp1656:
 5554              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5555              	.Ltmp1657:
 5556              		#DEBUG_VALUE: substr:__n <- -1+0
 5557              	.Ltmp1658:
 5558              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5559              	.Ltmp1659:
 5560              		#DEBUG_VALUE: operator|:__a <- 16+0
 5561              	.Ltmp1660:
 5562              		#DEBUG_VALUE: operator|:__b <- 8+0
 5563              	.Ltmp1661:
 5564              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5565 1ad7 BEFFFFFF 		movl	$-1, %esi
 5565      FF
 5566 1adc E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 5566      00
 5567 1ae1 EB07     		jmp	.LBB3_95
 5568              	.LBB3_94:
 5569              	.Ltmp1662:
 5570              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5571              	.Ltmp1663:
 5572              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5573              	.Ltmp1664:
 5574              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5575              	.Ltmp1665:
 5576              		#DEBUG_VALUE: substr:__n <- -1+0
 5577              	.Ltmp1666:
 5578              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5579              	.Ltmp1667:
 5580              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 5581              	.Ltmp1668:
 5582              		#DEBUG_VALUE: operator|:__a <- 16+0
 5583              	.Ltmp1669:
 5584              		#DEBUG_VALUE: operator|:__b <- 8+0
 5585              	.Ltmp1670:
 5586              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5587 1ae3 8B07     		movl	(%rdi), %eax
 5588              	.Ltmp1671:
 5589              		#DEBUG_VALUE: __result <- EAX+0
 5590 1ae5 8D48FF   		leal	-1(%rax), %ecx
 5591 1ae8 890F     		movl	%ecx, (%rdi)
 5592              	.Ltmp1672:
 5593              		#DEBUG_VALUE: __result <- undef
 5594              	.LBB3_95:                               # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 5595              	.Ltmp1673:
 5596              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5597              	.Ltmp1674:
 5598              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5599              	.Ltmp1675:
 5600              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5601              	.Ltmp1676:
 5602              		#DEBUG_VALUE: substr:__n <- -1+0
 5603              	.Ltmp1677:
 5604              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5605              	.Ltmp1678:
 5606              		#DEBUG_VALUE: operator|:__a <- 16+0
 5607              	.Ltmp1679:
 5608              		#DEBUG_VALUE: operator|:__b <- 8+0
 5609              	.Ltmp1680:
 5610              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5611 1aea 85C0     		testl	%eax, %eax
 5612 1aec 7F0C     		jg	.LBB3_97
 5613              	# BB#96:
 5614              	.Ltmp1681:
 5615              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5616              	.Ltmp1682:
 5617              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5618              	.Ltmp1683:
 5619              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5620              	.Ltmp1684:
 5621              		#DEBUG_VALUE: substr:__n <- -1+0
 5622              	.Ltmp1685:
 5623              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5624              	.Ltmp1686:
 5625              		#DEBUG_VALUE: operator|:__a <- 16+0
 5626              	.Ltmp1687:
 5627              		#DEBUG_VALUE: operator|:__b <- 8+0
 5628              	.Ltmp1688:
 5629              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5630 1aee 488D75A0 		leaq	-96(%rbp), %rsi
 5631 1af2 4889DF   		movq	%rbx, %rdi
 5632 1af5 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 5632      00
 5633              	.LBB3_97:                               # %_ZNSsD1Ev.exit67
 5634              	.Ltmp1689:
 5635              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5636              	.Ltmp1690:
 5637              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5638              	.Ltmp1691:
 5639              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5640              	.Ltmp1692:
 5641              		#DEBUG_VALUE: substr:__n <- -1+0
 5642              	.Ltmp1693:
 5643              		#DEBUG_VALUE: operator|:__a <- 16+0
 5644              	.Ltmp1694:
 5645              		#DEBUG_VALUE: operator|:__b <- 8+0
 5646              	.Ltmp1695:
 5647              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5648 1afa 488BBD20 		movq	-224(%rbp), %rdi
 5648      FFFFFF
 5649 1b01 4C8D77E8 		leaq	-24(%rdi), %r14
 5650 1b05 BB000000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %ebx
 5650      00
 5651 1b0a 4939DE   		cmpq	%rbx, %r14
 5652 1b0d 0F84A900 		je	.LBB3_113
 5652      0000
 5653              	# BB#98:
 5654              	.Ltmp1696:
 5655              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5656              	.Ltmp1697:
 5657              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5658              	.Ltmp1698:
 5659              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5660              	.Ltmp1699:
 5661              		#DEBUG_VALUE: substr:__n <- -1+0
 5662              	.Ltmp1700:
 5663              		#DEBUG_VALUE: operator|:__a <- 16+0
 5664              	.Ltmp1701:
 5665              		#DEBUG_VALUE: operator|:__b <- 8+0
 5666              	.Ltmp1702:
 5667              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5668 1b13 4883C7F8 		addq	$-8, %rdi
 5669 1b17 B8000000 		movl	$pthread_cancel, %eax
 5669      00
 5670 1b1c 4885C0   		testq	%rax, %rax
 5671              	.Ltmp1703:
 5672              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5673 1b1f 0F848000 		je	.LBB3_110
 5673      0000
 5674              	# BB#99:
 5675              	.Ltmp1704:
 5676              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5677              	.Ltmp1705:
 5678              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5679              	.Ltmp1706:
 5680              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5681              	.Ltmp1707:
 5682              		#DEBUG_VALUE: substr:__n <- -1+0
 5683              	.Ltmp1708:
 5684              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5685              	.Ltmp1709:
 5686              		#DEBUG_VALUE: operator|:__a <- 16+0
 5687              	.Ltmp1710:
 5688              		#DEBUG_VALUE: operator|:__b <- 8+0
 5689              	.Ltmp1711:
 5690              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5691 1b25 BEFFFFFF 		movl	$-1, %esi
 5691      FF
 5692 1b2a E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 5692      00
 5693 1b2f EB7B     		jmp	.LBB3_111
 5694              	.LBB3_100:
 5695              	.Ltmp990:
 5696              	.Ltmp1712:
 5697              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5698              	.Ltmp1713:
 5699              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5700              	.Ltmp1714:
 5701              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5702              	.LBB3_101:                              # %_ZNSsD1Ev.exit51
 5703              	.Ltmp1715:
 5704              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5705              	.Ltmp1716:
 5706              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5707              	.Ltmp1717:
 5708              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5709 1b31 4989C7   		movq	%rax, %r15
 5710 1b34 488BBD08 		movq	-248(%rbp), %rdi
 5710      FFFFFF
 5711 1b3b 488D5FE8 		leaq	-24(%rdi), %rbx
 5712 1b3f 41BE0000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %r14d
 5712      0000
 5713 1b45 4C39F3   		cmpq	%r14, %rbx
 5714 1b48 7431     		je	.LBB3_107
 5715              	# BB#102:
 5716              	.Ltmp1718:
 5717              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5718              	.Ltmp1719:
 5719              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5720              	.Ltmp1720:
 5721              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5722 1b4a 4883C7F8 		addq	$-8, %rdi
 5723 1b4e B8000000 		movl	$pthread_cancel, %eax
 5723      00
 5724 1b53 4885C0   		testq	%rax, %rax
 5725              	.Ltmp1721:
 5726              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5727 1b56 740C     		je	.LBB3_104
 5728              	# BB#103:
 5729              	.Ltmp1722:
 5730              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5731              	.Ltmp1723:
 5732              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5733              	.Ltmp1724:
 5734              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5735              	.Ltmp1725:
 5736              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5737 1b58 BEFFFFFF 		movl	$-1, %esi
 5737      FF
 5738 1b5d E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 5738      00
 5739 1b62 EB07     		jmp	.LBB3_105
 5740              	.LBB3_104:
 5741              	.Ltmp1726:
 5742              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5743              	.Ltmp1727:
 5744              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5745              	.Ltmp1728:
 5746              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5747              	.Ltmp1729:
 5748              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5749              	.Ltmp1730:
 5750              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 5751 1b64 8B07     		movl	(%rdi), %eax
 5752              	.Ltmp1731:
 5753              		#DEBUG_VALUE: __result <- EAX+0
 5754 1b66 8D48FF   		leal	-1(%rax), %ecx
 5755 1b69 890F     		movl	%ecx, (%rdi)
 5756              	.Ltmp1732:
 5757              		#DEBUG_VALUE: __result <- undef
 5758              	.LBB3_105:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 5759              	.Ltmp1733:
 5760              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5761              	.Ltmp1734:
 5762              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5763              	.Ltmp1735:
 5764              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5765              	.Ltmp1736:
 5766              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5767 1b6b 85C0     		testl	%eax, %eax
 5768 1b6d 7F0C     		jg	.LBB3_107
 5769              	# BB#106:
 5770              	.Ltmp1737:
 5771              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5772              	.Ltmp1738:
 5773              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5774              	.Ltmp1739:
 5775              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5776              	.Ltmp1740:
 5777              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5778 1b6f 488D75A8 		leaq	-88(%rbp), %rsi
 5779 1b73 4889DF   		movq	%rbx, %rdi
 5780 1b76 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 5780      00
 5781              	.LBB3_107:                              # %_ZNSsD1Ev.exit70
 5782              	.Ltmp1741:
 5783              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5784              	.Ltmp1742:
 5785              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5786              	.Ltmp1743:
 5787              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5788 1b7b 488BBD10 		movq	-240(%rbp), %rdi
 5788      FFFFFF
 5789 1b82 488D5FE8 		leaq	-24(%rdi), %rbx
 5790 1b86 4C39F3   		cmpq	%r14, %rbx
 5791 1b89 7472     		je	.LBB3_119
 5792              	# BB#108:
 5793              	.Ltmp1744:
 5794              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5795              	.Ltmp1745:
 5796              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5797              	.Ltmp1746:
 5798              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5799 1b8b 4883C7F8 		addq	$-8, %rdi
 5800 1b8f B8000000 		movl	$pthread_cancel, %eax
 5800      00
 5801 1b94 4885C0   		testq	%rax, %rax
 5802              	.Ltmp1747:
 5803              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5804 1b97 744D     		je	.LBB3_116
 5805              	# BB#109:
 5806              	.Ltmp1748:
 5807              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5808              	.Ltmp1749:
 5809              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5810              	.Ltmp1750:
 5811              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5812              	.Ltmp1751:
 5813              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5814 1b99 BEFFFFFF 		movl	$-1, %esi
 5814      FF
 5815 1b9e E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 5815      00
 5816 1ba3 EB48     		jmp	.LBB3_117
 5817              	.LBB3_110:
 5818              	.Ltmp1752:
 5819              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5820              	.Ltmp1753:
 5821              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5822              	.Ltmp1754:
 5823              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5824              	.Ltmp1755:
 5825              		#DEBUG_VALUE: substr:__n <- -1+0
 5826              	.Ltmp1756:
 5827              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5828              	.Ltmp1757:
 5829              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 5830              	.Ltmp1758:
 5831              		#DEBUG_VALUE: operator|:__a <- 16+0
 5832              	.Ltmp1759:
 5833              		#DEBUG_VALUE: operator|:__b <- 8+0
 5834              	.Ltmp1760:
 5835              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5836 1ba5 8B07     		movl	(%rdi), %eax
 5837              	.Ltmp1761:
 5838              		#DEBUG_VALUE: __result <- EAX+0
 5839 1ba7 8D48FF   		leal	-1(%rax), %ecx
 5840 1baa 890F     		movl	%ecx, (%rdi)
 5841              	.Ltmp1762:
 5842              		#DEBUG_VALUE: __result <- undef
 5843              	.LBB3_111:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 5844              	.Ltmp1763:
 5845              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5846              	.Ltmp1764:
 5847              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5848              	.Ltmp1765:
 5849              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5850              	.Ltmp1766:
 5851              		#DEBUG_VALUE: substr:__n <- -1+0
 5852              	.Ltmp1767:
 5853              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5854              	.Ltmp1768:
 5855              		#DEBUG_VALUE: operator|:__a <- 16+0
 5856              	.Ltmp1769:
 5857              		#DEBUG_VALUE: operator|:__b <- 8+0
 5858              	.Ltmp1770:
 5859              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5860 1bac 85C0     		testl	%eax, %eax
 5861 1bae 7F0C     		jg	.LBB3_113
 5862              	# BB#112:
 5863              	.Ltmp1771:
 5864              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5865              	.Ltmp1772:
 5866              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5867              	.Ltmp1773:
 5868              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5869              	.Ltmp1774:
 5870              		#DEBUG_VALUE: substr:__n <- -1+0
 5871              	.Ltmp1775:
 5872              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5873              	.Ltmp1776:
 5874              		#DEBUG_VALUE: operator|:__a <- 16+0
 5875              	.Ltmp1777:
 5876              		#DEBUG_VALUE: operator|:__b <- 8+0
 5877              	.Ltmp1778:
 5878              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5879 1bb0 488D75B0 		leaq	-80(%rbp), %rsi
 5880 1bb4 4C89F7   		movq	%r14, %rdi
 5881 1bb7 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 5881      00
 5882              	.LBB3_113:                              # %_ZNSsD1Ev.exit73
 5883              	.Ltmp1779:
 5884              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5885              	.Ltmp1780:
 5886              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5887              	.Ltmp1781:
 5888              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5889              	.Ltmp1782:
 5890              		#DEBUG_VALUE: substr:__n <- -1+0
 5891              	.Ltmp1783:
 5892              		#DEBUG_VALUE: operator|:__a <- 16+0
 5893              	.Ltmp1784:
 5894              		#DEBUG_VALUE: operator|:__b <- 8+0
 5895              	.Ltmp1785:
 5896              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5897 1bbc 488BBD30 		movq	-208(%rbp), %rdi
 5897      FFFFFF
 5898 1bc3 4C8D77E8 		leaq	-24(%rdi), %r14
 5899 1bc7 4939DE   		cmpq	%rbx, %r14
 5900 1bca 7465     		je	.LBB3_124
 5901              	# BB#114:
 5902              	.Ltmp1786:
 5903              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5904              	.Ltmp1787:
 5905              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5906              	.Ltmp1788:
 5907              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5908              	.Ltmp1789:
 5909              		#DEBUG_VALUE: substr:__n <- -1+0
 5910              	.Ltmp1790:
 5911              		#DEBUG_VALUE: operator|:__a <- 16+0
 5912              	.Ltmp1791:
 5913              		#DEBUG_VALUE: operator|:__b <- 8+0
 5914              	.Ltmp1792:
 5915              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5916 1bcc 4883C7F8 		addq	$-8, %rdi
 5917 1bd0 B8000000 		movl	$pthread_cancel, %eax
 5917      00
 5918 1bd5 4885C0   		testq	%rax, %rax
 5919              	.Ltmp1793:
 5920              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5921 1bd8 7440     		je	.LBB3_121
 5922              	# BB#115:
 5923              	.Ltmp1794:
 5924              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5925              	.Ltmp1795:
 5926              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5927              	.Ltmp1796:
 5928              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5929              	.Ltmp1797:
 5930              		#DEBUG_VALUE: substr:__n <- -1+0
 5931              	.Ltmp1798:
 5932              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5933              	.Ltmp1799:
 5934              		#DEBUG_VALUE: operator|:__a <- 16+0
 5935              	.Ltmp1800:
 5936              		#DEBUG_VALUE: operator|:__b <- 8+0
 5937              	.Ltmp1801:
 5938              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 5939 1bda BEFFFFFF 		movl	$-1, %esi
 5939      FF
 5940 1bdf E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 5940      00
 5941 1be4 EB3B     		jmp	.LBB3_122
 5942              	.LBB3_116:
 5943              	.Ltmp1802:
 5944              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5945              	.Ltmp1803:
 5946              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5947              	.Ltmp1804:
 5948              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5949              	.Ltmp1805:
 5950              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5951              	.Ltmp1806:
 5952              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 5953 1be6 8B07     		movl	(%rdi), %eax
 5954              	.Ltmp1807:
 5955              		#DEBUG_VALUE: __result <- EAX+0
 5956 1be8 8D48FF   		leal	-1(%rax), %ecx
 5957 1beb 890F     		movl	%ecx, (%rdi)
 5958              	.Ltmp1808:
 5959              		#DEBUG_VALUE: __result <- undef
 5960              	.LBB3_117:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 5961              	.Ltmp1809:
 5962              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5963              	.Ltmp1810:
 5964              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5965              	.Ltmp1811:
 5966              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5967              	.Ltmp1812:
 5968              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5969 1bed 85C0     		testl	%eax, %eax
 5970 1bef 7F0C     		jg	.LBB3_119
 5971              	# BB#118:
 5972              	.Ltmp1813:
 5973              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5974              	.Ltmp1814:
 5975              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5976              	.Ltmp1815:
 5977              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5978              	.Ltmp1816:
 5979              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 5980 1bf1 488D75B8 		leaq	-72(%rbp), %rsi
 5981 1bf5 4889DF   		movq	%rbx, %rdi
 5982 1bf8 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 5982      00
 5983              	.LBB3_119:                              # %_ZNSsD1Ev.exit76
 5984              	.Ltmp1817:
 5985              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5986              	.Ltmp1818:
 5987              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 5988              	.Ltmp1819:
 5989              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 5990 1bfd 488BBD20 		movq	-224(%rbp), %rdi
 5990      FFFFFF
 5991 1c04 488D5FE8 		leaq	-24(%rdi), %rbx
 5992 1c08 B8000000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %eax
 5992      00
 5993 1c0d 4839C3   		cmpq	%rax, %rbx
 5994 1c10 754E     		jne	.LBB3_127
 5995              	# BB#120:
 5996              	.Ltmp1820:
 5997              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 5998              	.Ltmp1821:
 5999              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6000              	.Ltmp1822:
 6001              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 6002 1c12 4C89F8   		movq	%r15, %rax
 6003 1c15 E9B30000 		jmp	.LBB3_138
 6003      00
 6004              	.LBB3_121:
 6005              	.Ltmp1823:
 6006              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6007              	.Ltmp1824:
 6008              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6009              	.Ltmp1825:
 6010              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 6011              	.Ltmp1826:
 6012              		#DEBUG_VALUE: substr:__n <- -1+0
 6013              	.Ltmp1827:
 6014              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6015              	.Ltmp1828:
 6016              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 6017              	.Ltmp1829:
 6018              		#DEBUG_VALUE: operator|:__a <- 16+0
 6019              	.Ltmp1830:
 6020              		#DEBUG_VALUE: operator|:__b <- 8+0
 6021              	.Ltmp1831:
 6022              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 6023 1c1a 8B07     		movl	(%rdi), %eax
 6024              	.Ltmp1832:
 6025              		#DEBUG_VALUE: __result <- EAX+0
 6026 1c1c 8D48FF   		leal	-1(%rax), %ecx
 6027 1c1f 890F     		movl	%ecx, (%rdi)
 6028              	.Ltmp1833:
 6029              		#DEBUG_VALUE: __result <- undef
 6030              	.LBB3_122:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 6031              	.Ltmp1834:
 6032              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6033              	.Ltmp1835:
 6034              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6035              	.Ltmp1836:
 6036              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 6037              	.Ltmp1837:
 6038              		#DEBUG_VALUE: substr:__n <- -1+0
 6039              	.Ltmp1838:
 6040              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6041              	.Ltmp1839:
 6042              		#DEBUG_VALUE: operator|:__a <- 16+0
 6043              	.Ltmp1840:
 6044              		#DEBUG_VALUE: operator|:__b <- 8+0
 6045              	.Ltmp1841:
 6046              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 6047 1c21 85C0     		testl	%eax, %eax
 6048 1c23 7F0C     		jg	.LBB3_124
 6049              	# BB#123:
 6050              	.Ltmp1842:
 6051              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6052              	.Ltmp1843:
 6053              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6054              	.Ltmp1844:
 6055              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 6056              	.Ltmp1845:
 6057              		#DEBUG_VALUE: substr:__n <- -1+0
 6058              	.Ltmp1846:
 6059              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6060              	.Ltmp1847:
 6061              		#DEBUG_VALUE: operator|:__a <- 16+0
 6062              	.Ltmp1848:
 6063              		#DEBUG_VALUE: operator|:__b <- 8+0
 6064              	.Ltmp1849:
 6065              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 6066 1c25 488D75C0 		leaq	-64(%rbp), %rsi
 6067 1c29 4C89F7   		movq	%r14, %rdi
 6068 1c2c E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 6068      00
 6069              	.LBB3_124:                              # %_ZNSsD1Ev.exit79
 6070              	.Ltmp1850:
 6071              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6072              	.Ltmp1851:
 6073              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6074              	.Ltmp1852:
 6075              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 6076              	.Ltmp1853:
 6077              		#DEBUG_VALUE: substr:__n <- -1+0
 6078              	.Ltmp1854:
 6079              		#DEBUG_VALUE: operator|:__a <- 16+0
 6080              	.Ltmp1855:
 6081              		#DEBUG_VALUE: operator|:__b <- 8+0
 6082              	.Ltmp1856:
 6083              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 6084 1c31 488BBD40 		movq	-192(%rbp), %rdi
 6084      FFFFFF
 6085 1c38 488D5FE8 		leaq	-24(%rdi), %rbx
 6086 1c3c B8000000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %eax
 6086      00
 6087 1c41 4839C3   		cmpq	%rax, %rbx
 6088 1c44 7472     		je	.LBB3_136
 6089              	# BB#125:
 6090              	.Ltmp1857:
 6091              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6092              	.Ltmp1858:
 6093              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6094              	.Ltmp1859:
 6095              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 6096              	.Ltmp1860:
 6097              		#DEBUG_VALUE: substr:__n <- -1+0
 6098              	.Ltmp1861:
 6099              		#DEBUG_VALUE: operator|:__a <- 16+0
 6100              	.Ltmp1862:
 6101              		#DEBUG_VALUE: operator|:__b <- 8+0
 6102              	.Ltmp1863:
 6103              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 6104 1c46 4883C7F8 		addq	$-8, %rdi
 6105 1c4a B8000000 		movl	$pthread_cancel, %eax
 6105      00
 6106 1c4f 4885C0   		testq	%rax, %rax
 6107              	.Ltmp1864:
 6108              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6109 1c52 744A     		je	.LBB3_133
 6110              	# BB#126:
 6111              	.Ltmp1865:
 6112              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6113              	.Ltmp1866:
 6114              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6115              	.Ltmp1867:
 6116              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 6117              	.Ltmp1868:
 6118              		#DEBUG_VALUE: substr:__n <- -1+0
 6119              	.Ltmp1869:
 6120              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6121              	.Ltmp1870:
 6122              		#DEBUG_VALUE: operator|:__a <- 16+0
 6123              	.Ltmp1871:
 6124              		#DEBUG_VALUE: operator|:__b <- 8+0
 6125              	.Ltmp1872:
 6126              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 6127 1c54 BEFFFFFF 		movl	$-1, %esi
 6127      FF
 6128 1c59 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 6128      00
 6129 1c5e EB45     		jmp	.LBB3_134
 6130              	.LBB3_127:
 6131              	.Ltmp1873:
 6132              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6133              	.Ltmp1874:
 6134              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6135              	.Ltmp1875:
 6136              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 6137 1c60 4883C7F8 		addq	$-8, %rdi
 6138 1c64 B8000000 		movl	$pthread_cancel, %eax
 6138      00
 6139 1c69 4885C0   		testq	%rax, %rax
 6140              	.Ltmp1876:
 6141              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6142 1c6c 740C     		je	.LBB3_129
 6143              	# BB#128:
 6144              	.Ltmp1877:
 6145              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6146              	.Ltmp1878:
 6147              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6148              	.Ltmp1879:
 6149              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 6150              	.Ltmp1880:
 6151              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6152 1c6e BEFFFFFF 		movl	$-1, %esi
 6152      FF
 6153 1c73 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 6153      00
 6154 1c78 EB07     		jmp	.LBB3_130
 6155              	.LBB3_129:
 6156              	.Ltmp1881:
 6157              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6158              	.Ltmp1882:
 6159              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6160              	.Ltmp1883:
 6161              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 6162              	.Ltmp1884:
 6163              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6164              	.Ltmp1885:
 6165              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 6166 1c7a 8B07     		movl	(%rdi), %eax
 6167              	.Ltmp1886:
 6168              		#DEBUG_VALUE: __result <- EAX+0
 6169 1c7c 8D48FF   		leal	-1(%rax), %ecx
 6170 1c7f 890F     		movl	%ecx, (%rdi)
 6171              	.Ltmp1887:
 6172              		#DEBUG_VALUE: __result <- undef
 6173              	.LBB3_130:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 6174              	.Ltmp1888:
 6175              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6176              	.Ltmp1889:
 6177              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6178              	.Ltmp1890:
 6179              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 6180              	.Ltmp1891:
 6181              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6182 1c81 85C0     		testl	%eax, %eax
 6183 1c83 7E05     		jle	.LBB3_132
 6184              	# BB#131:
 6185              	.Ltmp1892:
 6186              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6187              	.Ltmp1893:
 6188              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6189              	.Ltmp1894:
 6190              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 6191              	.Ltmp1895:
 6192              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6193 1c85 4C89F8   		movq	%r15, %rax
 6194 1c88 EB43     		jmp	.LBB3_138
 6195              	.LBB3_132:
 6196              	.Ltmp1896:
 6197              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6198              	.Ltmp1897:
 6199              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6200              	.Ltmp1898:
 6201              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 6202              	.Ltmp1899:
 6203              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6204 1c8a 488DB560 		leaq	-160(%rbp), %rsi
 6204      FFFFFF
 6205 1c91 4889DF   		movq	%rbx, %rdi
 6206 1c94 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 6206      00
 6207 1c99 4C89F8   		movq	%r15, %rax
 6208 1c9c EB2F     		jmp	.LBB3_138
 6209              	.LBB3_133:
 6210              	.Ltmp1900:
 6211              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6212              	.Ltmp1901:
 6213              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6214              	.Ltmp1902:
 6215              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 6216              	.Ltmp1903:
 6217              		#DEBUG_VALUE: substr:__n <- -1+0
 6218              	.Ltmp1904:
 6219              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6220              	.Ltmp1905:
 6221              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 6222              	.Ltmp1906:
 6223              		#DEBUG_VALUE: operator|:__a <- 16+0
 6224              	.Ltmp1907:
 6225              		#DEBUG_VALUE: operator|:__b <- 8+0
 6226              	.Ltmp1908:
 6227              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 6228 1c9e 8B07     		movl	(%rdi), %eax
 6229              	.Ltmp1909:
 6230              		#DEBUG_VALUE: __result <- EAX+0
 6231 1ca0 8D48FF   		leal	-1(%rax), %ecx
 6232 1ca3 890F     		movl	%ecx, (%rdi)
 6233              	.Ltmp1910:
 6234              		#DEBUG_VALUE: __result <- undef
 6235              	.LBB3_134:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 6236              	.Ltmp1911:
 6237              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6238              	.Ltmp1912:
 6239              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6240              	.Ltmp1913:
 6241              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 6242              	.Ltmp1914:
 6243              		#DEBUG_VALUE: substr:__n <- -1+0
 6244              	.Ltmp1915:
 6245              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6246              	.Ltmp1916:
 6247              		#DEBUG_VALUE: operator|:__a <- 16+0
 6248              	.Ltmp1917:
 6249              		#DEBUG_VALUE: operator|:__b <- 8+0
 6250              	.Ltmp1918:
 6251              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 6252 1ca5 85C0     		testl	%eax, %eax
 6253 1ca7 7F0F     		jg	.LBB3_136
 6254              	# BB#135:
 6255              	.Ltmp1919:
 6256              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6257              	.Ltmp1920:
 6258              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6259              	.Ltmp1921:
 6260              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 6261              	.Ltmp1922:
 6262              		#DEBUG_VALUE: substr:__n <- -1+0
 6263              	.Ltmp1923:
 6264              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6265              	.Ltmp1924:
 6266              		#DEBUG_VALUE: operator|:__a <- 16+0
 6267              	.Ltmp1925:
 6268              		#DEBUG_VALUE: operator|:__b <- 8+0
 6269              	.Ltmp1926:
 6270              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 6271 1ca9 488DB558 		leaq	-168(%rbp), %rsi
 6271      FFFFFF
 6272 1cb0 4889DF   		movq	%rbx, %rdi
 6273 1cb3 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 6273      00
 6274              	.LBB3_136:                              # %_ZNSsD1Ev.exit6
 6275              	.Ltmp1927:
 6276              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6277              	.Ltmp1928:
 6278              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6279              	.Ltmp1929:
 6280              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 6281              	.Ltmp1930:
 6282              		#DEBUG_VALUE: substr:__n <- -1+0
 6283              	.Ltmp1931:
 6284              		#DEBUG_VALUE: operator|:__a <- 16+0
 6285              	.Ltmp1932:
 6286              		#DEBUG_VALUE: operator|:__b <- 8+0
 6287              	.Ltmp1933:
 6288              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 308:./matrix-util.C **** }
 6289              		.loc	2 308 1
 6290              	.Ltmp1934:
 6291 1cb8 4C89F8   		movq	%r15, %rax              # ./matrix-util.C:308:1
 6292 1cbb 4881C458 		addq	$600, %rsp              # ./matrix-util.C:308:1
 6292      020000
 6293              	                                        # imm = 0x258
 6294 1cc2 5B       		popq	%rbx                    # ./matrix-util.C:308:1
 6295 1cc3 415C     		popq	%r12                    # ./matrix-util.C:308:1
 6296 1cc5 415D     		popq	%r13                    # ./matrix-util.C:308:1
 6297 1cc7 415E     		popq	%r14                    # ./matrix-util.C:308:1
 6298 1cc9 415F     		popq	%r15                    # ./matrix-util.C:308:1
 6299 1ccb 5D       		popq	%rbp                    # ./matrix-util.C:308:1
 6300 1ccc C3       		ret                             # ./matrix-util.C:308:1
 6301              	.LBB3_137:
 6302              	.Ltmp942:
 6303              	.Ltmp1935:
 6304              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6305              	.Ltmp1936:
 6306              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6307              	.LBB3_138:                              # %_ZNSsD1Ev.exit9
 6308              	.Ltmp1937:
 6309              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6310              	.Ltmp1938:
 6311              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6312 1ccd 4889C3   		movq	%rax, %rbx
 6313 1cd0 488BBD30 		movq	-208(%rbp), %rdi
 6313      FFFFFF
 6314 1cd7 4C8D77E8 		leaq	-24(%rdi), %r14
 6315 1cdb B8000000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %eax
 6315      00
 6316 1ce0 4939C6   		cmpq	%rax, %r14
 6317 1ce3 7434     		je	.LBB3_144
 6318              	# BB#139:
 6319              	.Ltmp1939:
 6320              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6321              	.Ltmp1940:
 6322              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6323 1ce5 4883C7F8 		addq	$-8, %rdi
 6324 1ce9 B8000000 		movl	$pthread_cancel, %eax
 6324      00
 6325 1cee 4885C0   		testq	%rax, %rax
 6326              	.Ltmp1941:
 6327              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6328 1cf1 740C     		je	.LBB3_141
 6329              	# BB#140:
 6330              	.Ltmp1942:
 6331              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6332              	.Ltmp1943:
 6333              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6334              	.Ltmp1944:
 6335              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6336 1cf3 BEFFFFFF 		movl	$-1, %esi
 6336      FF
 6337 1cf8 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 6337      00
 6338 1cfd EB07     		jmp	.LBB3_142
 6339              	.LBB3_141:
 6340              	.Ltmp1945:
 6341              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6342              	.Ltmp1946:
 6343              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6344              	.Ltmp1947:
 6345              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6346              	.Ltmp1948:
 6347              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 6348 1cff 8B07     		movl	(%rdi), %eax
 6349              	.Ltmp1949:
 6350              		#DEBUG_VALUE: __result <- EAX+0
 6351 1d01 8D48FF   		leal	-1(%rax), %ecx
 6352 1d04 890F     		movl	%ecx, (%rdi)
 6353              	.Ltmp1950:
 6354              		#DEBUG_VALUE: __result <- undef
 6355              	.LBB3_142:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 6356              	.Ltmp1951:
 6357              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6358              	.Ltmp1952:
 6359              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6360              	.Ltmp1953:
 6361              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6362 1d06 85C0     		testl	%eax, %eax
 6363 1d08 7F0F     		jg	.LBB3_144
 6364              	# BB#143:
 6365              	.Ltmp1954:
 6366              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6367              	.Ltmp1955:
 6368              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6369              	.Ltmp1956:
 6370              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6371 1d0a 488DB550 		leaq	-176(%rbp), %rsi
 6371      FFFFFF
 6372 1d11 4C89F7   		movq	%r14, %rdi
 6373 1d14 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 6373      00
 6374              	.LBB3_144:
 6375 1d19 4889D8   		movq	%rbx, %rax
 6376              	.LBB3_145:                              # %_ZNSsD1Ev.exit3
 6377              	.Ltmp1957:
 6378              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6379              	.Ltmp1958:
 6380              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6381 1d1c 4889C3   		movq	%rax, %rbx
 6382 1d1f 488BBD40 		movq	-192(%rbp), %rdi
 6382      FFFFFF
 6383 1d26 4C8D77E8 		leaq	-24(%rdi), %r14
 6384 1d2a B8000000 		movl	$_ZNSs4_Rep20_S_empty_rep_storageE, %eax
 6384      00
 6385 1d2f 4939C6   		cmpq	%rax, %r14
 6386 1d32 7434     		je	.LBB3_151
 6387              	# BB#146:
 6388              	.Ltmp1959:
 6389              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6390              	.Ltmp1960:
 6391              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6392 1d34 4883C7F8 		addq	$-8, %rdi
 6393 1d38 B8000000 		movl	$pthread_cancel, %eax
 6393      00
 6394 1d3d 4885C0   		testq	%rax, %rax
 6395              	.Ltmp1961:
 6396              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6397 1d40 740C     		je	.LBB3_148
 6398              	# BB#147:
 6399              	.Ltmp1962:
 6400              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6401              	.Ltmp1963:
 6402              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6403              	.Ltmp1964:
 6404              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6405 1d42 BEFFFFFF 		movl	$-1, %esi
 6405      FF
 6406 1d47 E8000000 		callq	_ZN9__gnu_cxx18__exchange_and_addEPVii
 6406      00
 6407 1d4c EB07     		jmp	.LBB3_149
 6408              	.LBB3_148:
 6409              	.Ltmp1965:
 6410              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6411              	.Ltmp1966:
 6412              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6413              	.Ltmp1967:
 6414              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6415              	.Ltmp1968:
 6416              		#DEBUG_VALUE: __exchange_and_add_single:__val <- -1+0
 6417 1d4e 8B07     		movl	(%rdi), %eax
 6418              	.Ltmp1969:
 6419              		#DEBUG_VALUE: __result <- EAX+0
 6420 1d50 8D48FF   		leal	-1(%rax), %ecx
 6421 1d53 890F     		movl	%ecx, (%rdi)
 6422              	.Ltmp1970:
 6423              		#DEBUG_VALUE: __result <- undef
 6424              	.LBB3_149:                              # %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.
 6425              	.Ltmp1971:
 6426              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6427              	.Ltmp1972:
 6428              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6429              	.Ltmp1973:
 6430              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6431 1d55 85C0     		testl	%eax, %eax
 6432 1d57 7F0F     		jg	.LBB3_151
 6433              	# BB#150:
 6434              	.Ltmp1974:
 6435              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6436              	.Ltmp1975:
 6437              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6438              	.Ltmp1976:
 6439              		#DEBUG_VALUE: __exchange_and_add_dispatch:__val <- -1+0
 6440 1d59 488DB548 		leaq	-184(%rbp), %rsi
 6440      FFFFFF
 6441 1d60 4C89F7   		movq	%r14, %rdi
 6442 1d63 E8000000 		callq	_ZNSs4_Rep10_M_destroyERKSaIcE
 6442      00
 6443              	.LBB3_151:
 6444 1d68 4889D8   		movq	%rbx, %rax
 6445              	.Ltmp1977:
 6446              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6447              	.Ltmp1978:
 6448              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 292:./matrix-util.C **** 	std::string f (inputfile), pre (prefix), suff (suffix);
 6449              		.loc	2 292 56
 6450              	.Ltmp1979:
 6451 1d6b 4889C7   		movq	%rax, %rdi              # ./matrix-util.C:292:56
 6452 1d6e E8000000 		callq	_Unwind_Resume_or_Rethrow # ./matrix-util.C:292:56
 6452      00
 6453              	.LBB3_153:
 6454              	.Ltmp983:
 6455              	.Ltmp1980:
 6456              		#DEBUG_VALUE: getOutputFileNameWithExtension:prefix <- R14+0
 6457              	.Ltmp1981:
 6458              		#DEBUG_VALUE: getOutputFileNameWithExtension:suffix <- RBX+0
 6459              	.Ltmp1982:
 6460              		#DEBUG_VALUE: find_last_of:__pos <- -1+0
 6461              	.Ltmp1983:
 6462              		#DEBUG_VALUE: substr:__n <- -1+0
 6463              	.Ltmp1984:
 6464              		#DEBUG_VALUE: operator|:__a <- 16+0
 6465              	.Ltmp1985:
 6466              		#DEBUG_VALUE: operator|:__b <- 8+0
 6467              	.Ltmp1986:
 6468              		#DEBUG_VALUE: ~basic_iostream:this <- R8+0
 298:./matrix-util.C **** 	file = f.substr(found+1);
 6469              		.loc	2 298 2
 6470              	.Ltmp1987:
 6471 1d73 E8000000 		callq	_ZSt9terminatev         # ./matrix-util.C:298:2
 6471      00
 6472              	.Ltmp1988:
 6473              	.Ltmp1989:
 6475              	.Lfunc_end3:
 6476              	.Leh_func_end3:
 6477              		.section	.gcc_except_table,"a",@progbits
 6478              		.align	4
 6479              	GCC_except_table3:
 6480              	.Lexception3:
 6481 0098 FF       		.byte	255                     # @LPStart Encoding = omit
 6482 0099 03       		.byte	3                       # @TType Encoding = udata4
 6483 009a CC01     		.ascii	 "\314\001"             # @TType base offset
 6484 009c 03       		.byte	3                       # Call site Encoding = udata4
 6485 009d C301     		.ascii	 "\303\001"             # Call site table length
 6486              	.Lset25 = .Ltmp934-.Leh_func_begin3     # Region start
 6487 009f 1D000000 		.long	.Lset25
 6488              	.Lset26 = .Ltmp935-.Ltmp934             # Region length
 6489 00a3 13000000 		.long	.Lset26
 6490              	.Lset27 = .Ltmp936-.Leh_func_begin3     # Landing pad
 6491 00a7 80040000 		.long	.Lset27
 6492 00ab 01       		.byte	1                       # Action
 6493              	.Lset28 = .Ltmp937-.Leh_func_begin3     # Region start
 6494 00ac 30000000 		.long	.Lset28
 6495              	.Lset29 = .Ltmp938-.Ltmp937             # Region length
 6496 00b0 16000000 		.long	.Lset29
 6497              	.Lset30 = .Ltmp939-.Leh_func_begin3     # Landing pad
 6498 00b4 88040000 		.long	.Lset30
 6499 00b8 01       		.byte	1                       # Action
 6500              	.Lset31 = .Ltmp940-.Leh_func_begin3     # Region start
 6501 00b9 46000000 		.long	.Lset31
 6502              	.Lset32 = .Ltmp941-.Ltmp940             # Region length
 6503 00bd 16000000 		.long	.Lset32
 6504              	.Lset33 = .Ltmp942-.Leh_func_begin3     # Landing pad
 6505 00c1 ED080000 		.long	.Lset33
 6506 00c5 01       		.byte	1                       # Action
 6507              	.Lset34 = .Ltmp943-.Leh_func_begin3     # Region start
 6508 00c6 72000000 		.long	.Lset34
 6509              	.Lset35 = .Ltmp946-.Ltmp943             # Region length
 6510 00ca 56000000 		.long	.Lset35
 6511              	.Lset36 = .Ltmp990-.Leh_func_begin3     # Landing pad
 6512 00ce 51070000 		.long	.Lset36
 6513 00d2 01       		.byte	1                       # Action
 6514              	.Lset37 = .Ltmp947-.Leh_func_begin3     # Region start
 6515 00d3 C8000000 		.long	.Lset37
 6516              	.Lset38 = .Ltmp948-.Ltmp947             # Region length
 6517 00d7 13000000 		.long	.Lset38
 6518              	.Lset39 = .Ltmp949-.Leh_func_begin3     # Landing pad
 6519 00db 8D040000 		.long	.Lset39
 6520 00df 01       		.byte	1                       # Action
 6521              	.Lset40 = .Ltmp950-.Leh_func_begin3     # Region start
 6522 00e0 24010000 		.long	.Lset40
 6523              	.Lset41 = .Ltmp951-.Ltmp950             # Region length
 6524 00e4 18000000 		.long	.Lset41
 6525              	.Lset42 = .Ltmp990-.Leh_func_begin3     # Landing pad
 6526 00e8 51070000 		.long	.Lset42
 6527 00ec 01       		.byte	1                       # Action
 6528              	.Lset43 = .Ltmp952-.Leh_func_begin3     # Region start
 6529 00ed 3C010000 		.long	.Lset43
 6530              	.Lset44 = .Ltmp953-.Ltmp952             # Region length
 6531 00f1 13000000 		.long	.Lset44
 6532              	.Lset45 = .Ltmp954-.Leh_func_begin3     # Landing pad
 6533 00f5 EE040000 		.long	.Lset45
 6534 00f9 01       		.byte	1                       # Action
 6535              	.Lset46 = .Ltmp955-.Leh_func_begin3     # Region start
 6536 00fa 98010000 		.long	.Lset46
 6537              	.Lset47 = .Ltmp958-.Ltmp955             # Region length
 6538 00fe 54000000 		.long	.Lset47
 6539              	.Lset48 = .Ltmp990-.Leh_func_begin3     # Landing pad
 6540 0102 51070000 		.long	.Lset48
 6541 0106 01       		.byte	1                       # Action
 6542              	.Lset49 = .Ltmp959-.Leh_func_begin3     # Region start
 6543 0107 EC010000 		.long	.Lset49
 6544              	.Lset50 = .Ltmp960-.Ltmp959             # Region length
 6545 010b 13000000 		.long	.Lset50
 6546              	.Lset51 = .Ltmp961-.Leh_func_begin3     # Landing pad
 6547 010f 41050000 		.long	.Lset51
 6548 0113 01       		.byte	1                       # Action
 6549              	.Lset52 = .Ltmp962-.Leh_func_begin3     # Region start
 6550 0114 48020000 		.long	.Lset52
 6551              	.Lset53 = .Ltmp963-.Ltmp962             # Region length
 6552 0118 11000000 		.long	.Lset53
 6553              	.Lset54 = .Ltmp990-.Leh_func_begin3     # Landing pad
 6554 011c 51070000 		.long	.Lset54
 6555 0120 01       		.byte	1                       # Action
 6556              	.Lset55 = .Ltmp966-.Leh_func_begin3     # Region start
 6557 0121 84020000 		.long	.Lset55
 6558              	.Lset56 = .Ltmp979-.Ltmp966             # Region length
 6559 0125 A1000000 		.long	.Lset56
 6560              	.Lset57 = .Ltmp980-.Leh_func_begin3     # Landing pad
 6561 0129 97050000 		.long	.Lset57
 6562 012d 01       		.byte	1                       # Action
 6563              	.Lset58 = .Ltmp984-.Leh_func_begin3     # Region start
 6564 012e 40040000 		.long	.Lset58
 6565              	.Lset59 = .Ltmp985-.Ltmp984             # Region length
 6566 0132 05000000 		.long	.Lset59
 6567              	.Lset60 = .Ltmp990-.Leh_func_begin3     # Landing pad
 6568 0136 51070000 		.long	.Lset60
 6569 013a 01       		.byte	1                       # Action
 6570              	.Lset61 = .Ltmp985-.Leh_func_begin3     # Region start
 6571 013b 45040000 		.long	.Lset61
 6572              	.Lset62 = .Ltmp981-.Ltmp985             # Region length
 6573 013f 70020000 		.long	.Lset62
 6574 0143 00000000 		.long	0                       # Landing pad
 6575 0147 00       		.byte	0                       # Action
 6576              	.Lset63 = .Ltmp981-.Leh_func_begin3     # Region start
 6577 0148 B5060000 		.long	.Lset63
 6578              	.Lset64 = .Ltmp982-.Ltmp981             # Region length
 6579 014c 05000000 		.long	.Lset64
 6580              	.Lset65 = .Ltmp983-.Leh_func_begin3     # Landing pad
 6581 0150 93090000 		.long	.Lset65
 6582 0154 01       		.byte	1                       # Action
 6583              	.Lset66 = .Ltmp982-.Leh_func_begin3     # Region start
 6584 0155 BA060000 		.long	.Lset66
 6585              	.Lset67 = .Leh_func_end3-.Ltmp982       # Region length
 6586 0159 DE020000 		.long	.Lset67
 6587 015d 00000000 		.long	0                       # Landing pad
 6588 0161 00       		.byte	0                       # Action
 6589              	                                        # -- Action Record Table --
 6590              	                                        # Action Record
 6591 0162 01       		.byte	1                       #   TypeInfo index
 6592 0163 00       		.byte	0                       #   Next action
 6593              	                                        # -- Catch TypeInfos --
 6594 0164 00000000 		.long	0                       # TypeInfo
 6595              		.align	4
 6596              	
 6597              		.text
 6598              		.globl	_Z5dummyv
 6599 1d78 0F1F8400 		.align	16, 0x90
 6599      00000000 
 6601              	_Z5dummyv:                              # @_Z5dummyv
 6602              	.Leh_func_begin7:
 6603              	.Lfunc_begin7:
   1:../lela/matrix/sparse.h **** /* lela/matrix/sparse.h
   2:../lela/matrix/sparse.h ****  * Copyright 2001-2002, 2011 Bradford Hovinen
   3:../lela/matrix/sparse.h ****  *           1999-2001 William J Turner,
   4:../lela/matrix/sparse.h ****  *
   5:../lela/matrix/sparse.h ****  * Written by William J Turner <wjturner@math.ncsu.edu>,
   6:../lela/matrix/sparse.h ****  *            Bradford Hovinen <hovinen@cis.udel.edu>
   7:../lela/matrix/sparse.h ****  * 
   8:../lela/matrix/sparse.h ****  * --------------------------------------------------------
   9:../lela/matrix/sparse.h ****  * 
  10:../lela/matrix/sparse.h ****  * This file is part of LELA, licensed under the GNU General Public
  11:../lela/matrix/sparse.h ****  * License version 3. See COPYING for more information.
  12:../lela/matrix/sparse.h ****  */
  13:../lela/matrix/sparse.h **** 
  14:../lela/matrix/sparse.h **** #ifndef __LELA_MATRIX_SPARSE_H
  15:../lela/matrix/sparse.h **** #define __LELA_MATRIX_SPARSE_H
  16:../lela/matrix/sparse.h **** 
  17:../lela/matrix/sparse.h **** #ifndef _SP_BB_VECTOR_
  18:../lela/matrix/sparse.h **** #  include <vector>
  19:../lela/matrix/sparse.h **** #  define _SP_BB_VECTOR_ std::vector
  20:../lela/matrix/sparse.h **** #endif
  21:../lela/matrix/sparse.h **** 
  22:../lela/matrix/sparse.h **** #include <utility>
  23:../lela/matrix/sparse.h **** #include <iostream>
  24:../lela/matrix/sparse.h **** #include <algorithm>
  25:../lela/matrix/sparse.h **** #include <vector>
  26:../lela/matrix/sparse.h **** 
  27:../lela/matrix/sparse.h **** #include "lela/lela-config.h"
  28:../lela/matrix/sparse.h **** #include "lela/util/debug.h"
  29:../lela/matrix/sparse.h **** #include "lela/vector/traits.h"
  30:../lela/matrix/sparse.h **** #include "lela/matrix/traits.h"
  31:../lela/matrix/sparse.h **** #include "lela/vector/sparse-subvector.h"
  32:../lela/matrix/sparse.h **** 
  33:../lela/matrix/sparse.h **** namespace LELA
  34:../lela/matrix/sparse.h **** {
  35:../lela/matrix/sparse.h **** 
  36:../lela/matrix/sparse.h **** /** Sparse matrix
  37:../lela/matrix/sparse.h ****  *
  38:../lela/matrix/sparse.h ****  * See @ref MatrixArchetype for documentation on the interface
  39:../lela/matrix/sparse.h ****  *
  40:../lela/matrix/sparse.h ****  * @param Element Element type
  41:../lela/matrix/sparse.h ****  * @param Row     Vector type to use for rows of matrix
  42:../lela/matrix/sparse.h **** \ingroup matrix
  43:../lela/matrix/sparse.h ****  */
  44:../lela/matrix/sparse.h **** template <class _Element, class _Row = typename RawVector<_Element>::Sparse, class Trait = typename
  45:../lela/matrix/sparse.h **** class SparseMatrix
  46:../lela/matrix/sparse.h **** {
  47:../lela/matrix/sparse.h ****     public:
  48:../lela/matrix/sparse.h **** 
  49:../lela/matrix/sparse.h **** 	/// @name @ref MatrixArchetype interface
  50:../lela/matrix/sparse.h **** 	//@{
  51:../lela/matrix/sparse.h **** 
  52:../lela/matrix/sparse.h **** 	typedef _Element Element;
  53:../lela/matrix/sparse.h **** 	typedef _Row Row;
  54:../lela/matrix/sparse.h **** 	typedef SparseMatrix<Element, Row, Trait> Self_t;
  55:../lela/matrix/sparse.h **** 	typedef const Row ConstRow;
  56:../lela/matrix/sparse.h **** 	typedef std::vector<Row> Rep;
  57:../lela/matrix/sparse.h **** 	typedef MatrixIteratorTypes::Row IteratorType; 
  58:../lela/matrix/sparse.h **** 	typedef MatrixStorageTypes::Rows StorageType;
  59:../lela/matrix/sparse.h **** 
  60:../lela/matrix/sparse.h **** 	typedef Submatrix<Self_t> SubmatrixType;
  61:../lela/matrix/sparse.h **** 	typedef Submatrix<const Self_t> ConstSubmatrixType;
  62:../lela/matrix/sparse.h **** 	typedef Submatrix<Self_t> AlignedSubmatrixType;
  63:../lela/matrix/sparse.h **** 	typedef Submatrix<const Self_t> ConstAlignedSubmatrixType;
  64:../lela/matrix/sparse.h **** 
  65:../lela/matrix/sparse.h **** 	static const size_t rowAlign = 1;
  66:../lela/matrix/sparse.h **** 	static const size_t colAlign = 1;
  67:../lela/matrix/sparse.h **** 
  68:../lela/matrix/sparse.h **** 	typedef Self_t ContainerType;
  69:../lela/matrix/sparse.h **** 
  70:../lela/matrix/sparse.h ****         SparseMatrix () : _m (0), _n (0) {}
  71:../lela/matrix/sparse.h ****         SparseMatrix (size_t m, size_t n) : _A (m), _m (m), _n (n) {}
  72:../lela/matrix/sparse.h **** 	SparseMatrix (VectorStream<Row> &vs)
  73:../lela/matrix/sparse.h **** 		: _A (vs.size ()), _m (vs.size ()), _n (vs.dim ())
  74:../lela/matrix/sparse.h **** 	{
  75:../lela/matrix/sparse.h **** 		for (RowIterator i = rowBegin (); i != rowEnd (); ++i)
  76:../lela/matrix/sparse.h **** 			vs >> *i;
  77:../lela/matrix/sparse.h **** 	}
  78:../lela/matrix/sparse.h **** 
  79:../lela/matrix/sparse.h **** 	SparseMatrix (const SparseMatrix<Element, Row, Trait> &A);
  80:../lela/matrix/sparse.h **** 
  81:../lela/matrix/sparse.h ****     	template<class VectorType>
  82:../lela/matrix/sparse.h **** 	SparseMatrix (const SparseMatrix<Element, VectorType, Trait> &A);
  83:../lela/matrix/sparse.h **** 
  84:../lela/matrix/sparse.h **** 	~SparseMatrix () {}
  85:../lela/matrix/sparse.h **** 
  86:../lela/matrix/sparse.h **** 	size_t rowdim () const { return _m; }
  87:../lela/matrix/sparse.h **** 	size_t coldim () const { return _n; }
  88:../lela/matrix/sparse.h **** 
  89:../lela/matrix/sparse.h **** 	void resize (size_t m, size_t n)
  90:../lela/matrix/sparse.h **** 	{
  91:../lela/matrix/sparse.h **** 		_m = m; _n = n;
  92:../lela/matrix/sparse.h **** 		_A.resize (m);
  93:../lela/matrix/sparse.h **** 	}
  94:../lela/matrix/sparse.h **** 
  95:../lela/matrix/sparse.h **** 	void setEntry (size_t i, size_t j, const Element &value);
  96:../lela/matrix/sparse.h **** 	void eraseEntry (size_t i, size_t j);
  97:../lela/matrix/sparse.h **** 	bool getEntry (Element &x, size_t i, size_t j) const;
  98:../lela/matrix/sparse.h **** 
  99:../lela/matrix/sparse.h **** 	typedef typename Rep::iterator RowIterator;
 100:../lela/matrix/sparse.h **** 	typedef typename Rep::const_iterator ConstRowIterator;
 101:../lela/matrix/sparse.h **** 
 102:../lela/matrix/sparse.h **** 	RowIterator rowBegin ();
 103:../lela/matrix/sparse.h **** 	RowIterator rowEnd ();
 104:../lela/matrix/sparse.h **** 	ConstRowIterator rowBegin () const;
 105:../lela/matrix/sparse.h **** 	ConstRowIterator rowEnd () const;
 106:../lela/matrix/sparse.h **** 
 107:../lela/matrix/sparse.h **** 	typedef MatrixRawIterator<RowIterator, VectorRepresentationTypes::Sparse> RawIterator;
 108:../lela/matrix/sparse.h **** 	typedef MatrixRawIterator<ConstRowIterator, VectorRepresentationTypes::Sparse> ConstRawIterator;
 109:../lela/matrix/sparse.h ****     
 110:../lela/matrix/sparse.h **** 	RawIterator      rawBegin ()       { return RawIterator      (rowBegin (), 0, rowEnd (), coldim ()
 111:../lela/matrix/sparse.h **** 	RawIterator      rawEnd ()         { return RawIterator      (rowEnd (), 0, rowEnd (), coldim ());
 112:../lela/matrix/sparse.h **** 	ConstRawIterator rawBegin () const { return ConstRawIterator (rowBegin (), 0, rowEnd (), coldim ()
 113:../lela/matrix/sparse.h **** 	ConstRawIterator rawEnd () const   { return ConstRawIterator (rowEnd (), 0, rowEnd (), coldim ());
 114:../lela/matrix/sparse.h **** 
 115:../lela/matrix/sparse.h **** 	typedef MatrixRawIndexedIterator<ConstRowIterator, Trait, false> RawIndexedIterator;
 116:../lela/matrix/sparse.h **** 	typedef RawIndexedIterator ConstRawIndexedIterator;
 117:../lela/matrix/sparse.h **** 
 118:../lela/matrix/sparse.h **** 	ConstRawIndexedIterator rawIndexedBegin() const { return ConstRawIndexedIterator (rowBegin (), 0, 
 119:../lela/matrix/sparse.h ****         ConstRawIndexedIterator rawIndexedEnd() const   { return ConstRawIndexedIterator (rowEnd ()
 120:../lela/matrix/sparse.h **** 
 121:../lela/matrix/sparse.h **** 	Row      &operator [] (size_t i);
 122:../lela/matrix/sparse.h **** 	ConstRow &operator [] (size_t i) const;
 123:../lela/matrix/sparse.h **** 
 124:../lela/matrix/sparse.h **** 	template <class Vector>
 125:../lela/matrix/sparse.h **** 	Vector &columnDensity (Vector &v) const;
 126:../lela/matrix/sparse.h **** 
 127:../lela/matrix/sparse.h **** 	//@}
 128:../lela/matrix/sparse.h **** 
 129:../lela/matrix/sparse.h **** 	/// @name Additional interfaces
 130:../lela/matrix/sparse.h **** 	//@{
 131:../lela/matrix/sparse.h **** 
 132:../lela/matrix/sparse.h **** 	/** Retreive number of elements in the matrix.
 133:../lela/matrix/sparse.h **** 	 * @return integer number of elements of SparseMatrix matrix.
 134:../lela/matrix/sparse.h **** 	 */
 135:../lela/matrix/sparse.h **** 	size_t size () const
 136:../lela/matrix/sparse.h **** 	{
 137:../lela/matrix/sparse.h **** 		size_t s = 0;
 138:../lela/matrix/sparse.h **** 
 139:../lela/matrix/sparse.h **** 		for (typename Rep::const_iterator it = _A.begin (); it != _A.end (); ++it)
 140:../lela/matrix/sparse.h **** 			s += LELA::RawVector<_Element>::size (*it);
 141:../lela/matrix/sparse.h **** 
 142:../lela/matrix/sparse.h **** 		return s;
 143:../lela/matrix/sparse.h ****         }
 144:../lela/matrix/sparse.h **** 
 145:../lela/matrix/sparse.h **** 	/** Construct the transpose of this matrix and place it in the
 146:../lela/matrix/sparse.h **** 	 * matrix given
 147:../lela/matrix/sparse.h **** 	 *
 148:../lela/matrix/sparse.h **** 	 * Unlike @ref TransposeMatrix, which just provides a view
 149:../lela/matrix/sparse.h **** 	 * into an existing matrix, this function actually constructs
 150:../lela/matrix/sparse.h **** 	 * a copy.
 151:../lela/matrix/sparse.h **** 	 */
 152:../lela/matrix/sparse.h **** 	SparseMatrix &transpose (SparseMatrix &AT) const;
 153:../lela/matrix/sparse.h **** 
 154:../lela/matrix/sparse.h **** 	//@}
 155:../lela/matrix/sparse.h **** 
 156:../lela/matrix/sparse.h ****     protected:
 157:../lela/matrix/sparse.h **** 	
 158:../lela/matrix/sparse.h **** 	Rep               _A;
 159:../lela/matrix/sparse.h **** 	size_t            _m;
 160:../lela/matrix/sparse.h **** 	size_t            _n;
 161:../lela/matrix/sparse.h **** 
 162:../lela/matrix/sparse.h ****     	template<class F, class R, class T> friend class SparseMatrix;
 163:../lela/matrix/sparse.h **** };
 164:../lela/matrix/sparse.h **** 
 165:../lela/matrix/sparse.h **** /* Specialization for sparse sequence vectors */
 166:../lela/matrix/sparse.h **** 
 167:../lela/matrix/sparse.h **** template <class _Element, class _Row>
 168:../lela/matrix/sparse.h **** class SparseMatrix<_Element, _Row, VectorRepresentationTypes::Sparse>
 169:../lela/matrix/sparse.h **** {
 170:../lela/matrix/sparse.h ****     public:
 171:../lela/matrix/sparse.h **** 
 172:../lela/matrix/sparse.h **** 	typedef _Element Element;
 173:../lela/matrix/sparse.h **** 	typedef _Row Row;
 174:../lela/matrix/sparse.h **** 	typedef SparseMatrix<Element, Row, VectorRepresentationTypes::Sparse> Self_t;
 175:../lela/matrix/sparse.h **** 	typedef const Row ConstRow;
 176:../lela/matrix/sparse.h **** 	typedef std::vector<Row> Rep;
 177:../lela/matrix/sparse.h **** 	typedef MatrixIteratorTypes::Row IteratorType; 
 178:../lela/matrix/sparse.h **** 	typedef MatrixStorageTypes::Rows StorageType;
 179:../lela/matrix/sparse.h **** 
 180:../lela/matrix/sparse.h **** 	typedef Submatrix<Self_t> SubmatrixType;
 181:../lela/matrix/sparse.h **** 	typedef Submatrix<const Self_t> ConstSubmatrixType;
 182:../lela/matrix/sparse.h **** 	typedef Submatrix<Self_t> AlignedSubmatrixType;
 183:../lela/matrix/sparse.h **** 	typedef Submatrix<const Self_t> ConstAlignedSubmatrixType;
 184:../lela/matrix/sparse.h **** 
 185:../lela/matrix/sparse.h **** 	static const size_t rowAlign = 1;
 186:../lela/matrix/sparse.h **** 	static const size_t colAlign = 1;
 187:../lela/matrix/sparse.h **** 
 188:../lela/matrix/sparse.h **** 	typedef Self_t ContainerType;
 189:../lela/matrix/sparse.h **** 
 190:../lela/matrix/sparse.h ****         SparseMatrix () : _m (0), _n (0) {}
 191:../lela/matrix/sparse.h **** 
 192:../lela/matrix/sparse.h **** 	SparseMatrix (size_t m, size_t n)
 193:../lela/matrix/sparse.h **** 		: _A (m), _m (m), _n (n) {}
 6604              		.loc	30 193 0
 6605              	.Ltmp1999:
 6606              	# BB#0:
 6607 1d80 55       		pushq	%rbp
 6608              	.Ltmp1996:
 6609 1d81 4889E5   		movq	%rsp, %rbp
 6610              	.Ltmp1997:
 6611 1d84 4157     		pushq	%r15
 6612 1d86 4156     		pushq	%r14
 6613 1d88 4154     		pushq	%r12
 6614 1d8a 53       		pushq	%rbx
 6615 1d8b 4883EC60 		subq	$96, %rsp
 6616              	.Ltmp1998:
 6617 1d8f 488D7DB8 		leaq	-72(%rbp), %rdi
 6618              	.Ltmp2000:
 6619              		#DEBUG_VALUE: SparseMatrix:this <- undef
 192:../lela/matrix/sparse.h **** 	SparseMatrix (size_t m, size_t n)
 6620              		.loc	30 192 2
 6621              	.Ltmp2001:
 6622              		#DEBUG_VALUE: SparseMatrix:this <- RDI+0 # ../lela/matrix/sparse.h:192:2[ matrix-op.C:22:45 ]
 6623 1d93 BE0A0000 		movl	$10, %esi
 6623      00
 6624 1d98 BA0A0000 		movl	$10, %edx
 6624      00
 192:../lela/matrix/sparse.h **** 	SparseMatrix (size_t m, size_t n)
 6625              		.loc	30 192 33
 6626              	.Ltmp2002:
 6627 1d9d E8000000 		callq	_ZN4LELA12SparseMatrixItNS_12SparseVectorItSt6vectorIjSaIjEES2_ItSaItEEEENS_25VectorRepresen
 6627      00
 6628              	.Ltmp1990:
 6629 1da2 488D7D90 		leaq	-112(%rbp), %rdi
 192:../lela/matrix/sparse.h **** 	SparseMatrix (size_t m, size_t n)
 6630              		.loc	30 192 23
 6631              	.Ltmp2003:
 6632              		#DEBUG_VALUE: SparseMatrix:m <- 10+0 # ../lela/matrix/sparse.h:192:23[ matrix-op.C:22:45 ]
 192:../lela/matrix/sparse.h **** 	SparseMatrix (size_t m, size_t n)
 6633              		.loc	30 192 33
 6634              	.Ltmp2004:
 6635              		#DEBUG_VALUE: SparseMatrix:n <- 10+0 # ../lela/matrix/sparse.h:192:33[ matrix-op.C:22:45 ]
 6636              	.Ltmp2005:
 6637              		#DEBUG_VALUE: SparseMatrix:this <- undef
 6638              	.Ltmp2006:
 6639              		#DEBUG_VALUE: SparseMatrix:this <- RDI+0
 6640 1da6 BE0A0000 		movl	$10, %esi
 6640      00
 6641 1dab BA0A0000 		movl	$10, %edx
 6641      00
 6642 1db0 E8000000 		callq	_ZN4LELA12SparseMatrixItNS_12SparseVectorItSt6vectorIjSaIjEES2_ItSaItEEEENS_25VectorRepresen
 6642      00
 6643              	.Ltmp1991:
 6644              	# BB#1:
   1:matrix-op.C   **** /*
   2:matrix-op.C   ****  * matrix-op.C
   3:matrix-op.C   ****  *
   4:matrix-op.C   ****  *  Created on: 30 mai 2012
   5:matrix-op.C   ****  *      Author: martani (LIP6 / UPMC University Paris06)
   6:matrix-op.C   ****  */
   7:matrix-op.C   **** 
   8:matrix-op.C   **** 
   9:matrix-op.C   **** #ifndef MATRIX_OP_C_
  10:matrix-op.C   **** #define MATRIX_OP_C_
  11:matrix-op.C   **** 
  12:matrix-op.C   **** #include <iostream>
  13:matrix-op.C   **** #include <ctime>
  14:matrix-op.C   **** #include <cmath>
  15:matrix-op.C   **** #include <assert.h>
  16:matrix-op.C   **** 
  17:matrix-op.C   **** #include "matrix-op.h"
  18:matrix-op.C   **** #include "matrix-util.h"
  19:matrix-op.C   **** 
  20:matrix-op.C   **** void dummy()
  21:matrix-op.C   **** {
  22:matrix-op.C   **** 	SparseMatrix<uint16> A (10, 10), B (10, 10);
  23:matrix-op.C   **** 	Modular<uint16> R (65521);
 6645              		.loc	1 23 18
 6646              	.Ltmp2007:
 6647              		#DEBUG_VALUE: R <- [%rbp+$-120]+$0 # matrix-op.C:23:18
 6648              	.Ltmp2008:
 6649              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 6650              	.Ltmp2009:
 6651              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 6652              	.Ltmp2010:
 6653              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6654              	.Ltmp2011:
 6655              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6656              	.Ltmp2012:
 6657              		#DEBUG_VALUE: Modular:this <- RDI+0
 6658 1db5 66C74588 		movw	$-15, -120(%rbp)
 6658      F1FF
 6659              	.Ltmp2013:
  24:matrix-op.C   **** 
  25:matrix-op.C   **** 	MatrixOp::reducePivotsByPivots(R, A, B, true);
 6660              		.loc	1 25 2
 6661              	.Ltmp2014:
 6662              	.Ltmp1993:                              # matrix-op.C:25:2
 6663 1dbb 0FB6C8   		movzbl	%al, %ecx               # matrix-op.C:25:2
 6664 1dbe 83E101   		andl	$1, %ecx                # matrix-op.C:25:2
 6665 1dc1 488D7D88 		leaq	-120(%rbp), %rdi
 6666 1dc5 488D75B8 		leaq	-72(%rbp), %rsi
 6667 1dc9 488D5590 		leaq	-112(%rbp), %rdx
 6668 1dcd E8000000 		callq	_ZN8MatrixOp20reducePivotsByPivotsIN4LELA12SparseMatrixItNS1_12SparseVectorItSt6vectorIjSaIj
 6668      00
 6669              	.Ltmp1994:                              # matrix-op.C:25:2
 6670              	# BB#2:
 6671              	.Ltmp2015:
 6672              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 6673              	.Ltmp2016:
 6674              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 6675              	.Ltmp2017:
 6676              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6677              	.Ltmp2018:
 6678              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6679              	.Ltmp2019:
 6680              		#DEBUG_VALUE: Modular:this <- RDI+0
 6681 1dd2 488B5D90 		movq	-112(%rbp), %rbx
 6682 1dd6 4C8B7598 		movq	-104(%rbp), %r14
 6683 1dda 4C39F3   		cmpq	%r14, %rbx
 6684              	.Ltmp2020:
 6685              		#DEBUG_VALUE: __destroy:__last <- R14+0
 6686              	.Ltmp2021:
 6687              		#DEBUG_VALUE: __destroy:__first <- RBX+0
 6688              	.Ltmp2022:
 6689              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6690              	.Ltmp2023:
 6691              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6692              	.Ltmp2024:
 6693              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6694              	.Ltmp2025:
 6695              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6696 1ddd 7435     		je	.LBB7_9
 6697              	# BB#3:
 6698              	.Ltmp2026:
 6699              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 6700              	.Ltmp2027:
 6701              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 6702              	.Ltmp2028:
 6703              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6704              	.Ltmp2029:
 6705              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6706              	.Ltmp2030:
 6707              		#DEBUG_VALUE: Modular:this <- RDI+0
 6708              	.Ltmp2031:
 6709              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6710              	.Ltmp2032:
 6711              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6712              	.Ltmp2033:
 6713              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6714              	.Ltmp2034:
 6715              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6716              	.Ltmp2035:
 6717              		#DEBUG_VALUE: __destroy:__first <- RBX+0
 6718              	.Ltmp2036:
 6719              		#DEBUG_VALUE: __destroy:__last <- R14+0
 6720 1ddf 4989DF   		movq	%rbx, %r15
 6721 1de2 66666666 		.align	16, 0x90
 6721      662E0F1F 
 6721      84000000 
 6721      0000
 6722              	.LBB7_4:                                # %.lr.ph.i.i.i.i.i.i.i8
 6723              	                                        # =>This Inner Loop Header: Depth=1
 6724              	.Ltmp2037:
 6725              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 6726              	.Ltmp2038:
 6727              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 6728              	.Ltmp2039:
 6729              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6730              	.Ltmp2040:
 6731              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6732              	.Ltmp2041:
 6733              		#DEBUG_VALUE: Modular:this <- RDI+0
 6734              	.Ltmp2042:
 6735              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6736              	.Ltmp2043:
 6737              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6738              	.Ltmp2044:
 6739              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6740              	.Ltmp2045:
 6741              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6742              	.Ltmp2046:
 6743              		#DEBUG_VALUE: __destroy:__first <- RBX+0
 6744              	.Ltmp2047:
 6745              		#DEBUG_VALUE: __destroy:__last <- R14+0
 6746 1df0 498B7F18 		movq	24(%r15), %rdi
 6747 1df4 4885FF   		testq	%rdi, %rdi
 6748 1df7 7405     		je	.LBB7_6
 6749              	# BB#5:                                 #   in Loop: Header=BB7_4 Depth=1
 6750              	.Ltmp2048:
 6751              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 6752              	.Ltmp2049:
 6753              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 6754              	.Ltmp2050:
 6755              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6756              	.Ltmp2051:
 6757              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6758              	.Ltmp2052:
 6759              		#DEBUG_VALUE: Modular:this <- RDI+0
 6760              	.Ltmp2053:
 6761              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6762              	.Ltmp2054:
 6763              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6764              	.Ltmp2055:
 6765              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6766              	.Ltmp2056:
 6767              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6768              	.Ltmp2057:
 6769              		#DEBUG_VALUE: __destroy:__first <- RBX+0
 6770              	.Ltmp2058:
 6771              		#DEBUG_VALUE: __destroy:__last <- R14+0
 6772 1df9 E8000000 		callq	_ZdlPv
 6772      00
 6773              	.LBB7_6:                                # %_ZNSt6vectorItSaItEED1Ev.exit.i.i.i.i.i.i.i.i.i.i9
 6774              	                                        #   in Loop: Header=BB7_4 Depth=1
 6775              	.Ltmp2059:
 6776              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 6777              	.Ltmp2060:
 6778              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 6779              	.Ltmp2061:
 6780              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6781              	.Ltmp2062:
 6782              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6783              	.Ltmp2063:
 6784              		#DEBUG_VALUE: Modular:this <- RDI+0
 6785              	.Ltmp2064:
 6786              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6787              	.Ltmp2065:
 6788              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6789              	.Ltmp2066:
 6790              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6791              	.Ltmp2067:
 6792              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6793              	.Ltmp2068:
 6794              		#DEBUG_VALUE: __destroy:__first <- RBX+0
 6795              	.Ltmp2069:
 6796              		#DEBUG_VALUE: __destroy:__last <- R14+0
 6797 1dfe 498B3F   		movq	(%r15), %rdi
 6798 1e01 4885FF   		testq	%rdi, %rdi
 6799 1e04 7405     		je	.LBB7_8
 6800              	# BB#7:                                 #   in Loop: Header=BB7_4 Depth=1
 6801              	.Ltmp2070:
 6802              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 6803              	.Ltmp2071:
 6804              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 6805              	.Ltmp2072:
 6806              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6807              	.Ltmp2073:
 6808              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6809              	.Ltmp2074:
 6810              		#DEBUG_VALUE: Modular:this <- RDI+0
 6811              	.Ltmp2075:
 6812              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6813              	.Ltmp2076:
 6814              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6815              	.Ltmp2077:
 6816              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6817              	.Ltmp2078:
 6818              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6819              	.Ltmp2079:
 6820              		#DEBUG_VALUE: __destroy:__first <- RBX+0
 6821              	.Ltmp2080:
 6822              		#DEBUG_VALUE: __destroy:__last <- R14+0
 6823 1e06 E8000000 		callq	_ZdlPv
 6823      00
 6824              	.LBB7_8:                                # %_ZSt8_DestroyIN4LELA12SparseVectorItSt6vectorIjSaIjEES2_
 6825              	                                        #   in Loop: Header=BB7_4 Depth=1
 6826              	.Ltmp2081:
 6827              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 6828              	.Ltmp2082:
 6829              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 6830              	.Ltmp2083:
 6831              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6832              	.Ltmp2084:
 6833              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6834              	.Ltmp2085:
 6835              		#DEBUG_VALUE: Modular:this <- RDI+0
 6836              	.Ltmp2086:
 6837              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6838              	.Ltmp2087:
 6839              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6840              	.Ltmp2088:
 6841              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6842              	.Ltmp2089:
 6843              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6844              	.Ltmp2090:
 6845              		#DEBUG_VALUE: __destroy:__first <- RBX+0
 6846              	.Ltmp2091:
 6847              		#DEBUG_VALUE: __destroy:__last <- R14+0
 6848 1e0b 4983C730 		addq	$48, %r15
 6849 1e0f 4D39FE   		cmpq	%r15, %r14
 6850 1e12 75DC     		jne	.LBB7_4
 6851              	.LBB7_9:                                # %_ZSt8_DestroyIPN4LELA12SparseVectorItSt6vectorIjSaIjEES2
 6852              	.Ltmp2092:
 6853              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 6854              	.Ltmp2093:
 6855              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 6856              	.Ltmp2094:
 6857              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6858              	.Ltmp2095:
 6859              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6860              	.Ltmp2096:
 6861              		#DEBUG_VALUE: Modular:this <- RDI+0
 6862              	.Ltmp2097:
 6863              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6864              	.Ltmp2098:
 6865              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6866              	.Ltmp2099:
 6867              		#DEBUG_VALUE: __destroy:__first <- RBX+0
 6868 1e14 4885DB   		testq	%rbx, %rbx
 6869              	.Ltmp2100:
 6870              		#DEBUG_VALUE: _M_deallocate:__p <- RBX+0
 6871 1e17 7408     		je	.LBB7_11
 6872              	# BB#10:
 6873              	.Ltmp2101:
 6874              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 6875              	.Ltmp2102:
 6876              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 6877              	.Ltmp2103:
 6878              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6879              	.Ltmp2104:
 6880              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6881              	.Ltmp2105:
 6882              		#DEBUG_VALUE: Modular:this <- RDI+0
 6883              	.Ltmp2106:
 6884              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6885              	.Ltmp2107:
 6886              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6887              	.Ltmp2108:
 6888              		#DEBUG_VALUE: __destroy:__first <- RBX+0
 6889              	.Ltmp2109:
 6890              		#DEBUG_VALUE: _M_deallocate:__p <- RBX+0
 6891              	.Ltmp2110:
 6892              		#DEBUG_VALUE: deallocate:__p <- RBX+0
 6893 1e19 4889DF   		movq	%rbx, %rdi
 6894              	.Ltmp2111:
 6895              		#DEBUG_VALUE: deallocate:__p <- undef
 6896              	.Ltmp2112:
 6897              		#DEBUG_VALUE: _M_deallocate:__p <- undef
 6898              	.Ltmp2113:
 6899              		#DEBUG_VALUE: __destroy:__first <- undef
 6900              	.Ltmp2114:
 6901              		#DEBUG_VALUE: _Destroy:__first <- undef
 6902              	.Ltmp2115:
 6903              		#DEBUG_VALUE: _Destroy:__first <- undef
 6904 1e1c E8000000 		callq	_ZdlPv
 6904      00
 6905              	.LBB7_11:                               # %_ZN4LELA12SparseMatrixItNS_12SparseVectorItSt6vectorIjSa
 6906              	.Ltmp2116:
 6907              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 6908              	.Ltmp2117:
 6909              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 6910              	.Ltmp2118:
 6911              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6912              	.Ltmp2119:
 6913              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6914              	.Ltmp2120:
 6915              		#DEBUG_VALUE: Modular:this <- RDI+0
 6916 1e21 488B5DB8 		movq	-72(%rbp), %rbx
 6917 1e25 4C8B75C0 		movq	-64(%rbp), %r14
 6918 1e29 4C39F3   		cmpq	%r14, %rbx
 6919              	.Ltmp2121:
 6920              		#DEBUG_VALUE: __destroy:__last <- R14+0
 6921              	.Ltmp2122:
 6922              		#DEBUG_VALUE: __destroy:__first <- RBX+0
 6923              	.Ltmp2123:
 6924              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6925              	.Ltmp2124:
 6926              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6927              	.Ltmp2125:
 6928              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6929              	.Ltmp2126:
 6930              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6931 1e2c 7436     		je	.LBB7_18
 6932              	# BB#12:
 6933              	.Ltmp2127:
 6934              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 6935              	.Ltmp2128:
 6936              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 6937              	.Ltmp2129:
 6938              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6939              	.Ltmp2130:
 6940              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6941              	.Ltmp2131:
 6942              		#DEBUG_VALUE: Modular:this <- RDI+0
 6943              	.Ltmp2132:
 6944              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6945              	.Ltmp2133:
 6946              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6947              	.Ltmp2134:
 6948              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6949              	.Ltmp2135:
 6950              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6951              	.Ltmp2136:
 6952              		#DEBUG_VALUE: __destroy:__first <- RBX+0
 6953              	.Ltmp2137:
 6954              		#DEBUG_VALUE: __destroy:__last <- R14+0
 6955 1e2e 4989DF   		movq	%rbx, %r15
 6956 1e31 66666666 		.align	16, 0x90
 6956      66662E0F 
 6956      1F840000 
 6956      000000
 6957              	.LBB7_13:                               # %.lr.ph.i.i.i.i.i.i.i22
 6958              	                                        # =>This Inner Loop Header: Depth=1
 6959              	.Ltmp2138:
 6960              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 6961              	.Ltmp2139:
 6962              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 6963              	.Ltmp2140:
 6964              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6965              	.Ltmp2141:
 6966              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6967              	.Ltmp2142:
 6968              		#DEBUG_VALUE: Modular:this <- RDI+0
 6969              	.Ltmp2143:
 6970              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6971              	.Ltmp2144:
 6972              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6973              	.Ltmp2145:
 6974              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6975              	.Ltmp2146:
 6976              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6977              	.Ltmp2147:
 6978              		#DEBUG_VALUE: __destroy:__first <- RBX+0
 6979              	.Ltmp2148:
 6980              		#DEBUG_VALUE: __destroy:__last <- R14+0
 6981 1e40 498B7F18 		movq	24(%r15), %rdi
 6982 1e44 4885FF   		testq	%rdi, %rdi
 6983 1e47 7405     		je	.LBB7_15
 6984              	# BB#14:                                #   in Loop: Header=BB7_13 Depth=1
 6985              	.Ltmp2149:
 6986              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 6987              	.Ltmp2150:
 6988              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 6989              	.Ltmp2151:
 6990              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6991              	.Ltmp2152:
 6992              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 6993              	.Ltmp2153:
 6994              		#DEBUG_VALUE: Modular:this <- RDI+0
 6995              	.Ltmp2154:
 6996              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 6997              	.Ltmp2155:
 6998              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 6999              	.Ltmp2156:
 7000              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 7001              	.Ltmp2157:
 7002              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 7003              	.Ltmp2158:
 7004              		#DEBUG_VALUE: __destroy:__first <- RBX+0
 7005              	.Ltmp2159:
 7006              		#DEBUG_VALUE: __destroy:__last <- R14+0
 7007 1e49 E8000000 		callq	_ZdlPv
 7007      00
 7008              	.LBB7_15:                               # %_ZNSt6vectorItSaItEED1Ev.exit.i.i.i.i.i.i.i.i.i.i23
 7009              	                                        #   in Loop: Header=BB7_13 Depth=1
 7010              	.Ltmp2160:
 7011              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7012              	.Ltmp2161:
 7013              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7014              	.Ltmp2162:
 7015              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7016              	.Ltmp2163:
 7017              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7018              	.Ltmp2164:
 7019              		#DEBUG_VALUE: Modular:this <- RDI+0
 7020              	.Ltmp2165:
 7021              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 7022              	.Ltmp2166:
 7023              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 7024              	.Ltmp2167:
 7025              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 7026              	.Ltmp2168:
 7027              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 7028              	.Ltmp2169:
 7029              		#DEBUG_VALUE: __destroy:__first <- RBX+0
 7030              	.Ltmp2170:
 7031              		#DEBUG_VALUE: __destroy:__last <- R14+0
 7032 1e4e 498B3F   		movq	(%r15), %rdi
 7033 1e51 4885FF   		testq	%rdi, %rdi
 7034 1e54 7405     		je	.LBB7_17
 7035              	# BB#16:                                #   in Loop: Header=BB7_13 Depth=1
 7036              	.Ltmp2171:
 7037              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7038              	.Ltmp2172:
 7039              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7040              	.Ltmp2173:
 7041              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7042              	.Ltmp2174:
 7043              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7044              	.Ltmp2175:
 7045              		#DEBUG_VALUE: Modular:this <- RDI+0
 7046              	.Ltmp2176:
 7047              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 7048              	.Ltmp2177:
 7049              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 7050              	.Ltmp2178:
 7051              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 7052              	.Ltmp2179:
 7053              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 7054              	.Ltmp2180:
 7055              		#DEBUG_VALUE: __destroy:__first <- RBX+0
 7056              	.Ltmp2181:
 7057              		#DEBUG_VALUE: __destroy:__last <- R14+0
 7058 1e56 E8000000 		callq	_ZdlPv
 7058      00
 7059              	.LBB7_17:                               # %_ZSt8_DestroyIN4LELA12SparseVectorItSt6vectorIjSaIjEES2_
 7060              	                                        #   in Loop: Header=BB7_13 Depth=1
 7061              	.Ltmp2182:
 7062              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7063              	.Ltmp2183:
 7064              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7065              	.Ltmp2184:
 7066              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7067              	.Ltmp2185:
 7068              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7069              	.Ltmp2186:
 7070              		#DEBUG_VALUE: Modular:this <- RDI+0
 7071              	.Ltmp2187:
 7072              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 7073              	.Ltmp2188:
 7074              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 7075              	.Ltmp2189:
 7076              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 7077              	.Ltmp2190:
 7078              		#DEBUG_VALUE: _Destroy:__last <- R14+0
 7079              	.Ltmp2191:
 7080              		#DEBUG_VALUE: __destroy:__first <- RBX+0
 7081              	.Ltmp2192:
 7082              		#DEBUG_VALUE: __destroy:__last <- R14+0
 7083 1e5b 4983C730 		addq	$48, %r15
 7084 1e5f 4D39FE   		cmpq	%r15, %r14
 7085 1e62 75DC     		jne	.LBB7_13
 7086              	.LBB7_18:                               # %_ZSt8_DestroyIPN4LELA12SparseVectorItSt6vectorIjSaIjEES2
 7087              	.Ltmp2193:
 7088              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7089              	.Ltmp2194:
 7090              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7091              	.Ltmp2195:
 7092              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7093              	.Ltmp2196:
 7094              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7095              	.Ltmp2197:
 7096              		#DEBUG_VALUE: Modular:this <- RDI+0
 7097              	.Ltmp2198:
 7098              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 7099              	.Ltmp2199:
 7100              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 7101              	.Ltmp2200:
 7102              		#DEBUG_VALUE: __destroy:__first <- RBX+0
 7103 1e64 4885DB   		testq	%rbx, %rbx
 7104              	.Ltmp2201:
 7105              		#DEBUG_VALUE: _M_deallocate:__p <- RBX+0
 7106 1e67 7408     		je	.LBB7_20
 7107              	# BB#19:
 7108              	.Ltmp2202:
 7109              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7110              	.Ltmp2203:
 7111              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7112              	.Ltmp2204:
 7113              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7114              	.Ltmp2205:
 7115              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7116              	.Ltmp2206:
 7117              		#DEBUG_VALUE: Modular:this <- RDI+0
 7118              	.Ltmp2207:
 7119              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 7120              	.Ltmp2208:
 7121              		#DEBUG_VALUE: _Destroy:__first <- RBX+0
 7122              	.Ltmp2209:
 7123              		#DEBUG_VALUE: __destroy:__first <- RBX+0
 7124              	.Ltmp2210:
 7125              		#DEBUG_VALUE: _M_deallocate:__p <- RBX+0
 7126              	.Ltmp2211:
 7127              		#DEBUG_VALUE: deallocate:__p <- RBX+0
 7128 1e69 4889DF   		movq	%rbx, %rdi
 7129              	.Ltmp2212:
 7130              		#DEBUG_VALUE: deallocate:__p <- undef
 7131              	.Ltmp2213:
 7132              		#DEBUG_VALUE: _M_deallocate:__p <- undef
 7133              	.Ltmp2214:
 7134              		#DEBUG_VALUE: __destroy:__first <- undef
 7135              	.Ltmp2215:
 7136              		#DEBUG_VALUE: _Destroy:__first <- undef
 7137              	.Ltmp2216:
 7138              		#DEBUG_VALUE: _Destroy:__first <- undef
 7139 1e6c E8000000 		callq	_ZdlPv
 7139      00
 7140              	.LBB7_20:                               # %_ZN4LELA12SparseMatrixItNS_12SparseVectorItSt6vectorIjSa
  26:matrix-op.C   **** }
 7141              		.loc	1 26 1
 7142              	.Ltmp2217:
 7143 1e71 4883C460 		addq	$96, %rsp               # matrix-op.C:26:1
 7144              	.Ltmp2218:
 7145              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7146              	.Ltmp2219:
 7147              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7148              	.Ltmp2220:
 7149              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7150              	.Ltmp2221:
 7151              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7152              	.Ltmp2222:
 7153              		#DEBUG_VALUE: Modular:this <- RDI+0
 7154 1e75 5B       		popq	%rbx                    # matrix-op.C:26:1
 7155 1e76 415C     		popq	%r12                    # matrix-op.C:26:1
 7156 1e78 415E     		popq	%r14                    # matrix-op.C:26:1
 7157 1e7a 415F     		popq	%r15                    # matrix-op.C:26:1
 7158 1e7c 5D       		popq	%rbp                    # matrix-op.C:26:1
 7159 1e7d C3       		ret                             # matrix-op.C:26:1
 7160              	.LBB7_21:
 7161              	.Ltmp1992:
 7162              	.Ltmp2223:
 7163              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7164              	.Ltmp2224:
 7165              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7166 1e7e 4889C3   		movq	%rax, %rbx
 7167 1e81 EB50     		jmp	.LBB7_31
 7168              	.LBB7_22:
 7169              	.Ltmp1995:
 7170              	.Ltmp2225:
 7171              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7172              	.Ltmp2226:
 7173              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7174              	.Ltmp2227:
 7175              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7176              	.Ltmp2228:
 7177              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7178              	.Ltmp2229:
 7179              		#DEBUG_VALUE: Modular:this <- RDI+0
  23:matrix-op.C   **** 	Modular<uint16> R (65521);
 7180              		.loc	1 23 27
 7181              	.Ltmp2230:
 7182 1e83 4889C3   		movq	%rax, %rbx              # matrix-op.C:23:27
 7183 1e86 4C8B7590 		movq	-112(%rbp), %r14
 7184 1e8a 4C8B7D98 		movq	-104(%rbp), %r15
 7185 1e8e 4D39FE   		cmpq	%r15, %r14
 7186              	.Ltmp2231:
 7187              		#DEBUG_VALUE: __destroy:__last <- R15+0
 7188              	.Ltmp2232:
 7189              		#DEBUG_VALUE: __destroy:__first <- R14+0
 7190              	.Ltmp2233:
 7191              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7192              	.Ltmp2234:
 7193              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7194              	.Ltmp2235:
 7195              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7196              	.Ltmp2236:
 7197              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7198 1e91 7433     		je	.LBB7_29
 7199              	# BB#23:
 7200              	.Ltmp2237:
 7201              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7202              	.Ltmp2238:
 7203              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7204              	.Ltmp2239:
 7205              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7206              	.Ltmp2240:
 7207              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7208              	.Ltmp2241:
 7209              		#DEBUG_VALUE: Modular:this <- RDI+0
 7210              	.Ltmp2242:
 7211              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7212              	.Ltmp2243:
 7213              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7214              	.Ltmp2244:
 7215              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7216              	.Ltmp2245:
 7217              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7218              	.Ltmp2246:
 7219              		#DEBUG_VALUE: __destroy:__first <- R14+0
 7220              	.Ltmp2247:
 7221              		#DEBUG_VALUE: __destroy:__last <- R15+0
 7222 1e93 4D89F4   		movq	%r14, %r12
 7223 1e96 662E0F1F 		.align	16, 0x90
 7223      84000000 
 7223      0000
 7224              	.LBB7_24:                               # %.lr.ph.i.i.i.i.i.i.i36
 7225              	                                        # =>This Inner Loop Header: Depth=1
 7226              	.Ltmp2248:
 7227              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7228              	.Ltmp2249:
 7229              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7230              	.Ltmp2250:
 7231              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7232              	.Ltmp2251:
 7233              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7234              	.Ltmp2252:
 7235              		#DEBUG_VALUE: Modular:this <- RDI+0
 7236              	.Ltmp2253:
 7237              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7238              	.Ltmp2254:
 7239              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7240              	.Ltmp2255:
 7241              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7242              	.Ltmp2256:
 7243              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7244              	.Ltmp2257:
 7245              		#DEBUG_VALUE: __destroy:__first <- R14+0
 7246              	.Ltmp2258:
 7247              		#DEBUG_VALUE: __destroy:__last <- R15+0
 7248 1ea0 498B7C24 		movq	24(%r12), %rdi
 7248      18
 7249 1ea5 4885FF   		testq	%rdi, %rdi
 7250 1ea8 7405     		je	.LBB7_26
 7251              	# BB#25:                                #   in Loop: Header=BB7_24 Depth=1
 7252              	.Ltmp2259:
 7253              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7254              	.Ltmp2260:
 7255              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7256              	.Ltmp2261:
 7257              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7258              	.Ltmp2262:
 7259              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7260              	.Ltmp2263:
 7261              		#DEBUG_VALUE: Modular:this <- RDI+0
 7262              	.Ltmp2264:
 7263              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7264              	.Ltmp2265:
 7265              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7266              	.Ltmp2266:
 7267              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7268              	.Ltmp2267:
 7269              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7270              	.Ltmp2268:
 7271              		#DEBUG_VALUE: __destroy:__first <- R14+0
 7272              	.Ltmp2269:
 7273              		#DEBUG_VALUE: __destroy:__last <- R15+0
 7274 1eaa E8000000 		callq	_ZdlPv
 7274      00
 7275              	.LBB7_26:                               # %_ZNSt6vectorItSaItEED1Ev.exit.i.i.i.i.i.i.i.i.i.i37
 7276              	                                        #   in Loop: Header=BB7_24 Depth=1
 7277              	.Ltmp2270:
 7278              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7279              	.Ltmp2271:
 7280              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7281              	.Ltmp2272:
 7282              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7283              	.Ltmp2273:
 7284              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7285              	.Ltmp2274:
 7286              		#DEBUG_VALUE: Modular:this <- RDI+0
 7287              	.Ltmp2275:
 7288              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7289              	.Ltmp2276:
 7290              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7291              	.Ltmp2277:
 7292              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7293              	.Ltmp2278:
 7294              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7295              	.Ltmp2279:
 7296              		#DEBUG_VALUE: __destroy:__first <- R14+0
 7297              	.Ltmp2280:
 7298              		#DEBUG_VALUE: __destroy:__last <- R15+0
 7299 1eaf 498B3C24 		movq	(%r12), %rdi
 7300 1eb3 4885FF   		testq	%rdi, %rdi
 7301 1eb6 7405     		je	.LBB7_28
 7302              	# BB#27:                                #   in Loop: Header=BB7_24 Depth=1
 7303              	.Ltmp2281:
 7304              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7305              	.Ltmp2282:
 7306              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7307              	.Ltmp2283:
 7308              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7309              	.Ltmp2284:
 7310              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7311              	.Ltmp2285:
 7312              		#DEBUG_VALUE: Modular:this <- RDI+0
 7313              	.Ltmp2286:
 7314              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7315              	.Ltmp2287:
 7316              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7317              	.Ltmp2288:
 7318              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7319              	.Ltmp2289:
 7320              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7321              	.Ltmp2290:
 7322              		#DEBUG_VALUE: __destroy:__first <- R14+0
 7323              	.Ltmp2291:
 7324              		#DEBUG_VALUE: __destroy:__last <- R15+0
 7325 1eb8 E8000000 		callq	_ZdlPv
 7325      00
 7326              	.LBB7_28:                               # %_ZSt8_DestroyIN4LELA12SparseVectorItSt6vectorIjSaIjEES2_
 7327              	                                        #   in Loop: Header=BB7_24 Depth=1
 7328              	.Ltmp2292:
 7329              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7330              	.Ltmp2293:
 7331              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7332              	.Ltmp2294:
 7333              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7334              	.Ltmp2295:
 7335              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7336              	.Ltmp2296:
 7337              		#DEBUG_VALUE: Modular:this <- RDI+0
 7338              	.Ltmp2297:
 7339              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7340              	.Ltmp2298:
 7341              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7342              	.Ltmp2299:
 7343              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7344              	.Ltmp2300:
 7345              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7346              	.Ltmp2301:
 7347              		#DEBUG_VALUE: __destroy:__first <- R14+0
 7348              	.Ltmp2302:
 7349              		#DEBUG_VALUE: __destroy:__last <- R15+0
 7350 1ebd 4983C430 		addq	$48, %r12
 7351 1ec1 4D39E7   		cmpq	%r12, %r15
 7352 1ec4 75DA     		jne	.LBB7_24
 7353              	.LBB7_29:                               # %_ZSt8_DestroyIPN4LELA12SparseVectorItSt6vectorIjSaIjEES2
 7354              	.Ltmp2303:
 7355              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7356              	.Ltmp2304:
 7357              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7358              	.Ltmp2305:
 7359              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7360              	.Ltmp2306:
 7361              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7362              	.Ltmp2307:
 7363              		#DEBUG_VALUE: Modular:this <- RDI+0
 7364              	.Ltmp2308:
 7365              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7366              	.Ltmp2309:
 7367              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7368              	.Ltmp2310:
 7369              		#DEBUG_VALUE: __destroy:__first <- R14+0
 7370 1ec6 4D85F6   		testq	%r14, %r14
 7371              	.Ltmp2311:
 7372              		#DEBUG_VALUE: _M_deallocate:__p <- R14+0
 7373 1ec9 7408     		je	.LBB7_31
 7374              	# BB#30:
 7375              	.Ltmp2312:
 7376              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7377              	.Ltmp2313:
 7378              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7379              	.Ltmp2314:
 7380              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7381              	.Ltmp2315:
 7382              		#DEBUG_VALUE: Modular:modulus <- 65521+0
 7383              	.Ltmp2316:
 7384              		#DEBUG_VALUE: Modular:this <- RDI+0
 7385              	.Ltmp2317:
 7386              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7387              	.Ltmp2318:
 7388              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7389              	.Ltmp2319:
 7390              		#DEBUG_VALUE: __destroy:__first <- R14+0
 7391              	.Ltmp2320:
 7392              		#DEBUG_VALUE: _M_deallocate:__p <- R14+0
 7393              	.Ltmp2321:
 7394              		#DEBUG_VALUE: deallocate:__p <- R14+0
 7395 1ecb 4C89F7   		movq	%r14, %rdi
 7396              	.Ltmp2322:
 7397              		#DEBUG_VALUE: deallocate:__p <- undef
 7398              	.Ltmp2323:
 7399              		#DEBUG_VALUE: _M_deallocate:__p <- undef
 7400              	.Ltmp2324:
 7401              		#DEBUG_VALUE: __destroy:__first <- undef
 7402              	.Ltmp2325:
 7403              		#DEBUG_VALUE: _Destroy:__first <- undef
 7404              	.Ltmp2326:
 7405              		#DEBUG_VALUE: _Destroy:__first <- undef
 7406 1ece E8000000 		callq	_ZdlPv
 7406      00
 7407              	.LBB7_31:                               # %_ZN4LELA12SparseMatrixItNS_12SparseVectorItSt6vectorIjSa
 7408              	.Ltmp2327:
 7409              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7410              	.Ltmp2328:
 7411              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7412 1ed3 4C8B75B8 		movq	-72(%rbp), %r14
 7413 1ed7 4C8B7DC0 		movq	-64(%rbp), %r15
 7414 1edb 4D39FE   		cmpq	%r15, %r14
 7415              	.Ltmp2329:
 7416              		#DEBUG_VALUE: __destroy:__last <- R15+0
 7417              	.Ltmp2330:
 7418              		#DEBUG_VALUE: __destroy:__first <- R14+0
 7419              	.Ltmp2331:
 7420              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7421              	.Ltmp2332:
 7422              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7423              	.Ltmp2333:
 7424              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7425              	.Ltmp2334:
 7426              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7427 1ede 7436     		je	.LBB7_38
 7428              	# BB#32:
 7429              	.Ltmp2335:
 7430              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7431              	.Ltmp2336:
 7432              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7433              	.Ltmp2337:
 7434              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7435              	.Ltmp2338:
 7436              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7437              	.Ltmp2339:
 7438              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7439              	.Ltmp2340:
 7440              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7441              	.Ltmp2341:
 7442              		#DEBUG_VALUE: __destroy:__first <- R14+0
 7443              	.Ltmp2342:
 7444              		#DEBUG_VALUE: __destroy:__last <- R15+0
 7445 1ee0 4D89F4   		movq	%r14, %r12
 7446 1ee3 66666666 		.align	16, 0x90
 7446      2E0F1F84 
 7446      00000000 
 7446      00
 7447              	.LBB7_33:                               # %.lr.ph.i.i.i.i.i.i.i
 7448              	                                        # =>This Inner Loop Header: Depth=1
 7449              	.Ltmp2343:
 7450              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7451              	.Ltmp2344:
 7452              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7453              	.Ltmp2345:
 7454              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7455              	.Ltmp2346:
 7456              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7457              	.Ltmp2347:
 7458              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7459              	.Ltmp2348:
 7460              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7461              	.Ltmp2349:
 7462              		#DEBUG_VALUE: __destroy:__first <- R14+0
 7463              	.Ltmp2350:
 7464              		#DEBUG_VALUE: __destroy:__last <- R15+0
 7465 1ef0 498B7C24 		movq	24(%r12), %rdi
 7465      18
 7466 1ef5 4885FF   		testq	%rdi, %rdi
 7467 1ef8 7405     		je	.LBB7_35
 7468              	# BB#34:                                #   in Loop: Header=BB7_33 Depth=1
 7469              	.Ltmp2351:
 7470              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7471              	.Ltmp2352:
 7472              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7473              	.Ltmp2353:
 7474              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7475              	.Ltmp2354:
 7476              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7477              	.Ltmp2355:
 7478              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7479              	.Ltmp2356:
 7480              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7481              	.Ltmp2357:
 7482              		#DEBUG_VALUE: __destroy:__first <- R14+0
 7483              	.Ltmp2358:
 7484              		#DEBUG_VALUE: __destroy:__last <- R15+0
 7485 1efa E8000000 		callq	_ZdlPv
 7485      00
 7486              	.LBB7_35:                               # %_ZNSt6vectorItSaItEED1Ev.exit.i.i.i.i.i.i.i.i.i.i
 7487              	                                        #   in Loop: Header=BB7_33 Depth=1
 7488              	.Ltmp2359:
 7489              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7490              	.Ltmp2360:
 7491              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7492              	.Ltmp2361:
 7493              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7494              	.Ltmp2362:
 7495              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7496              	.Ltmp2363:
 7497              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7498              	.Ltmp2364:
 7499              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7500              	.Ltmp2365:
 7501              		#DEBUG_VALUE: __destroy:__first <- R14+0
 7502              	.Ltmp2366:
 7503              		#DEBUG_VALUE: __destroy:__last <- R15+0
 7504 1eff 498B3C24 		movq	(%r12), %rdi
 7505 1f03 4885FF   		testq	%rdi, %rdi
 7506 1f06 7405     		je	.LBB7_37
 7507              	# BB#36:                                #   in Loop: Header=BB7_33 Depth=1
 7508              	.Ltmp2367:
 7509              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7510              	.Ltmp2368:
 7511              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7512              	.Ltmp2369:
 7513              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7514              	.Ltmp2370:
 7515              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7516              	.Ltmp2371:
 7517              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7518              	.Ltmp2372:
 7519              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7520              	.Ltmp2373:
 7521              		#DEBUG_VALUE: __destroy:__first <- R14+0
 7522              	.Ltmp2374:
 7523              		#DEBUG_VALUE: __destroy:__last <- R15+0
 7524 1f08 E8000000 		callq	_ZdlPv
 7524      00
 7525              	.LBB7_37:                               # %_ZSt8_DestroyIN4LELA12SparseVectorItSt6vectorIjSaIjEES2_
 7526              	                                        #   in Loop: Header=BB7_33 Depth=1
 7527              	.Ltmp2375:
 7528              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7529              	.Ltmp2376:
 7530              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7531              	.Ltmp2377:
 7532              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7533              	.Ltmp2378:
 7534              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7535              	.Ltmp2379:
 7536              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7537              	.Ltmp2380:
 7538              		#DEBUG_VALUE: _Destroy:__last <- R15+0
 7539              	.Ltmp2381:
 7540              		#DEBUG_VALUE: __destroy:__first <- R14+0
 7541              	.Ltmp2382:
 7542              		#DEBUG_VALUE: __destroy:__last <- R15+0
 7543 1f0d 4983C430 		addq	$48, %r12
 7544 1f11 4D39E7   		cmpq	%r12, %r15
 7545 1f14 75DA     		jne	.LBB7_33
 7546              	.LBB7_38:                               # %_ZSt8_DestroyIPN4LELA12SparseVectorItSt6vectorIjSaIjEES2
 7547              	.Ltmp2383:
 7548              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7549              	.Ltmp2384:
 7550              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7551              	.Ltmp2385:
 7552              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7553              	.Ltmp2386:
 7554              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7555              	.Ltmp2387:
 7556              		#DEBUG_VALUE: __destroy:__first <- R14+0
 7557 1f16 4D85F6   		testq	%r14, %r14
 7558              	.Ltmp2388:
 7559              		#DEBUG_VALUE: _M_deallocate:__p <- R14+0
 7560 1f19 7408     		je	.LBB7_40
 7561              	# BB#39:
 7562              	.Ltmp2389:
 7563              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7564              	.Ltmp2390:
 7565              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
 7566              	.Ltmp2391:
 7567              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7568              	.Ltmp2392:
 7569              		#DEBUG_VALUE: _Destroy:__first <- R14+0
 7570              	.Ltmp2393:
 7571              		#DEBUG_VALUE: __destroy:__first <- R14+0
 7572              	.Ltmp2394:
 7573              		#DEBUG_VALUE: _M_deallocate:__p <- R14+0
 7574              	.Ltmp2395:
 7575              		#DEBUG_VALUE: deallocate:__p <- R14+0
 7576 1f1b 4C89F7   		movq	%r14, %rdi
 7577              	.Ltmp2396:
 7578              		#DEBUG_VALUE: deallocate:__p <- undef
 7579              	.Ltmp2397:
 7580              		#DEBUG_VALUE: _M_deallocate:__p <- undef
 7581              	.Ltmp2398:
 7582              		#DEBUG_VALUE: __destroy:__first <- undef
 7583              	.Ltmp2399:
 7584              		#DEBUG_VALUE: _Destroy:__first <- undef
 7585              	.Ltmp2400:
 7586              		#DEBUG_VALUE: _Destroy:__first <- undef
 7587 1f1e E8000000 		callq	_ZdlPv
 7587      00
 7588              	.LBB7_40:                               # %_ZN4LELA12SparseMatrixItNS_12SparseVectorItSt6vectorIjSa
 7589              	.Ltmp2401:
 7590              		#DEBUG_VALUE: SparseMatrix:n <- 10+0
 7591              	.Ltmp2402:
 7592              		#DEBUG_VALUE: SparseMatrix:m <- 10+0
  22:matrix-op.C   **** 	SparseMatrix<uint16> A (10, 10), B (10, 10);
 7593              		.loc	1 22 45
 7594              	.Ltmp2403:
 7595 1f23 4889DF   		movq	%rbx, %rdi              # matrix-op.C:22:45
 7596 1f26 E8000000 		callq	_Unwind_Resume_or_Rethrow # matrix-op.C:22:45
 7596      00
 7597              	.Ltmp2404:
 7598              	.Ltmp2405:
 7600              	.Lfunc_end7:
 7601              		.file	66 "/usr/include/gmp-x86_64.h"
 7602              		.file	67 "/usr/include/gmpxx.h"
 7603              	.Leh_func_end7:
 7604              		.section	.gcc_except_table,"a",@progbits
 7605              		.align	4
 7606              	GCC_except_table7:
 7607              	.Lexception7:
 7608 0168 FF       		.byte	255                     # @LPStart Encoding = omit
 7609 0169 03       		.byte	3                       # @TType Encoding = udata4
 7610 016a BC       		.byte	188                     # @TType base offset
 7611 016b 00       		.zero	1
 7612 016c 03       		.byte	3                       # Call site Encoding = udata4
 7613 016d 34       		.byte	52                      # Call site table length
 7614              	.Lset68 = .Leh_func_begin7-.Leh_func_begin7 # Region start
 7615 016e 00000000 		.long	.Lset68
 7616              	.Lset69 = .Ltmp1990-.Leh_func_begin7    # Region length
 7617 0172 22000000 		.long	.Lset69
 7618 0176 00000000 		.long	0                       # Landing pad
 7619 017a 00       		.byte	0                       # Action
 7620              	.Lset70 = .Ltmp1990-.Leh_func_begin7    # Region start
 7621 017b 22000000 		.long	.Lset70
 7622              	.Lset71 = .Ltmp1991-.Ltmp1990           # Region length
 7623 017f 13000000 		.long	.Lset71
 7624              	.Lset72 = .Ltmp1992-.Leh_func_begin7    # Landing pad
 7625 0183 FE000000 		.long	.Lset72
 7626 0187 01       		.byte	1                       # Action
 7627              	.Lset73 = .Ltmp1993-.Leh_func_begin7    # Region start
 7628 0188 3B000000 		.long	.Lset73
 7629              	.Lset74 = .Ltmp1994-.Ltmp1993           # Region length
 7630 018c 17000000 		.long	.Lset74
 7631              	.Lset75 = .Ltmp1995-.Leh_func_begin7    # Landing pad
 7632 0190 03010000 		.long	.Lset75
 7633 0194 01       		.byte	1                       # Action
 7634              	.Lset76 = .Ltmp1994-.Leh_func_begin7    # Region start
 7635 0195 52000000 		.long	.Lset76
 7636              	.Lset77 = .Leh_func_end7-.Ltmp1994      # Region length
 7637 0199 59010000 		.long	.Lset77
 7638 019d 00000000 		.long	0                       # Landing pad
 7639 01a1 00       		.byte	0                       # Action
 7640              	                                        # -- Action Record Table --
 7641              	                                        # Action Record
 7642 01a2 01       		.byte	1                       #   TypeInfo index
 7643 01a3 00       		.byte	0                       #   Next action
 7644              	                                        # -- Catch TypeInfos --
 7645 01a4 00000000 		.long	0                       # TypeInfo
 7646              		.align	4
 7647              	
 7648              		.section	.text._ZN8MatrixOp20reducePivotsByPivotsIN4LELA12SparseMatrixItNS1_12SparseVectorItSt6vec
 7649              		.weak	_ZN8MatrixOp20reducePivotsByPivotsIN4LELA12SparseMatrixItNS1_12SparseVectorItSt6vectorIjSaIj
 7650              		.align	16, 0x90
 7652              	_ZN8MatrixOp20reducePivotsByPivotsIN4LELA12SparseMatrixItNS1_12SparseVectorItSt6vectorIjSaIjEES4_It
 7653              	.Leh_func_begin8:
 7654              	.Lfunc_begin8:
  27:matrix-op.C   **** 
  28:matrix-op.C   **** inline void razArray64(uint64 arr[], uint32 arrSize)
  29:matrix-op.C   **** {
  30:matrix-op.C   **** 	memset(arr, 0, arrSize*sizeof(uint64));
  31:matrix-op.C   **** }
  32:matrix-op.C   **** 
  33:matrix-op.C   **** 
  34:matrix-op.C   **** template <typename Iterator>
  35:matrix-op.C   **** inline void copySparseVectorToDenseArray64(const Iterator& v_start, const Iterator& v_end, uint64 a
  36:matrix-op.C   **** {
  37:matrix-op.C   **** 	Iterator i_v = v_start;
  38:matrix-op.C   **** 
  39:matrix-op.C   **** 	while(i_v != v_end)
  40:matrix-op.C   **** 	{
  41:matrix-op.C   **** 		array[i_v->first] = (uint64)(i_v->second);
  42:matrix-op.C   **** 		++i_v;
  43:matrix-op.C   **** 	}
  44:matrix-op.C   **** }
  45:matrix-op.C   **** 
  46:matrix-op.C   **** template <typename Ring, typename Vector>
  47:matrix-op.C   **** inline void copyDenseArrayToSparseVector64(Ring& R, uint64 array[], uint32 arraySize, Vector& v)
  48:matrix-op.C   **** {
  49:matrix-op.C   **** 	uint32 nb_elts = 0;
  50:matrix-op.C   **** 	Vector tmp;
  51:matrix-op.C   **** 
  52:matrix-op.C   **** 	typename Ring::Element e;
  53:matrix-op.C   **** 
  54:matrix-op.C   **** 	for (uint32 i = 0; i < arraySize; ++i)
  55:matrix-op.C   **** 		if(array[i] != 0)
  56:matrix-op.C   **** 			++nb_elts;
  57:matrix-op.C   **** 
  58:matrix-op.C   **** 	tmp.reserve (nb_elts);
  59:matrix-op.C   **** 
  60:matrix-op.C   **** 	for (uint32 i = 0; i < arraySize; ++i){
  61:matrix-op.C   **** 		ModularTraits<typename Ring::Element>::reduce (e, array[i], R._modulus);
  62:matrix-op.C   **** 		if(!R.isZero(e))
  63:matrix-op.C   **** 		//if(array[i] % R._modulus != 0)
  64:matrix-op.C   **** 		{
  65:matrix-op.C   **** 
  66:matrix-op.C   **** 			tmp.push_back (typename Vector::value_type (i, e));
  67:matrix-op.C   **** 		}
  68:matrix-op.C   **** 	}
  69:matrix-op.C   **** 
  70:matrix-op.C   **** 	std::swap(tmp, v);
  71:matrix-op.C   **** }
  72:matrix-op.C   **** 
  73:matrix-op.C   **** 
  74:matrix-op.C   **** /*template <typename Vector>
  75:matrix-op.C   **** void axpy(uint16 a, Vector& x, uint64 *y)
  76:matrix-op.C   **** {
  77:matrix-op.C   **** 	uint32 sz = x.size ();
  78:matrix-op.C   **** 
  79:matrix-op.C   **** 	register uint32 a32 = (uint32)a;
  80:matrix-op.C   **** 	register uint32 i=0;
  81:matrix-op.C   **** 
  82:matrix-op.C   **** 	for(i=0; i<sz; ++i)
  83:matrix-op.C   **** 		y[x[i].first] += a32 * (uint32)(x[i].second);
  84:matrix-op.C   **** }*/
  85:matrix-op.C   **** 
  86:matrix-op.C   **** void axpy(uint16 a, SparseVector<uint16>& x, uint64 *y)
  87:matrix-op.C   **** {
  88:matrix-op.C   **** 	uint32 sz = x.size ();
  89:matrix-op.C   **** 
  90:matrix-op.C   **** 	register uint32 a32 = (uint32)a;
  91:matrix-op.C   **** 	register uint32 i=0;
  92:matrix-op.C   **** 
  93:matrix-op.C   **** 	for(i=0; i<sz; ++i)
  94:matrix-op.C   **** 		y[x[i].first] += a32 * (uint32)(x[i].second);
  95:matrix-op.C   **** }
  96:matrix-op.C   **** 
  97:matrix-op.C   **** //B <- A^-1 x B
  98:matrix-op.C   **** template <typename Matrix>
  99:matrix-op.C   **** void MatrixOp::reducePivotsByPivots(Modular<uint16>& R, const Matrix& A, Matrix& B, bool t)
 100:matrix-op.C   **** {
 7655              		.loc	1 100 0
 7656              	.Ltmp2409:
 7657              	# BB#0:
 7658 0000 55       		pushq	%rbp
 7659              	.Ltmp2406:
 7660 0001 4889E5   		movq	%rsp, %rbp
 7661              	.Ltmp2407:
 7662 0004 4157     		pushq	%r15
 7663 0006 4156     		pushq	%r14
 7664 0008 4155     		pushq	%r13
 7665 000a 4154     		pushq	%r12
 7666 000c 53       		pushq	%rbx
 7667 000d 4881ECD8 		subq	$216, %rsp
 7667      000000
 7668              	.Ltmp2408:
 7669              		#DEBUG_VALUE: reducePivotsByPivots:R <- RDI+0 # matrix-op.C:35:52
 7670              		#DEBUG_VALUE: reducePivotsByPivots:A <- RSI+0 # matrix-op.C:35:69
 7671              		#DEBUG_VALUE: reducePivotsByPivots:B <- RDX+0 # matrix-op.C:35:80
 7672              	.Ltmp2410:
 7673              		#DEBUG_VALUE: reducePivotsByPivots:B <- [%rbp+$-168]+$0
 7674 0014 48899558 		movq	%rdx, -168(%rbp)        # 8-byte Spill
 7674      FFFFFF
 7675 001b 4889F0   		movq	%rsi, %rax
 7676              	.Ltmp2411:
 7677              		#DEBUG_VALUE: reducePivotsByPivots:A <- [%rbp+$-232]+$0
 7678 001e 48898518 		movq	%rax, -232(%rbp)        # 8-byte Spill
 7678      FFFFFF
 7679 0025 4889BD68 		movq	%rdi, -152(%rbp)        # 8-byte Spill
 7679      FFFFFF
 194:../lela/matrix/sparse.h **** 
 195:../lela/matrix/sparse.h **** 	SparseMatrix (VectorStream<Row> &vs)
 196:../lela/matrix/sparse.h **** 		: _A (vs.size ()), _m (vs.size ()), _n (vs.dim ())
 197:../lela/matrix/sparse.h **** 	{
 198:../lela/matrix/sparse.h **** 		for (RowIterator i = rowBegin (); i != rowEnd (); ++i)
 199:../lela/matrix/sparse.h **** 			vs >> *i;
 200:../lela/matrix/sparse.h **** 	}
 201:../lela/matrix/sparse.h **** 
 202:../lela/matrix/sparse.h **** 	SparseMatrix (const SparseMatrix &A)
 203:../lela/matrix/sparse.h **** 		: _A (A._A), _m (A._m), _n (A._n) {}
 204:../lela/matrix/sparse.h **** 
 205:../lela/matrix/sparse.h ****     	template<class VectorType>
 206:../lela/matrix/sparse.h **** 	SparseMatrix (const SparseMatrix<Element, VectorType, VectorRepresentationTypes::Sparse> &A)
 207:../lela/matrix/sparse.h **** 		: _A (A._m), _m (A._m), _n (A._n)
 208:../lela/matrix/sparse.h **** 	{
 209:../lela/matrix/sparse.h **** 		typename Rep::iterator meit = this->_A.begin ();
 210:../lela/matrix/sparse.h **** 		typename SparseMatrix<Element, VectorType, VectorRepresentationTypes::Sparse>::Rep::const_iterato
 211:../lela/matrix/sparse.h **** 		for (; meit != this->_A.end (); ++meit, ++copit)
 212:../lela/matrix/sparse.h **** 			LELA::RawVector<Element>::convert (*meit, *copit);
 213:../lela/matrix/sparse.h ****         }
 214:../lela/matrix/sparse.h **** 
 215:../lela/matrix/sparse.h **** 	~SparseMatrix () {}
 216:../lela/matrix/sparse.h **** 
 217:../lela/matrix/sparse.h **** 	size_t rowdim () const { return _m; }
 7680              		.loc	30 217 9
 7681              	.Ltmp2412:
 7682              		#DEBUG_VALUE: rowdim:this <- [%rbp+$-232]+$0 # ../lela/matrix/sparse.h:217:9[ matrix-op.C:101:2 ]
 7683              	.Ltmp2413:
 7684              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 7685              		.loc	30 217 27
 7686              	.Ltmp2414:
 7687 002c 488B4018 		movq	24(%rax), %rax          # ../lela/matrix/sparse.h:217:27[ matrix-op.C:101:2 ]
 7688              	.Ltmp2415:
 7689              		#DEBUG_VALUE: rowdim:this <- [%rbp+$-168]+$0
 7690 0030 483B4218 		cmpq	24(%rdx), %rax          # ../lela/matrix/sparse.h:217:27[ matrix-op.C:101:2 ]
 7691 0034 0F854406 		jne	.LBB8_36
 7691      0000
 7692              	# BB#1:
 7693              	.Ltmp2416:
 7694              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 7695              	.Ltmp2417:
 7696              		#DEBUG_VALUE: reducePivotsByPivots:A <- [%rbp+$-232]+$0
 7697              	.Ltmp2418:
 7698              		#DEBUG_VALUE: reducePivotsByPivots:A <- undef
 7699              	.Ltmp2419:
 7700              		#DEBUG_VALUE: reducePivotsByPivots:B <- [%rbp+$-168]+$0
 7701              	.Ltmp2420:
 7702              		#DEBUG_VALUE: rowdim:this <- [%rbp+$-168]+$0
 7703              	.Ltmp2421:
 218:../lela/matrix/sparse.h **** 	size_t coldim () const { return _n; }
 7704              		.loc	30 218 27
 7705              	.Ltmp2422:
 7706 003a 488B8D18 		movq	-232(%rbp), %rcx        # ../lela/matrix/sparse.h:218:27[ matrix-op.C:102:2 ]
 7706      FFFFFF
 7707              	                                        # 8-byte Reload
 7708 0041 48394120 		cmpq	%rax, 32(%rcx)          # ../lela/matrix/sparse.h:218:27[ matrix-op.C:102:2 ]
 7709              		.loc	30 218 9
 7710              	.Ltmp2423:
 7711              		#DEBUG_VALUE: coldim:this <- [%rbp+$-232]+$0 # ../lela/matrix/sparse.h:218:9[ matrix-op.C:102:2 ]
 7712              	.Ltmp2424:
 7713              		#DEBUG_VALUE: rowdim:this <- [%rbp+$-232]+$0
 7714 0045 0F854C06 		jne	.LBB8_37
 7714      0000
 7715              	# BB#2:
 7716              	.Ltmp2425:
 7717              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 7718              	.Ltmp2426:
 7719              		#DEBUG_VALUE: reducePivotsByPivots:B <- [%rbp+$-168]+$0
 7720              	.Ltmp2427:
 7721              		#DEBUG_VALUE: reducePivotsByPivots:B <- undef
 7722              	.Ltmp2428:
 7723              		#DEBUG_VALUE: rowdim:this <- [%rbp+$-232]+$0
 7724              	.Ltmp2429:
 7725              		#DEBUG_VALUE: coldim:this <- [%rbp+$-232]+$0
 7726              	.Ltmp2430:
 7727              		#DEBUG_VALUE: coldim:this <- [%rbp+$-168]+$0
 7728              	.Ltmp2431:
 7729              		.loc	30 218 27
 7730              	.Ltmp2432:
 7731 004b 4889D1   		movq	%rdx, %rcx              # ../lela/matrix/sparse.h:218:27[ matrix-op.C:114:31 ]
 7732 004e 488B4920 		movq	32(%rcx), %rcx          # ../lela/matrix/sparse.h:218:27[ matrix-op.C:114:31 ]
 7733 0052 48898D10 		movq	%rcx, -240(%rbp)        # 8-byte Spill
 7733      FFFFFF
 7734 0059 488D0CCD 		leaq	(,%rcx,8), %rcx
 7734      00000000 
 7735 0061 48BAF8FF 		movabsq	$34359738360, %rdx      # imm = 0x7FFFFFFF8
 7735      FFFF0700 
 7735      0000
 7736              	.Ltmp2433:
 101:matrix-op.C   **** 	assert(A.rowdim () == B.rowdim ());
 102:matrix-op.C   **** 	assert(A.coldim () == A.rowdim ());
 103:matrix-op.C   **** 
 104:matrix-op.C   **** 	typedef Modular<uint16> Ring;
 105:matrix-op.C   **** 	
 106:matrix-op.C   **** 	typename Matrix::ConstRowIterator i_A;
 107:matrix-op.C   **** 	typename Matrix::Row::const_iterator row_it_A, row_it_A_end;
 108:matrix-op.C   **** 
 109:matrix-op.C   **** 	typename Matrix::RowIterator i_B, B_ap;
 110:matrix-op.C   **** 	typename Matrix::Row::const_iterator row_it_B_end;
 111:matrix-op.C   **** 	//typename Matrix::Row *rowB;
 112:matrix-op.C   **** 	LELA::SparseVector<uint16> *rowB;
 113:matrix-op.C   **** 
 114:matrix-op.C   **** 	uint32 B_coldim = B.coldim ();
 115:matrix-op.C   **** 	uint64 tmpDenseArray[B_coldim];
 7737              		.loc	1 115 32
 7738              	.Ltmp2434:
 7739 006b 4821CA   		andq	%rcx, %rdx              # matrix-op.C:115:32
 7740 006e 48899508 		movq	%rdx, -248(%rbp)        # matrix-op.C:115:32
 7740      FFFFFF
 7741              	                                        # 8-byte Spill
 7742 0075 488D4A0F 		leaq	15(%rdx), %rcx          # matrix-op.C:115:32
 7743 0079 4883E1F0 		andq	$-16, %rcx              # matrix-op.C:115:32
 7744 007d 4889E2   		movq	%rsp, %rdx              # matrix-op.C:115:32
 7745 0080 4829CA   		subq	%rcx, %rdx              # matrix-op.C:115:32
 7746 0083 48895580 		movq	%rdx, -128(%rbp)        # matrix-op.C:115:32
 7747              	                                        # 8-byte Spill
 7748 0087 4889D4   		movq	%rdx, %rsp              # matrix-op.C:115:32
 116:matrix-op.C   **** 
 117:matrix-op.C   **** 	TIMER_DECLARE_(RazArrayTimer);
 7749              		.loc	1 117 2
 7750              	.Ltmp2435:
 7751              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0 # matrix-op.C:117:2
 118:matrix-op.C   **** 	TIMER_DECLARE_(CopySparseVectorToDenseArrayTimer);
 7752              		.loc	1 118 2
 7753              	.Ltmp2436:
 7754              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0 # matrix-op.C:118:2
 119:matrix-op.C   **** 	TIMER_DECLARE_(CopyDenseArrayToSparseVectorTimer);
 7755              		.loc	1 119 2
 7756              	.Ltmp2437:
 7757              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0 # matrix-op.C:119:2
 120:matrix-op.C   **** 	TIMER_DECLARE_(AxpyTimer);
 7758              		.loc	1 120 2
 7759              	.Ltmp2438:
 7760              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0 # matrix-op.C:120:2
 121:matrix-op.C   **** 	TIMER_DECLARE_(AxpyOutTimer);
 7761              		.loc	1 121 2
 7762              	.Ltmp2439:
 7763              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0 # matrix-op.C:121:2
 219:../lela/matrix/sparse.h **** 	size_t size () const
 220:../lela/matrix/sparse.h **** 	{ 
 221:../lela/matrix/sparse.h **** 		size_t s = 0;
 222:../lela/matrix/sparse.h **** 
 223:../lela/matrix/sparse.h **** 		for (typename Rep::const_iterator it = _A.begin (); it != _A.end (); ++it)
 224:../lela/matrix/sparse.h **** 			s+= LELA::RawVector<_Element>::size (*it);
 225:../lela/matrix/sparse.h **** 
 226:../lela/matrix/sparse.h **** 		return s;
 227:../lela/matrix/sparse.h ****         }
 228:../lela/matrix/sparse.h **** 
 229:../lela/matrix/sparse.h **** 	void resize (size_t m, size_t n)
 230:../lela/matrix/sparse.h **** 	{
 231:../lela/matrix/sparse.h **** 		_m = m; _n = n;
 232:../lela/matrix/sparse.h **** 		_A.resize (m);
 233:../lela/matrix/sparse.h **** 	}
 234:../lela/matrix/sparse.h **** 
 235:../lela/matrix/sparse.h **** 	void setEntry (size_t i, size_t j, const Element &value);
 236:../lela/matrix/sparse.h **** 	void eraseEntry (size_t i, size_t j);
 237:../lela/matrix/sparse.h **** 	bool getEntry (Element &x, size_t i, size_t j) const;
 238:../lela/matrix/sparse.h **** 
 239:../lela/matrix/sparse.h **** 	typedef typename Rep::iterator RowIterator;
 240:../lela/matrix/sparse.h **** 	typedef typename Rep::const_iterator ConstRowIterator;
 241:../lela/matrix/sparse.h **** 
 242:../lela/matrix/sparse.h **** 	RowIterator      rowBegin ()       { return _A.begin (); }
 243:../lela/matrix/sparse.h **** 	ConstRowIterator rowBegin () const { return _A.begin (); }
 244:../lela/matrix/sparse.h **** 	RowIterator      rowEnd ()         { return _A.end (); }
 7764              		.loc	30 244 19
 7765              	.Ltmp2440:
 7766              		#DEBUG_VALUE: rowEnd:this <- [%rbp+$-168]+$0 # ../lela/matrix/sparse.h:244:19[ matrix-op.C:129:2 ]
 114:matrix-op.C   **** 	uint32 B_coldim = B.coldim ();
 7767              		.loc	1 114 31
 7768              	.Ltmp2441:
 7769              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0 # matrix-op.C:114:31
 122:matrix-op.C   **** 
 123:matrix-op.C   **** #ifdef SHOW_PROGRESS
 124:matrix-op.C   **** 	uint32 i=A.rowdim ();
 125:matrix-op.C   **** 	std::ostream &report = commentator.report (Commentator::LEVEL_NORMAL, INTERNAL_DESCRIPTION);
 126:matrix-op.C   **** 	report << "In spec Modular<uint16>" << std::endl;
 127:matrix-op.C   **** #endif
 128:matrix-op.C   **** 	i_A = A.rowEnd ();
 129:matrix-op.C   **** 	i_B = B.rowEnd ();
 130:matrix-op.C   **** 
 131:matrix-op.C   **** 	//skip last row
 132:matrix-op.C   **** 	--i_A;
 133:matrix-op.C   **** 	--i_B;
 134:matrix-op.C   **** 	if(A.rowdim () == 1)
 7770              		.loc	1 134 2
 7771              	.Ltmp2442:
 7772 008a 4883F801 		cmpq	$1, %rax                # matrix-op.C:134:2
 7773 008e 48C745C8 		movq	$0, -56(%rbp)
 7773      00000000 
 7774 0096 48C745B8 		movq	$0, -72(%rbp)
 7774      00000000 
 7775 009e 48C745A8 		movq	$0, -88(%rbp)
 7775      00000000 
 7776 00a6 48C74598 		movq	$0, -104(%rbp)
 7776      00000000 
 7777 00ae 48C74588 		movq	$0, -120(%rbp)
 7777      00000000 
 7778 00b6 0F84B305 		je	.LBB8_35
 7778      0000
 7779              	# BB#3:                                 # %.preheader
 7780              	.Ltmp2443:
 7781              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 7782              	.Ltmp2444:
 7783              		#DEBUG_VALUE: rowdim:this <- [%rbp+$-232]+$0
 7784              	.Ltmp2445:
 7785              		#DEBUG_VALUE: coldim:this <- [%rbp+$-168]+$0
 7786              	.Ltmp2446:
 7787              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 7788              	.Ltmp2447:
 7789              		#DEBUG_VALUE: rowEnd:this <- [%rbp+$-168]+$0
 7790              	.Ltmp2448:
 7791              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 7792              	.Ltmp2449:
 7793              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 7794              	.Ltmp2450:
 7795              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 7796              	.Ltmp2451:
 7797              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 7798              	.Ltmp2452:
 7799              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
   1:/usr/include/c++/4.6.3/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
   3:/usr/include/c++/4.6.3/bits/stl_vector.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
   4:/usr/include/c++/4.6.3/bits/stl_vector.h **** // 2011 Free Software Foundation, Inc.
   5:/usr/include/c++/4.6.3/bits/stl_vector.h **** //
   6:/usr/include/c++/4.6.3/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/usr/include/c++/4.6.3/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   8:/usr/include/c++/4.6.3/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   9:/usr/include/c++/4.6.3/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/4.6.3/bits/stl_vector.h **** // any later version.
  11:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
  12:/usr/include/c++/4.6.3/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  13:/usr/include/c++/4.6.3/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/4.6.3/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/4.6.3/bits/stl_vector.h **** // GNU General Public License for more details.
  16:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
  17:/usr/include/c++/4.6.3/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/4.6.3/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/4.6.3/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
  21:/usr/include/c++/4.6.3/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/4.6.3/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/4.6.3/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/4.6.3/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
  26:/usr/include/c++/4.6.3/bits/stl_vector.h **** /*
  27:/usr/include/c++/4.6.3/bits/stl_vector.h ****  *
  28:/usr/include/c++/4.6.3/bits/stl_vector.h ****  * Copyright (c) 1994
  29:/usr/include/c++/4.6.3/bits/stl_vector.h ****  * Hewlett-Packard Company
  30:/usr/include/c++/4.6.3/bits/stl_vector.h ****  *
  31:/usr/include/c++/4.6.3/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  32:/usr/include/c++/4.6.3/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  33:/usr/include/c++/4.6.3/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  34:/usr/include/c++/4.6.3/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  35:/usr/include/c++/4.6.3/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  36:/usr/include/c++/4.6.3/bits/stl_vector.h ****  * representations about the suitability of this software for any
  37:/usr/include/c++/4.6.3/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  38:/usr/include/c++/4.6.3/bits/stl_vector.h ****  *
  39:/usr/include/c++/4.6.3/bits/stl_vector.h ****  *
  40:/usr/include/c++/4.6.3/bits/stl_vector.h ****  * Copyright (c) 1996
  41:/usr/include/c++/4.6.3/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  42:/usr/include/c++/4.6.3/bits/stl_vector.h ****  *
  43:/usr/include/c++/4.6.3/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  44:/usr/include/c++/4.6.3/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  45:/usr/include/c++/4.6.3/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  46:/usr/include/c++/4.6.3/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  47:/usr/include/c++/4.6.3/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  48:/usr/include/c++/4.6.3/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  49:/usr/include/c++/4.6.3/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  50:/usr/include/c++/4.6.3/bits/stl_vector.h ****  */
  51:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
  52:/usr/include/c++/4.6.3/bits/stl_vector.h **** /** @file bits/stl_vector.h
  53:/usr/include/c++/4.6.3/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  54:/usr/include/c++/4.6.3/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  55:/usr/include/c++/4.6.3/bits/stl_vector.h ****  */
  56:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
  57:/usr/include/c++/4.6.3/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  58:/usr/include/c++/4.6.3/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  59:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
  60:/usr/include/c++/4.6.3/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  61:/usr/include/c++/4.6.3/bits/stl_vector.h **** #include <bits/functexcept.h>
  62:/usr/include/c++/4.6.3/bits/stl_vector.h **** #include <bits/concept_check.h>
  63:/usr/include/c++/4.6.3/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
  65:/usr/include/c++/4.6.3/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  66:/usr/include/c++/4.6.3/bits/stl_vector.h **** {
  67:/usr/include/c++/4.6.3/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  68:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
  69:/usr/include/c++/4.6.3/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  70:/usr/include/c++/4.6.3/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  71:/usr/include/c++/4.6.3/bits/stl_vector.h ****     struct _Vector_base
  72:/usr/include/c++/4.6.3/bits/stl_vector.h ****     {
  73:/usr/include/c++/4.6.3/bits/stl_vector.h ****       typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;
  74:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
  75:/usr/include/c++/4.6.3/bits/stl_vector.h ****       struct _Vector_impl 
  76:/usr/include/c++/4.6.3/bits/stl_vector.h ****       : public _Tp_alloc_type
  77:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
  78:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	typename _Tp_alloc_type::pointer _M_start;
  79:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	typename _Tp_alloc_type::pointer _M_finish;
  80:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	typename _Tp_alloc_type::pointer _M_end_of_storage;
  81:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
  82:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	_Vector_impl()
  83:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  84:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	{ }
  85:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
  86:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a)
  87:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  88:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	{ }
  89:/usr/include/c++/4.6.3/bits/stl_vector.h ****       };
  90:/usr/include/c++/4.6.3/bits/stl_vector.h ****       
  91:/usr/include/c++/4.6.3/bits/stl_vector.h ****     public:
  92:/usr/include/c++/4.6.3/bits/stl_vector.h ****       typedef _Alloc allocator_type;
  93:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
  94:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _Tp_alloc_type&
  95:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_get_Tp_allocator()
  96:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  97:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
  98:/usr/include/c++/4.6.3/bits/stl_vector.h ****       const _Tp_alloc_type&
  99:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_get_Tp_allocator() const
 100:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 101:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 102:/usr/include/c++/4.6.3/bits/stl_vector.h ****       allocator_type
 103:/usr/include/c++/4.6.3/bits/stl_vector.h ****       get_allocator() const
 104:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 105:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 106:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _Vector_base()
 107:/usr/include/c++/4.6.3/bits/stl_vector.h ****       : _M_impl() { }
 108:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 109:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a)
 110:/usr/include/c++/4.6.3/bits/stl_vector.h ****       : _M_impl(__a) { }
 111:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 112:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _Vector_base(size_t __n)
 113:/usr/include/c++/4.6.3/bits/stl_vector.h ****       : _M_impl()
 114:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
 115:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 116:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 117:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 118:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
 119:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 120:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 121:/usr/include/c++/4.6.3/bits/stl_vector.h ****       : _M_impl(__a)
 122:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
 123:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 124:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 125:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 126:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
 127:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 128:/usr/include/c++/4.6.3/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 129:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x)
 130:/usr/include/c++/4.6.3/bits/stl_vector.h ****       : _M_impl(__x._M_get_Tp_allocator())
 131:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
 132:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	this->_M_impl._M_start = __x._M_impl._M_start;
 133:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	this->_M_impl._M_finish = __x._M_impl._M_finish;
 134:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
 135:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	__x._M_impl._M_start = 0;
 136:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	__x._M_impl._M_finish = 0;
 137:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	__x._M_impl._M_end_of_storage = 0;
 138:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
 139:/usr/include/c++/4.6.3/bits/stl_vector.h **** #endif
 140:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 141:/usr/include/c++/4.6.3/bits/stl_vector.h ****       ~_Vector_base()
 142:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 143:/usr/include/c++/4.6.3/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 144:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 145:/usr/include/c++/4.6.3/bits/stl_vector.h ****     public:
 146:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _Vector_impl _M_impl;
 147:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 148:/usr/include/c++/4.6.3/bits/stl_vector.h ****       typename _Tp_alloc_type::pointer
 149:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_allocate(size_t __n)
 150:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return __n != 0 ? _M_impl.allocate(__n) : 0; }
 151:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 152:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
 153:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)
 154:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
 155:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	if (__p)
 156:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  _M_impl.deallocate(__p, __n);
 157:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
 158:/usr/include/c++/4.6.3/bits/stl_vector.h ****     };
 159:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 160:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 161:/usr/include/c++/4.6.3/bits/stl_vector.h ****   /**
 162:/usr/include/c++/4.6.3/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 163:/usr/include/c++/4.6.3/bits/stl_vector.h ****    *  individual elements in any order.
 164:/usr/include/c++/4.6.3/bits/stl_vector.h ****    *
 165:/usr/include/c++/4.6.3/bits/stl_vector.h ****    *  @ingroup sequences
 166:/usr/include/c++/4.6.3/bits/stl_vector.h ****    *
 167:/usr/include/c++/4.6.3/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 168:/usr/include/c++/4.6.3/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 169:/usr/include/c++/4.6.3/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 170:/usr/include/c++/4.6.3/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 171:/usr/include/c++/4.6.3/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 172:/usr/include/c++/4.6.3/bits/stl_vector.h ****    *
 173:/usr/include/c++/4.6.3/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 174:/usr/include/c++/4.6.3/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 175:/usr/include/c++/4.6.3/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 176:/usr/include/c++/4.6.3/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 177:/usr/include/c++/4.6.3/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 178:/usr/include/c++/4.6.3/bits/stl_vector.h ****   */
 179:/usr/include/c++/4.6.3/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 180:/usr/include/c++/4.6.3/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 181:/usr/include/c++/4.6.3/bits/stl_vector.h ****     {
 182:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Concept requirements.
 183:/usr/include/c++/4.6.3/bits/stl_vector.h ****       typedef typename _Alloc::value_type                _Alloc_value_type;
 184:/usr/include/c++/4.6.3/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 185:/usr/include/c++/4.6.3/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 186:/usr/include/c++/4.6.3/bits/stl_vector.h ****       
 187:/usr/include/c++/4.6.3/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			 _Base;
 188:/usr/include/c++/4.6.3/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;
 189:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 190:/usr/include/c++/4.6.3/bits/stl_vector.h ****     public:
 191:/usr/include/c++/4.6.3/bits/stl_vector.h ****       typedef _Tp					 value_type;
 192:/usr/include/c++/4.6.3/bits/stl_vector.h ****       typedef typename _Tp_alloc_type::pointer           pointer;
 193:/usr/include/c++/4.6.3/bits/stl_vector.h ****       typedef typename _Tp_alloc_type::const_pointer     const_pointer;
 194:/usr/include/c++/4.6.3/bits/stl_vector.h ****       typedef typename _Tp_alloc_type::reference         reference;
 195:/usr/include/c++/4.6.3/bits/stl_vector.h ****       typedef typename _Tp_alloc_type::const_reference   const_reference;
 196:/usr/include/c++/4.6.3/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 197:/usr/include/c++/4.6.3/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 198:/usr/include/c++/4.6.3/bits/stl_vector.h ****       const_iterator;
 199:/usr/include/c++/4.6.3/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;
 200:/usr/include/c++/4.6.3/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		 reverse_iterator;
 201:/usr/include/c++/4.6.3/bits/stl_vector.h ****       typedef size_t					 size_type;
 202:/usr/include/c++/4.6.3/bits/stl_vector.h ****       typedef ptrdiff_t					 difference_type;
 203:/usr/include/c++/4.6.3/bits/stl_vector.h ****       typedef _Alloc                        		 allocator_type;
 204:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 205:/usr/include/c++/4.6.3/bits/stl_vector.h ****     protected:
 206:/usr/include/c++/4.6.3/bits/stl_vector.h ****       using _Base::_M_allocate;
 207:/usr/include/c++/4.6.3/bits/stl_vector.h ****       using _Base::_M_deallocate;
 208:/usr/include/c++/4.6.3/bits/stl_vector.h ****       using _Base::_M_impl;
 209:/usr/include/c++/4.6.3/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 210:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 211:/usr/include/c++/4.6.3/bits/stl_vector.h ****     public:
 212:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 213:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 214:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 215:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Default constructor creates no elements.
 216:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 217:/usr/include/c++/4.6.3/bits/stl_vector.h ****       vector()
 218:/usr/include/c++/4.6.3/bits/stl_vector.h ****       : _Base() { }
 219:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 220:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 221:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 222:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  a  An allocator object.
 223:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 224:/usr/include/c++/4.6.3/bits/stl_vector.h ****       explicit
 225:/usr/include/c++/4.6.3/bits/stl_vector.h ****       vector(const allocator_type& __a)
 226:/usr/include/c++/4.6.3/bits/stl_vector.h ****       : _Base(__a) { }
 227:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 228:/usr/include/c++/4.6.3/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 229:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 230:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 231:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  n  The number of elements to initially create.
 232:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 233:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This constructor fills the %vector with @a n default
 234:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  constructed elements.
 235:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 236:/usr/include/c++/4.6.3/bits/stl_vector.h ****       explicit
 237:/usr/include/c++/4.6.3/bits/stl_vector.h ****       vector(size_type __n)
 238:/usr/include/c++/4.6.3/bits/stl_vector.h ****       : _Base(__n)
 239:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 240:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 241:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 242:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 243:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  n  The number of elements to initially create.
 244:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  value  An element to copy.
 245:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  a  An allocator.
 246:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 247:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This constructor fills the %vector with @a n copies of @a value.
 248:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 249:/usr/include/c++/4.6.3/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 250:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 251:/usr/include/c++/4.6.3/bits/stl_vector.h ****       : _Base(__n, __a)
 252:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 253:/usr/include/c++/4.6.3/bits/stl_vector.h **** #else
 254:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 255:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 256:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  n  The number of elements to initially create.
 257:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  value  An element to copy.
 258:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  a  An allocator.
 259:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 260:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This constructor fills the %vector with @a n copies of @a value.
 261:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 262:/usr/include/c++/4.6.3/bits/stl_vector.h ****       explicit
 263:/usr/include/c++/4.6.3/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 264:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 265:/usr/include/c++/4.6.3/bits/stl_vector.h ****       : _Base(__n, __a)
 266:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 267:/usr/include/c++/4.6.3/bits/stl_vector.h **** #endif
 268:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 269:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 270:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 271:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  x  A %vector of identical element and allocator types.
 272:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 273:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocation
 274:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  object used by @a x.  All the elements of @a x are copied,
 275:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  but any extra memory in
 276:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @a x (for fast expansion) will not be copied.
 277:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 278:/usr/include/c++/4.6.3/bits/stl_vector.h ****       vector(const vector& __x)
 279:/usr/include/c++/4.6.3/bits/stl_vector.h ****       : _Base(__x.size(), __x._M_get_Tp_allocator())
 280:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 281:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 282:/usr/include/c++/4.6.3/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 283:/usr/include/c++/4.6.3/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 284:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
 285:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 286:/usr/include/c++/4.6.3/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 287:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 288:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 289:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  x  A %vector of identical element and allocator types.
 290:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 291:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of @a x.
 292:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  The contents of @a x are a valid, but unspecified %vector.
 293:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 294:/usr/include/c++/4.6.3/bits/stl_vector.h ****       vector(vector&& __x)
 295:/usr/include/c++/4.6.3/bits/stl_vector.h ****       : _Base(std::move(__x)) { }
 296:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 297:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 298:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 299:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  l  An initializer_list.
 300:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  a  An allocator.
 301:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 302:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 303:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  initializer_list @a l.
 304:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 305:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 306:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  (where N is @a l.size()) and do no memory reallocation.
 307:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 308:/usr/include/c++/4.6.3/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 309:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 310:/usr/include/c++/4.6.3/bits/stl_vector.h ****       : _Base(__a)
 311:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
 312:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 313:/usr/include/c++/4.6.3/bits/stl_vector.h **** 			    random_access_iterator_tag());
 314:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
 315:/usr/include/c++/4.6.3/bits/stl_vector.h **** #endif
 316:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 317:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 318:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 319:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  first  An input iterator.
 320:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  last  An input iterator.
 321:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  a  An allocator.
 322:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 323:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 324:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  [first,last).
 325:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 326:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 327:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 328:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 329:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 330:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 331:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 332:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 333:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename _InputIterator>
 334:/usr/include/c++/4.6.3/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 335:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 336:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	: _Base(__a)
 337:/usr/include/c++/4.6.3/bits/stl_vector.h ****         {
 338:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 339:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 340:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 341:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	}
 342:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 343:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 344:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 345:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 346:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 347:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  responsibility.
 348:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 349:/usr/include/c++/4.6.3/bits/stl_vector.h ****       ~vector()
 350:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 351:/usr/include/c++/4.6.3/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 352:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 353:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 354:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 355:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  x  A %vector of identical element and allocator types.
 356:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 357:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  All the elements of @a x are copied, but any extra memory in
 358:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @a x (for fast expansion) will not be copied.  Unlike the
 359:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  copy constructor, the allocator object is not copied.
 360:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 361:/usr/include/c++/4.6.3/bits/stl_vector.h ****       vector&
 362:/usr/include/c++/4.6.3/bits/stl_vector.h ****       operator=(const vector& __x);
 363:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 364:/usr/include/c++/4.6.3/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 365:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 366:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 367:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  x  A %vector of identical element and allocator types.
 368:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 369:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  The contents of @a x are moved into this %vector (without copying).
 370:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @a x is a valid, but unspecified %vector.
 371:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 372:/usr/include/c++/4.6.3/bits/stl_vector.h ****       vector&
 373:/usr/include/c++/4.6.3/bits/stl_vector.h ****       operator=(vector&& __x)
 374:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
 375:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	// NB: DR 1204.
 376:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	// NB: DR 675.
 377:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	this->clear();
 378:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	this->swap(__x);
 379:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	return *this;
 380:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
 381:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 382:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 383:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 384:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  l  An initializer_list.
 385:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 386:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 387:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  initializer list @a l.
 388:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 389:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 390:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 391:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 392:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 393:/usr/include/c++/4.6.3/bits/stl_vector.h ****       vector&
 394:/usr/include/c++/4.6.3/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 395:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
 396:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	this->assign(__l.begin(), __l.end());
 397:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	return *this;
 398:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
 399:/usr/include/c++/4.6.3/bits/stl_vector.h **** #endif
 400:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 401:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 402:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 403:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  n  Number of elements to be assigned.
 404:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  val  Value to be assigned.
 405:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 406:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This function fills a %vector with @a n copies of the given
 407:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 408:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 409:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  the number of elements assigned.  Old data may be lost.
 410:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 411:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
 412:/usr/include/c++/4.6.3/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 413:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 414:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 415:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 416:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 417:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  first  An input iterator.
 418:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  last   An input iterator.
 419:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 420:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 421:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  range [first,last).
 422:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 423:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 424:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 425:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 426:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 427:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename _InputIterator>
 428:/usr/include/c++/4.6.3/bits/stl_vector.h ****         void
 429:/usr/include/c++/4.6.3/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 430:/usr/include/c++/4.6.3/bits/stl_vector.h ****         {
 431:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 432:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 433:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 434:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	}
 435:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 436:/usr/include/c++/4.6.3/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 437:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 438:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 439:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  l  An initializer_list.
 440:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 441:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 442:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  initializer list @a l.
 443:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 444:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 445:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 446:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 447:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 448:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
 449:/usr/include/c++/4.6.3/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 450:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { this->assign(__l.begin(), __l.end()); }
 451:/usr/include/c++/4.6.3/bits/stl_vector.h **** #endif
 452:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 453:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 454:/usr/include/c++/4.6.3/bits/stl_vector.h ****       using _Base::get_allocator;
 455:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 456:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // iterators
 457:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 458:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 459:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 460:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  element order.
 461:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 462:/usr/include/c++/4.6.3/bits/stl_vector.h ****       iterator
 463:/usr/include/c++/4.6.3/bits/stl_vector.h ****       begin()
 464:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 465:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 466:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 467:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 468:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 469:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  element order.
 470:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 471:/usr/include/c++/4.6.3/bits/stl_vector.h ****       const_iterator
 472:/usr/include/c++/4.6.3/bits/stl_vector.h ****       begin() const
 473:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 474:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 475:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 476:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 477:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 478:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  element order.
 479:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 480:/usr/include/c++/4.6.3/bits/stl_vector.h ****       iterator
 481:/usr/include/c++/4.6.3/bits/stl_vector.h ****       end()
 482:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 483:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 484:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 485:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 486:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 487:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  ordinary element order.
 488:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 489:/usr/include/c++/4.6.3/bits/stl_vector.h ****       const_iterator
 490:/usr/include/c++/4.6.3/bits/stl_vector.h ****       end() const
 491:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 7800              		.loc	34 491 9
 7801              	.Ltmp2453:
 7802 00bc 488B8518 		movq	-232(%rbp), %rax        # /usr/include/c++/4.6.3/bits/stl_vector.h:491:9[ ../lela/matrix/spar
 7802      FFFFFF
 7803              	                                        # 8-byte Reload
 7804 00c3 488B4008 		movq	8(%rax), %rax           # /usr/include/c++/4.6.3/bits/stl_vector.h:491:9[ ../lela/matrix/spar
 7805 00c7 48898548 		movq	%rax, -184(%rbp)        # 8-byte Spill
 7805      FFFFFF
 7806 00ce 488B8558 		movq	-168(%rbp), %rax        # 8-byte Reload
 7806      FFFFFF
 7807 00d5 488B4008 		movq	8(%rax), %rax
 7808 00d9 4883C0A0 		addq	$-96, %rax
 7809 00dd 48898550 		movq	%rax, -176(%rbp)        # 8-byte Spill
 7809      FFFFFF
 7810 00e4 660FEFC0 		pxor	%xmm0, %xmm0
 7811 00e8 F20F1185 		movsd	%xmm0, -192(%rbp)       # 8-byte Spill
 7811      40FFFFFF 
 7812 00f0 F20F1185 		movsd	%xmm0, -200(%rbp)       # 8-byte Spill
 7812      38FFFFFF 
 7813 00f8 F20F1185 		movsd	%xmm0, -208(%rbp)       # 8-byte Spill
 7813      30FFFFFF 
 7814 0100 F20F1185 		movsd	%xmm0, -136(%rbp)       # 8-byte Spill
 7814      78FFFFFF 
 7815 0108 F20F1185 		movsd	%xmm0, -216(%rbp)       # 8-byte Spill
 7815      28FFFFFF 
 7816              		.align	16, 0x90
 7817              	.LBB8_4:                                # =>This Loop Header: Depth=1
 7818              	                                        #     Child Loop BB8_6 Depth 2
 7819              	                                        #     Child Loop BB8_9 Depth 2
 7820              	                                        #       Child Loop BB8_11 Depth 3
 7821              	.Ltmp2454:
 7822              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 7823              	.Ltmp2455:
 7824              		#DEBUG_VALUE: rowdim:this <- [%rbp+$-232]+$0
 7825              	.Ltmp2456:
 7826              		#DEBUG_VALUE: coldim:this <- [%rbp+$-168]+$0
 7827              	.Ltmp2457:
 7828              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 7829              	.Ltmp2458:
 7830              		#DEBUG_VALUE: rowEnd:this <- [%rbp+$-168]+$0
 7831              	.Ltmp2459:
 7832              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 7833              	.Ltmp2460:
 7834              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 7835              	.Ltmp2461:
 7836              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 7837              	.Ltmp2462:
 7838              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 7839              	.Ltmp2463:
 7840              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 7841 0110 488D5DC8 		leaq	-56(%rbp), %rbx
 7842              	.Ltmp2464:
 135:matrix-op.C   **** 		return;
 136:matrix-op.C   **** 
 137:matrix-op.C   **** 	do {
 138:matrix-op.C   **** 		--i_A;
 139:matrix-op.C   **** 		--i_B;
 140:matrix-op.C   **** 
 141:matrix-op.C   **** #ifdef SHOW_PROGRESS
 142:matrix-op.C   **** 		--i;
 143:matrix-op.C   ****                 report << "                                                                    \r";
 144:matrix-op.C   ****                 report << "\t" << i << std::ends;
 145:matrix-op.C   **** #endif
 146:matrix-op.C   **** 
 147:matrix-op.C   **** 		TIMER_START_(RazArrayTimer);
 7843              		.loc	1 147 3
 7844              	.Ltmp2465:
 7845 0114 4889DF   		movq	%rbx, %rdi              # matrix-op.C:147:3
 7846 0117 E8000000 		callq	_ZN4LELA9UserTimer5startEv # matrix-op.C:147:3
 7846      00
  30:matrix-op.C   **** 	memset(arr, 0, arrSize*sizeof(uint64));
 7847              		.loc	1 30 2
 7848              	.Ltmp2466:
 7849 011c 488B7D80 		movq	-128(%rbp), %rdi        # matrix-op.C:30:2[ matrix-op.C:148:5 ]
 7850              	                                        # 8-byte Reload
 7851 0120 31F6     		xorl	%esi, %esi
 7852 0122 488B9508 		movq	-248(%rbp), %rdx        # matrix-op.C:30:2[ matrix-op.C:148:5 ]
 7852      FFFFFF
 7853              	                                        # 8-byte Reload
 7854 0129 E8000000 		callq	memset                  # matrix-op.C:30:2[ matrix-op.C:148:5 ]
 7854      00
 7855              	.Ltmp2467:
 148:matrix-op.C   **** 			 razArray64(tmpDenseArray, B_coldim);
 149:matrix-op.C   **** 		TIMER_STOP_(RazArrayTimer);
 7856              		.loc	1 149 3
 7857              	.Ltmp2468:
 7858 012e 4889DF   		movq	%rbx, %rdi              # matrix-op.C:149:3
 7859 0131 E8000000 		callq	_ZN4LELA9UserTimer4stopEv # matrix-op.C:149:3
 7859      00
   1:../lela/util/timer.h **** /* lela/util/timer.h
   2:../lela/util/timer.h ****  * Copyright 1994-1997 T. Gautier
   3:../lela/util/timer.h ****  *
   4:../lela/util/timer.h ****  * Written by T. Gautier
   5:../lela/util/timer.h ****  *
   6:../lela/util/timer.h ****  * ------------------------------------
   7:../lela/util/timer.h ****  * Modified by Bradford Hovinen <hovinen@cis.udel.edu>
   8:../lela/util/timer.h ****  *
   9:../lela/util/timer.h ****  * Added _start_t member to BaseTimer, so that stop () does not clobber the
  10:../lela/util/timer.h ****  * class' memory of its start time. This allows it to be called repeatedly to
  11:../lela/util/timer.h ****  * get elapsed times.
  12:../lela/util/timer.h ****  * ------------------------------------
  13:../lela/util/timer.h ****  * 
  14:../lela/util/timer.h ****  * This file is part of LELA, licensed under the GNU General Public
  15:../lela/util/timer.h ****  * License version 3. See COPYING for more information.
  16:../lela/util/timer.h ****  *
  17:../lela/util/timer.h ****  */
  18:../lela/util/timer.h **** 
  19:../lela/util/timer.h **** #ifndef __LELA_UTIL_TIMER_H
  20:../lela/util/timer.h **** #define __LELA_UTIL_TIMER_H
  21:../lela/util/timer.h **** 
  22:../lela/util/timer.h **** #include <iostream>
  23:../lela/util/timer.h **** 
  24:../lela/util/timer.h **** namespace LELA 
  25:../lela/util/timer.h **** {
  26:../lela/util/timer.h **** 
  27:../lela/util/timer.h **** /** \brief base for class RealTimer; class SysTimer; class UserTimer;
  28:../lela/util/timer.h **** \ingroup util
  29:../lela/util/timer.h **** */
  30:../lela/util/timer.h **** 
  31:../lela/util/timer.h **** class BaseTimer 
  32:../lela/util/timer.h **** { 
  33:../lela/util/timer.h ****     public:
  34:../lela/util/timer.h **** 	enum { 
  35:../lela/util/timer.h **** 		MSPSEC = 1000000  // microsecond per second
  36:../lela/util/timer.h **** 	};
  37:../lela/util/timer.h **** 
  38:../lela/util/timer.h ****         BaseTimer() {_start_t = 0;}
  39:../lela/util/timer.h **** 
  40:../lela/util/timer.h **** 	// -- Clear timer :
  41:../lela/util/timer.h **** 	inline void clear() { _t = 0; }
  42:../lela/util/timer.h **** 
  43:../lela/util/timer.h **** 	// -- total amount of second spent 
  44:../lela/util/timer.h **** 	inline double time() const { return _t; }
 7860              		.loc	33 44 31
 7861              	.Ltmp2469:
 7862 0136 F20F1045 		movsd	-48(%rbp), %xmm0        # ../lela/util/timer.h:44:31[ matrix-op.C:149:3 ]
 7862      D0
 7863 013b F20F1185 		movsd	%xmm0, -224(%rbp)       # 8-byte Spill
 7863      20FFFFFF 
 7864 0143 488D45B8 		leaq	-72(%rbp), %rax
 7865              	.Ltmp2470:
 150:matrix-op.C   **** 
 151:matrix-op.C   **** 		TIMER_START_(CopySparseVectorToDenseArrayTimer);
 7866              		.loc	1 151 3
 7867              	.Ltmp2471:
 7868 0147 4889C7   		movq	%rax, %rdi              # matrix-op.C:151:3
 7869 014a E8000000 		callq	_ZN4LELA9UserTimer5startEv # matrix-op.C:151:3
 7869      00
 7870 014f 488B8550 		movq	-176(%rbp), %rax        # 8-byte Reload
 7870      FFFFFF
 7871 0156 488B08   		movq	(%rax), %rcx
 7872 0159 488B4008 		movq	8(%rax), %rax
 7873 015d 4839C1   		cmpq	%rax, %rcx
 7874 0160 7428     		je	.LBB8_7
 7875              	# BB#5:                                 #   in Loop: Header=BB8_4 Depth=1
 7876              	.Ltmp2472:
 7877              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 7878              	.Ltmp2473:
 7879              		#DEBUG_VALUE: rowdim:this <- [%rbp+$-232]+$0
 7880              	.Ltmp2474:
 7881              		#DEBUG_VALUE: coldim:this <- [%rbp+$-168]+$0
 7882              	.Ltmp2475:
 7883              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 7884              	.Ltmp2476:
 7885              		#DEBUG_VALUE: rowEnd:this <- [%rbp+$-168]+$0
 7886              	.Ltmp2477:
 7887              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 7888              	.Ltmp2478:
 7889              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 7890              	.Ltmp2479:
 7891              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 7892              	.Ltmp2480:
 7893              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 7894              	.Ltmp2481:
 7895              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 7896 0162 488B9550 		movq	-176(%rbp), %rdx        # 8-byte Reload
 7896      FFFFFF
 7897 0169 488B5218 		movq	24(%rdx), %rdx
 7898 016d 0F1F00   		.align	16, 0x90
 7899              	.LBB8_6:                                # %.lr.ph.i
 7900              	                                        #   Parent Loop BB8_4 Depth=1
 7901              	                                        # =>  This Inner Loop Header: Depth=2
 7902              	.Ltmp2482:
 7903              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 7904              	.Ltmp2483:
 7905              		#DEBUG_VALUE: rowdim:this <- [%rbp+$-232]+$0
 7906              	.Ltmp2484:
 7907              		#DEBUG_VALUE: coldim:this <- [%rbp+$-168]+$0
 7908              	.Ltmp2485:
 7909              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 7910              	.Ltmp2486:
 7911              		#DEBUG_VALUE: rowEnd:this <- [%rbp+$-168]+$0
 7912              	.Ltmp2487:
 7913              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 7914              	.Ltmp2488:
 7915              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 7916              	.Ltmp2489:
 7917              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 7918              	.Ltmp2490:
 7919              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 7920              	.Ltmp2491:
 7921              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
  41:matrix-op.C   **** 		array[i_v->first] = (uint64)(i_v->second);
 7922              		.loc	1 41 3
 7923              	.Ltmp2492:
 7924 0170 8B31     		movl	(%rcx), %esi            # matrix-op.C:41:3[ matrix-op.C:152:4 ]
 7925 0172 0FB73A   		movzwl	(%rdx), %edi            # matrix-op.C:41:3[ matrix-op.C:152:4 ]
 7926 0175 4C8B4580 		movq	-128(%rbp), %r8         # matrix-op.C:41:3[ matrix-op.C:152:4 ]
 7927              	                                        # 8-byte Reload
 7928 0179 49893CF0 		movq	%rdi, (%r8,%rsi,8)      # matrix-op.C:41:3[ matrix-op.C:152:4 ]
 7929 017d 4883C202 		addq	$2, %rdx
 7930 0181 4883C104 		addq	$4, %rcx
   1:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
   3:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
   4:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // Free Software Foundation, Inc.
   5:/usr/include/c++/4.6.3/bits/stl_iterator.h **** //
   6:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   8:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   9:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // any later version.
  11:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
  12:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  13:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // GNU General Public License for more details.
  16:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
  17:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
  21:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/4.6.3/bits/stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
  26:/usr/include/c++/4.6.3/bits/stl_iterator.h **** /*
  27:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  *
  28:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  * Copyright (c) 1994
  29:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  * Hewlett-Packard Company
  30:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  *
  31:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  32:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  33:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  34:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  35:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  36:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  37:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  38:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  *
  39:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  *
  40:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  41:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  42:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  *
  43:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  44:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  45:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  46:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  47:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  48:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  49:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  50:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  */
  51:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
  52:/usr/include/c++/4.6.3/bits/stl_iterator.h **** /** @file bits/stl_iterator.h
  53:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  54:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  55:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  *
  56:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  57:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  58:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  59:/usr/include/c++/4.6.3/bits/stl_iterator.h ****  */
  60:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
  61:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #ifndef _STL_ITERATOR_H
  62:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #define _STL_ITERATOR_H 1
  63:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
  64:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #include <bits/cpp_type_traits.h>
  65:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #include <ext/type_traits.h>
  66:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #include <bits/move.h>
  67:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
  68:/usr/include/c++/4.6.3/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  69:/usr/include/c++/4.6.3/bits/stl_iterator.h **** {
  70:/usr/include/c++/4.6.3/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  71:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
  72:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   /**
  73:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    * @addtogroup iterators
  74:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    * @{
  75:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    */
  76:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
  77:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
  78:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   /**
  79:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
  80:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
  81:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
  82:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
  83:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
  84:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  @code
  85:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
  86:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  @endcode
  87:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *
  88:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
  89:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
  90:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
  91:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *
  92:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
  93:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
  94:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
  95:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   */
  96:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Iterator>
  97:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     class reverse_iterator
  98:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
  99:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 100:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 101:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 102:/usr/include/c++/4.6.3/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 103:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     {
 104:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     protected:
 105:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       _Iterator current;
 106:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 107:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 108:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 109:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     public:
 110:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 111:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 112:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 113:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 114:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 115:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 116:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  The default constructor default-initializes member @p current.
 117:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 118:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 119:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 120:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 121:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 122:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 123:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 124:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 125:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 126:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       explicit
 127:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 128:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 129:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 130:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  The copy constructor is normal.
 131:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 132:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 133:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       : current(__x.current) { }
 134:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 135:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 136:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  A reverse_iterator across other types can be copied in the normal
 137:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  fashion.
 138:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 139:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       template<typename _Iter>
 140:/usr/include/c++/4.6.3/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 141:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	: current(__x.base()) { }
 142:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 143:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 144:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 145:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 146:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       iterator_type
 147:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       base() const
 148:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return current; }
 149:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 150:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 151:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @return  TODO
 152:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *
 153:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @doctodo
 154:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 155:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       reference
 156:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator*() const
 157:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       {
 158:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 159:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	return *--__tmp;
 160:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       }
 161:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 162:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 163:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @return  TODO
 164:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *
 165:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @doctodo
 166:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 167:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       pointer
 168:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator->() const
 169:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return &(operator*()); }
 170:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 171:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 172:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @return  TODO
 173:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *
 174:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @doctodo
 175:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 176:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       reverse_iterator&
 177:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator++()
 178:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       {
 179:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	--current;
 180:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	return *this;
 181:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       }
 182:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 183:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 184:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @return  TODO
 185:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *
 186:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @doctodo
 187:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 188:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       reverse_iterator
 189:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator++(int)
 190:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       {
 191:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 192:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	--current;
 193:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	return __tmp;
 194:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       }
 195:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 196:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 197:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @return  TODO
 198:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *
 199:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @doctodo
 200:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 201:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       reverse_iterator&
 202:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator--()
 203:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       {
 204:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	++current;
 205:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	return *this;
 206:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       }
 207:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 208:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 209:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @return  TODO
 210:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *
 211:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @doctodo
 212:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 213:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       reverse_iterator
 214:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator--(int)
 215:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       {
 216:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 217:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	++current;
 218:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	return __tmp;
 219:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       }
 220:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 221:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 222:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @return  TODO
 223:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *
 224:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @doctodo
 225:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 226:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       reverse_iterator
 227:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator+(difference_type __n) const
 228:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 229:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 230:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 231:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @return  TODO
 232:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *
 233:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @doctodo
 234:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 235:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       reverse_iterator&
 236:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator+=(difference_type __n)
 237:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       {
 238:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	current -= __n;
 239:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	return *this;
 240:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       }
 241:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 242:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 243:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @return  TODO
 244:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *
 245:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @doctodo
 246:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 247:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       reverse_iterator
 248:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator-(difference_type __n) const
 249:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 250:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 251:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 252:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @return  TODO
 253:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *
 254:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @doctodo
 255:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 256:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       reverse_iterator&
 257:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator-=(difference_type __n)
 258:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       {
 259:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	current += __n;
 260:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	return *this;
 261:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       }
 262:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 263:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 264:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @return  TODO
 265:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *
 266:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @doctodo
 267:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 268:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       reference
 269:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator[](difference_type __n) const
 270:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return *(*this + __n); }
 271:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     };
 272:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 273:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   //@{
 274:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   /**
 275:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  @param  x  A %reverse_iterator.
 276:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  @param  y  A %reverse_iterator.
 277:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  @return  A simple bool.
 278:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *
 279:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  Reverse iterators forward many operations to their underlying base()
 280:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  iterators.  Others are implemented in terms of one another.
 281:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *
 282:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   */
 283:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Iterator>
 284:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 285:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 286:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 287:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 288:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 289:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Iterator>
 290:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 291:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 292:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 293:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 294:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 295:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Iterator>
 296:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 297:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 298:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 299:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return !(__x == __y); }
 300:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 301:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Iterator>
 302:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 303:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 304:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 305:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __y < __x; }
 306:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 307:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Iterator>
 308:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 309:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 310:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 311:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return !(__y < __x); }
 312:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 313:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Iterator>
 314:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 315:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 316:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 317:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return !(__x < __y); }
 318:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 319:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Iterator>
 320:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 321:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 322:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 323:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 324:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 325:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Iterator>
 326:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline reverse_iterator<_Iterator>
 327:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 328:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 329:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 330:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 331:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 332:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 333:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 334:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 335:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 336:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 337:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 338:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 339:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 340:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 341:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 342:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 343:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 344:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 345:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 346:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 347:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 348:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 349:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return !(__x == __y); }
 350:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 351:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 352:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 353:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 354:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 355:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __y < __x; }
 356:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 357:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 358:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 359:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 360:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 361:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return !(__y < __x); }
 362:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 363:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 364:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 365:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 366:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 367:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return !(__x < __y); }
 368:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 369:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 370:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 371:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     // DR 685.
 372:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline auto
 373:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 374:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 375:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 376:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #else
 377:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 378:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 379:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 380:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #endif
 381:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 382:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   //@}
 383:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 384:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 385:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   /**
 386:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 387:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *
 388:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 389:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 390:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  push_back.
 391:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *
 392:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 393:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  save typing.
 394:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   */
 395:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Container>
 396:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     class back_insert_iterator
 397:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 398:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     {
 399:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     protected:
 400:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       _Container* container;
 401:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 402:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     public:
 403:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 404:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       typedef _Container          container_type;
 405:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 406:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 407:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       explicit
 408:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x) : container(&__x) { }
 409:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 410:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 411:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @param  value  An instance of whatever type
 412:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 413:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 414:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 415:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *
 416:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 417:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 418:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 419:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  always append the value to the end of the container.
 420:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 421:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #ifndef __GXX_EXPERIMENTAL_CXX0X__
 422:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       back_insert_iterator&
 423:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 424:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       {
 425:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	container->push_back(__value);
 426:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	return *this;
 427:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       }
 428:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #else
 429:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       back_insert_iterator&
 430:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 431:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       {
 432:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	container->push_back(__value);
 433:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	return *this;
 434:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       }
 435:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 436:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       back_insert_iterator&
 437:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 438:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       {
 439:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	container->push_back(std::move(__value));
 440:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	return *this;
 441:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       }
 442:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #endif
 443:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 444:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /// Simply returns *this.
 445:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       back_insert_iterator&
 446:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator*()
 447:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return *this; }
 448:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 449:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 450:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       back_insert_iterator&
 451:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator++()
 452:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return *this; }
 453:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 454:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 455:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       back_insert_iterator
 456:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator++(int)
 457:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return *this; }
 458:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     };
 459:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 460:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   /**
 461:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  @param  x  A container of arbitrary type.
 462:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p x.
 463:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *
 464:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 465:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 466:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 467:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 468:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 469:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  types for you.
 470:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   */
 471:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Container>
 472:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline back_insert_iterator<_Container>
 473:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     back_inserter(_Container& __x)
 474:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 475:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 476:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   /**
 477:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 478:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *
 479:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 480:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 481:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  push_front.
 482:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *
 483:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 484:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  save typing.
 485:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   */
 486:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Container>
 487:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     class front_insert_iterator
 488:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 489:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     {
 490:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     protected:
 491:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       _Container* container;
 492:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 493:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     public:
 494:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 495:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       typedef _Container          container_type;
 496:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 497:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 498:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       explicit front_insert_iterator(_Container& __x) : container(&__x) { }
 499:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 500:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 501:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @param  value  An instance of whatever type
 502:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 503:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 504:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 505:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *
 506:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 507:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 508:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 509:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 510:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 511:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #ifndef __GXX_EXPERIMENTAL_CXX0X__
 512:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       front_insert_iterator&
 513:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 514:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       {
 515:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	container->push_front(__value);
 516:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	return *this;
 517:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       }
 518:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #else
 519:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       front_insert_iterator&
 520:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 521:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       {
 522:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	container->push_front(__value);
 523:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	return *this;
 524:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       }
 525:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 526:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       front_insert_iterator&
 527:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 528:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       {
 529:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	container->push_front(std::move(__value));
 530:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	return *this;
 531:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       }
 532:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #endif
 533:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 534:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /// Simply returns *this.
 535:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       front_insert_iterator&
 536:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator*()
 537:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return *this; }
 538:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 539:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 540:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       front_insert_iterator&
 541:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator++()
 542:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return *this; }
 543:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 544:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 545:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       front_insert_iterator
 546:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator++(int)
 547:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return *this; }
 548:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     };
 549:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 550:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   /**
 551:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  @param  x  A container of arbitrary type.
 552:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 553:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *
 554:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 555:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 556:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 557:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 558:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 559:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  types for you.
 560:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   */
 561:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Container>
 562:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline front_insert_iterator<_Container>
 563:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     front_inserter(_Container& __x)
 564:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 565:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 566:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   /**
 567:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 568:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *
 569:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 570:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 571:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 572:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  position.
 573:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *
 574:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 575:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  %iterator's position.)
 576:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *
 577:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 578:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  save typing.
 579:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   */
 580:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Container>
 581:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     class insert_iterator
 582:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 583:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     {
 584:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     protected:
 585:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       _Container* container;
 586:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       typename _Container::iterator iter;
 587:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 588:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     public:
 589:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 590:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       typedef _Container          container_type;
 591:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 592:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 593:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 594:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 595:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 596:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       insert_iterator(_Container& __x, typename _Container::iterator __i)
 597:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       : container(&__x), iter(__i) {}
 598:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 599:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /**
 600:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @param  value  An instance of whatever type
 601:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 602:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 603:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 604:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *
 605:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 606:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 607:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 608:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *
 609:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 610:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 611:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @code
 612:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *     // vector v contains A and Z
 613:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *
 614:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 615:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *     i = 1;
 616:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *     i = 2;
 617:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *     i = 3;
 618:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *
 619:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 620:/usr/include/c++/4.6.3/bits/stl_iterator.h ****        *  @endcode
 621:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       */
 622:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #ifndef __GXX_EXPERIMENTAL_CXX0X__
 623:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       insert_iterator&
 624:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 625:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       {
 626:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 627:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	++iter;
 628:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	return *this;
 629:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       }
 630:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #else
 631:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       insert_iterator&
 632:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 633:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       {
 634:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 635:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	++iter;
 636:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	return *this;
 637:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       }
 638:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 639:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       insert_iterator&
 640:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 641:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       {
 642:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 643:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	++iter;
 644:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	return *this;
 645:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       }
 646:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #endif
 647:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 648:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /// Simply returns *this.
 649:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       insert_iterator&
 650:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator*()
 651:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return *this; }
 652:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 653:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 654:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       insert_iterator&
 655:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator++()
 656:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return *this; }
 657:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 658:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 659:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       insert_iterator&
 660:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator++(int)
 661:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return *this; }
 662:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     };
 663:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 664:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   /**
 665:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  @param  x  A container of arbitrary type.
 666:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p x.
 667:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *
 668:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 669:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 670:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 671:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 672:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 673:/usr/include/c++/4.6.3/bits/stl_iterator.h ****    *  types for you.
 674:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   */
 675:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Container, typename _Iterator>
 676:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline insert_iterator<_Container>
 677:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 678:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     {
 679:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       return insert_iterator<_Container>(__x,
 680:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 					 typename _Container::iterator(__i));
 681:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     }
 682:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 683:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // @} group iterators
 684:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 685:/usr/include/c++/4.6.3/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 686:/usr/include/c++/4.6.3/bits/stl_iterator.h **** } // namespace
 687:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 688:/usr/include/c++/4.6.3/bits/stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 689:/usr/include/c++/4.6.3/bits/stl_iterator.h **** {
 690:/usr/include/c++/4.6.3/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 691:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 692:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 693:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 694:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 695:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 696:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 697:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 698:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 699:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   using std::iterator_traits;
 700:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   using std::iterator;
 701:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 702:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     class __normal_iterator
 703:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     {
 704:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     protected:
 705:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       _Iterator _M_current;
 706:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 707:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 708:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 709:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     public:
 710:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 711:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 712:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 713:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 714:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 715:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 716:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 717:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }
 718:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 719:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       explicit
 720:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
 721:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 722:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       // Allow iterator to const_iterator conversion
 723:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       template<typename _Iter>
 724:/usr/include/c++/4.6.3/bits/stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
 725:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 			  typename __enable_if<
 726:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 727:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 		      _Container>::__type>& __i)
 728:/usr/include/c++/4.6.3/bits/stl_iterator.h ****         : _M_current(__i.base()) { }
 729:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 730:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       // Forward iterator requirements
 731:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       reference
 732:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator*() const
 733:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return *_M_current; }
 734:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 735:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       pointer
 736:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator->() const
 737:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return _M_current; }
 738:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 739:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       __normal_iterator&
 740:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator++()
 741:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       {
 742:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	++_M_current;
 743:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	return *this;
 744:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       }
 745:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 746:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       __normal_iterator
 747:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator++(int)
 748:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return __normal_iterator(_M_current++); }
 749:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 750:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       // Bidirectional iterator requirements
 751:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       __normal_iterator&
 752:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator--()
 753:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       {
 754:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	--_M_current;
 755:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	return *this;
 756:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       }
 757:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 758:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       __normal_iterator
 759:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator--(int)
 760:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return __normal_iterator(_M_current--); }
 761:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 762:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       // Random access iterator requirements
 763:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       reference
 764:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator[](const difference_type& __n) const
 765:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return _M_current[__n]; }
 766:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 767:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       __normal_iterator&
 768:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator+=(const difference_type& __n)
 769:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { _M_current += __n; return *this; }
 770:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 771:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       __normal_iterator
 772:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator+(const difference_type& __n) const
 773:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 774:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 775:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       __normal_iterator&
 776:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator-=(const difference_type& __n)
 777:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { _M_current -= __n; return *this; }
 778:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 779:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       __normal_iterator
 780:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       operator-(const difference_type& __n) const
 781:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
 782:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 783:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       const _Iterator&
 784:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       base() const
 785:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       { return _M_current; }
 786:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     };
 787:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 788:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
 789:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
 790:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
 791:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
 792:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
 793:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
 794:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
 795:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 796:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // Forward iterator requirements
 797:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 798:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 799:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 801:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 802:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 803:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 804:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 805:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 806:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 807:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 808:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 809:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 810:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 811:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 812:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 813:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 814:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 815:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 816:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 817:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 818:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 819:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 7931              		.loc	9 819 7
 7932              	.Ltmp2493:
 7933 0185 4839C8   		cmpq	%rcx, %rax              # /usr/include/c++/4.6.3/bits/stl_iterator.h:819:7[ ../lela/vector/sp
 7934              	.Ltmp2494:
  39:matrix-op.C   **** 	while(i_v != v_end)
 7935              		.loc	1 39 2
 7936              	.Ltmp2495:
 7937 0188 75E6     		jne	.LBB8_6                 # matrix-op.C:39:2[ matrix-op.C:152:4 ]
 7938              	.LBB8_7:                                # %_Z30copySparseVectorToDenseArray64IN4LELA20SparseVectorI
 7939              	                                        #   in Loop: Header=BB8_4 Depth=1
 7940              	.Ltmp2496:
 7941              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 7942              	.Ltmp2497:
 7943              		#DEBUG_VALUE: rowdim:this <- [%rbp+$-232]+$0
 7944              	.Ltmp2498:
 7945              		#DEBUG_VALUE: coldim:this <- [%rbp+$-168]+$0
 7946              	.Ltmp2499:
 7947              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 7948              	.Ltmp2500:
 7949              		#DEBUG_VALUE: rowEnd:this <- [%rbp+$-168]+$0
 7950              	.Ltmp2501:
 7951              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 7952              	.Ltmp2502:
 7953              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 7954              	.Ltmp2503:
 7955              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 7956              	.Ltmp2504:
 7957              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 7958              	.Ltmp2505:
 7959              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 7960 018a 488D45B8 		leaq	-72(%rbp), %rax
 7961              	.Ltmp2506:
 152:matrix-op.C   **** 			copySparseVectorToDenseArray64(i_B->begin (), i_B->end (), tmpDenseArray);
 153:matrix-op.C   **** 		TIMER_STOP_(CopySparseVectorToDenseArrayTimer);
 7962              		.loc	1 153 3
 7963              	.Ltmp2507:
 7964 018e 4889C7   		movq	%rax, %rdi              # matrix-op.C:153:3
 7965 0191 E8000000 		callq	_ZN4LELA9UserTimer4stopEv # matrix-op.C:153:3
 7965      00
 473:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 7966              		.loc	34 473 9
 7967              	.Ltmp2508:
 7968 0196 488B8548 		movq	-184(%rbp), %rax        # /usr/include/c++/4.6.3/bits/stl_vector.h:473:9[ ../lela/vector/spar
 7968      FFFFFF
 7969              	                                        # 8-byte Reload
 7970 019d 488B58B8 		movq	-72(%rax), %rbx         # /usr/include/c++/4.6.3/bits/stl_vector.h:473:9[ ../lela/vector/spar
 7971              	.Ltmp2509:
 7972              		.loc	1 153 3
 7973              	.Ltmp2510:
 7974 01a1 F20F1085 		movsd	-200(%rbp), %xmm0       # matrix-op.C:153:3
 7974      38FFFFFF 
 7975              	                                        # 8-byte Reload
 7976 01a9 F20F5845 		addsd	-64(%rbp), %xmm0        # matrix-op.C:153:3
 7976      C0
 473:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 7977              		.loc	34 473 9
 7978              	.Ltmp2511:
 7979 01ae F20F1185 		movsd	%xmm0, -200(%rbp)       # /usr/include/c++/4.6.3/bits/stl_vector.h:473:9[ ../lela/vector/spa
 7979      38FFFFFF 
 7980              	                                        # 8-byte Spill
 7981 01b6 4C8B70A0 		movq	-96(%rax), %r14         # /usr/include/c++/4.6.3/bits/stl_vector.h:473:9[ ../lela/vector/spar
 7982              	.Ltmp2512:
 7983              		.loc	34 491 9
 7984              	.Ltmp2513:
 7985 01ba 4C8B78A8 		movq	-88(%rax), %r15         # /usr/include/c++/4.6.3/bits/stl_vector.h:491:9[ ../lela/vector/spar
 7986 01be 4C89BD60 		movq	%r15, -160(%rbp)        # 8-byte Spill
 7986      FFFFFF
 7987 01c5 488D4588 		leaq	-120(%rbp), %rax
 7988              	.Ltmp2514:
 154:matrix-op.C   **** 
 155:matrix-op.C   **** 		row_it_A = i_A->begin ();
 156:matrix-op.C   **** 		row_it_A_end = i_A->end ();
 157:matrix-op.C   **** 		++row_it_A;	//skip first element
 158:matrix-op.C   **** 
 159:matrix-op.C   **** 		uint32 Ap;
 160:matrix-op.C   **** 		typename Ring::Element Av;
 161:matrix-op.C   **** 		//register uint32 Av32;
 162:matrix-op.C   **** 		
 163:matrix-op.C   **** 		TIMER_START_(AxpyOutTimer);
 7989              		.loc	1 163 3
 7990              	.Ltmp2515:
 7991 01c9 4889C7   		movq	%rax, %rdi              # matrix-op.C:163:3
 7992 01cc E8000000 		callq	_ZN4LELA9UserTimer5startEv # matrix-op.C:163:3
 7992      00
 7993 01d1 4983C604 		addq	$4, %r14
 7994 01d5 4D39FE   		cmpq	%r15, %r14
 7995 01d8 0F84D700 		je	.LBB8_13
 7995      0000
 7996              	# BB#8:                                 # %_ZNK4LELA7ModularItE5neginERt.exit.preheader
 7997              	                                        #   in Loop: Header=BB8_4 Depth=1
 7998              	.Ltmp2516:
 7999              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8000              	.Ltmp2517:
 8001              		#DEBUG_VALUE: rowdim:this <- [%rbp+$-232]+$0
 8002              	.Ltmp2518:
 8003              		#DEBUG_VALUE: coldim:this <- [%rbp+$-168]+$0
 8004              	.Ltmp2519:
 8005              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8006              	.Ltmp2520:
 8007              		#DEBUG_VALUE: rowEnd:this <- [%rbp+$-168]+$0
 8008              	.Ltmp2521:
 8009              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8010              	.Ltmp2522:
 8011              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8012              	.Ltmp2523:
 8013              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8014              	.Ltmp2524:
 8015              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8016              	.Ltmp2525:
 8017              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 8018 01de 4883C302 		addq	$2, %rbx
 8019 01e2 66666666 		.align	16, 0x90
 8019      662E0F1F 
 8019      84000000 
 8019      0000
 8020              	.LBB8_9:                                # %_ZNK4LELA7ModularItE5neginERt.exit
 8021              	                                        #   Parent Loop BB8_4 Depth=1
 8022              	                                        # =>  This Loop Header: Depth=2
 8023              	                                        #       Child Loop BB8_11 Depth 3
 8024              	.Ltmp2526:
 8025              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8026              	.Ltmp2527:
 8027              		#DEBUG_VALUE: rowdim:this <- [%rbp+$-232]+$0
 8028              	.Ltmp2528:
 8029              		#DEBUG_VALUE: coldim:this <- [%rbp+$-168]+$0
 8030              	.Ltmp2529:
 8031              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8032              	.Ltmp2530:
 8033              		#DEBUG_VALUE: rowEnd:this <- [%rbp+$-168]+$0
 8034              	.Ltmp2531:
 8035              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8036              	.Ltmp2532:
 8037              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8038              	.Ltmp2533:
 8039              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8040              	.Ltmp2534:
 8041              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8042              	.Ltmp2535:
 8043              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 492:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 493:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 494:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 495:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 496:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  element order.
 497:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 498:/usr/include/c++/4.6.3/bits/stl_vector.h ****       reverse_iterator
 499:/usr/include/c++/4.6.3/bits/stl_vector.h ****       rbegin()
 500:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 501:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 502:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 503:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 504:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 505:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  reverse element order.
 506:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 507:/usr/include/c++/4.6.3/bits/stl_vector.h ****       const_reverse_iterator
 508:/usr/include/c++/4.6.3/bits/stl_vector.h ****       rbegin() const
 509:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 510:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 511:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 512:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 513:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 514:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  in reverse element order.
 515:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 516:/usr/include/c++/4.6.3/bits/stl_vector.h ****       reverse_iterator
 517:/usr/include/c++/4.6.3/bits/stl_vector.h ****       rend()
 518:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 519:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 520:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 521:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 522:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 523:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  is done in reverse element order.
 524:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 525:/usr/include/c++/4.6.3/bits/stl_vector.h ****       const_reverse_iterator
 526:/usr/include/c++/4.6.3/bits/stl_vector.h ****       rend() const
 527:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 528:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 529:/usr/include/c++/4.6.3/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 530:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 531:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 532:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 533:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  element order.
 534:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 535:/usr/include/c++/4.6.3/bits/stl_vector.h ****       const_iterator
 536:/usr/include/c++/4.6.3/bits/stl_vector.h ****       cbegin() const
 537:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 538:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 539:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 540:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 541:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 542:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  ordinary element order.
 543:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 544:/usr/include/c++/4.6.3/bits/stl_vector.h ****       const_iterator
 545:/usr/include/c++/4.6.3/bits/stl_vector.h ****       cend() const
 546:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 547:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 548:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 549:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 550:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 551:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  reverse element order.
 552:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 553:/usr/include/c++/4.6.3/bits/stl_vector.h ****       const_reverse_iterator
 554:/usr/include/c++/4.6.3/bits/stl_vector.h ****       crbegin() const
 555:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 556:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 557:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 558:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 559:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 560:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  is done in reverse element order.
 561:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 562:/usr/include/c++/4.6.3/bits/stl_vector.h ****       const_reverse_iterator
 563:/usr/include/c++/4.6.3/bits/stl_vector.h ****       crend() const
 564:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 565:/usr/include/c++/4.6.3/bits/stl_vector.h **** #endif
 566:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 567:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // [23.2.4.2] capacity
 568:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 569:/usr/include/c++/4.6.3/bits/stl_vector.h ****       size_type
 570:/usr/include/c++/4.6.3/bits/stl_vector.h ****       size() const
 571:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 572:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 573:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 574:/usr/include/c++/4.6.3/bits/stl_vector.h ****       size_type
 575:/usr/include/c++/4.6.3/bits/stl_vector.h ****       max_size() const
 576:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return _M_get_Tp_allocator().max_size(); }
 577:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 578:/usr/include/c++/4.6.3/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 579:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 580:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 581:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  new_size  Number of elements the %vector should contain.
 582:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 583:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 584:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 585:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 586:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  default constructed elements are appended.
 587:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 588:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
 589:/usr/include/c++/4.6.3/bits/stl_vector.h ****       resize(size_type __new_size)
 590:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
 591:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	if (__new_size > size())
 592:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  _M_default_append(__new_size - size());
 593:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	else if (__new_size < size())
 594:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 595:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
 596:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 597:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 598:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 599:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  new_size  Number of elements the %vector should contain.
 600:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  x  Data with which new elements should be populated.
 601:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 602:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 603:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 604:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 605:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 606:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  given data.
 607:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 608:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
 609:/usr/include/c++/4.6.3/bits/stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 610:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
 611:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	if (__new_size > size())
 612:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 613:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	else if (__new_size < size())
 614:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 615:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
 616:/usr/include/c++/4.6.3/bits/stl_vector.h **** #else
 617:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 618:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 619:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  new_size  Number of elements the %vector should contain.
 620:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  x  Data with which new elements should be populated.
 621:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 622:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 623:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 624:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 625:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 626:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  given data.
 627:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 628:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
 629:/usr/include/c++/4.6.3/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 630:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
 631:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	if (__new_size > size())
 632:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 633:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	else if (__new_size < size())
 634:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 635:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
 636:/usr/include/c++/4.6.3/bits/stl_vector.h **** #endif
 637:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 638:/usr/include/c++/4.6.3/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 639:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 640:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
 641:/usr/include/c++/4.6.3/bits/stl_vector.h ****       shrink_to_fit()
 642:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { std::__shrink_to_fit<vector>::_S_do_it(*this); }
 643:/usr/include/c++/4.6.3/bits/stl_vector.h **** #endif
 644:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 645:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 646:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 647:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 648:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 649:/usr/include/c++/4.6.3/bits/stl_vector.h ****       size_type
 650:/usr/include/c++/4.6.3/bits/stl_vector.h ****       capacity() const
 651:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 652:/usr/include/c++/4.6.3/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
 653:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 654:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 655:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
 656:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  equal end().)
 657:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 658:/usr/include/c++/4.6.3/bits/stl_vector.h ****       bool
 659:/usr/include/c++/4.6.3/bits/stl_vector.h ****       empty() const
 660:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return begin() == end(); }
 661:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 662:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 663:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 664:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *          elements.
 665:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  n  Number of elements required.
 666:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
 667:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 668:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
 669:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
 670:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
 671:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  thrown.
 672:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 673:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
 674:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
 675:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
 676:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
 677:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  and copying of %vector data.
 678:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 679:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
 680:/usr/include/c++/4.6.3/bits/stl_vector.h ****       reserve(size_type __n);
 681:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 682:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // element access
 683:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 684:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 685:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param n The index of the element for which data should be
 686:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  accessed.
 687:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 688:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 689:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 690:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 691:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 692:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  see at().)
 693:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 694:/usr/include/c++/4.6.3/bits/stl_vector.h ****       reference
 695:/usr/include/c++/4.6.3/bits/stl_vector.h ****       operator[](size_type __n)
 696:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 8044              		.loc	34 696 9
 8045              	.Ltmp2536:
 8046 01f0 488B8558 		movq	-168(%rbp), %rax        # /usr/include/c++/4.6.3/bits/stl_vector.h:696:9[ ../lela/matrix/spar
 8046      FFFFFF
 8047              	                                        # 8-byte Reload
 8048 01f7 4C8B38   		movq	(%rax), %r15            # /usr/include/c++/4.6.3/bits/stl_vector.h:696:9[ ../lela/matrix/spar
 8049              	.Ltmp2537:
 164:matrix-op.C   **** 		while(row_it_A != row_it_A_end)
 165:matrix-op.C   **** 		{
 166:matrix-op.C   **** 			R.copy(Av, row_it_A->second);
 167:matrix-op.C   **** 			Ap = row_it_A->first;
 168:matrix-op.C   **** 			R.negin(Av);
 169:matrix-op.C   **** 			//Av32 = (uint32)Av;
 170:matrix-op.C   **** 
 171:matrix-op.C   **** 			// B[i] <- B[i] - Av * B[Ap]
 172:matrix-op.C   **** 			rowB = &(B[Ap]);
 8050              		.loc	1 172 4
 8051              	.Ltmp2538:
 8052 01fa 418B06   		movl	(%r14), %eax            # matrix-op.C:172:4
   1:../lela/ring/modular.h **** /* lela/ring/modular.h
   2:../lela/ring/modular.h ****  * Copyright 1999-2001 William J Turner,
   3:../lela/ring/modular.h ****  *           2001 Bradford Hovinen
   4:../lela/ring/modular.h ****  *
   5:../lela/ring/modular.h ****  * Written by William J Turner <wjturner@math.ncsu.edu>,
   6:../lela/ring/modular.h ****  *            Bradford Hovinen <hovinen@cis.udel.edu>
   7:../lela/ring/modular.h ****  *
   8:../lela/ring/modular.h ****  * Integers modulo n
   9:../lela/ring/modular.h ****  *
  10:../lela/ring/modular.h ****  * ------------------------------------
  11:../lela/ring/modular.h ****  * 
  12:../lela/ring/modular.h ****  * This file is part of LELA, licensed under the GNU General Public
  13:../lela/ring/modular.h ****  * License version 3. See COPYING for more information.
  14:../lela/ring/modular.h ****  */
  15:../lela/ring/modular.h **** 
  16:../lela/ring/modular.h **** #ifndef __LELA_RING_MODULAR_H
  17:../lela/ring/modular.h **** #define __LELA_RING_MODULAR_H
  18:../lela/ring/modular.h **** 
  19:../lela/ring/modular.h **** #include <iostream>
  20:../lela/ring/modular.h **** #include <climits>
  21:../lela/ring/modular.h **** #include <cmath>
  22:../lela/ring/modular.h **** #include <vector>
  23:../lela/ring/modular.h **** 
  24:../lela/ring/modular.h **** #include "lela/lela-config.h"
  25:../lela/ring/modular.h **** #include "lela/integer.h"
  26:../lela/ring/modular.h **** #include "lela/util/debug.h"
  27:../lela/ring/modular.h **** #include "lela/util/property.h"
  28:../lela/ring/modular.h **** #include "lela/blas/context.h"
  29:../lela/ring/modular.h **** #include "lela/randiter/nonzero.h"
  30:../lela/ring/modular.h **** #include "lela/algorithms/strassen-winograd.h"
  31:../lela/ring/modular.h **** #include "lela/ring/type-wrapper.h"
  32:../lela/ring/modular.h **** 
  33:../lela/ring/modular.h **** #define FLOAT_MANTISSA 24
  34:../lela/ring/modular.h **** #define DOUBLE_MANTISSA 53
  35:../lela/ring/modular.h **** 
  36:../lela/ring/modular.h **** namespace LELA 
  37:../lela/ring/modular.h **** {
  38:../lela/ring/modular.h **** 
  39:../lela/ring/modular.h **** /** Traits for the modular ring
  40:../lela/ring/modular.h ****  *
  41:../lela/ring/modular.h ****  * This contains parameters for computations with the modular ring
  42:../lela/ring/modular.h ****  * which depend on the element-type
  43:../lela/ring/modular.h ****  *
  44:../lela/ring/modular.h ****  * \ingroup ring
  45:../lela/ring/modular.h ****  */
  46:../lela/ring/modular.h **** template <class Element>
  47:../lela/ring/modular.h **** struct ModularTraits
  48:../lela/ring/modular.h **** {
  49:../lela/ring/modular.h **** 	/// Type to be used as intermediate when multiplying elements
  50:../lela/ring/modular.h **** 	typedef Element FatElement;
  51:../lela/ring/modular.h **** 
  52:../lela/ring/modular.h **** 	/// Type to be used as intermediate when computing dot-products
  53:../lela/ring/modular.h **** 	typedef Element DoubleFatElement;
  54:../lela/ring/modular.h **** 
  55:../lela/ring/modular.h **** 	/// Type to be used when running extended Euclidean algorithm
  56:../lela/ring/modular.h **** 	typedef Element EEAElement;
  57:../lela/ring/modular.h **** 
  58:../lela/ring/modular.h **** 	/// Return true if the given proposed modulus is valid for this element-type, false otherwise
  59:../lela/ring/modular.h **** 	static bool valid_modulus (const integer &modulus) { return true; }
  60:../lela/ring/modular.h **** 
  61:../lela/ring/modular.h **** 	/// Function to reduce by modulus
  62:../lela/ring/modular.h **** 	template <class FE>
  63:../lela/ring/modular.h **** 	static Element &reduce (Element &r, FE a, Element m) 
  64:../lela/ring/modular.h **** 		{ r = a % m; shift_up (r, m); return r; }
  65:../lela/ring/modular.h **** 
  66:../lela/ring/modular.h **** 	/// Initialise an element from an integer; for initialisation of the modulus
  67:../lela/ring/modular.h **** 	static Element &init_modulus (Element &elt, integer x)
  68:../lela/ring/modular.h **** 		{ elt = x; return elt; }
  69:../lela/ring/modular.h **** 
  70:../lela/ring/modular.h **** 	/// Write an element to the given stream
  71:../lela/ring/modular.h **** 	static std::ostream &write (std::ostream &os, const Element &x)
  72:../lela/ring/modular.h **** 		{ return os << x; }
  73:../lela/ring/modular.h **** 
  74:../lela/ring/modular.h **** 	/// Get the width of a typical element of the ring
  75:../lela/ring/modular.h **** 	static size_t element_width (const integer &modulus)
  76:../lela/ring/modular.h **** 		{ return (size_t) ceil (log (modulus.get_d ()) / M_LN10); }
  77:../lela/ring/modular.h **** 
  78:../lela/ring/modular.h **** 	template <class T>
  79:../lela/ring/modular.h **** 	static size_t element_width (const T &modulus)
  80:../lela/ring/modular.h **** 		{ return (size_t) ceil (log (double (modulus)) / M_LN10); }
  81:../lela/ring/modular.h **** 
  82:../lela/ring/modular.h **** 	/// If v is too low for the window of validity, shift it up by the value of the modulus
  83:../lela/ring/modular.h **** 	template <class T>
  84:../lela/ring/modular.h **** 	static T &shift_up (T &v, const Element &modulus)
  85:../lela/ring/modular.h **** 		{ if (v < 0) v += modulus; return v; }
  86:../lela/ring/modular.h **** 
  87:../lela/ring/modular.h **** 	/// If v is too high for the window of validity, shift it down by the value of the modulus
  88:../lela/ring/modular.h **** 	template <class T>
  89:../lela/ring/modular.h **** 	static T &shift_down (T &v, const Element &modulus)
  90:../lela/ring/modular.h **** 		{ if (v >= modulus) v -= modulus; return v; }
  91:../lela/ring/modular.h **** 
  92:../lela/ring/modular.h **** 	/// Move v to within the valid range for the modulus
  93:../lela/ring/modular.h **** 	template <class T>
  94:../lela/ring/modular.h **** 	static T &valid_rep (T &v, const Element &modulus)
  95:../lela/ring/modular.h **** 		{ return shift_down (v, modulus); }
  96:../lela/ring/modular.h **** 
  97:../lela/ring/modular.h **** 	/// Negate the given element
  98:../lela/ring/modular.h **** 	template <class T>
  99:../lela/ring/modular.h **** 	static T &neg (T &v, const Element &modulus)
 100:../lela/ring/modular.h **** 		{ v = modulus - v; return valid_rep (v, modulus); }
 101:../lela/ring/modular.h **** 
 102:../lela/ring/modular.h **** 	/// Subtract the one element from the other
 103:../lela/ring/modular.h **** 	template <class T>
 104:../lela/ring/modular.h **** 	static T &sub (T &v, const Element &y, const Element &modulus)
 105:../lela/ring/modular.h **** 		{ v += modulus - y; return valid_rep (v, modulus); }
 106:../lela/ring/modular.h **** 
 107:../lela/ring/modular.h **** 	/// Get what is in any event a positive representation of the given element
 108:../lela/ring/modular.h **** 	template <class T>
 109:../lela/ring/modular.h **** 	static T &positive_rep (T &v, const Element &modulus)
 110:../lela/ring/modular.h **** 		{ return v; }
 111:../lela/ring/modular.h **** };
 112:../lela/ring/modular.h **** 
 113:../lela/ring/modular.h **** // Specialisation for uint8
 114:../lela/ring/modular.h **** template <>
 115:../lela/ring/modular.h **** struct ModularTraits<uint8>
 116:../lela/ring/modular.h **** {
 117:../lela/ring/modular.h **** 	typedef uint8 Element;
 118:../lela/ring/modular.h **** 	typedef uint32 FatElement;
 119:../lela/ring/modular.h **** 	typedef uint32 DoubleFatElement;
 120:../lela/ring/modular.h **** 	typedef int EEAElement;
 121:../lela/ring/modular.h **** 	static bool valid_modulus (const integer &modulus) { return modulus < integer (1U << 8); }
 122:../lela/ring/modular.h **** 	template <class FE>
 123:../lela/ring/modular.h **** 	static Element &reduce (Element &r, const FE &a, Element m) 
 124:../lela/ring/modular.h **** 		{ integer t = (integer) a % (integer) m; shift_up (t, m); return r = t.get_ui (); }
 125:../lela/ring/modular.h **** 	static Element &reduce (Element &r, FatElement a, Element m) 
 126:../lela/ring/modular.h **** 		{ return r = a % m; }
 127:../lela/ring/modular.h **** 	static DoubleFatElement &reduce (DoubleFatElement &r, DoubleFatElement a, Element m) 
 128:../lela/ring/modular.h **** 		{ return r = a % m; }
 129:../lela/ring/modular.h **** 	static Element &reduce (Element &r, int a, Element m) 
 130:../lela/ring/modular.h **** 		{ int t = a % (int) m; if (t < 0) t += m; return r = t; }
 131:../lela/ring/modular.h **** 	static Element &init_modulus (Element &elt, integer x)
 132:../lela/ring/modular.h **** 		{ elt = x.get_ui (); return elt; }
 133:../lela/ring/modular.h **** 	static std::ostream &write (std::ostream &os, const Element &x)
 134:../lela/ring/modular.h **** 		{ return os << (int) x; }
 135:../lela/ring/modular.h **** 	static size_t element_width (Element modulus)
 136:../lela/ring/modular.h **** 		{ return (size_t) ceil (log (double (modulus)) / M_LN10); }
 137:../lela/ring/modular.h **** 	template <class T>
 138:../lela/ring/modular.h **** 	static T &shift_up (T &v, uint8 modulus)
 139:../lela/ring/modular.h **** 		{ if (v < 0) v += modulus; return v; }
 140:../lela/ring/modular.h **** 	template <class T>
 141:../lela/ring/modular.h **** 	static T &shift_down (T &v, uint8 modulus)
 142:../lela/ring/modular.h **** 		{ if (v >= modulus) v -= modulus; return v; }
 143:../lela/ring/modular.h **** 	template <class T>
 144:../lela/ring/modular.h **** 	static T &valid_rep (T &v, const Element &modulus)
 145:../lela/ring/modular.h **** 		{ return shift_down (v, modulus); }
 146:../lela/ring/modular.h **** 	template <class T>
 147:../lela/ring/modular.h **** 	static T &neg (T &v, const Element &modulus)
 148:../lela/ring/modular.h **** 		{ v = modulus - v; return valid_rep (v, modulus); }
 149:../lela/ring/modular.h **** 	template <class T>
 150:../lela/ring/modular.h **** 	static T &sub (T &v, const Element &y, const Element &modulus)
 151:../lela/ring/modular.h **** 		{ v += modulus - y; return valid_rep (v, modulus); }
 152:../lela/ring/modular.h **** 	template <class T>
 153:../lela/ring/modular.h **** 	static T &positive_rep (T &v, const Element &modulus)
 154:../lela/ring/modular.h **** 		{ return v; }
 155:../lela/ring/modular.h **** };
 156:../lela/ring/modular.h **** 
 157:../lela/ring/modular.h **** // Specialisation for uint16
 158:../lela/ring/modular.h **** template <>
 159:../lela/ring/modular.h **** struct ModularTraits<uint16>
 160:../lela/ring/modular.h **** {
 161:../lela/ring/modular.h **** 	typedef uint16 Element;
 162:../lela/ring/modular.h **** 	typedef uint32 FatElement;
 163:../lela/ring/modular.h **** 	typedef uint64 DoubleFatElement;
 164:../lela/ring/modular.h **** 	typedef int EEAElement;
 165:../lela/ring/modular.h **** 	static bool valid_modulus (const integer &modulus) { return modulus < integer (1U << 16); }
 166:../lela/ring/modular.h **** 	template <class FE>
 167:../lela/ring/modular.h **** 	static Element &reduce (Element &r, const FE &a, Element m) 
 168:../lela/ring/modular.h **** 		{ integer t = (integer) a % (integer) m; shift_up (t, m); return r = t.get_ui (); }
 169:../lela/ring/modular.h **** 	static Element &reduce (Element &r, FatElement a, Element m) 
 170:../lela/ring/modular.h **** 		{ return r = a % m; }
 171:../lela/ring/modular.h **** 	static Element &reduce (Element &r, DoubleFatElement a, Element m) 
 172:../lela/ring/modular.h **** 		{ return r = a % m; }
 173:../lela/ring/modular.h **** 	static DoubleFatElement &reduce (DoubleFatElement &r, DoubleFatElement a, Element m) 
 174:../lela/ring/modular.h **** 		{ return r = a % m; }
 175:../lela/ring/modular.h **** 	static Element &reduce (Element &r, int a, Element m) 
 176:../lela/ring/modular.h **** 		{ int t = a % (int) m; if (t < 0) t += m; return r = t; }
 177:../lela/ring/modular.h **** 	static Element &init_modulus (Element &elt, integer x)
 178:../lela/ring/modular.h **** 		{ elt = x.get_ui (); return elt; }
 179:../lela/ring/modular.h **** 	static std::ostream &write (std::ostream &os, const Element &x)
 180:../lela/ring/modular.h **** 		{ return os << x; }
 181:../lela/ring/modular.h **** 	static size_t element_width (Element modulus)
 182:../lela/ring/modular.h **** 		{ return (size_t) ceil (log (double (modulus)) / M_LN10); }
 183:../lela/ring/modular.h **** 	template <class T>
 184:../lela/ring/modular.h **** 	static T &shift_up (T &v, uint16 modulus)
 185:../lela/ring/modular.h **** 		{ if (v < 0) v += modulus; return v; }
 186:../lela/ring/modular.h **** 	template <class T>
 187:../lela/ring/modular.h **** 	static T &shift_down (T &v, uint16 modulus)
 188:../lela/ring/modular.h **** 		{ if (v >= modulus) v -= modulus; return v; }
 189:../lela/ring/modular.h **** 	template <class T>
 190:../lela/ring/modular.h **** 	static T &neg (T &v, const Element &modulus)
 191:../lela/ring/modular.h **** 		{ v = modulus - v; return valid_rep (v, modulus); }
 8053              		.loc	35 191 5
 8054              	.Ltmp2539:
 8055 01fd 48898570 		movq	%rax, -144(%rbp)        # ../lela/ring/modular.h:191:5[ ../lela/ring/modular.h:522:5[ matrix-
 8055      FFFFFF
 8056              	                                        # 8-byte Spill
 8057 0204 488B8D68 		movq	-152(%rbp), %rcx        # ../lela/ring/modular.h:191:5[ ../lela/ring/modular.h:522:5[ matrix-
 8057      FFFFFF
 8058              	                                        # 8-byte Reload
 8059 020b 440FB721 		movzwl	(%rcx), %r12d           # ../lela/ring/modular.h:191:5[ ../lela/ring/modular.h:522:5[ matri
 8060              	.Ltmp2540:
   1:../lela/util/property.h **** /* lela/util/property.h
   2:../lela/util/property.h ****  * Copyright 2011 Bradford Hovinen <hovinen@gmail.com>
   3:../lela/util/property.h ****  *
   4:../lela/util/property.h ****  * Written by Bradford Hovinen <hovinen@gmail.com>
   5:../lela/util/property.h ****  *
   6:../lela/util/property.h ****  * C++-structure which mimics C#-style properties
   7:../lela/util/property.h ****  *
   8:../lela/util/property.h ****  * ------------------------------------
   9:../lela/util/property.h ****  * 
  10:../lela/util/property.h ****  * This file is part of LELA, licensed under the GNU General Public
  11:../lela/util/property.h ****  * License version 3. See COPYING for more information.
  12:../lela/util/property.h ****  */
  13:../lela/util/property.h **** 
  14:../lela/util/property.h **** #ifndef __LELA_UTIL_PROPERTY_H
  15:../lela/util/property.h **** #define __LELA_UTIL_PROPERTY_H
  16:../lela/util/property.h **** 
  17:../lela/util/property.h **** #include <vector>
  18:../lela/util/property.h **** 
  19:../lela/util/property.h **** namespace LELA
  20:../lela/util/property.h **** {
  21:../lela/util/property.h **** 
  22:../lela/util/property.h **** /// Closure which dereferences an iterator
  23:../lela/util/property.h **** template <class Iterator>
  24:../lela/util/property.h **** struct SimpleAccessor
  25:../lela/util/property.h **** {
  26:../lela/util/property.h **** 	typedef typename std::iterator_traits<Iterator>::value_type value_type;
  27:../lela/util/property.h **** 	typedef typename std::iterator_traits<Iterator>::reference reference;
  28:../lela/util/property.h **** 	static value_type get (const Iterator &i) { return *i; }
 8061              		.loc	37 28 46
 8062              	.Ltmp2541:
 8063 020f 440FB72B 		movzwl	(%rbx), %r13d           # ../lela/util/property.h:28:46[ ../lela/util/property.h:160:5[ mat
 8064 0213 488D4D98 		leaq	-104(%rbp), %rcx
 8065              	.Ltmp2542:
 173:matrix-op.C   **** 
 174:matrix-op.C   **** 			TIMER_START_(AxpyTimer);			
 8066              		.loc	1 174 4
 8067              	.Ltmp2543:
 8068 0217 4889CF   		movq	%rcx, %rdi              # matrix-op.C:174:4
 8069 021a E8000000 		callq	_ZN4LELA9UserTimer5startEv # matrix-op.C:174:4
 8069      00
 8070 021f 4489E1   		movl	%r12d, %ecx
 8071 0222 4429E9   		subl	%r13d, %ecx
 8072 0225 41F7DD   		negl	%r13d
 8073 0228 664439E1 		cmpw	%r12w, %cx
 8074 022c 66440F42 		cmovbw	%cx, %r13w
 8074      E9
 8075              		.loc	34 696 9
 8076              	.Ltmp2544:
 8077 0231 488B8570 		movq	-144(%rbp), %rax        # /usr/include/c++/4.6.3/bits/stl_vector.h:696:9[ ../lela/matrix/spar
 8077      FFFFFF
 8078              	                                        # 8-byte Reload
 8079 0238 488D0440 		leaq	(%rax,%rax,2), %rax     # /usr/include/c++/4.6.3/bits/stl_vector.h:696:9[ ../lela/matrix/spar
 8080 023c 48C1E004 		shlq	$4, %rax                # /usr/include/c++/4.6.3/bits/stl_vector.h:696:9[ ../lela/matrix/spar
 8081              	.Ltmp2545:
 571:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8082              		.loc	34 571 9
 8083              	.Ltmp2546:
 8084 0240 498B0C07 		movq	(%r15,%rax), %rcx       # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ ../lela/vector/spar
 8085 0244 498B5407 		movq	8(%r15,%rax), %rdx      # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ ../lela/vector/spar
 8085      08
 8086 0249 4829CA   		subq	%rcx, %rdx              # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ ../lela/vector/spar
 8087 024c 48C1EA02 		shrq	$2, %rdx
 8088              	.Ltmp2547:
  88:matrix-op.C   **** 	uint32 sz = x.size ();
 8089              		.loc	1 88 23
 8090              	.Ltmp2548:
 8091 0250 85D2     		testl	%edx, %edx              # matrix-op.C:88:23[ matrix-op.C:179:4 ]
 8092 0252 742B     		je	.LBB8_12
 8093              	# BB#10:                                # %.lr.ph.i33
 8094              	                                        #   in Loop: Header=BB8_9 Depth=2
 8095              	.Ltmp2549:
 8096              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8097              	.Ltmp2550:
 8098              		#DEBUG_VALUE: rowdim:this <- [%rbp+$-232]+$0
 8099              	.Ltmp2551:
 8100              		#DEBUG_VALUE: coldim:this <- [%rbp+$-168]+$0
 8101              	.Ltmp2552:
 8102              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8103              	.Ltmp2553:
 8104              		#DEBUG_VALUE: rowEnd:this <- [%rbp+$-168]+$0
 8105              	.Ltmp2554:
 8106              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8107              	.Ltmp2555:
 8108              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8109              	.Ltmp2556:
 8110              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8111              	.Ltmp2557:
 8112              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8113              	.Ltmp2558:
 8114              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 8115 0254 410FB7F5 		movzwl	%r13w, %esi
 8116 0258 498B4407 		movq	24(%r15,%rax), %rax
 8116      18
 8117 025d 89D2     		movl	%edx, %edx
 8118 025f 90       		.align	16, 0x90
 8119              	.LBB8_11:                               #   Parent Loop BB8_4 Depth=1
 8120              	                                        #     Parent Loop BB8_9 Depth=2
 8121              	                                        # =>    This Inner Loop Header: Depth=3
 8122              	.Ltmp2559:
 8123              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8124              	.Ltmp2560:
 8125              		#DEBUG_VALUE: rowdim:this <- [%rbp+$-232]+$0
 8126              	.Ltmp2561:
 8127              		#DEBUG_VALUE: coldim:this <- [%rbp+$-168]+$0
 8128              	.Ltmp2562:
 8129              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8130              	.Ltmp2563:
 8131              		#DEBUG_VALUE: rowEnd:this <- [%rbp+$-168]+$0
 8132              	.Ltmp2564:
 8133              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8134              	.Ltmp2565:
 8135              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8136              	.Ltmp2566:
 8137              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8138              	.Ltmp2567:
 8139              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8140              	.Ltmp2568:
 8141              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 8142 0260 0FB738   		movzwl	(%rax), %edi
 8143 0263 480FAFFE 		imulq	%rsi, %rdi
  94:matrix-op.C   **** 		y[x[i].first] += a32 * (uint32)(x[i].second);
 8144              		.loc	1 94 3
 8145              	.Ltmp2569:
 8146 0267 448B01   		movl	(%rcx), %r8d            # matrix-op.C:94:3[ matrix-op.C:179:4 ]
 8147 026a 4C8B4D80 		movq	-128(%rbp), %r9         # matrix-op.C:94:3[ matrix-op.C:179:4 ]
 8148              	                                        # 8-byte Reload
 8149 026e 4B013CC1 		addq	%rdi, (%r9,%r8,8)       # matrix-op.C:94:3[ matrix-op.C:179:4 ]
 8150 0272 4883C104 		addq	$4, %rcx
 8151 0276 4883C002 		addq	$2, %rax
 8152 027a 48FFCA   		decq	%rdx
  93:matrix-op.C   **** 	for(i=0; i<sz; ++i)
 8153              		.loc	1 93 2
 8154              	.Ltmp2570:
 8155 027d 75E1     		jne	.LBB8_11                # matrix-op.C:93:2[ matrix-op.C:179:4 ]
 8156              	.LBB8_12:                               # %_Z4axpytRN4LELA12SparseVectorItSt6vectorIjSaIjEES1_ItSaI
 8157              	                                        #   in Loop: Header=BB8_9 Depth=2
 8158              	.Ltmp2571:
 8159              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8160              	.Ltmp2572:
 8161              		#DEBUG_VALUE: rowdim:this <- [%rbp+$-232]+$0
 8162              	.Ltmp2573:
 8163              		#DEBUG_VALUE: coldim:this <- [%rbp+$-168]+$0
 8164              	.Ltmp2574:
 8165              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8166              	.Ltmp2575:
 8167              		#DEBUG_VALUE: rowEnd:this <- [%rbp+$-168]+$0
 8168              	.Ltmp2576:
 8169              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8170              	.Ltmp2577:
 8171              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8172              	.Ltmp2578:
 8173              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8174              	.Ltmp2579:
 8175              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8176              	.Ltmp2580:
 8177              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 8178 027f 488D4598 		leaq	-104(%rbp), %rax
 8179              	.Ltmp2581:
 175:matrix-op.C   **** 			/*register uint32 x=0, sz = B[Ap].size ();
 176:matrix-op.C   **** 			for(x=0; x<sz; ++x)
 177:matrix-op.C   **** 				tmpDenseArray[(*rowB)[x].first] += Av32 * (uint32)(*rowB)[x].second;*/
 178:matrix-op.C   **** 
 179:matrix-op.C   **** 			axpy(Av, *rowB, tmpDenseArray);
 180:matrix-op.C   **** 			
 181:matrix-op.C   **** 			TIMER_STOP_(AxpyTimer);
 8180              		.loc	1 181 4
 8181              	.Ltmp2582:
 8182 0283 4889C7   		movq	%rax, %rdi              # matrix-op.C:181:4
 8183 0286 E8000000 		callq	_ZN4LELA9UserTimer4stopEv # matrix-op.C:181:4
 8183      00
 8184 028b 4883C302 		addq	$2, %rbx
 8185 028f 4983C604 		addq	$4, %r14
 8186              	.Ltmp2583:
 8187              		.loc	9 819 7
 8188              	.Ltmp2584:
 8189 0293 4C39B560 		cmpq	%r14, -160(%rbp)        # /usr/include/c++/4.6.3/bits/stl_iterator.h:819:7[ ../lela/vector/sp
 8189      FFFFFF
 8190              	                                        # 8-byte Folded Reload
 8191              	.Ltmp2585:
 8192              		.loc	1 181 4
 8193              	.Ltmp2586:
 8194 029a F20F1085 		movsd	-136(%rbp), %xmm0       # matrix-op.C:181:4
 8194      78FFFFFF 
 8195              	                                        # 8-byte Reload
 8196 02a2 F20F5845 		addsd	-96(%rbp), %xmm0        # matrix-op.C:181:4
 8196      A0
 8197              	.Ltmp2587:
 164:matrix-op.C   **** 		while(row_it_A != row_it_A_end)
 8198              		.loc	1 164 3
 8199              	.Ltmp2588:
 8200 02a7 F20F1185 		movsd	%xmm0, -136(%rbp)       # matrix-op.C:164:3
 8200      78FFFFFF 
 8201              	                                        # 8-byte Spill
 8202 02af 0F853BFF 		jne	.LBB8_9
 8202      FFFF
 8203              	.LBB8_13:                               # %._crit_edge
 8204              	                                        #   in Loop: Header=BB8_4 Depth=1
 8205              	.Ltmp2589:
 8206              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8207              	.Ltmp2590:
 8208              		#DEBUG_VALUE: rowdim:this <- [%rbp+$-232]+$0
 8209              	.Ltmp2591:
 8210              		#DEBUG_VALUE: coldim:this <- [%rbp+$-168]+$0
 8211              	.Ltmp2592:
 8212              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8213              	.Ltmp2593:
 8214              		#DEBUG_VALUE: rowEnd:this <- [%rbp+$-168]+$0
 8215              	.Ltmp2594:
 8216              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8217              	.Ltmp2595:
 8218              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8219              	.Ltmp2596:
 8220              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8221              	.Ltmp2597:
 8222              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8223              	.Ltmp2598:
 8224              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 149:matrix-op.C   **** 		TIMER_STOP_(RazArrayTimer);
 8225              		.loc	1 149 3
 8226              	.Ltmp2599:
 8227 02b5 F20F1085 		movsd	-192(%rbp), %xmm0       # matrix-op.C:149:3
 8227      40FFFFFF 
 8228              	                                        # 8-byte Reload
 8229 02bd F20F5885 		addsd	-224(%rbp), %xmm0       # matrix-op.C:149:3
 8229      20FFFFFF 
 8230              	                                        # 8-byte Folded Reload
 8231 02c5 F20F1185 		movsd	%xmm0, -192(%rbp)       # 8-byte Spill
 8231      40FFFFFF 
 8232 02cd 488D7D88 		leaq	-120(%rbp), %rdi
 182:matrix-op.C   **** 
 183:matrix-op.C   **** 			++row_it_A;
 184:matrix-op.C   **** 		}
 185:matrix-op.C   **** 		TIMER_STOP_(AxpyOutTimer);
 8233              		.loc	1 185 3
 8234              	.Ltmp2600:
 8235 02d1 E8000000 		callq	_ZN4LELA9UserTimer4stopEv # matrix-op.C:185:3
 8235      00
 8236              		.loc	33 44 31
 8237              	.Ltmp2601:
 8238 02d6 F20F1045 		movsd	-112(%rbp), %xmm0       # ../lela/util/timer.h:44:31[ matrix-op.C:185:3 ]
 8238      90
 8239 02db F20F1185 		movsd	%xmm0, -144(%rbp)       # 8-byte Spill
 8239      70FFFFFF 
 8240 02e3 488D5DA8 		leaq	-88(%rbp), %rbx
 8241              	.Ltmp2602:
 186:matrix-op.C   **** 
 187:matrix-op.C   **** 		TIMER_START_(CopyDenseArrayToSparseVectorTimer);
 8242              		.loc	1 187 3
 8243              	.Ltmp2603:
 8244 02e7 4889DF   		movq	%rbx, %rdi              # matrix-op.C:187:3
 8245 02ea E8000000 		callq	_ZN4LELA9UserTimer5startEv # matrix-op.C:187:3
 8245      00
 188:matrix-op.C   **** 			copyDenseArrayToSparseVector64(R, tmpDenseArray, B_coldim, *i_B);
 8246              		.loc	1 188 4
 8247              	.Ltmp2604:
 8248 02ef 488BBD68 		movq	-152(%rbp), %rdi        # matrix-op.C:188:4
 8248      FFFFFF
 8249              	                                        # 8-byte Reload
 8250 02f6 488B7580 		movq	-128(%rbp), %rsi        # matrix-op.C:188:4
 8251              	                                        # 8-byte Reload
 8252 02fa 488B9510 		movq	-240(%rbp), %rdx        # matrix-op.C:188:4
 8252      FFFFFF
 8253              	                                        # 8-byte Reload
 8254              	                                        # matrix-op.C:188:4
 8255              	                                        # kill: EDX<def> EDX<kill> RDX<kill>
 8256 0301 4C8BB550 		movq	-176(%rbp), %r14        # matrix-op.C:188:4
 8256      FFFFFF
 8257              	                                        # 8-byte Reload
 8258 0308 4C89F1   		movq	%r14, %rcx              # matrix-op.C:188:4
 8259 030b E8000000 		callq	_Z30copyDenseArrayToSparseVector64IN4LELA7ModularItEENS0_12SparseVectorItSt6vectorIjSaIjEES4
 8259      00
 189:matrix-op.C   **** 		TIMER_STOP_(CopyDenseArrayToSparseVectorTimer);
 8260              		.loc	1 189 3
 8261              	.Ltmp2605:
 8262 0310 4889DF   		movq	%rbx, %rdi              # matrix-op.C:189:3
 8263 0313 E8000000 		callq	_ZN4LELA9UserTimer4stopEv # matrix-op.C:189:3
 8263      00
 185:matrix-op.C   **** 		TIMER_STOP_(AxpyOutTimer);
 8264              		.loc	1 185 3
 8265              	.Ltmp2606:
 8266 0318 F20F1085 		movsd	-216(%rbp), %xmm0       # matrix-op.C:185:3
 8266      28FFFFFF 
 8267              	                                        # 8-byte Reload
 8268 0320 F20F5885 		addsd	-144(%rbp), %xmm0       # matrix-op.C:185:3
 8268      70FFFFFF 
 8269              	                                        # 8-byte Folded Reload
 8270 0328 F20F1185 		movsd	%xmm0, -216(%rbp)       # 8-byte Spill
 8270      28FFFFFF 
 8271 0330 488B8548 		movq	-184(%rbp), %rax        # 8-byte Reload
 8271      FFFFFF
 8272 0337 488D48A0 		leaq	-96(%rax), %rcx
 8273 033b 488D40D0 		leaq	-48(%rax), %rax
 8274 033f 48898548 		movq	%rax, -184(%rbp)        # 8-byte Spill
 8274      FFFFFF
 8275 0346 4983C6D0 		addq	$-48, %r14
 8276 034a 4C89B550 		movq	%r14, -176(%rbp)        # 8-byte Spill
 8276      FFFFFF
 8277 0351 488BB518 		movq	-232(%rbp), %rsi        # 8-byte Reload
 8277      FFFFFF
 8278 0358 483B0E   		cmpq	(%rsi), %rcx
 8279              		.loc	1 189 3
 8280              	.Ltmp2607:
 8281 035b F20F1085 		movsd	-208(%rbp), %xmm0       # matrix-op.C:189:3
 8281      30FFFFFF 
 8282              	                                        # 8-byte Reload
 8283 0363 F20F5845 		addsd	-80(%rbp), %xmm0        # matrix-op.C:189:3
 8283      B0
 190:matrix-op.C   **** 		
 191:matrix-op.C   **** 	} while(i_A != A.rowBegin ());
 8284              		.loc	1 191 2
 8285              	.Ltmp2608:
 8286 0368 F20F1185 		movsd	%xmm0, -208(%rbp)       # matrix-op.C:191:2
 8286      30FFFFFF 
 8287              	                                        # 8-byte Spill
 8288 0370 0F859AFD 		jne	.LBB8_4
 8288      FFFF
 8289              	# BB#14:
 8290              	.Ltmp2609:
 8291              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8292              	.Ltmp2610:
 8293              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8294              	.Ltmp2611:
 8295              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8296              	.Ltmp2612:
 8297              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8298              	.Ltmp2613:
 8299              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8300              	.Ltmp2614:
 8301              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8302              	.Ltmp2615:
 8303              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 8304              	.Ltmp2616:
 192:matrix-op.C   **** 
 193:matrix-op.C   **** #ifdef SHOW_PROGRESS
 194:matrix-op.C   ****         report << "\r                                                                    \n";
 195:matrix-op.C   **** #endif
 196:matrix-op.C   **** 
 197:matrix-op.C   **** 	TIMER_REPORT_(RazArrayTimer);
 8305              		.loc	1 197 2
 8306              	.Ltmp2617:
 8307 0376 BF000000 		movl	$_ZN4LELA11commentatorE, %edi # matrix-op.C:197:2
 8307      00
 8308 037b 31F6     		xorl	%esi, %esi
 8309 037d BA000000 		movl	$.L.str21, %edx         # matrix-op.C:197:2
 8309      00
 8310 0382 E8000000 		callq	_ZN4LELA11Commentator6reportElPKc # matrix-op.C:197:2
 8310      00
 8311 0387 4889C3   		movq	%rax, %rbx              # matrix-op.C:197:2
 210:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 8312              		.loc	12 210 7
 8313              	.Ltmp2618:
 8314              		#DEBUG_VALUE: operator<<:this <- RBX+0 # /usr/include/c++/4.6.3/ostream:210:7[ matrix-op.C:197:2 ]
 509:/usr/include/c++/4.6.3/ostream ****     inline basic_ostream<char, _Traits>&
 8315              		.loc	12 509 46
 8316              	.Ltmp2619:
 8317              		#DEBUG_VALUE: operator<<:__out <- RBX+0 # /usr/include/c++/4.6.3/ostream:509:46[ matrix-op.C:197:2
 515:/usr/include/c++/4.6.3/ostream **** 	__ostream_insert(__out, __s,
 8318              		.loc	12 515 29
 8319              	.Ltmp2620:
 8320 038a BE000000 		movl	$.L.str22, %esi         # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:197:2 ]
 8320      00
 259:/usr/include/c++/4.6.3/bits/char_traits.h ****       static size_t
 8321              		.loc	11 259 31
 8322              	.Ltmp2621:
 8323              		#DEBUG_VALUE: length:__s <- RSI+0 # /usr/include/c++/4.6.3/bits/char_traits.h:259:31[ /usr/include
 8324 038f BA1A0000 		movl	$26, %edx
 8324      00
 515:/usr/include/c++/4.6.3/ostream **** 	__ostream_insert(__out, __s,
 8325              		.loc	12 515 29
 8326              	.Ltmp2622:
 8327 0394 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:197:2 ]
 8328              	.Ltmp2623:
 8329              		#DEBUG_VALUE: length:__s <- undef
 8330 0397 E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l # /usr/include
 8330      00
 210:/usr/include/c++/4.6.3/ostream ****       __ostream_type& 
 8331              		.loc	12 210 25
 8332              	.Ltmp2624:
 8333              		#DEBUG_VALUE: operator<<:__f <- [%rbp+$-192]+$0 # /usr/include/c++/4.6.3/ostream:210:25[ matrix-op
 211:/usr/include/c++/4.6.3/ostream ****       operator<<(double __f)
 8334              		.loc	12 211 9
 8335              	.Ltmp2625:
 8336 039c 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:197:2 ]
 8337              	.Ltmp2626:
 8338              		#DEBUG_VALUE: operator<<:this <- undef
 8339              	.Ltmp2627:
 8340              		#DEBUG_VALUE: operator<<:__out <- undef
 8341 039f F20F1085 		movsd	-192(%rbp), %xmm0       # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:197:2 ]
 8341      40FFFFFF 
 8342              	                                        # 8-byte Reload
 8343              	.Ltmp2628:
 8344              		#DEBUG_VALUE: operator<<:__f <- undef
 8345 03a7 E8000000 		callq	_ZNSo9_M_insertIdEERSoT_ # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:197:2 ]
 8345      00
 8346 03ac 4889C3   		movq	%rax, %rbx              # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:197:2 ]
 542:/usr/include/c++/4.6.3/ostream ****     inline basic_ostream<_CharT, _Traits>& 
 8347              		.loc	12 542 42
 8348              	.Ltmp2629:
 8349              		#DEBUG_VALUE: endl:__os <- RBX+0 # /usr/include/c++/4.6.3/ostream:542:42[ /usr/include/c++/4.6.3/o
 109:/usr/include/c++/4.6.3/ostream ****       __ostream_type&
 8350              		.loc	12 109 7
 8351              	.Ltmp2630:
 8352              		#DEBUG_VALUE: operator<<:this <- RBX+0 # /usr/include/c++/4.6.3/ostream:109:7[ matrix-op.C:197:2 ]
 8353              	.Ltmp2631:
 8354              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 515:/usr/include/c++/4.6.3/ostream **** 	__ostream_insert(__out, __s,
 8355              		.loc	12 515 29
 8356              	.Ltmp2632:
 8357 03af BE000000 		movl	$.L.str23, %esi         # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:197:2 ]
 8357      00
 8358              	.Ltmp2633:
 8359              		#DEBUG_VALUE: length:__s <- RSI+0
 8360 03b4 BA010000 		movl	$1, %edx
 8360      00
 8361 03b9 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:197:2 ]
 8362              	.Ltmp2634:
 8363              		#DEBUG_VALUE: length:__s <- undef
 8364 03bc E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l # /usr/include
 8364      00
 543:/usr/include/c++/4.6.3/ostream ****     endl(basic_ostream<_CharT, _Traits>& __os)
 8365              		.loc	12 543 7
 8366              	.Ltmp2635:
 8367 03c1 488B03   		movq	(%rbx), %rax            # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 8368 03c4 488B40E8 		movq	-24(%rax), %rax         # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 8369              		.loc	14 441 9
 8370              	.Ltmp2636:
 8371 03c8 4C8BB418 		movq	240(%rax,%rbx), %r14    # /usr/include/c++/4.6.3/bits/basic_ios.h:441:9[ /usr/include/c++/4.6
 8371      F0000000 
  47:/usr/include/c++/4.6.3/bits/basic_ios.h ****     inline const _Facet&
 8372              		.loc	14 47 33
 8373              	.Ltmp2637:
 8374              		#DEBUG_VALUE: __check_facet:__f <- R14+0 # /usr/include/c++/4.6.3/bits/basic_ios.h:47:33[ /usr/inc
 440:/usr/include/c++/4.6.3/bits/basic_ios.h ****       char_type
 8375              		.loc	14 440 18
 8376              	.Ltmp2638:
 8377              		#DEBUG_VALUE: widen:__c <- 10+0 # /usr/include/c++/4.6.3/bits/basic_ios.h:440:18[ /usr/include/c++
 8378              		.loc	14 441 9
 8379              	.Ltmp2639:
 8380 03d0 4D85F6   		testq	%r14, %r14              # /usr/include/c++/4.6.3/bits/basic_ios.h:441:9[ /usr/include/c++/4.
 8381 03d3 0F84D702 		je	.LBB8_38
 8381      0000
 8382              	# BB#15:                                # %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i30
 8383              	.Ltmp2640:
 8384              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8385              	.Ltmp2641:
 8386              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8387              	.Ltmp2642:
 8388              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8389              	.Ltmp2643:
 8390              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8391              	.Ltmp2644:
 8392              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8393              	.Ltmp2645:
 8394              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8395              	.Ltmp2646:
 8396              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 8397              	.Ltmp2647:
 8398              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 8399              	.Ltmp2648:
 8400              		#DEBUG_VALUE: operator<<:__out <- undef
 8401              	.Ltmp2649:
 8402              		#DEBUG_VALUE: operator<<:this <- RBX+0
 8403              	.Ltmp2650:
 8404              		#DEBUG_VALUE: operator<<:this <- undef
 8405              	.Ltmp2651:
 8406              		#DEBUG_VALUE: endl:__os <- RBX+0
 8407              	.Ltmp2652:
 8408              		#DEBUG_VALUE: endl:__os <- undef
 8409              	.Ltmp2653:
 8410              		#DEBUG_VALUE: widen:__c <- 10+0
 8411              	.Ltmp2654:
 8412              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 867:/usr/include/c++/4.6.3/bits/locale_facets.h ****       {
 8413              		.loc	24 867 2
 8414              	.Ltmp2655:
 8415 03d9 41807E38 		cmpb	$0, 56(%r14)            # /usr/include/c++/4.6.3/bits/locale_facets.h:867:2[ /usr/include/c++
 8415      00
 865:/usr/include/c++/4.6.3/bits/locale_facets.h ****       char_type
 8416              		.loc	24 865 7
 8417              	.Ltmp2656:
 8418              		#DEBUG_VALUE: widen:this <- R14+0 # /usr/include/c++/4.6.3/bits/locale_facets.h:865:7[ /usr/includ
 865:/usr/include/c++/4.6.3/bits/locale_facets.h ****       char_type
 8419              		.loc	24 865 18
 8420              	.Ltmp2657:
 8421              		#DEBUG_VALUE: widen:__c <- 10+0 # /usr/include/c++/4.6.3/bits/locale_facets.h:865:18[ /usr/include
 867:/usr/include/c++/4.6.3/bits/locale_facets.h ****       {
 8422              		.loc	24 867 2
 8423              	.Ltmp2658:
 8424 03de 7406     		je	.LBB8_17                # /usr/include/c++/4.6.3/bits/locale_facets.h:867:2[ /usr/include/c++/4
 8425              	# BB#16:
 8426              	.Ltmp2659:
 8427              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8428              	.Ltmp2660:
 8429              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8430              	.Ltmp2661:
 8431              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8432              	.Ltmp2662:
 8433              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8434              	.Ltmp2663:
 8435              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8436              	.Ltmp2664:
 8437              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8438              	.Ltmp2665:
 8439              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 8440              	.Ltmp2666:
 8441              		#DEBUG_VALUE: widen:__c <- 10+0
 8442              	.Ltmp2667:
 8443              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 8444              	.Ltmp2668:
 8445              		#DEBUG_VALUE: widen:__c <- 10+0
 8446              	.Ltmp2669:
 8447              		#DEBUG_VALUE: widen:this <- R14+0
 868:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	if (_M_widen_ok)
 8448              		.loc	24 868 4
 8449              	.Ltmp2670:
 8450 03e0 418A4643 		movb	67(%r14), %al           # /usr/include/c++/4.6.3/bits/locale_facets.h:868:4[ /usr/include/c++
 8451              	.Ltmp2671:
 8452              		#DEBUG_VALUE: widen:this <- undef
 8453              	.Ltmp2672:
 8454              		#DEBUG_VALUE: __check_facet:__f <- undef
 8455 03e4 EB16     		jmp	.LBB8_18
 8456              	.LBB8_17:
 8457              	.Ltmp2673:
 8458              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8459              	.Ltmp2674:
 8460              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8461              	.Ltmp2675:
 8462              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8463              	.Ltmp2676:
 8464              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8465              	.Ltmp2677:
 8466              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8467              	.Ltmp2678:
 8468              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8469              	.Ltmp2679:
 8470              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 8471              	.Ltmp2680:
 8472              		#DEBUG_VALUE: widen:__c <- 10+0
 8473              	.Ltmp2681:
 8474              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 8475              	.Ltmp2682:
 8476              		#DEBUG_VALUE: widen:__c <- 10+0
 8477              	.Ltmp2683:
 8478              		#DEBUG_VALUE: widen:this <- R14+0
 869:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	  return _M_widen[static_cast<unsigned char>(__c)];
 8479              		.loc	24 869 2
 8480              	.Ltmp2684:
 8481 03e6 4C89F7   		movq	%r14, %rdi              # /usr/include/c++/4.6.3/bits/locale_facets.h:869:2[ /usr/include/c++
 8482 03e9 E8000000 		callq	_ZNKSt5ctypeIcE13_M_widen_initEv # /usr/include/c++/4.6.3/bits/locale_facets.h:869:2[ /usr/i
 8482      00
 8483              		.loc	24 870 2
 8484              	.Ltmp2685:
 8485 03ee 498B06   		movq	(%r14), %rax            # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c++
 8486 03f1 BE0A0000 		movl	$10, %esi
 8486      00
 8487 03f6 4C89F7   		movq	%r14, %rdi              # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c++
 8488              	.Ltmp2686:
 8489              		#DEBUG_VALUE: widen:this <- undef
 8490              	.Ltmp2687:
 8491              		#DEBUG_VALUE: __check_facet:__f <- undef
 8492 03f9 FF5030   		callq	*48(%rax)               # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c+
 8493              	.LBB8_18:                               # %_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES
 8494              	.Ltmp2688:
 8495              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8496              	.Ltmp2689:
 8497              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8498              	.Ltmp2690:
 8499              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8500              	.Ltmp2691:
 8501              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8502              	.Ltmp2692:
 8503              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8504              	.Ltmp2693:
 8505              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8506              	.Ltmp2694:
 8507              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 8508              	.Ltmp2695:
 8509              		#DEBUG_VALUE: widen:__c <- 10+0
 8510              	.Ltmp2696:
 8511              		#DEBUG_VALUE: widen:__c <- 10+0
 8512              	.Ltmp2697:
 543:/usr/include/c++/4.6.3/ostream ****     endl(basic_ostream<_CharT, _Traits>& __os)
 8513              		.loc	12 543 7
 8514              	.Ltmp2698:
 8515 03fc 0FBEF0   		movsbl	%al, %esi               # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostr
 8516 03ff 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 8517 0402 E8000000 		callq	_ZNSo3putEc             # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostre
 8517      00
 563:/usr/include/c++/4.6.3/ostream ****     inline basic_ostream<_CharT, _Traits>& 
 8518              		.loc	12 563 43
 8519              	.Ltmp2699:
 8520              		#DEBUG_VALUE: flush:__os <- RAX+0 # /usr/include/c++/4.6.3/ostream:563:43[ /usr/include/c++/4.6.3/
 8521              		.loc	12 564 7
 8522              	.Ltmp2700:
 8523 0407 4889C7   		movq	%rax, %rdi              # /usr/include/c++/4.6.3/ostream:564:7[ /usr/include/c++/4.6.3/ostrea
 8524              	.Ltmp2701:
 8525              		#DEBUG_VALUE: flush:__os <- undef
 8526 040a E8000000 		callq	_ZNSo5flushEv           # /usr/include/c++/4.6.3/ostream:564:7[ /usr/include/c++/4.6.3/ostre
 8526      00
 8527              	.Ltmp2702:
 198:matrix-op.C   **** 	TIMER_REPORT_(CopySparseVectorToDenseArrayTimer);
 8528              		.loc	1 198 2
 8529              	.Ltmp2703:
 8530 040f BF000000 		movl	$_ZN4LELA11commentatorE, %edi # matrix-op.C:198:2
 8530      00
 8531 0414 31F6     		xorl	%esi, %esi
 8532 0416 BA000000 		movl	$.L.str21, %edx         # matrix-op.C:198:2
 8532      00
 8533 041b E8000000 		callq	_ZN4LELA11Commentator6reportElPKc # matrix-op.C:198:2
 8533      00
 8534 0420 4889C3   		movq	%rax, %rbx              # matrix-op.C:198:2
 8535              	.Ltmp2704:
 8536              		#DEBUG_VALUE: operator<<:this <- RBX+0
 8537              	.Ltmp2705:
 8538              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 515:/usr/include/c++/4.6.3/ostream **** 	__ostream_insert(__out, __s,
 8539              		.loc	12 515 29
 8540              	.Ltmp2706:
 8541 0423 BE000000 		movl	$.L.str24, %esi         # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:198:2 ]
 8541      00
 8542              	.Ltmp2707:
 8543              		#DEBUG_VALUE: length:__s <- RSI+0
 8544 0428 BA2E0000 		movl	$46, %edx
 8544      00
 8545 042d 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:198:2 ]
 8546              	.Ltmp2708:
 8547              		#DEBUG_VALUE: length:__s <- undef
 8548 0430 E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l # /usr/include
 8548      00
 8549              	.Ltmp2709:
 8550              		#DEBUG_VALUE: operator<<:__f <- [%rbp+$-200]+$0
 211:/usr/include/c++/4.6.3/ostream ****       operator<<(double __f)
 8551              		.loc	12 211 9
 8552              	.Ltmp2710:
 8553 0435 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:198:2 ]
 8554              	.Ltmp2711:
 8555              		#DEBUG_VALUE: operator<<:this <- undef
 8556              	.Ltmp2712:
 8557              		#DEBUG_VALUE: operator<<:__out <- undef
 8558 0438 F20F1085 		movsd	-200(%rbp), %xmm0       # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:198:2 ]
 8558      38FFFFFF 
 8559              	                                        # 8-byte Reload
 8560              	.Ltmp2713:
 8561              		#DEBUG_VALUE: operator<<:__f <- undef
 8562 0440 E8000000 		callq	_ZNSo9_M_insertIdEERSoT_ # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:198:2 ]
 8562      00
 8563 0445 4889C3   		movq	%rax, %rbx              # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:198:2 ]
 8564              	.Ltmp2714:
 8565              		#DEBUG_VALUE: endl:__os <- RBX+0
 8566              	.Ltmp2715:
 8567              		#DEBUG_VALUE: operator<<:this <- RBX+0
 8568              	.Ltmp2716:
 8569              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 515:/usr/include/c++/4.6.3/ostream **** 	__ostream_insert(__out, __s,
 8570              		.loc	12 515 29
 8571              	.Ltmp2717:
 8572 0448 BE000000 		movl	$.L.str23, %esi         # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:198:2 ]
 8572      00
 8573              	.Ltmp2718:
 8574              		#DEBUG_VALUE: length:__s <- RSI+0
 8575 044d BA010000 		movl	$1, %edx
 8575      00
 8576 0452 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:198:2 ]
 8577              	.Ltmp2719:
 8578              		#DEBUG_VALUE: length:__s <- undef
 8579 0455 E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l # /usr/include
 8579      00
 543:/usr/include/c++/4.6.3/ostream ****     endl(basic_ostream<_CharT, _Traits>& __os)
 8580              		.loc	12 543 7
 8581              	.Ltmp2720:
 8582 045a 488B03   		movq	(%rbx), %rax            # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 8583 045d 488B40E8 		movq	-24(%rax), %rax         # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 8584              		.loc	14 441 9
 8585              	.Ltmp2721:
 8586 0461 4C8BB418 		movq	240(%rax,%rbx), %r14    # /usr/include/c++/4.6.3/bits/basic_ios.h:441:9[ /usr/include/c++/4.6
 8586      F0000000 
 8587              	.Ltmp2722:
 8588              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 8589 0469 4D85F6   		testq	%r14, %r14              # /usr/include/c++/4.6.3/bits/basic_ios.h:441:9[ /usr/include/c++/4.
 8590 046c 0F843E02 		je	.LBB8_38
 8590      0000
 8591              	# BB#19:                                # %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i18
 8592              	.Ltmp2723:
 8593              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8594              	.Ltmp2724:
 8595              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8596              	.Ltmp2725:
 8597              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8598              	.Ltmp2726:
 8599              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8600              	.Ltmp2727:
 8601              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8602              	.Ltmp2728:
 8603              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8604              	.Ltmp2729:
 8605              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 8606              	.Ltmp2730:
 8607              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 8608              	.Ltmp2731:
 8609              		#DEBUG_VALUE: operator<<:__out <- undef
 8610              	.Ltmp2732:
 8611              		#DEBUG_VALUE: operator<<:this <- RBX+0
 8612              	.Ltmp2733:
 8613              		#DEBUG_VALUE: operator<<:this <- undef
 8614              	.Ltmp2734:
 8615              		#DEBUG_VALUE: endl:__os <- RBX+0
 8616              	.Ltmp2735:
 8617              		#DEBUG_VALUE: endl:__os <- undef
 8618              	.Ltmp2736:
 8619              		#DEBUG_VALUE: widen:__c <- 10+0
 8620              	.Ltmp2737:
 8621              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 8622              	.Ltmp2738:
 8623              		#DEBUG_VALUE: widen:__c <- 10+0
 867:/usr/include/c++/4.6.3/bits/locale_facets.h ****       {
 8624              		.loc	24 867 2
 8625              	.Ltmp2739:
 8626 0472 41807E38 		cmpb	$0, 56(%r14)            # /usr/include/c++/4.6.3/bits/locale_facets.h:867:2[ /usr/include/c++
 8626      00
 8627              	.Ltmp2740:
 8628              		#DEBUG_VALUE: widen:this <- R14+0
 8629 0477 7406     		je	.LBB8_21                # /usr/include/c++/4.6.3/bits/locale_facets.h:867:2[ /usr/include/c++/4
 8630              	# BB#20:
 8631              	.Ltmp2741:
 8632              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8633              	.Ltmp2742:
 8634              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8635              	.Ltmp2743:
 8636              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8637              	.Ltmp2744:
 8638              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8639              	.Ltmp2745:
 8640              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8641              	.Ltmp2746:
 8642              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8643              	.Ltmp2747:
 8644              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 8645              	.Ltmp2748:
 8646              		#DEBUG_VALUE: widen:__c <- 10+0
 8647              	.Ltmp2749:
 8648              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 8649              	.Ltmp2750:
 8650              		#DEBUG_VALUE: widen:__c <- 10+0
 8651              	.Ltmp2751:
 8652              		#DEBUG_VALUE: widen:this <- R14+0
 868:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	if (_M_widen_ok)
 8653              		.loc	24 868 4
 8654              	.Ltmp2752:
 8655 0479 418A4643 		movb	67(%r14), %al           # /usr/include/c++/4.6.3/bits/locale_facets.h:868:4[ /usr/include/c++
 8656              	.Ltmp2753:
 8657              		#DEBUG_VALUE: widen:this <- undef
 8658              	.Ltmp2754:
 8659              		#DEBUG_VALUE: __check_facet:__f <- undef
 8660 047d EB16     		jmp	.LBB8_22
 8661              	.LBB8_21:
 8662              	.Ltmp2755:
 8663              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8664              	.Ltmp2756:
 8665              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8666              	.Ltmp2757:
 8667              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8668              	.Ltmp2758:
 8669              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8670              	.Ltmp2759:
 8671              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8672              	.Ltmp2760:
 8673              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8674              	.Ltmp2761:
 8675              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 8676              	.Ltmp2762:
 8677              		#DEBUG_VALUE: widen:__c <- 10+0
 8678              	.Ltmp2763:
 8679              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 8680              	.Ltmp2764:
 8681              		#DEBUG_VALUE: widen:__c <- 10+0
 8682              	.Ltmp2765:
 8683              		#DEBUG_VALUE: widen:this <- R14+0
 869:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	  return _M_widen[static_cast<unsigned char>(__c)];
 8684              		.loc	24 869 2
 8685              	.Ltmp2766:
 8686 047f 4C89F7   		movq	%r14, %rdi              # /usr/include/c++/4.6.3/bits/locale_facets.h:869:2[ /usr/include/c++
 8687 0482 E8000000 		callq	_ZNKSt5ctypeIcE13_M_widen_initEv # /usr/include/c++/4.6.3/bits/locale_facets.h:869:2[ /usr/i
 8687      00
 8688              		.loc	24 870 2
 8689              	.Ltmp2767:
 8690 0487 498B06   		movq	(%r14), %rax            # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c++
 8691 048a BE0A0000 		movl	$10, %esi
 8691      00
 8692 048f 4C89F7   		movq	%r14, %rdi              # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c++
 8693              	.Ltmp2768:
 8694              		#DEBUG_VALUE: widen:this <- undef
 8695              	.Ltmp2769:
 8696              		#DEBUG_VALUE: __check_facet:__f <- undef
 8697 0492 FF5030   		callq	*48(%rax)               # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c+
 8698              	.LBB8_22:                               # %_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES
 8699              	.Ltmp2770:
 8700              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8701              	.Ltmp2771:
 8702              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8703              	.Ltmp2772:
 8704              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8705              	.Ltmp2773:
 8706              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8707              	.Ltmp2774:
 8708              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8709              	.Ltmp2775:
 8710              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8711              	.Ltmp2776:
 8712              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 8713              	.Ltmp2777:
 8714              		#DEBUG_VALUE: widen:__c <- 10+0
 8715              	.Ltmp2778:
 8716              		#DEBUG_VALUE: widen:__c <- 10+0
 8717              	.Ltmp2779:
 543:/usr/include/c++/4.6.3/ostream ****     endl(basic_ostream<_CharT, _Traits>& __os)
 8718              		.loc	12 543 7
 8719              	.Ltmp2780:
 8720 0495 0FBEF0   		movsbl	%al, %esi               # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostr
 8721 0498 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 8722 049b E8000000 		callq	_ZNSo3putEc             # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostre
 8722      00
 8723              	.Ltmp2781:
 8724              		#DEBUG_VALUE: flush:__os <- RAX+0
 8725              		.loc	12 564 7
 8726              	.Ltmp2782:
 8727 04a0 4889C7   		movq	%rax, %rdi              # /usr/include/c++/4.6.3/ostream:564:7[ /usr/include/c++/4.6.3/ostrea
 8728              	.Ltmp2783:
 8729              		#DEBUG_VALUE: flush:__os <- undef
 8730 04a3 E8000000 		callq	_ZNSo5flushEv           # /usr/include/c++/4.6.3/ostream:564:7[ /usr/include/c++/4.6.3/ostre
 8730      00
 8731              	.Ltmp2784:
 199:matrix-op.C   **** 	TIMER_REPORT_(CopyDenseArrayToSparseVectorTimer);
 8732              		.loc	1 199 2
 8733              	.Ltmp2785:
 8734 04a8 BF000000 		movl	$_ZN4LELA11commentatorE, %edi # matrix-op.C:199:2
 8734      00
 8735 04ad 31F6     		xorl	%esi, %esi
 8736 04af BA000000 		movl	$.L.str21, %edx         # matrix-op.C:199:2
 8736      00
 8737 04b4 E8000000 		callq	_ZN4LELA11Commentator6reportElPKc # matrix-op.C:199:2
 8737      00
 8738 04b9 4889C3   		movq	%rax, %rbx              # matrix-op.C:199:2
 8739              	.Ltmp2786:
 8740              		#DEBUG_VALUE: operator<<:this <- RBX+0
 8741              	.Ltmp2787:
 8742              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 515:/usr/include/c++/4.6.3/ostream **** 	__ostream_insert(__out, __s,
 8743              		.loc	12 515 29
 8744              	.Ltmp2788:
 8745 04bc BE000000 		movl	$.L.str25, %esi         # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:199:2 ]
 8745      00
 8746              	.Ltmp2789:
 8747              		#DEBUG_VALUE: length:__s <- RSI+0
 8748 04c1 BA2E0000 		movl	$46, %edx
 8748      00
 8749 04c6 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:199:2 ]
 8750              	.Ltmp2790:
 8751              		#DEBUG_VALUE: length:__s <- undef
 8752 04c9 E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l # /usr/include
 8752      00
 8753              	.Ltmp2791:
 8754              		#DEBUG_VALUE: operator<<:__f <- [%rbp+$-208]+$0
 211:/usr/include/c++/4.6.3/ostream ****       operator<<(double __f)
 8755              		.loc	12 211 9
 8756              	.Ltmp2792:
 8757 04ce 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:199:2 ]
 8758              	.Ltmp2793:
 8759              		#DEBUG_VALUE: operator<<:this <- undef
 8760              	.Ltmp2794:
 8761              		#DEBUG_VALUE: operator<<:__out <- undef
 8762 04d1 F20F1085 		movsd	-208(%rbp), %xmm0       # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:199:2 ]
 8762      30FFFFFF 
 8763              	                                        # 8-byte Reload
 8764              	.Ltmp2795:
 8765              		#DEBUG_VALUE: operator<<:__f <- undef
 8766 04d9 E8000000 		callq	_ZNSo9_M_insertIdEERSoT_ # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:199:2 ]
 8766      00
 8767 04de 4889C3   		movq	%rax, %rbx              # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:199:2 ]
 8768              	.Ltmp2796:
 8769              		#DEBUG_VALUE: endl:__os <- RBX+0
 8770              	.Ltmp2797:
 8771              		#DEBUG_VALUE: operator<<:this <- RBX+0
 8772              	.Ltmp2798:
 8773              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 515:/usr/include/c++/4.6.3/ostream **** 	__ostream_insert(__out, __s,
 8774              		.loc	12 515 29
 8775              	.Ltmp2799:
 8776 04e1 BE000000 		movl	$.L.str23, %esi         # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:199:2 ]
 8776      00
 8777              	.Ltmp2800:
 8778              		#DEBUG_VALUE: length:__s <- RSI+0
 8779 04e6 BA010000 		movl	$1, %edx
 8779      00
 8780 04eb 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:199:2 ]
 8781              	.Ltmp2801:
 8782              		#DEBUG_VALUE: length:__s <- undef
 8783 04ee E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l # /usr/include
 8783      00
 543:/usr/include/c++/4.6.3/ostream ****     endl(basic_ostream<_CharT, _Traits>& __os)
 8784              		.loc	12 543 7
 8785              	.Ltmp2802:
 8786 04f3 488B03   		movq	(%rbx), %rax            # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 8787 04f6 488B40E8 		movq	-24(%rax), %rax         # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 8788              		.loc	14 441 9
 8789              	.Ltmp2803:
 8790 04fa 4C8BB418 		movq	240(%rax,%rbx), %r14    # /usr/include/c++/4.6.3/bits/basic_ios.h:441:9[ /usr/include/c++/4.6
 8790      F0000000 
 8791              	.Ltmp2804:
 8792              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 8793 0502 4D85F6   		testq	%r14, %r14              # /usr/include/c++/4.6.3/bits/basic_ios.h:441:9[ /usr/include/c++/4.
 8794 0505 0F84A501 		je	.LBB8_38
 8794      0000
 8795              	# BB#23:                                # %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i12
 8796              	.Ltmp2805:
 8797              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8798              	.Ltmp2806:
 8799              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8800              	.Ltmp2807:
 8801              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8802              	.Ltmp2808:
 8803              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8804              	.Ltmp2809:
 8805              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8806              	.Ltmp2810:
 8807              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8808              	.Ltmp2811:
 8809              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 8810              	.Ltmp2812:
 8811              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 8812              	.Ltmp2813:
 8813              		#DEBUG_VALUE: operator<<:__out <- undef
 8814              	.Ltmp2814:
 8815              		#DEBUG_VALUE: operator<<:this <- RBX+0
 8816              	.Ltmp2815:
 8817              		#DEBUG_VALUE: operator<<:this <- undef
 8818              	.Ltmp2816:
 8819              		#DEBUG_VALUE: endl:__os <- RBX+0
 8820              	.Ltmp2817:
 8821              		#DEBUG_VALUE: endl:__os <- undef
 8822              	.Ltmp2818:
 8823              		#DEBUG_VALUE: widen:__c <- 10+0
 8824              	.Ltmp2819:
 8825              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 8826              	.Ltmp2820:
 8827              		#DEBUG_VALUE: widen:__c <- 10+0
 867:/usr/include/c++/4.6.3/bits/locale_facets.h ****       {
 8828              		.loc	24 867 2
 8829              	.Ltmp2821:
 8830 050b 41807E38 		cmpb	$0, 56(%r14)            # /usr/include/c++/4.6.3/bits/locale_facets.h:867:2[ /usr/include/c++
 8830      00
 8831              	.Ltmp2822:
 8832              		#DEBUG_VALUE: widen:this <- R14+0
 8833 0510 7406     		je	.LBB8_25                # /usr/include/c++/4.6.3/bits/locale_facets.h:867:2[ /usr/include/c++/4
 8834              	# BB#24:
 8835              	.Ltmp2823:
 8836              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8837              	.Ltmp2824:
 8838              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8839              	.Ltmp2825:
 8840              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8841              	.Ltmp2826:
 8842              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8843              	.Ltmp2827:
 8844              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8845              	.Ltmp2828:
 8846              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8847              	.Ltmp2829:
 8848              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 8849              	.Ltmp2830:
 8850              		#DEBUG_VALUE: widen:__c <- 10+0
 8851              	.Ltmp2831:
 8852              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 8853              	.Ltmp2832:
 8854              		#DEBUG_VALUE: widen:__c <- 10+0
 8855              	.Ltmp2833:
 8856              		#DEBUG_VALUE: widen:this <- R14+0
 868:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	if (_M_widen_ok)
 8857              		.loc	24 868 4
 8858              	.Ltmp2834:
 8859 0512 418A4643 		movb	67(%r14), %al           # /usr/include/c++/4.6.3/bits/locale_facets.h:868:4[ /usr/include/c++
 8860              	.Ltmp2835:
 8861              		#DEBUG_VALUE: widen:this <- undef
 8862              	.Ltmp2836:
 8863              		#DEBUG_VALUE: __check_facet:__f <- undef
 8864 0516 EB16     		jmp	.LBB8_26
 8865              	.LBB8_25:
 8866              	.Ltmp2837:
 8867              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8868              	.Ltmp2838:
 8869              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8870              	.Ltmp2839:
 8871              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8872              	.Ltmp2840:
 8873              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8874              	.Ltmp2841:
 8875              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8876              	.Ltmp2842:
 8877              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8878              	.Ltmp2843:
 8879              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 8880              	.Ltmp2844:
 8881              		#DEBUG_VALUE: widen:__c <- 10+0
 8882              	.Ltmp2845:
 8883              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 8884              	.Ltmp2846:
 8885              		#DEBUG_VALUE: widen:__c <- 10+0
 8886              	.Ltmp2847:
 8887              		#DEBUG_VALUE: widen:this <- R14+0
 869:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	  return _M_widen[static_cast<unsigned char>(__c)];
 8888              		.loc	24 869 2
 8889              	.Ltmp2848:
 8890 0518 4C89F7   		movq	%r14, %rdi              # /usr/include/c++/4.6.3/bits/locale_facets.h:869:2[ /usr/include/c++
 8891 051b E8000000 		callq	_ZNKSt5ctypeIcE13_M_widen_initEv # /usr/include/c++/4.6.3/bits/locale_facets.h:869:2[ /usr/i
 8891      00
 8892              		.loc	24 870 2
 8893              	.Ltmp2849:
 8894 0520 498B06   		movq	(%r14), %rax            # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c++
 8895 0523 BE0A0000 		movl	$10, %esi
 8895      00
 8896 0528 4C89F7   		movq	%r14, %rdi              # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c++
 8897              	.Ltmp2850:
 8898              		#DEBUG_VALUE: widen:this <- undef
 8899              	.Ltmp2851:
 8900              		#DEBUG_VALUE: __check_facet:__f <- undef
 8901 052b FF5030   		callq	*48(%rax)               # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c+
 8902              	.LBB8_26:                               # %_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES
 8903              	.Ltmp2852:
 8904              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8905              	.Ltmp2853:
 8906              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 8907              	.Ltmp2854:
 8908              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 8909              	.Ltmp2855:
 8910              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 8911              	.Ltmp2856:
 8912              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 8913              	.Ltmp2857:
 8914              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 8915              	.Ltmp2858:
 8916              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 8917              	.Ltmp2859:
 8918              		#DEBUG_VALUE: widen:__c <- 10+0
 8919              	.Ltmp2860:
 8920              		#DEBUG_VALUE: widen:__c <- 10+0
 8921              	.Ltmp2861:
 543:/usr/include/c++/4.6.3/ostream ****     endl(basic_ostream<_CharT, _Traits>& __os)
 8922              		.loc	12 543 7
 8923              	.Ltmp2862:
 8924 052e 0FBEF0   		movsbl	%al, %esi               # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostr
 8925 0531 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 8926 0534 E8000000 		callq	_ZNSo3putEc             # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostre
 8926      00
 8927              	.Ltmp2863:
 8928              		#DEBUG_VALUE: flush:__os <- RAX+0
 8929              		.loc	12 564 7
 8930              	.Ltmp2864:
 8931 0539 4889C7   		movq	%rax, %rdi              # /usr/include/c++/4.6.3/ostream:564:7[ /usr/include/c++/4.6.3/ostrea
 8932              	.Ltmp2865:
 8933              		#DEBUG_VALUE: flush:__os <- undef
 8934 053c E8000000 		callq	_ZNSo5flushEv           # /usr/include/c++/4.6.3/ostream:564:7[ /usr/include/c++/4.6.3/ostre
 8934      00
 8935              	.Ltmp2866:
 200:matrix-op.C   **** 	TIMER_REPORT_(AxpyTimer);
 8936              		.loc	1 200 2
 8937              	.Ltmp2867:
 8938 0541 BF000000 		movl	$_ZN4LELA11commentatorE, %edi # matrix-op.C:200:2
 8938      00
 8939 0546 31F6     		xorl	%esi, %esi
 8940 0548 BA000000 		movl	$.L.str21, %edx         # matrix-op.C:200:2
 8940      00
 8941 054d E8000000 		callq	_ZN4LELA11Commentator6reportElPKc # matrix-op.C:200:2
 8941      00
 8942 0552 4889C3   		movq	%rax, %rbx              # matrix-op.C:200:2
 8943              	.Ltmp2868:
 8944              		#DEBUG_VALUE: operator<<:this <- RBX+0
 8945              	.Ltmp2869:
 8946              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 515:/usr/include/c++/4.6.3/ostream **** 	__ostream_insert(__out, __s,
 8947              		.loc	12 515 29
 8948              	.Ltmp2870:
 8949 0555 BE000000 		movl	$.L.str26, %esi         # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:200:2 ]
 8949      00
 8950              	.Ltmp2871:
 8951              		#DEBUG_VALUE: length:__s <- RSI+0
 8952 055a BA160000 		movl	$22, %edx
 8952      00
 8953 055f 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:200:2 ]
 8954              	.Ltmp2872:
 8955              		#DEBUG_VALUE: length:__s <- undef
 8956 0562 E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l # /usr/include
 8956      00
 211:/usr/include/c++/4.6.3/ostream ****       operator<<(double __f)
 8957              		.loc	12 211 9
 8958              	.Ltmp2873:
 8959 0567 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:200:2 ]
 8960              	.Ltmp2874:
 8961              		#DEBUG_VALUE: operator<<:this <- undef
 8962              	.Ltmp2875:
 8963              		#DEBUG_VALUE: operator<<:__out <- undef
 8964 056a F20F1085 		movsd	-136(%rbp), %xmm0       # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:200:2 ]
 8964      78FFFFFF 
 8965              	                                        # 8-byte Reload
 8966 0572 E8000000 		callq	_ZNSo9_M_insertIdEERSoT_ # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:200:2 ]
 8966      00
 8967 0577 4889C3   		movq	%rax, %rbx              # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:200:2 ]
 8968              	.Ltmp2876:
 8969              		#DEBUG_VALUE: endl:__os <- RBX+0
 8970              	.Ltmp2877:
 8971              		#DEBUG_VALUE: operator<<:this <- RBX+0
 8972              	.Ltmp2878:
 8973              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 515:/usr/include/c++/4.6.3/ostream **** 	__ostream_insert(__out, __s,
 8974              		.loc	12 515 29
 8975              	.Ltmp2879:
 8976 057a BE000000 		movl	$.L.str23, %esi         # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:200:2 ]
 8976      00
 8977              	.Ltmp2880:
 8978              		#DEBUG_VALUE: length:__s <- RSI+0
 8979 057f BA010000 		movl	$1, %edx
 8979      00
 8980 0584 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:200:2 ]
 8981              	.Ltmp2881:
 8982              		#DEBUG_VALUE: length:__s <- undef
 8983 0587 E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l # /usr/include
 8983      00
 543:/usr/include/c++/4.6.3/ostream ****     endl(basic_ostream<_CharT, _Traits>& __os)
 8984              		.loc	12 543 7
 8985              	.Ltmp2882:
 8986 058c 488B03   		movq	(%rbx), %rax            # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 8987 058f 488B40E8 		movq	-24(%rax), %rax         # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 8988              		.loc	14 441 9
 8989              	.Ltmp2883:
 8990 0593 4C8BB418 		movq	240(%rax,%rbx), %r14    # /usr/include/c++/4.6.3/bits/basic_ios.h:441:9[ /usr/include/c++/4.6
 8990      F0000000 
 8991              	.Ltmp2884:
 8992              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 8993 059b 4D85F6   		testq	%r14, %r14              # /usr/include/c++/4.6.3/bits/basic_ios.h:441:9[ /usr/include/c++/4.
 8994 059e 0F840C01 		je	.LBB8_38
 8994      0000
 8995              	# BB#27:                                # %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i8
 8996              	.Ltmp2885:
 8997              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 8998              	.Ltmp2886:
 8999              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 9000              	.Ltmp2887:
 9001              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 9002              	.Ltmp2888:
 9003              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 9004              	.Ltmp2889:
 9005              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 9006              	.Ltmp2890:
 9007              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 9008              	.Ltmp2891:
 9009              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 9010              	.Ltmp2892:
 9011              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 9012              	.Ltmp2893:
 9013              		#DEBUG_VALUE: operator<<:__out <- undef
 9014              	.Ltmp2894:
 9015              		#DEBUG_VALUE: operator<<:this <- RBX+0
 9016              	.Ltmp2895:
 9017              		#DEBUG_VALUE: operator<<:this <- undef
 9018              	.Ltmp2896:
 9019              		#DEBUG_VALUE: endl:__os <- RBX+0
 9020              	.Ltmp2897:
 9021              		#DEBUG_VALUE: endl:__os <- undef
 9022              	.Ltmp2898:
 9023              		#DEBUG_VALUE: widen:__c <- 10+0
 9024              	.Ltmp2899:
 9025              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 9026              	.Ltmp2900:
 9027              		#DEBUG_VALUE: widen:__c <- 10+0
 867:/usr/include/c++/4.6.3/bits/locale_facets.h ****       {
 9028              		.loc	24 867 2
 9029              	.Ltmp2901:
 9030 05a4 41807E38 		cmpb	$0, 56(%r14)            # /usr/include/c++/4.6.3/bits/locale_facets.h:867:2[ /usr/include/c++
 9030      00
 9031              	.Ltmp2902:
 9032              		#DEBUG_VALUE: widen:this <- R14+0
 9033 05a9 7406     		je	.LBB8_29                # /usr/include/c++/4.6.3/bits/locale_facets.h:867:2[ /usr/include/c++/4
 9034              	# BB#28:
 9035              	.Ltmp2903:
 9036              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 9037              	.Ltmp2904:
 9038              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 9039              	.Ltmp2905:
 9040              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 9041              	.Ltmp2906:
 9042              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 9043              	.Ltmp2907:
 9044              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 9045              	.Ltmp2908:
 9046              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 9047              	.Ltmp2909:
 9048              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 9049              	.Ltmp2910:
 9050              		#DEBUG_VALUE: widen:__c <- 10+0
 9051              	.Ltmp2911:
 9052              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 9053              	.Ltmp2912:
 9054              		#DEBUG_VALUE: widen:__c <- 10+0
 9055              	.Ltmp2913:
 9056              		#DEBUG_VALUE: widen:this <- R14+0
 868:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	if (_M_widen_ok)
 9057              		.loc	24 868 4
 9058              	.Ltmp2914:
 9059 05ab 418A4643 		movb	67(%r14), %al           # /usr/include/c++/4.6.3/bits/locale_facets.h:868:4[ /usr/include/c++
 9060              	.Ltmp2915:
 9061              		#DEBUG_VALUE: widen:this <- undef
 9062              	.Ltmp2916:
 9063              		#DEBUG_VALUE: __check_facet:__f <- undef
 9064 05af EB16     		jmp	.LBB8_30
 9065              	.LBB8_29:
 9066              	.Ltmp2917:
 9067              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 9068              	.Ltmp2918:
 9069              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 9070              	.Ltmp2919:
 9071              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 9072              	.Ltmp2920:
 9073              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 9074              	.Ltmp2921:
 9075              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 9076              	.Ltmp2922:
 9077              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 9078              	.Ltmp2923:
 9079              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 9080              	.Ltmp2924:
 9081              		#DEBUG_VALUE: widen:__c <- 10+0
 9082              	.Ltmp2925:
 9083              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 9084              	.Ltmp2926:
 9085              		#DEBUG_VALUE: widen:__c <- 10+0
 9086              	.Ltmp2927:
 9087              		#DEBUG_VALUE: widen:this <- R14+0
 869:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	  return _M_widen[static_cast<unsigned char>(__c)];
 9088              		.loc	24 869 2
 9089              	.Ltmp2928:
 9090 05b1 4C89F7   		movq	%r14, %rdi              # /usr/include/c++/4.6.3/bits/locale_facets.h:869:2[ /usr/include/c++
 9091 05b4 E8000000 		callq	_ZNKSt5ctypeIcE13_M_widen_initEv # /usr/include/c++/4.6.3/bits/locale_facets.h:869:2[ /usr/i
 9091      00
 9092              		.loc	24 870 2
 9093              	.Ltmp2929:
 9094 05b9 498B06   		movq	(%r14), %rax            # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c++
 9095 05bc BE0A0000 		movl	$10, %esi
 9095      00
 9096 05c1 4C89F7   		movq	%r14, %rdi              # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c++
 9097              	.Ltmp2930:
 9098              		#DEBUG_VALUE: widen:this <- undef
 9099              	.Ltmp2931:
 9100              		#DEBUG_VALUE: __check_facet:__f <- undef
 9101 05c4 FF5030   		callq	*48(%rax)               # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c+
 9102              	.LBB8_30:                               # %_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES
 9103              	.Ltmp2932:
 9104              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 9105              	.Ltmp2933:
 9106              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 9107              	.Ltmp2934:
 9108              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 9109              	.Ltmp2935:
 9110              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 9111              	.Ltmp2936:
 9112              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 9113              	.Ltmp2937:
 9114              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 9115              	.Ltmp2938:
 9116              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 9117              	.Ltmp2939:
 9118              		#DEBUG_VALUE: widen:__c <- 10+0
 9119              	.Ltmp2940:
 9120              		#DEBUG_VALUE: widen:__c <- 10+0
 9121              	.Ltmp2941:
 543:/usr/include/c++/4.6.3/ostream ****     endl(basic_ostream<_CharT, _Traits>& __os)
 9122              		.loc	12 543 7
 9123              	.Ltmp2942:
 9124 05c7 0FBEF0   		movsbl	%al, %esi               # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostr
 9125 05ca 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 9126 05cd E8000000 		callq	_ZNSo3putEc             # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostre
 9126      00
 9127              	.Ltmp2943:
 9128              		#DEBUG_VALUE: flush:__os <- RAX+0
 9129              		.loc	12 564 7
 9130              	.Ltmp2944:
 9131 05d2 4889C7   		movq	%rax, %rdi              # /usr/include/c++/4.6.3/ostream:564:7[ /usr/include/c++/4.6.3/ostrea
 9132              	.Ltmp2945:
 9133              		#DEBUG_VALUE: flush:__os <- undef
 9134 05d5 E8000000 		callq	_ZNSo5flushEv           # /usr/include/c++/4.6.3/ostream:564:7[ /usr/include/c++/4.6.3/ostre
 9134      00
 9135              	.Ltmp2946:
 201:matrix-op.C   **** 	TIMER_REPORT_(AxpyOutTimer);
 9136              		.loc	1 201 2
 9137              	.Ltmp2947:
 9138 05da BF000000 		movl	$_ZN4LELA11commentatorE, %edi # matrix-op.C:201:2
 9138      00
 9139 05df 31F6     		xorl	%esi, %esi
 9140 05e1 BA000000 		movl	$.L.str21, %edx         # matrix-op.C:201:2
 9140      00
 9141 05e6 E8000000 		callq	_ZN4LELA11Commentator6reportElPKc # matrix-op.C:201:2
 9141      00
 9142 05eb 4889C3   		movq	%rax, %rbx              # matrix-op.C:201:2
 9143              	.Ltmp2948:
 9144              		#DEBUG_VALUE: operator<<:this <- RBX+0
 9145              	.Ltmp2949:
 9146              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 515:/usr/include/c++/4.6.3/ostream **** 	__ostream_insert(__out, __s,
 9147              		.loc	12 515 29
 9148              	.Ltmp2950:
 9149 05ee BE000000 		movl	$.L.str27, %esi         # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:201:2 ]
 9149      00
 9150              	.Ltmp2951:
 9151              		#DEBUG_VALUE: length:__s <- RSI+0
 9152 05f3 BA190000 		movl	$25, %edx
 9152      00
 9153 05f8 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:201:2 ]
 9154              	.Ltmp2952:
 9155              		#DEBUG_VALUE: length:__s <- undef
 9156 05fb E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l # /usr/include
 9156      00
 9157              	.Ltmp2953:
 9158              		#DEBUG_VALUE: operator<<:__f <- [%rbp+$-216]+$0
 211:/usr/include/c++/4.6.3/ostream ****       operator<<(double __f)
 9159              		.loc	12 211 9
 9160              	.Ltmp2954:
 9161 0600 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:201:2 ]
 9162              	.Ltmp2955:
 9163              		#DEBUG_VALUE: operator<<:this <- undef
 9164              	.Ltmp2956:
 9165              		#DEBUG_VALUE: operator<<:__out <- undef
 9166 0603 F20F1085 		movsd	-216(%rbp), %xmm0       # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:201:2 ]
 9166      28FFFFFF 
 9167              	                                        # 8-byte Reload
 9168              	.Ltmp2957:
 9169              		#DEBUG_VALUE: operator<<:__f <- undef
 9170 060b E8000000 		callq	_ZNSo9_M_insertIdEERSoT_ # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:201:2 ]
 9170      00
 9171 0610 4889C3   		movq	%rax, %rbx              # /usr/include/c++/4.6.3/ostream:211:9[ matrix-op.C:201:2 ]
 9172              	.Ltmp2958:
 9173              		#DEBUG_VALUE: endl:__os <- RBX+0
 9174              	.Ltmp2959:
 9175              		#DEBUG_VALUE: operator<<:this <- RBX+0
 9176              	.Ltmp2960:
 9177              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 515:/usr/include/c++/4.6.3/ostream **** 	__ostream_insert(__out, __s,
 9178              		.loc	12 515 29
 9179              	.Ltmp2961:
 9180 0613 BE000000 		movl	$.L.str23, %esi         # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:201:2 ]
 9180      00
 9181              	.Ltmp2962:
 9182              		#DEBUG_VALUE: length:__s <- RSI+0
 9183 0618 BA010000 		movl	$1, %edx
 9183      00
 9184 061d 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:515:29[ matrix-op.C:201:2 ]
 9185              	.Ltmp2963:
 9186              		#DEBUG_VALUE: length:__s <- undef
 9187 0620 E8000000 		callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l # /usr/include
 9187      00
 543:/usr/include/c++/4.6.3/ostream ****     endl(basic_ostream<_CharT, _Traits>& __os)
 9188              		.loc	12 543 7
 9189              	.Ltmp2964:
 9190 0625 488B03   		movq	(%rbx), %rax            # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 9191 0628 488B40E8 		movq	-24(%rax), %rax         # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 9192              		.loc	14 441 9
 9193              	.Ltmp2965:
 9194 062c 4C8BB418 		movq	240(%rax,%rbx), %r14    # /usr/include/c++/4.6.3/bits/basic_ios.h:441:9[ /usr/include/c++/4.6
 9194      F0000000 
 9195              	.Ltmp2966:
 9196              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 9197 0634 4D85F6   		testq	%r14, %r14              # /usr/include/c++/4.6.3/bits/basic_ios.h:441:9[ /usr/include/c++/4.
 9198 0637 7477     		je	.LBB8_38
 9199              	# BB#31:                                # %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
 9200              	.Ltmp2967:
 9201              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 9202              	.Ltmp2968:
 9203              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 9204              	.Ltmp2969:
 9205              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 9206              	.Ltmp2970:
 9207              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 9208              	.Ltmp2971:
 9209              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 9210              	.Ltmp2972:
 9211              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 9212              	.Ltmp2973:
 9213              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 9214              	.Ltmp2974:
 9215              		#DEBUG_VALUE: operator<<:__out <- RBX+0
 9216              	.Ltmp2975:
 9217              		#DEBUG_VALUE: operator<<:__out <- undef
 9218              	.Ltmp2976:
 9219              		#DEBUG_VALUE: operator<<:this <- RBX+0
 9220              	.Ltmp2977:
 9221              		#DEBUG_VALUE: operator<<:this <- undef
 9222              	.Ltmp2978:
 9223              		#DEBUG_VALUE: endl:__os <- RBX+0
 9224              	.Ltmp2979:
 9225              		#DEBUG_VALUE: endl:__os <- undef
 9226              	.Ltmp2980:
 9227              		#DEBUG_VALUE: widen:__c <- 10+0
 9228              	.Ltmp2981:
 9229              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 9230              	.Ltmp2982:
 9231              		#DEBUG_VALUE: widen:__c <- 10+0
 867:/usr/include/c++/4.6.3/bits/locale_facets.h ****       {
 9232              		.loc	24 867 2
 9233              	.Ltmp2983:
 9234 0639 41807E38 		cmpb	$0, 56(%r14)            # /usr/include/c++/4.6.3/bits/locale_facets.h:867:2[ /usr/include/c++
 9234      00
 9235              	.Ltmp2984:
 9236              		#DEBUG_VALUE: widen:this <- R14+0
 9237 063e 7406     		je	.LBB8_33                # /usr/include/c++/4.6.3/bits/locale_facets.h:867:2[ /usr/include/c++/4
 9238              	# BB#32:
 9239              	.Ltmp2985:
 9240              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 9241              	.Ltmp2986:
 9242              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 9243              	.Ltmp2987:
 9244              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 9245              	.Ltmp2988:
 9246              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 9247              	.Ltmp2989:
 9248              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 9249              	.Ltmp2990:
 9250              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 9251              	.Ltmp2991:
 9252              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 9253              	.Ltmp2992:
 9254              		#DEBUG_VALUE: widen:__c <- 10+0
 9255              	.Ltmp2993:
 9256              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 9257              	.Ltmp2994:
 9258              		#DEBUG_VALUE: widen:__c <- 10+0
 9259              	.Ltmp2995:
 9260              		#DEBUG_VALUE: widen:this <- R14+0
 868:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	if (_M_widen_ok)
 9261              		.loc	24 868 4
 9262              	.Ltmp2996:
 9263 0640 418A4643 		movb	67(%r14), %al           # /usr/include/c++/4.6.3/bits/locale_facets.h:868:4[ /usr/include/c++
 9264              	.Ltmp2997:
 9265              		#DEBUG_VALUE: widen:this <- undef
 9266              	.Ltmp2998:
 9267              		#DEBUG_VALUE: __check_facet:__f <- undef
 9268 0644 EB16     		jmp	.LBB8_34
 9269              	.LBB8_33:
 9270              	.Ltmp2999:
 9271              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 9272              	.Ltmp3000:
 9273              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 9274              	.Ltmp3001:
 9275              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 9276              	.Ltmp3002:
 9277              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 9278              	.Ltmp3003:
 9279              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 9280              	.Ltmp3004:
 9281              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 9282              	.Ltmp3005:
 9283              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 9284              	.Ltmp3006:
 9285              		#DEBUG_VALUE: widen:__c <- 10+0
 9286              	.Ltmp3007:
 9287              		#DEBUG_VALUE: __check_facet:__f <- R14+0
 9288              	.Ltmp3008:
 9289              		#DEBUG_VALUE: widen:__c <- 10+0
 9290              	.Ltmp3009:
 9291              		#DEBUG_VALUE: widen:this <- R14+0
 869:/usr/include/c++/4.6.3/bits/locale_facets.h **** 	  return _M_widen[static_cast<unsigned char>(__c)];
 9292              		.loc	24 869 2
 9293              	.Ltmp3010:
 9294 0646 4C89F7   		movq	%r14, %rdi              # /usr/include/c++/4.6.3/bits/locale_facets.h:869:2[ /usr/include/c++
 9295 0649 E8000000 		callq	_ZNKSt5ctypeIcE13_M_widen_initEv # /usr/include/c++/4.6.3/bits/locale_facets.h:869:2[ /usr/i
 9295      00
 9296              		.loc	24 870 2
 9297              	.Ltmp3011:
 9298 064e 498B06   		movq	(%r14), %rax            # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c++
 9299 0651 BE0A0000 		movl	$10, %esi
 9299      00
 9300 0656 4C89F7   		movq	%r14, %rdi              # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c++
 9301              	.Ltmp3012:
 9302              		#DEBUG_VALUE: widen:this <- undef
 9303              	.Ltmp3013:
 9304              		#DEBUG_VALUE: __check_facet:__f <- undef
 9305 0659 FF5030   		callq	*48(%rax)               # /usr/include/c++/4.6.3/bits/locale_facets.h:870:2[ /usr/include/c+
 9306              	.LBB8_34:                               # %_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES
 9307              	.Ltmp3014:
 9308              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 9309              	.Ltmp3015:
 9310              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 9311              	.Ltmp3016:
 9312              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 9313              	.Ltmp3017:
 9314              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 9315              	.Ltmp3018:
 9316              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 9317              	.Ltmp3019:
 9318              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 9319              	.Ltmp3020:
 9320              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 9321              	.Ltmp3021:
 9322              		#DEBUG_VALUE: widen:__c <- 10+0
 9323              	.Ltmp3022:
 9324              		#DEBUG_VALUE: widen:__c <- 10+0
 9325              	.Ltmp3023:
 543:/usr/include/c++/4.6.3/ostream ****     endl(basic_ostream<_CharT, _Traits>& __os)
 9326              		.loc	12 543 7
 9327              	.Ltmp3024:
 9328 065c 0FBEF0   		movsbl	%al, %esi               # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostr
 9329 065f 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostrea
 9330 0662 E8000000 		callq	_ZNSo3putEc             # /usr/include/c++/4.6.3/ostream:543:7[ /usr/include/c++/4.6.3/ostre
 9330      00
 9331              	.Ltmp3025:
 9332              		#DEBUG_VALUE: flush:__os <- RAX+0
 9333              		.loc	12 564 7
 9334              	.Ltmp3026:
 9335 0667 4889C7   		movq	%rax, %rdi              # /usr/include/c++/4.6.3/ostream:564:7[ /usr/include/c++/4.6.3/ostrea
 9336              	.Ltmp3027:
 9337              		#DEBUG_VALUE: flush:__os <- undef
 9338 066a E8000000 		callq	_ZNSo5flushEv           # /usr/include/c++/4.6.3/ostream:564:7[ /usr/include/c++/4.6.3/ostre
 9338      00
 9339              	.LBB8_35:
 9340 066f 488D65D8 		leaq	-40(%rbp), %rsp
 9341              	.Ltmp3028:
 9342              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 9343              	.Ltmp3029:
 9344              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 9345              	.Ltmp3030:
 9346              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 9347              	.Ltmp3031:
 9348              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 9349              	.Ltmp3032:
 9350              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 9351              	.Ltmp3033:
 9352              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 9353              	.Ltmp3034:
 9354              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 9355              	.Ltmp3035:
 202:matrix-op.C   **** }
 9356              		.loc	1 202 1
 9357              	.Ltmp3036:
 9358 0673 5B       		popq	%rbx                    # matrix-op.C:202:1
 9359 0674 415C     		popq	%r12                    # matrix-op.C:202:1
 9360 0676 415D     		popq	%r13                    # matrix-op.C:202:1
 9361 0678 415E     		popq	%r14                    # matrix-op.C:202:1
 9362 067a 415F     		popq	%r15                    # matrix-op.C:202:1
 9363 067c 5D       		popq	%rbp                    # matrix-op.C:202:1
 9364 067d C3       		ret                             # matrix-op.C:202:1
 9365              	.LBB8_36:
 9366              	.Ltmp3037:
 9367              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 101:matrix-op.C   **** 	assert(A.rowdim () == B.rowdim ());
 9368              		.loc	1 101 2
 9369              	.Ltmp3038:
 9370 067e BF000000 		movl	$.L.str18, %edi         # matrix-op.C:101:2
 9370      00
 9371 0683 BE000000 		movl	$.L.str19, %esi         # matrix-op.C:101:2
 9371      00
 9372 0688 BA650000 		movl	$101, %edx
 9372      00
 9373 068d B9000000 		movl	$.L__PRETTY_FUNCTION__._ZN8MatrixOp20reducePivotsByPivotsIN4LELA12SparseMatrixItNS1_12SparseV
 9373      00
 9374 0692 E8000000 		callq	__assert_fail           # matrix-op.C:101:2
 9374      00
 9375              	.LBB8_37:
 9376              	.Ltmp3039:
 9377              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 102:matrix-op.C   **** 	assert(A.coldim () == A.rowdim ());
 9378              		.loc	1 102 2
 9379              	.Ltmp3040:
 9380 0697 BF000000 		movl	$.L.str20, %edi         # matrix-op.C:102:2
 9380      00
 9381 069c BE000000 		movl	$.L.str19, %esi         # matrix-op.C:102:2
 9381      00
 9382 06a1 BA660000 		movl	$102, %edx
 9382      00
 9383 06a6 B9000000 		movl	$.L__PRETTY_FUNCTION__._ZN8MatrixOp20reducePivotsByPivotsIN4LELA12SparseMatrixItNS1_12SparseV
 9383      00
 9384 06ab E8000000 		callq	__assert_fail           # matrix-op.C:102:2
 9384      00
 9385              	.LBB8_38:
 9386              	.Ltmp3041:
 9387              		#DEBUG_VALUE: reducePivotsByPivots:R <- [%rbp+$-152]+$0
 9388              	.Ltmp3042:
 9389              		#DEBUG_VALUE: B_coldim <- [%rbp+$-240]+$0
 9390              	.Ltmp3043:
 9391              		#DEBUG_VALUE: AxpyOutTimer_time <- 0.000000e+00+0
 9392              	.Ltmp3044:
 9393              		#DEBUG_VALUE: AxpyTimer_time <- 0.000000e+00+0
 9394              	.Ltmp3045:
 9395              		#DEBUG_VALUE: CopyDenseArrayToSparseVectorTimer_time <- 0.000000e+00+0
 9396              	.Ltmp3046:
 9397              		#DEBUG_VALUE: CopySparseVectorToDenseArrayTimer_time <- 0.000000e+00+0
 9398              	.Ltmp3047:
 9399              		#DEBUG_VALUE: RazArrayTimer_time <- 0.000000e+00+0
 9400              	.Ltmp3048:
 9401              		#DEBUG_VALUE: widen:__c <- 10+0
 9402              	.Ltmp3049:
 9403              		#DEBUG_VALUE: widen:__c <- 10+0
  50:/usr/include/c++/4.6.3/bits/basic_ios.h ****       if (!__f)
 9404              		.loc	14 50 2
 9405              	.Ltmp3050:
 9406 06b0 E8000000 		callq	_ZSt16__throw_bad_castv # /usr/include/c++/4.6.3/bits/basic_ios.h:50:2[ /usr/include/c++/4.6
 9406      00
 9407              	.Ltmp3051:
 9408              	.Ltmp3052:
 9410              	.Lfunc_end8:
 9411              	.Leh_func_end8:
 9412              	
 9413              		.text
 9414              		.globl	_Z4axpytRN4LELA12SparseVectorItSt6vectorIjSaIjEES1_ItSaItEEEEPm
 9415 1f2b 0F1F4400 		.align	16, 0x90
 9415      00
 9417              	_Z4axpytRN4LELA12SparseVectorItSt6vectorIjSaIjEES1_ItSaItEEEEPm: # @_Z4axpytRN4LELA12SparseVectorIt
 9418              	.Leh_func_begin9:
 9419              	.Lfunc_begin9:
  87:matrix-op.C   **** {
 9420              		.loc	1 87 0
 9421              	.Ltmp3053:
 9422              	# BB#0:
 9423              		#DEBUG_VALUE: axpy:x <- RSI+0   # matrix-op.C:86:43
 9424              		#DEBUG_VALUE: axpy:y <- RDX+0   # matrix-op.C:86:54
   1:../lela/vector/sparse.h **** /* lela/vector/sparse.h
   2:../lela/vector/sparse.h ****  * Copyright 2011 Bradford Hovinen <hovinen@gmail.com>
   3:../lela/vector/sparse.h ****  *
   4:../lela/vector/sparse.h ****  * Written by Bradford Hovinen <hovinen@gmail.com>
   5:../lela/vector/sparse.h ****  *
   6:../lela/vector/sparse.h ****  * Sparse vector which makes a pair of vectors appear to be a vector of pairs
   7:../lela/vector/sparse.h ****  *
   8:../lela/vector/sparse.h ****  * -------------------------------------------------
   9:../lela/vector/sparse.h ****  * 
  10:../lela/vector/sparse.h ****  * This file is part of LELA, licensed under the GNU General Public
  11:../lela/vector/sparse.h ****  * License version 3. See COPYING for more information.
  12:../lela/vector/sparse.h ****  */
  13:../lela/vector/sparse.h **** 
  14:../lela/vector/sparse.h **** #ifndef __LELA_VECTOR_SPARSE_H
  15:../lela/vector/sparse.h **** #define __LELA_VECTOR_SPARSE_H
  16:../lela/vector/sparse.h **** 
  17:../lela/vector/sparse.h **** #include <vector>
  18:../lela/vector/sparse.h **** #include <algorithm>
  19:../lela/vector/sparse.h **** #include <cstddef>
  20:../lela/vector/sparse.h **** 
  21:../lela/vector/sparse.h **** #include "lela/util/property.h"
  22:../lela/vector/sparse.h **** #include "lela/vector/traits.h"
  23:../lela/vector/sparse.h **** 
  24:../lela/vector/sparse.h **** namespace LELA
  25:../lela/vector/sparse.h **** {
  26:../lela/vector/sparse.h **** 
  27:../lela/vector/sparse.h **** /// Reference to an (index, entry)-pair
  28:../lela/vector/sparse.h **** template <class IndexIterator, class ElementIterator>
  29:../lela/vector/sparse.h **** class SparseVectorReference {
  30:../lela/vector/sparse.h **** public:
  31:../lela/vector/sparse.h **** 	typedef typename std::iterator_traits<IndexIterator>::value_type first_type;
  32:../lela/vector/sparse.h **** 	typedef typename std::iterator_traits<ElementIterator>::value_type second_type;
  33:../lela/vector/sparse.h **** 
  34:../lela/vector/sparse.h **** 	Property<IndexIterator> first;
  35:../lela/vector/sparse.h **** 	Property<ElementIterator> second;
  36:../lela/vector/sparse.h **** 
  37:../lela/vector/sparse.h **** 	SparseVectorReference () {}
  38:../lela/vector/sparse.h **** 	SparseVectorReference (IndexIterator idx, ElementIterator elt) : first (idx), second (elt) {}
  39:../lela/vector/sparse.h **** 
  40:../lela/vector/sparse.h **** 	template <class IIt2, class EIt2>
  41:../lela/vector/sparse.h **** 	SparseVectorReference (const SparseVectorReference<IIt2, EIt2> &ref) : first (ref.first), second (
  42:../lela/vector/sparse.h **** 
  43:../lela/vector/sparse.h **** 	SparseVectorReference &operator = (const std::pair<first_type, second_type> &r)
  44:../lela/vector/sparse.h **** 		{ *first._i = r.first; *second._i = r.second; return *this; }
  45:../lela/vector/sparse.h **** 
  46:../lela/vector/sparse.h **** 	SparseVectorReference &operator = (const SparseVectorReference &r)
  47:../lela/vector/sparse.h **** 		{ *first._i = *r.first._i; *second._i = *r.second._i; return *this; }
  48:../lela/vector/sparse.h **** 
  49:../lela/vector/sparse.h **** 	template <class II, class EI>
  50:../lela/vector/sparse.h **** 	SparseVectorReference &operator = (const SparseVectorReference<II, EI> &r)
  51:../lela/vector/sparse.h **** 		{ *first._i = *r.first._i; *second._i = *r.second._i; return *this; }
  52:../lela/vector/sparse.h **** 
  53:../lela/vector/sparse.h **** 	operator std::pair<first_type, second_type> () const
  54:../lela/vector/sparse.h **** 		{ return std::pair<first_type, second_type> (*first._i, *second._i); }
  55:../lela/vector/sparse.h **** 
  56:../lela/vector/sparse.h **** 	template <class II, class EI>
  57:../lela/vector/sparse.h **** 	bool operator == (const SparseVectorReference<II, EI> &r) const
  58:../lela/vector/sparse.h **** 		{ return (first == r.first) && (second == r.second); }
  59:../lela/vector/sparse.h **** 
  60:../lela/vector/sparse.h **** 	template <class II, class EI>
  61:../lela/vector/sparse.h **** 	bool operator != (const SparseVectorReference<II, EI> &r) const
  62:../lela/vector/sparse.h **** 		{ return (first != r.first) || (second != r.second); }
  63:../lela/vector/sparse.h **** };
  64:../lela/vector/sparse.h **** 
  65:../lela/vector/sparse.h **** /// Iterator for sparse vectors
  66:../lela/vector/sparse.h **** template <class IndexIterator, class ElementIterator, class ConstIndexIterator = IndexIterator, cla
  67:../lela/vector/sparse.h **** class SparseVectorIterator
  68:../lela/vector/sparse.h **** {
  69:../lela/vector/sparse.h **** public:
  70:../lela/vector/sparse.h **** 	typedef std::random_access_iterator_tag iterator_category;
  71:../lela/vector/sparse.h **** 	typedef SparseVectorReference<IndexIterator, ElementIterator> reference;
  72:../lela/vector/sparse.h **** 	typedef std::pair<typename IndexIterator::value_type, typename ElementIterator::value_type> value_
  73:../lela/vector/sparse.h **** 	typedef const SparseVectorReference<ConstIndexIterator, ConstElementIterator> const_reference;
  74:../lela/vector/sparse.h **** 	typedef reference *pointer;
  75:../lela/vector/sparse.h **** 	typedef const_reference *const_pointer;
  76:../lela/vector/sparse.h **** 	typedef ptrdiff_t difference_type;
  77:../lela/vector/sparse.h **** 	typedef size_t size_type;
  78:../lela/vector/sparse.h **** 
  79:../lela/vector/sparse.h **** 	SparseVectorIterator () {}
  80:../lela/vector/sparse.h **** 	SparseVectorIterator (IndexIterator idx, ElementIterator elt) : _ref (idx, elt) {}
  81:../lela/vector/sparse.h **** 	SparseVectorIterator (const SparseVectorIterator &i) : _ref (i._ref) {}
  82:../lela/vector/sparse.h **** 
  83:../lela/vector/sparse.h **** 	template <class IIt2, class EIt2, class CIIt2, class CEIt2>
  84:../lela/vector/sparse.h **** 	SparseVectorIterator (const SparseVectorIterator<IIt2, EIt2, CIIt2, CEIt2> &i) : _ref (i._ref) {}
  85:../lela/vector/sparse.h **** 
  86:../lela/vector/sparse.h **** 	SparseVectorIterator &operator = (const SparseVectorIterator &i)
  87:../lela/vector/sparse.h **** 	{
  88:../lela/vector/sparse.h **** 		_ref.first._i = i._ref.first._i;
  89:../lela/vector/sparse.h **** 		_ref.second._i = i._ref.second._i;
  90:../lela/vector/sparse.h **** 		return *this;
  91:../lela/vector/sparse.h **** 	}
  92:../lela/vector/sparse.h **** 
  93:../lela/vector/sparse.h **** 	template <class IIt, class EIt, class CIIt, class CEIt>
  94:../lela/vector/sparse.h **** 	SparseVectorIterator &operator = (const SparseVectorIterator<IIt, EIt, CIIt, CEIt> &i)
  95:../lela/vector/sparse.h **** 	{
  96:../lela/vector/sparse.h **** 		_ref.first._i = i._ref.first._i;
  97:../lela/vector/sparse.h **** 		_ref.second._i = i._ref.second._i;
  98:../lela/vector/sparse.h **** 		return *this;
  99:../lela/vector/sparse.h **** 	}
 100:../lela/vector/sparse.h **** 
 101:../lela/vector/sparse.h **** 	SparseVectorIterator &operator ++ () 
 102:../lela/vector/sparse.h **** 	{
 103:../lela/vector/sparse.h **** 		++_ref.first._i;
 104:../lela/vector/sparse.h **** 		++_ref.second._i;
 105:../lela/vector/sparse.h **** 		return *this;
 106:../lela/vector/sparse.h **** 	}
 107:../lela/vector/sparse.h **** 
 108:../lela/vector/sparse.h **** 	SparseVectorIterator operator ++ (int) 
 109:../lela/vector/sparse.h **** 	{
 110:../lela/vector/sparse.h **** 		SparseVectorIterator tmp (*this);
 111:../lela/vector/sparse.h **** 		++*this;
 112:../lela/vector/sparse.h **** 		return tmp;
 113:../lela/vector/sparse.h **** 	}
 114:../lela/vector/sparse.h **** 
 115:../lela/vector/sparse.h **** 	SparseVectorIterator operator + (difference_type i) const
 116:../lela/vector/sparse.h **** 		{ return SparseVectorIterator (_ref.first._i + i, _ref.second._i + i); }
 117:../lela/vector/sparse.h **** 
 118:../lela/vector/sparse.h **** 	SparseVectorIterator &operator += (difference_type i) 
 119:../lela/vector/sparse.h **** 	{
 120:../lela/vector/sparse.h **** 		_ref.first._i += i;
 121:../lela/vector/sparse.h **** 		_ref.second._i += i;
 122:../lela/vector/sparse.h **** 		return *this;
 123:../lela/vector/sparse.h **** 	}
 124:../lela/vector/sparse.h **** 
 125:../lela/vector/sparse.h **** 	SparseVectorIterator &operator -- () 
 126:../lela/vector/sparse.h **** 	{
 127:../lela/vector/sparse.h **** 		--_ref.first._i;
 128:../lela/vector/sparse.h **** 		--_ref.second._i;
 129:../lela/vector/sparse.h **** 		return *this;
 130:../lela/vector/sparse.h **** 	}
 131:../lela/vector/sparse.h **** 
 132:../lela/vector/sparse.h **** 	SparseVectorIterator operator -- (int) 
 133:../lela/vector/sparse.h **** 	{
 134:../lela/vector/sparse.h **** 		SparseVectorIterator tmp (*this);
 135:../lela/vector/sparse.h **** 		--*this;
 136:../lela/vector/sparse.h **** 		return tmp;
 137:../lela/vector/sparse.h **** 	}
 138:../lela/vector/sparse.h **** 
 139:../lela/vector/sparse.h **** 	SparseVectorIterator operator - (difference_type i) const
 140:../lela/vector/sparse.h **** 		{ return *this + -i; }
 141:../lela/vector/sparse.h **** 
 142:../lela/vector/sparse.h **** 	SparseVectorIterator &operator -= (difference_type i) 
 143:../lela/vector/sparse.h **** 		{ return *this += -i; }
 144:../lela/vector/sparse.h **** 
 145:../lela/vector/sparse.h **** 	difference_type operator - (SparseVectorIterator i) const 
 146:../lela/vector/sparse.h **** 		{ return _ref.first._i - i._ref.first._i; }
 147:../lela/vector/sparse.h **** 
 148:../lela/vector/sparse.h **** 	reference operator [] (long i) 
 149:../lela/vector/sparse.h **** 		{ return *(*this + i); }
 150:../lela/vector/sparse.h **** 
 151:../lela/vector/sparse.h **** 	reference operator * () 
 152:../lela/vector/sparse.h **** 		{ return _ref; }
 153:../lela/vector/sparse.h **** 
 154:../lela/vector/sparse.h **** 	const_reference operator * () const 
 155:../lela/vector/sparse.h **** 		{ return _ref; }
 156:../lela/vector/sparse.h **** 
 157:../lela/vector/sparse.h **** 	pointer operator -> () 
 158:../lela/vector/sparse.h **** 		{ return &_ref; }
 159:../lela/vector/sparse.h **** 
 160:../lela/vector/sparse.h **** 	const_pointer operator -> () const
 161:../lela/vector/sparse.h **** 		{ return reinterpret_cast<const_pointer> (&_ref); }
 162:../lela/vector/sparse.h **** 
 163:../lela/vector/sparse.h **** 	bool operator == (const SparseVectorIterator &c) const 
 164:../lela/vector/sparse.h **** 		{ return (_ref.first._i == c._ref.first._i); }
 165:../lela/vector/sparse.h **** 
 166:../lela/vector/sparse.h **** 	bool operator < (const SparseVectorIterator &c) const 
 167:../lela/vector/sparse.h **** 		{ return (_ref.first._i < c._ref.first._i); }
 168:../lela/vector/sparse.h **** 
 169:../lela/vector/sparse.h **** 	bool operator != (const SparseVectorIterator &c) const 
 170:../lela/vector/sparse.h **** 		{ return (_ref.first._i != c._ref.first._i); }
 171:../lela/vector/sparse.h **** 
 172:../lela/vector/sparse.h **** 	template <class IIt, class EIt, class CIIt, class CEIt>
 173:../lela/vector/sparse.h **** 	bool operator == (const SparseVectorIterator<IIt, EIt, CIIt, CEIt> &c) const 
 174:../lela/vector/sparse.h **** 		{ return (_ref.first._i == c._ref.first._i); }
 175:../lela/vector/sparse.h **** 
 176:../lela/vector/sparse.h **** 	template <class IIt, class EIt, class CIIt, class CEIt>
 177:../lela/vector/sparse.h **** 	bool operator < (const SparseVectorIterator<IIt, EIt, CIIt, CEIt> &c) const 
 178:../lela/vector/sparse.h **** 		{ return (_ref.first._i < c._ref.first._i); }
 179:../lela/vector/sparse.h **** 
 180:../lela/vector/sparse.h **** 	template <class IIt, class EIt, class CIIt, class CEIt>
 181:../lela/vector/sparse.h **** 	bool operator != (const SparseVectorIterator<IIt, EIt, CIIt, CEIt> &c) const 
 182:../lela/vector/sparse.h **** 		{ return (_ref.first._i != c._ref.first._i); }
 183:../lela/vector/sparse.h **** 
 184:../lela/vector/sparse.h **** private:
 185:../lela/vector/sparse.h **** 	template <class IIt, class EIt, class CIIt, class CEIt>
 186:../lela/vector/sparse.h **** 	friend class SparseVectorIterator;
 187:../lela/vector/sparse.h **** 
 188:../lela/vector/sparse.h **** 	template <class Element, class IV, class EV>
 189:../lela/vector/sparse.h **** 	friend class SparseVector;
 190:../lela/vector/sparse.h **** 
 191:../lela/vector/sparse.h **** 	reference _ref;
 192:../lela/vector/sparse.h **** };
 193:../lela/vector/sparse.h **** 
 194:../lela/vector/sparse.h **** /** Sparse vector wrapper
 195:../lela/vector/sparse.h ****  *
 196:../lela/vector/sparse.h ****  * This class acts as a wrapper around a pair of vectors -- the first
 197:../lela/vector/sparse.h ****  * for column-indices, the second for entries -- making it appear to
 198:../lela/vector/sparse.h ****  * be a vector of (index, entry)-pairs.
 199:../lela/vector/sparse.h ****  *
 200:../lela/vector/sparse.h ****  * \ingroup vector
 201:../lela/vector/sparse.h ****  */
 202:../lela/vector/sparse.h **** template <class IndexIterator, class ElementIterator, class ConstIndexIterator = IndexIterator, cla
 203:../lela/vector/sparse.h **** class ConstSparseVector
 204:../lela/vector/sparse.h **** {
 205:../lela/vector/sparse.h **** public:
 206:../lela/vector/sparse.h **** 	typedef VectorRepresentationTypes::Sparse RepresentationType; 
 207:../lela/vector/sparse.h **** 	typedef VectorStorageTypes::Transformed StorageType;
 208:../lela/vector/sparse.h **** 	typedef ConstSparseVector ContainerType;
 209:../lela/vector/sparse.h **** 	typedef SparseSubvector<ConstSparseVector, VectorRepresentationTypes::Sparse> ConstSubvectorType;
 210:../lela/vector/sparse.h **** 	typedef SparseSubvector<ConstSparseVector, VectorRepresentationTypes::Sparse> ConstAlignedSubvecto
 211:../lela/vector/sparse.h **** 	static const int align = 1;
 212:../lela/vector/sparse.h **** 
 213:../lela/vector/sparse.h **** 	typedef SparseVectorIterator<IndexIterator, ElementIterator, ConstIndexIterator, ConstElementItera
 214:../lela/vector/sparse.h **** 	typedef SparseVectorIterator<ConstIndexIterator, ConstElementIterator, ConstIndexIterator, ConstEl
 215:../lela/vector/sparse.h **** 
 216:../lela/vector/sparse.h **** 	typedef IndexIterator index_iterator;
 217:../lela/vector/sparse.h **** 	typedef ElementIterator element_iterator;
 218:../lela/vector/sparse.h **** 	typedef ConstIndexIterator const_index_iterator;
 219:../lela/vector/sparse.h **** 	typedef ConstElementIterator const_element_iterator;
 220:../lela/vector/sparse.h **** 
 221:../lela/vector/sparse.h **** 	typedef typename iterator::reference reference;
 222:../lela/vector/sparse.h **** 	typedef typename iterator::const_reference const_reference;
 223:../lela/vector/sparse.h **** 
 224:../lela/vector/sparse.h **** 	typedef std::reverse_iterator<iterator> reverse_iterator;
 225:../lela/vector/sparse.h **** 	typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
 226:../lela/vector/sparse.h **** 
 227:../lela/vector/sparse.h **** 	typedef typename iterator::value_type value_type;
 228:../lela/vector/sparse.h **** 	typedef size_t size_type;
 229:../lela/vector/sparse.h **** 
 230:../lela/vector/sparse.h **** 	template <class IndexVector, class ElementVector>
 231:../lela/vector/sparse.h **** 	ConstSparseVector (IndexVector &iv, ElementVector &ev)
 232:../lela/vector/sparse.h **** 		: _idx_begin (iv.begin ()), _idx_end (iv.end ()), _elt_begin (ev.begin ()) {}
 233:../lela/vector/sparse.h **** 
 234:../lela/vector/sparse.h **** 	ConstSparseVector (IndexIterator &idx_begin, IndexIterator &idx_end, ElementIterator &elt_begin)
 235:../lela/vector/sparse.h **** 		: _idx_begin (idx_begin), _idx_end (idx_end), _elt_begin (elt_begin) {}
 236:../lela/vector/sparse.h **** 
 237:../lela/vector/sparse.h **** 	ConstSparseVector () {}
 238:../lela/vector/sparse.h **** 
 239:../lela/vector/sparse.h **** 	template <class IIt, class EIt, class CIIt, class CEIt>
 240:../lela/vector/sparse.h **** 	inline ConstSparseVector &operator = (const ConstSparseVector<IIt, EIt, CIIt, CEIt> &v)
 241:../lela/vector/sparse.h **** 	{
 242:../lela/vector/sparse.h **** 		_idx_begin = v._idx_begin;
 243:../lela/vector/sparse.h **** 		_idx_end = v._idx_end;
 244:../lela/vector/sparse.h **** 		_elt_begin = v._elt_begin;
 245:../lela/vector/sparse.h **** 		return *this;
 246:../lela/vector/sparse.h **** 	}
 247:../lela/vector/sparse.h **** 
 248:../lela/vector/sparse.h **** 	inline iterator               begin  (void)       { return iterator (_idx_begin, _elt_begin); }
 249:../lela/vector/sparse.h **** 	inline const_iterator         begin  (void) const { return const_iterator (_idx_begin, _elt_begin)
 250:../lela/vector/sparse.h **** 	inline iterator               end    (void)       { return iterator (_idx_end, _elt_begin + size (
 251:../lela/vector/sparse.h **** 	inline const_iterator         end    (void) const { return const_iterator (_idx_end, _elt_begin + 
 252:../lela/vector/sparse.h **** 
 253:../lela/vector/sparse.h **** 	inline reverse_iterator       rbegin (void)       { return reverse_iterator (_idx_end, _elt_begin 
 254:../lela/vector/sparse.h **** 	inline const_reverse_iterator rbegin (void) const { return const_reverse_iterator (_idx_end, _elt_
 255:../lela/vector/sparse.h **** 	inline reverse_iterator       rend   (void)       { return reverse_iterator (_idx_begin, _elt_begi
 256:../lela/vector/sparse.h **** 	inline const_reverse_iterator rend   (void) const { return const_reverse_iterator (_idx_begin, _el
 257:../lela/vector/sparse.h **** 
 258:../lela/vector/sparse.h **** 	inline reference       operator[] (size_type n)       { return *(begin () + n); }
 259:../lela/vector/sparse.h **** 	inline const_reference operator[] (size_type n) const { return *(begin () + n); }
 260:../lela/vector/sparse.h **** 
 261:../lela/vector/sparse.h **** 	inline reference at (size_type n)
 262:../lela/vector/sparse.h **** 	{
 263:../lela/vector/sparse.h **** 		if (n >= size ())
 264:../lela/vector/sparse.h **** 			throw std::out_of_range ("n");
 265:../lela/vector/sparse.h **** 		else
 266:../lela/vector/sparse.h **** 			return (*this)[n];
 267:../lela/vector/sparse.h **** 	}
 268:../lela/vector/sparse.h **** 
 269:../lela/vector/sparse.h **** 	inline const_reference at (size_type n) const
 270:../lela/vector/sparse.h **** 	{
 271:../lela/vector/sparse.h **** 		if (n >= size ())
 272:../lela/vector/sparse.h **** 			throw std::out_of_range ("n");
 273:../lela/vector/sparse.h **** 		else
 274:../lela/vector/sparse.h **** 			return (*this)[n];
 275:../lela/vector/sparse.h **** 	}
 276:../lela/vector/sparse.h **** 
 277:../lela/vector/sparse.h **** 	inline reference       front     ()       { return *(begin ()); }
 278:../lela/vector/sparse.h **** 	inline const_reference front     () const { return *(begin ()); }
 279:../lela/vector/sparse.h **** 	inline reference       back      ()       { return *(end () - 1); }
 280:../lela/vector/sparse.h **** 	inline const_reference back      () const { return *(end () - 1); }
 281:../lela/vector/sparse.h **** 
 282:../lela/vector/sparse.h **** 	inline size_type       size      () const { return _idx_end - _idx_begin;  }
 283:../lela/vector/sparse.h **** 	inline bool            empty     () const { return _idx_end == _idx_begin; }
 284:../lela/vector/sparse.h **** 	inline size_type       max_size  () const { return _idx_end - _idx_begin;  }
 285:../lela/vector/sparse.h **** 
 286:../lela/vector/sparse.h **** 	inline bool operator == (const ConstSparseVector &v) const
 287:../lela/vector/sparse.h **** 		{ return (_idx_begin == v._idx_begin) && (_idx_end == v._idx_end) && (_elt_begin == v._elt_begin)
 288:../lela/vector/sparse.h **** 
 289:../lela/vector/sparse.h **** protected:
 290:../lela/vector/sparse.h **** 	template <class V, class T>
 291:../lela/vector/sparse.h **** 	friend class SparseSubvector;
 292:../lela/vector/sparse.h **** 
 293:../lela/vector/sparse.h **** 	template <class Element, class IndexVector, class ElementVector>
 294:../lela/vector/sparse.h **** 	friend class SparseVector;
 295:../lela/vector/sparse.h **** 
 296:../lela/vector/sparse.h **** 	ConstIndexIterator index_begin () const { return _idx_begin; }
 297:../lela/vector/sparse.h **** 	ConstIndexIterator index_end () const { return _idx_end; }
 298:../lela/vector/sparse.h **** 	ConstElementIterator element_begin () const { return _elt_begin; }
 299:../lela/vector/sparse.h **** 
 300:../lela/vector/sparse.h **** 	IndexIterator _idx_begin, _idx_end;
 301:../lela/vector/sparse.h **** 	ElementIterator _elt_begin;
 302:../lela/vector/sparse.h **** };
 303:../lela/vector/sparse.h **** 
 304:../lela/vector/sparse.h **** /** Generic sparse vector
 305:../lela/vector/sparse.h ****  *
 306:../lela/vector/sparse.h ****  * This class represents a sparse vector (stored as a pair of vectors)
 307:../lela/vector/sparse.h ****  * as a vector of (column-index, entry)-pairs.
 308:../lela/vector/sparse.h ****  *
 309:../lela/vector/sparse.h ****  * \ingroup vector
 310:../lela/vector/sparse.h ****  */
 311:../lela/vector/sparse.h **** template <class Element, class IndexVector, class ElementVector> // N.B. default argument in forwar
 312:../lela/vector/sparse.h **** class SparseVector
 313:../lela/vector/sparse.h **** {
 314:../lela/vector/sparse.h **** public:
 315:../lela/vector/sparse.h **** 	typedef VectorRepresentationTypes::Sparse RepresentationType; 
 316:../lela/vector/sparse.h **** 	typedef VectorStorageTypes::Transformed StorageType;
 317:../lela/vector/sparse.h **** 	typedef SparseVector ContainerType;
 318:../lela/vector/sparse.h **** 	typedef SparseSubvector<SparseVector, VectorRepresentationTypes::Sparse> SubvectorType;
 319:../lela/vector/sparse.h **** 	typedef SparseSubvector<const SparseVector, VectorRepresentationTypes::Sparse> ConstSubvectorType;
 320:../lela/vector/sparse.h **** 	typedef SparseSubvector<SparseVector, VectorRepresentationTypes::Sparse> AlignedSubvectorType;
 321:../lela/vector/sparse.h **** 	typedef SparseSubvector<const SparseVector, VectorRepresentationTypes::Sparse> ConstAlignedSubvect
 322:../lela/vector/sparse.h **** 	static const int align = 1;
 323:../lela/vector/sparse.h **** 
 324:../lela/vector/sparse.h **** 	typedef typename IndexVector::iterator IndexIterator;
 325:../lela/vector/sparse.h **** 	typedef typename IndexVector::const_iterator ConstIndexIterator;
 326:../lela/vector/sparse.h **** 	typedef typename ElementVector::iterator ElementIterator;
 327:../lela/vector/sparse.h **** 	typedef typename ElementVector::const_iterator ConstElementIterator;
 328:../lela/vector/sparse.h **** 
 329:../lela/vector/sparse.h **** 	typedef SparseVectorIterator<IndexIterator, ElementIterator, ConstIndexIterator, ConstElementItera
 330:../lela/vector/sparse.h **** 	typedef SparseVectorIterator<ConstIndexIterator, ConstElementIterator, ConstIndexIterator, ConstEl
 331:../lela/vector/sparse.h **** 
 332:../lela/vector/sparse.h **** 	typedef typename iterator::reference reference;
 333:../lela/vector/sparse.h **** 	typedef typename iterator::const_reference const_reference;
 334:../lela/vector/sparse.h **** 
 335:../lela/vector/sparse.h **** 	typedef std::reverse_iterator<iterator> reverse_iterator;
 336:../lela/vector/sparse.h **** 	typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
 337:../lela/vector/sparse.h **** 
 338:../lela/vector/sparse.h **** 	typedef typename iterator::value_type value_type;
 339:../lela/vector/sparse.h **** 	typedef size_t size_type;
 340:../lela/vector/sparse.h **** 
 341:../lela/vector/sparse.h **** 	SparseVector () {}
 342:../lela/vector/sparse.h **** 		
 343:../lela/vector/sparse.h **** 	template <class IV, class EV>
 344:../lela/vector/sparse.h **** 	SparseVector (IV &iv, EV &ev)
 345:../lela/vector/sparse.h **** 		: _idx (iv.size ()), _elt (ev.size ())
 346:../lela/vector/sparse.h **** 	{
 347:../lela/vector/sparse.h **** 		std::copy (iv.begin (), iv.end (), _idx.begin ());
 348:../lela/vector/sparse.h **** 		std::copy (ev.begin (), ev.end (), _elt.begin ());
 349:../lela/vector/sparse.h **** 	}
 350:../lela/vector/sparse.h **** 
 351:../lela/vector/sparse.h **** 	template <class IIt, class EIt>
 352:../lela/vector/sparse.h **** 	SparseVector (IIt idx_begin, IIt idx_end, EIt elt_begin)
 353:../lela/vector/sparse.h **** 		: _idx (idx_end - idx_begin), _elt (idx_end - idx_begin)
 354:../lela/vector/sparse.h **** 	{
 355:../lela/vector/sparse.h **** 		std::copy (idx_begin, idx_end, _idx.begin ());
 356:../lela/vector/sparse.h **** 		std::copy (elt_begin, elt_begin + (idx_end - idx_begin), _elt.begin ());
 357:../lela/vector/sparse.h **** 	}
 358:../lela/vector/sparse.h **** 
 359:../lela/vector/sparse.h **** 	inline SparseVector &operator = (const SparseVector &v)
 360:../lela/vector/sparse.h **** 	{
 361:../lela/vector/sparse.h **** 		_idx = v._idx;
 362:../lela/vector/sparse.h **** 		_elt = v._elt;
 363:../lela/vector/sparse.h **** 		return *this;
 364:../lela/vector/sparse.h **** 	}
 365:../lela/vector/sparse.h **** 
 366:../lela/vector/sparse.h **** 	template <class IIt, class EIt, class CIIt, class CEIt>
 367:../lela/vector/sparse.h **** 	inline SparseVector &operator = (const ConstSparseVector<IIt, EIt, CIIt, CEIt> &v)
 368:../lela/vector/sparse.h **** 	{
 369:../lela/vector/sparse.h **** 		_idx.resize (v.size ());
 370:../lela/vector/sparse.h **** 		_elt.resize (v.size ());
 371:../lela/vector/sparse.h **** 		std::copy (v._idx_begin, v._idx_end, _idx.begin ());
 372:../lela/vector/sparse.h **** 		std::copy (v._elt_begin, v._elt_begin + v.size (), _elt.begin ());
 373:../lela/vector/sparse.h **** 		return *this;
 374:../lela/vector/sparse.h **** 	}
 375:../lela/vector/sparse.h **** 
 376:../lela/vector/sparse.h **** 	inline iterator               begin  ()       { return iterator (_idx.begin (), _elt.begin ()); }
 377:../lela/vector/sparse.h **** 	inline const_iterator         begin  () const { return const_iterator (_idx.begin (), _elt.begin (
 378:../lela/vector/sparse.h **** 	inline iterator               end    ()       { return iterator (_idx.end (), _elt.end ()); }
 379:../lela/vector/sparse.h **** 	inline const_iterator         end    () const { return const_iterator (_idx.end (), _elt.end ()); 
 380:../lela/vector/sparse.h **** 
 381:../lela/vector/sparse.h **** 	inline reverse_iterator       rbegin ()       { return reverse_iterator (_idx.end (), _elt.end ())
 382:../lela/vector/sparse.h **** 	inline const_reverse_iterator rbegin () const { return const_reverse_iterator (_idx.end (), _elt.e
 383:../lela/vector/sparse.h **** 	inline reverse_iterator       rend   ()       { return reverse_iterator (_idx.begin (), _elt.begin
 384:../lela/vector/sparse.h **** 	inline const_reverse_iterator rend   () const { return const_reverse_iterator (_idx.begin (), _elt
 385:../lela/vector/sparse.h **** 
 386:../lela/vector/sparse.h **** 	inline reference       operator[] (size_type n)       { return *(begin () + n); }
 387:../lela/vector/sparse.h **** 	inline const_reference operator[] (size_type n) const { return *(begin () + n); }
 388:../lela/vector/sparse.h **** 
 389:../lela/vector/sparse.h **** 	inline reference       at (size_type n)
 390:../lela/vector/sparse.h **** 	{
 391:../lela/vector/sparse.h **** 		if (n >= size ())
 392:../lela/vector/sparse.h **** 			throw std::out_of_range ("n");
 393:../lela/vector/sparse.h **** 		else
 394:../lela/vector/sparse.h **** 			return (*this)[n];
 395:../lela/vector/sparse.h **** 	}
 396:../lela/vector/sparse.h **** 
 397:../lela/vector/sparse.h **** 	inline const_reference at (size_type n) const
 398:../lela/vector/sparse.h **** 	{
 399:../lela/vector/sparse.h **** 		if (n >= size ())
 400:../lela/vector/sparse.h **** 			throw std::out_of_range ("n");
 401:../lela/vector/sparse.h **** 		else
 402:../lela/vector/sparse.h **** 			return (*this)[n];
 403:../lela/vector/sparse.h **** 	}
 404:../lela/vector/sparse.h **** 
 405:../lela/vector/sparse.h **** 	inline reference       front     ()            { return *(begin ()); }
 406:../lela/vector/sparse.h **** 	inline const_reference front     () const      { return *(begin ()); }
 407:../lela/vector/sparse.h **** 	inline reference       back      ()            { return *(end () - 1); }
 408:../lela/vector/sparse.h **** 	inline const_reference back      () const      { return *(end () - 1); }
 409:../lela/vector/sparse.h **** 
 410:../lela/vector/sparse.h **** 	template <class T>
 411:../lela/vector/sparse.h **** 	inline void            push_back (T v)         { _idx.push_back (v.first); _elt.push_back (v.secon
 412:../lela/vector/sparse.h **** 	inline void            clear     ()            { _idx.clear (); _elt.clear (); }
 413:../lela/vector/sparse.h **** 	inline void            resize    (size_type s) { _idx.resize (s); _elt.resize (s); }
 414:../lela/vector/sparse.h **** 
 415:../lela/vector/sparse.h **** 	template <class InputIterator>
 416:../lela/vector/sparse.h **** 	void assign (InputIterator first, InputIterator last)
 417:../lela/vector/sparse.h **** 	{
 418:../lela/vector/sparse.h **** 		clear ();
 419:../lela/vector/sparse.h **** 
 420:../lela/vector/sparse.h **** 		while (first != last)
 421:../lela/vector/sparse.h **** 			push_back (*first++);
 422:../lela/vector/sparse.h **** 	}
 423:../lela/vector/sparse.h **** 
 424:../lela/vector/sparse.h **** 	void assign (const_iterator first, const_iterator last)
 425:../lela/vector/sparse.h **** 	{
 426:../lela/vector/sparse.h **** 		_idx.assign (first._ref.first._i, last._ref.first._i);
 427:../lela/vector/sparse.h **** 		_elt.assign (first._ref.second._i, last._ref.second._i);
 428:../lela/vector/sparse.h **** 	}
 429:../lela/vector/sparse.h **** 
 430:../lela/vector/sparse.h **** 	template <class T>
 431:../lela/vector/sparse.h **** 	inline iterator insert (iterator pos, const T &x)
 432:../lela/vector/sparse.h **** 	{
 433:../lela/vector/sparse.h **** 		typename IndexVector::iterator i_idx;
 434:../lela/vector/sparse.h **** 		typename ElementVector::iterator i_elt;
 435:../lela/vector/sparse.h **** 
 436:../lela/vector/sparse.h **** 		i_idx = _idx.insert (pos._ref.first._i, x.first); 
 437:../lela/vector/sparse.h **** 		i_elt = _elt.insert (pos._ref.second._i, x.second);
 438:../lela/vector/sparse.h **** 
 439:../lela/vector/sparse.h **** 		return iterator (i_idx, i_elt);
 440:../lela/vector/sparse.h **** 	}
 441:../lela/vector/sparse.h **** 
 442:../lela/vector/sparse.h **** 	template <class It>
 443:../lela/vector/sparse.h **** 	void insert (iterator pos, It begin, It end)
 444:../lela/vector/sparse.h **** 	{
 445:../lela/vector/sparse.h **** 		typename IndexVector::value_type idx;
 446:../lela/vector/sparse.h **** 		typename ElementVector::value_type elt;
 447:../lela/vector/sparse.h **** 
 448:../lela/vector/sparse.h **** 		typename IndexVector::difference_type p = pos._ref.first._i - _idx.begin ();
 449:../lela/vector/sparse.h **** 
 450:../lela/vector/sparse.h **** 		_idx.insert (pos._ref.first._i, end - begin, idx);
 451:../lela/vector/sparse.h **** 		_elt.insert (pos._ref.second._i, end - begin, elt);
 452:../lela/vector/sparse.h **** 
 453:../lela/vector/sparse.h **** 		std::copy (begin, end, iterator (_idx.begin () + p, _elt.begin () + p));
 454:../lela/vector/sparse.h **** 	}
 455:../lela/vector/sparse.h **** 
 456:../lela/vector/sparse.h **** 	inline iterator erase (iterator pos)
 457:../lela/vector/sparse.h **** 	{
 458:../lela/vector/sparse.h **** 		typename IndexVector::iterator i_idx;
 459:../lela/vector/sparse.h **** 		typename ElementVector::iterator i_elt;
 460:../lela/vector/sparse.h **** 
 461:../lela/vector/sparse.h **** 		i_idx = _idx.erase (pos._ref.first._i); 
 462:../lela/vector/sparse.h **** 		i_elt = _elt.erase (pos._ref.second._i);
 463:../lela/vector/sparse.h **** 
 464:../lela/vector/sparse.h **** 		return iterator (i_idx, i_elt);
 465:../lela/vector/sparse.h **** 	}
 466:../lela/vector/sparse.h **** 
 467:../lela/vector/sparse.h **** 	inline iterator erase (iterator first, iterator last)
 468:../lela/vector/sparse.h **** 	{
 469:../lela/vector/sparse.h **** 		typename IndexVector::iterator i_idx;
 470:../lela/vector/sparse.h **** 		typename ElementVector::iterator i_elt;
 471:../lela/vector/sparse.h **** 
 472:../lela/vector/sparse.h **** 		i_idx = _idx.erase (first._ref.first._i, last._ref.first._i); 
 473:../lela/vector/sparse.h **** 		i_elt = _elt.erase (first._ref.second._i, last._ref.second._i);
 474:../lela/vector/sparse.h **** 
 475:../lela/vector/sparse.h **** 		return iterator (i_idx, i_elt);
 476:../lela/vector/sparse.h **** 	}
 477:../lela/vector/sparse.h **** 
 478:../lela/vector/sparse.h **** 	inline size_type       size      () const      { return _idx.size ();  }
 9425              		.loc	32 478 25
 9426              	.Ltmp3054:
 9427              		#DEBUG_VALUE: size:this <- RSI+0 # ../lela/vector/sparse.h:478:25[ matrix-op.C:88:23 ]
 571:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 9428              		.loc	34 571 9
 9429              	.Ltmp3055:
 9430 1f30 488B06   		movq	(%rsi), %rax            # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ ../lela/vector/spar
 9431 1f33 488B4E08 		movq	8(%rsi), %rcx           # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ ../lela/vector/spar
 9432              	                                        # kill: RDI<def> EDI<kill>
 9433 1f37 4829C1   		subq	%rax, %rcx              # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ ../lela/vector/spar
 9434 1f3a 48C1E902 		shrq	$2, %rcx
 9435              	.Ltmp3056:
  88:matrix-op.C   **** 	uint32 sz = x.size ();
 9436              		.loc	1 88 23
 9437              	.Ltmp3057:
 9438              		#DEBUG_VALUE: sz <- ECX+0       # matrix-op.C:88:23
 9439 1f3e 85C9     		testl	%ecx, %ecx              # matrix-op.C:88:23
  91:matrix-op.C   **** 	register uint32 i=0;
 9440              		.loc	1 91 21
 9441              	.Ltmp3058:
 9442              		#DEBUG_VALUE: i <- 0+0          # matrix-op.C:91:21
 9443              	.Ltmp3059:
 9444              		#DEBUG_VALUE: sz <- undef
 9445 1f40 742A     		je	.LBB9_3
 9446              	# BB#1:                                 # %.lr.ph
 9447              	.Ltmp3060:
 9448              		#DEBUG_VALUE: axpy:x <- RSI+0
 9449              	.Ltmp3061:
 9450              		#DEBUG_VALUE: axpy:x <- undef
 9451              	.Ltmp3062:
 9452              		#DEBUG_VALUE: axpy:y <- RDX+0
 9453              	.Ltmp3063:
 9454              		#DEBUG_VALUE: size:this <- RSI+0
 9455              	.Ltmp3064:
 9456              		#DEBUG_VALUE: size:this <- undef
 9457              	.Ltmp3065:
 9458              		#DEBUG_VALUE: i <- 0+0
 9459 1f42 89C9     		movl	%ecx, %ecx
 9460 1f44 488B7618 		movq	24(%rsi), %rsi
 9461 1f48 0F1F8400 		.align	16, 0x90
 9461      00000000 
 9462              	.LBB9_2:                                # =>This Inner Loop Header: Depth=1
 9463              	.Ltmp3066:
 9464              		#DEBUG_VALUE: axpy:y <- RDX+0
 9465              	.Ltmp3067:
 9466              		#DEBUG_VALUE: i <- 0+0
 9467 1f50 440FB706 		movzwl	(%rsi), %r8d
 9468 1f54 4C0FAFC7 		imulq	%rdi, %r8
  94:matrix-op.C   **** 		y[x[i].first] += a32 * (uint32)(x[i].second);
 9469              		.loc	1 94 3
 9470              	.Ltmp3068:
 9471 1f58 448B08   		movl	(%rax), %r9d            # matrix-op.C:94:3
 9472 1f5b 4E0104CA 		addq	%r8, (%rdx,%r9,8)       # matrix-op.C:94:3
 9473 1f5f 4883C602 		addq	$2, %rsi
 9474 1f63 4883C004 		addq	$4, %rax
 9475 1f67 48FFC9   		decq	%rcx
 9476              	.Ltmp3069:
  93:matrix-op.C   **** 	for(i=0; i<sz; ++i)
 9477              		.loc	1 93 2
 9478              	.Ltmp3070:
 9479 1f6a 75E4     		jne	.LBB9_2                 # matrix-op.C:93:2
 9480              	.LBB9_3:                                # %._crit_edge
 9481              	.Ltmp3071:
 9482              		#DEBUG_VALUE: axpy:y <- RDX+0
 9483              	.Ltmp3072:
 9484              		#DEBUG_VALUE: i <- 0+0
  95:matrix-op.C   **** }
 9485              		.loc	1 95 1
 9486              	.Ltmp3073:
 9487 1f6c C3       		ret                             # matrix-op.C:95:1
 9488              	.Ltmp3074:
 9489              	.Ltmp3075:
 9491              	.Lfunc_end9:
 9492              	.Leh_func_end9:
 9493              	
 9494              		.section	.text._Z30copyDenseArrayToSparseVector64IN4LELA7ModularItEENS0_12SparseVectorItSt6vectorI
 9495              		.weak	_Z30copyDenseArrayToSparseVector64IN4LELA7ModularItEENS0_12SparseVectorItSt6vectorIjSaIjEES4
 9496              		.align	16, 0x90
 9498              	_Z30copyDenseArrayToSparseVector64IN4LELA7ModularItEENS0_12SparseVectorItSt6vectorIjSaIjEES4_ItSaIt
 9499              	.Leh_func_begin10:
 9500              	.Lfunc_begin10:
  48:matrix-op.C   **** {
 9501              		.loc	1 48 0
 9502              	.Ltmp3089:
 9503              	# BB#0:
 9504 0000 55       		pushq	%rbp
 9505              	.Ltmp3086:
 9506 0001 4889E5   		movq	%rsp, %rbp
 9507              	.Ltmp3087:
 9508 0004 4157     		pushq	%r15
 9509 0006 4156     		pushq	%r14
 9510 0008 4155     		pushq	%r13
 9511 000a 4154     		pushq	%r12
 9512 000c 53       		pushq	%rbx
 9513 000d 4883EC48 		subq	$72, %rsp
 9514              	.Ltmp3088:
 9515              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- RDI+0 # matrix-op.C:47:50
 9516              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- RSI+0 # matrix-op.C:47:60
 9517              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:arraySize <- EDX+0 # matrix-op.C:47:76
 9518              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RCX+0 # matrix-op.C:47:95
 9519 0011 4889CB   		movq	%rcx, %rbx
 9520              	.Ltmp3090:
 9521              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9522 0014 48897D98 		movq	%rdi, -104(%rbp)        # 8-byte Spill
  49:matrix-op.C   **** 	uint32 nb_elts = 0;
 9523              		.loc	1 49 20
 9524              	.Ltmp3091:
 9525              		#DEBUG_VALUE: nb_elts <- 0+0    # matrix-op.C:49:20
 9526              	.Ltmp3092:
 9527              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9528 0018 48C745A0 		movq	$0, -96(%rbp)
 9528      00000000 
 9529 0020 48C745A8 		movq	$0, -88(%rbp)
 9529      00000000 
 9530 0028 48C745B0 		movq	$0, -80(%rbp)
 9530      00000000 
 9531 0030 48C745B8 		movq	$0, -72(%rbp)
 9531      00000000 
 9532 0038 48C745C0 		movq	$0, -64(%rbp)
 9532      00000000 
 9533 0040 4531F6   		xorl	%r14d, %r14d
  54:matrix-op.C   **** 	for (uint32 i = 0; i < arraySize; ++i)
 9534              		.loc	1 54 2
 9535              	.Ltmp3093:
 9536              		#DEBUG_VALUE: i <- 0+0          # matrix-op.C:54:2
 9537 0043 48C745C8 		movq	$0, -56(%rbp)
 9537      00000000 
 9538 004b 85D2     		testl	%edx, %edx
 9539 004d 4189D7   		movl	%edx, %r15d
 9540              	.Ltmp3094:
 9541              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:arraySize <- undef
 9542 0050 4989F4   		movq	%rsi, %r12
 9543              	.Ltmp3095:
 9544              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9545 0053 741E     		je	.LBB10_4
 9546              	# BB#1:                                 # %.lr.ph
 9547              	.Ltmp3096:
 9548              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9549              	.Ltmp3097:
 9550              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9551              	.Ltmp3098:
 9552              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9553              	.Ltmp3099:
 9554              		#DEBUG_VALUE: nb_elts <- 0+0
 9555              	.Ltmp3100:
 9556              		#DEBUG_VALUE: i <- 0+0
 9557 0055 4589FE   		movl	%r15d, %r14d
 9558 0058 31C0     		xorl	%eax, %eax
 9559 005a 4C89E1   		movq	%r12, %rcx
 9560 005d 0F1F00   		.align	16, 0x90
 9561              	.LBB10_2:                               # =>This Inner Loop Header: Depth=1
 9562              	.Ltmp3101:
 9563              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9564              	.Ltmp3102:
 9565              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9566              	.Ltmp3103:
 9567              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9568              	.Ltmp3104:
 9569              		#DEBUG_VALUE: nb_elts <- 0+0
 9570              	.Ltmp3105:
 9571              		#DEBUG_VALUE: i <- 0+0
 9572 0060 48833901 		cmpq	$1, (%rcx)
 9573 0064 83D8FF   		sbbl	$-1, %eax
 9574 0067 4883C108 		addq	$8, %rcx
 9575 006b 49FFCE   		decq	%r14
 9576 006e 75F0     		jne	.LBB10_2                # matrix-op.C:54:2
 9577              	# BB#3:                                 # %._crit_edge
 9578              	.Ltmp3106:
 9579              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9580              	.Ltmp3107:
 9581              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9582              	.Ltmp3108:
 9583              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9584              	.Ltmp3109:
 9585              		#DEBUG_VALUE: nb_elts <- 0+0
 9586              	.Ltmp3110:
 9587              		#DEBUG_VALUE: i <- 0+0
 9588 0070 4189C6   		movl	%eax, %r14d
 9589              	.LBB10_4:
 9590              	.Ltmp3076:
 9591              	.Ltmp3111:
 9592              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9593              	.Ltmp3112:
 9594              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9595              	.Ltmp3113:
 9596              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9597              	.Ltmp3114:
 9598              		#DEBUG_VALUE: nb_elts <- 0+0
 9599              	.Ltmp3115:
 9600              		#DEBUG_VALUE: i <- 0+0
 9601 0073 488D7DA0 		leaq	-96(%rbp), %rdi
 9602 0077 4C89F6   		movq	%r14, %rsi
 9603 007a E8000000 		callq	_ZNSt6vectorIjSaIjEE7reserveEm
 9603      00
 9604              	.Ltmp3077:
 9605              	# BB#5:                                 # %.noexc
 9606              	.Ltmp3078:
 9607              	.Ltmp3116:
 9608              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9609              	.Ltmp3117:
 9610              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9611              	.Ltmp3118:
 9612              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9613              	.Ltmp3119:
 9614              		#DEBUG_VALUE: nb_elts <- 0+0
 9615              	.Ltmp3120:
 9616              		#DEBUG_VALUE: i <- 0+0
 9617 007f 488D45B8 		leaq	-72(%rbp), %rax
 9618 0083 4889C7   		movq	%rax, %rdi
 9619 0086 4C89F6   		movq	%r14, %rsi
 9620 0089 E8000000 		callq	_ZNSt6vectorItSaItEE7reserveEm
 9620      00
 9621              	.Ltmp3079:
 9622              	# BB#6:                                 # %_ZN4LELA12SparseVectorItSt6vectorIjSaIjEES1_ItSaItEEE7re
 9623              	.Ltmp3121:
 9624              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9625              	.Ltmp3122:
 9626              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9627              	.Ltmp3123:
 9628              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9629              	.Ltmp3124:
 9630              		#DEBUG_VALUE: nb_elts <- 0+0
 9631              	.Ltmp3125:
 9632              		#DEBUG_VALUE: i <- 0+0
 9633 008e 4531F6   		xorl	%r14d, %r14d
 9634 0091 EB29     		jmp	.LBB10_7
 9635 0093 66666666 		.align	16, 0x90
 9635      2E0F1F84 
 9635      00000000 
 9635      00
 9636              	.LBB10_15:                              #   in Loop: Header=BB10_7 Depth=1
 9637              	.Ltmp3126:
 9638              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9639              	.Ltmp3127:
 9640              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9641              	.Ltmp3128:
 9642              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9643              	.Ltmp3129:
 9644              		#DEBUG_VALUE: nb_elts <- 0+0
 9645              	.Ltmp3130:
 9646              		#DEBUG_VALUE: i <- 0+0
 9647 00a0 31C0     		xorl	%eax, %eax
   1:/usr/include/c++/4.6.3/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
   3:/usr/include/c++/4.6.3/ext/new_allocator.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2009, 2010
   4:/usr/include/c++/4.6.3/ext/new_allocator.h **** // Free Software Foundation, Inc.
   5:/usr/include/c++/4.6.3/ext/new_allocator.h **** //
   6:/usr/include/c++/4.6.3/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/usr/include/c++/4.6.3/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   8:/usr/include/c++/4.6.3/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   9:/usr/include/c++/4.6.3/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/4.6.3/ext/new_allocator.h **** // any later version.
  11:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  12:/usr/include/c++/4.6.3/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  13:/usr/include/c++/4.6.3/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/4.6.3/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/4.6.3/ext/new_allocator.h **** // GNU General Public License for more details.
  16:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  17:/usr/include/c++/4.6.3/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/4.6.3/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/4.6.3/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  21:/usr/include/c++/4.6.3/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/4.6.3/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/4.6.3/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/4.6.3/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  26:/usr/include/c++/4.6.3/ext/new_allocator.h **** /** @file ext/new_allocator.h
  27:/usr/include/c++/4.6.3/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  28:/usr/include/c++/4.6.3/ext/new_allocator.h ****  */
  29:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  30:/usr/include/c++/4.6.3/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  31:/usr/include/c++/4.6.3/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  32:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  33:/usr/include/c++/4.6.3/ext/new_allocator.h **** #include <bits/c++config.h>
  34:/usr/include/c++/4.6.3/ext/new_allocator.h **** #include <new>
  35:/usr/include/c++/4.6.3/ext/new_allocator.h **** #include <bits/functexcept.h>
  36:/usr/include/c++/4.6.3/ext/new_allocator.h **** #include <bits/move.h>
  37:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  38:/usr/include/c++/4.6.3/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  39:/usr/include/c++/4.6.3/ext/new_allocator.h **** {
  40:/usr/include/c++/4.6.3/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  41:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  42:/usr/include/c++/4.6.3/ext/new_allocator.h ****   using std::size_t;
  43:/usr/include/c++/4.6.3/ext/new_allocator.h ****   using std::ptrdiff_t;
  44:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  45:/usr/include/c++/4.6.3/ext/new_allocator.h ****   /**
  46:/usr/include/c++/4.6.3/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  47:/usr/include/c++/4.6.3/ext/new_allocator.h ****    *  @ingroup allocators
  48:/usr/include/c++/4.6.3/ext/new_allocator.h ****    *
  49:/usr/include/c++/4.6.3/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard. 
  50:/usr/include/c++/4.6.3/ext/new_allocator.h ****    *    - all allocation calls operator new
  51:/usr/include/c++/4.6.3/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  52:/usr/include/c++/4.6.3/ext/new_allocator.h ****    */
  53:/usr/include/c++/4.6.3/ext/new_allocator.h ****   template<typename _Tp>
  54:/usr/include/c++/4.6.3/ext/new_allocator.h ****     class new_allocator
  55:/usr/include/c++/4.6.3/ext/new_allocator.h ****     {
  56:/usr/include/c++/4.6.3/ext/new_allocator.h ****     public:
  57:/usr/include/c++/4.6.3/ext/new_allocator.h ****       typedef size_t     size_type;
  58:/usr/include/c++/4.6.3/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  59:/usr/include/c++/4.6.3/ext/new_allocator.h ****       typedef _Tp*       pointer;
  60:/usr/include/c++/4.6.3/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  61:/usr/include/c++/4.6.3/ext/new_allocator.h ****       typedef _Tp&       reference;
  62:/usr/include/c++/4.6.3/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  63:/usr/include/c++/4.6.3/ext/new_allocator.h ****       typedef _Tp        value_type;
  64:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  65:/usr/include/c++/4.6.3/ext/new_allocator.h ****       template<typename _Tp1>
  66:/usr/include/c++/4.6.3/ext/new_allocator.h ****         struct rebind
  67:/usr/include/c++/4.6.3/ext/new_allocator.h ****         { typedef new_allocator<_Tp1> other; };
  68:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  69:/usr/include/c++/4.6.3/ext/new_allocator.h ****       new_allocator() throw() { }
  70:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  71:/usr/include/c++/4.6.3/ext/new_allocator.h ****       new_allocator(const new_allocator&) throw() { }
  72:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  73:/usr/include/c++/4.6.3/ext/new_allocator.h ****       template<typename _Tp1>
  74:/usr/include/c++/4.6.3/ext/new_allocator.h ****         new_allocator(const new_allocator<_Tp1>&) throw() { }
  75:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  76:/usr/include/c++/4.6.3/ext/new_allocator.h ****       ~new_allocator() throw() { }
  77:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  78:/usr/include/c++/4.6.3/ext/new_allocator.h ****       pointer
  79:/usr/include/c++/4.6.3/ext/new_allocator.h ****       address(reference __x) const { return std::__addressof(__x); }
  80:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  81:/usr/include/c++/4.6.3/ext/new_allocator.h ****       const_pointer
  82:/usr/include/c++/4.6.3/ext/new_allocator.h ****       address(const_reference __x) const { return std::__addressof(__x); }
  83:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  84:/usr/include/c++/4.6.3/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  85:/usr/include/c++/4.6.3/ext/new_allocator.h ****       // about what the return value is when __n == 0.
  86:/usr/include/c++/4.6.3/ext/new_allocator.h ****       pointer
  87:/usr/include/c++/4.6.3/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
  88:/usr/include/c++/4.6.3/ext/new_allocator.h ****       { 
  89:/usr/include/c++/4.6.3/ext/new_allocator.h **** 	if (__n > this->max_size())
  90:/usr/include/c++/4.6.3/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
  91:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  92:/usr/include/c++/4.6.3/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  93:/usr/include/c++/4.6.3/ext/new_allocator.h ****       }
  94:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
  95:/usr/include/c++/4.6.3/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
  96:/usr/include/c++/4.6.3/ext/new_allocator.h ****       void
  97:/usr/include/c++/4.6.3/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
  98:/usr/include/c++/4.6.3/ext/new_allocator.h ****       { ::operator delete(__p); }
  99:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
 100:/usr/include/c++/4.6.3/ext/new_allocator.h ****       size_type
 101:/usr/include/c++/4.6.3/ext/new_allocator.h ****       max_size() const throw() 
 102:/usr/include/c++/4.6.3/ext/new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 103:/usr/include/c++/4.6.3/ext/new_allocator.h **** 
 104:/usr/include/c++/4.6.3/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 105:/usr/include/c++/4.6.3/ext/new_allocator.h ****       // 402. wrong new expression in [some_] allocator::construct
 106:/usr/include/c++/4.6.3/ext/new_allocator.h ****       void 
 107:/usr/include/c++/4.6.3/ext/new_allocator.h ****       construct(pointer __p, const _Tp& __val) 
 108:/usr/include/c++/4.6.3/ext/new_allocator.h ****       { ::new((void *)__p) _Tp(__val); }
 9648              		.loc	4 108 9
 9649              	.Ltmp3131:
 9650 00a2 4885F6   		testq	%rsi, %rsi              # /usr/include/c++/4.6.3/ext/new_allocator.h:108:9[ /usr/include/c++
 9651 00a5 740A     		je	.LBB10_17
 9652              	# BB#16:                                #   in Loop: Header=BB10_7 Depth=1
 9653              	.Ltmp3132:
 9654              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9655              	.Ltmp3133:
 9656              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9657              	.Ltmp3134:
 9658              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9659              	.Ltmp3135:
 9660              		#DEBUG_VALUE: nb_elts <- 0+0
 9661              	.Ltmp3136:
 9662              		#DEBUG_VALUE: i <- 0+0
 9663 00a7 668B45D4 		movw	-44(%rbp), %ax          # /usr/include/c++/4.6.3/ext/new_allocator.h:108:9[ /usr/include/c++/
 9664 00ab 668906   		movw	%ax, (%rsi)             # /usr/include/c++/4.6.3/ext/new_allocator.h:108:9[ /usr/include/c++/
 9665 00ae 4889F0   		movq	%rsi, %rax
 9666              	.LBB10_17:                              # %_ZN9__gnu_cxx13new_allocatorItE9constructEPtRKt.exit.i.i
 9667              	                                        #   in Loop: Header=BB10_7 Depth=1
 9668              	.Ltmp3137:
 9669              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9670              	.Ltmp3138:
 9671              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9672              	.Ltmp3139:
 9673              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9674              	.Ltmp3140:
 9675              		#DEBUG_VALUE: nb_elts <- 0+0
 9676              	.Ltmp3141:
 9677              		#DEBUG_VALUE: i <- 0+0
 9678              	.Ltmp3142:
 697:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 698:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 699:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 700:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param n The index of the element for which data should be
 701:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  accessed.
 702:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 703:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 704:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 705:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 706:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 707:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  see at().)
 708:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 709:/usr/include/c++/4.6.3/bits/stl_vector.h ****       const_reference
 710:/usr/include/c++/4.6.3/bits/stl_vector.h ****       operator[](size_type __n) const
 711:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 712:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 713:/usr/include/c++/4.6.3/bits/stl_vector.h ****     protected:
 714:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /// Safety check used only from at().
 715:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
 716:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_range_check(size_type __n) const
 717:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
 718:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	if (__n >= this->size())
 719:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  __throw_out_of_range(__N("vector::_M_range_check"));
 720:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
 721:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 722:/usr/include/c++/4.6.3/bits/stl_vector.h ****     public:
 723:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 724:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 725:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param n The index of the element for which data should be
 726:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  accessed.
 727:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 728:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
 729:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 730:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 731:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 732:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 733:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 734:/usr/include/c++/4.6.3/bits/stl_vector.h ****       reference
 735:/usr/include/c++/4.6.3/bits/stl_vector.h ****       at(size_type __n)
 736:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
 737:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	_M_range_check(__n);
 738:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	return (*this)[__n]; 
 739:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
 740:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 741:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 742:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 743:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param n The index of the element for which data should be
 744:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  accessed.
 745:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 746:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
 747:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 748:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 749:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 750:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 751:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 752:/usr/include/c++/4.6.3/bits/stl_vector.h ****       const_reference
 753:/usr/include/c++/4.6.3/bits/stl_vector.h ****       at(size_type __n) const
 754:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
 755:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	_M_range_check(__n);
 756:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	return (*this)[__n];
 757:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
 758:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 759:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 760:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the first
 761:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  element of the %vector.
 762:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 763:/usr/include/c++/4.6.3/bits/stl_vector.h ****       reference
 764:/usr/include/c++/4.6.3/bits/stl_vector.h ****       front()
 765:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return *begin(); }
 766:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 767:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 768:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
 769:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  element of the %vector.
 770:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 771:/usr/include/c++/4.6.3/bits/stl_vector.h ****       const_reference
 772:/usr/include/c++/4.6.3/bits/stl_vector.h ****       front() const
 773:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return *begin(); }
 774:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 775:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 776:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the last
 777:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  element of the %vector.
 778:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 779:/usr/include/c++/4.6.3/bits/stl_vector.h ****       reference
 780:/usr/include/c++/4.6.3/bits/stl_vector.h ****       back()
 781:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return *(end() - 1); }
 782:/usr/include/c++/4.6.3/bits/stl_vector.h ****       
 783:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 784:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
 785:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  last element of the %vector.
 786:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 787:/usr/include/c++/4.6.3/bits/stl_vector.h ****       const_reference
 788:/usr/include/c++/4.6.3/bits/stl_vector.h ****       back() const
 789:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return *(end() - 1); }
 790:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 791:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 792:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
 793:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // data access
 794:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 795:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
 796:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
 797:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 798:/usr/include/c++/4.6.3/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 799:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _Tp*
 800:/usr/include/c++/4.6.3/bits/stl_vector.h **** #else
 801:/usr/include/c++/4.6.3/bits/stl_vector.h ****       pointer
 802:/usr/include/c++/4.6.3/bits/stl_vector.h **** #endif
 803:/usr/include/c++/4.6.3/bits/stl_vector.h ****       data()
 804:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return std::__addressof(front()); }
 805:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 806:/usr/include/c++/4.6.3/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 807:/usr/include/c++/4.6.3/bits/stl_vector.h ****       const _Tp*
 808:/usr/include/c++/4.6.3/bits/stl_vector.h **** #else
 809:/usr/include/c++/4.6.3/bits/stl_vector.h ****       const_pointer
 810:/usr/include/c++/4.6.3/bits/stl_vector.h **** #endif
 811:/usr/include/c++/4.6.3/bits/stl_vector.h ****       data() const
 812:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return std::__addressof(front()); }
 813:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 814:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // [23.2.4.3] modifiers
 815:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 816:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Add data to the end of the %vector.
 817:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  x  Data to be added.
 818:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 819:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This is a typical stack operation.  The function creates an
 820:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  element at the end of the %vector and assigns the given data
 821:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
 822:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  done in constant time if the %vector has preallocated space
 823:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  available.
 824:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 825:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
 826:/usr/include/c++/4.6.3/bits/stl_vector.h ****       push_back(const value_type& __x)
 827:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
 828:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 829:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  {
 830:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	    this->_M_impl.construct(this->_M_impl._M_finish, __x);
 831:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	    ++this->_M_impl._M_finish;
 9679              		.loc	34 831 6
 9680              	.Ltmp3143:
 9681 00b1 4883C002 		addq	$2, %rax                # /usr/include/c++/4.6.3/bits/stl_vector.h:831:6[ ../lela/vector/spar
 9682 00b5 488945C0 		movq	%rax, -64(%rbp)         # /usr/include/c++/4.6.3/bits/stl_vector.h:831:6[ ../lela/vector/spar
 9683              	.Ltmp3144:
 9684              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9685              	.Ltmp3145:
 9686              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9687              	.Ltmp3146:
 9688              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9689              	.Ltmp3147:
 9690              		#DEBUG_VALUE: nb_elts <- 0+0
 9691              	.Ltmp3148:
 9692              		#DEBUG_VALUE: i <- 0+0
 9693 00b9 49FFC6   		incq	%r14
 9694              	.LBB10_7:                               # %_ZN4LELA12SparseVectorItSt6vectorIjSaIjEES1_ItSaItEEE7re
 9695              	                                        # =>This Inner Loop Header: Depth=1
 9696              	.Ltmp3149:
 9697              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9698              	.Ltmp3150:
 9699              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9700              	.Ltmp3151:
 9701              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9702              	.Ltmp3152:
 9703              		#DEBUG_VALUE: nb_elts <- 0+0
 9704              	.Ltmp3153:
 9705              		#DEBUG_VALUE: i <- 0+0
 9706 00bc 4539FE   		cmpl	%r15d, %r14d
 9707              	.Ltmp3154:
  60:matrix-op.C   **** 	for (uint32 i = 0; i < arraySize; ++i){
 9708              		.loc	1 60 2
 9709              	.Ltmp3155:
 9710 00bf 0F83BC00 		jae	.LBB10_27               # matrix-op.C:60:2
 9710      0000
 9711              	# BB#8:                                 #   in Loop: Header=BB10_7 Depth=1
 9712              	.Ltmp3156:
 9713              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9714              	.Ltmp3157:
 9715              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9716              	.Ltmp3158:
 9717              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9718              	.Ltmp3159:
 9719              		#DEBUG_VALUE: nb_elts <- 0+0
 9720              	.Ltmp3160:
 9721              		#DEBUG_VALUE: i <- 0+0
  61:matrix-op.C   **** 		ModularTraits<typename Ring::Element>::reduce (e, array[i], R._modulus);
 9722              		.loc	1 61 3
 9723              	.Ltmp3161:
 9724 00c5 4B8B04F4 		movq	(%r12,%r14,8), %rax     # matrix-op.C:61:3
 9725 00c9 488B7D98 		movq	-104(%rbp), %rdi        # 8-byte Reload
 9726 00cd 0FB70F   		movzwl	(%rdi), %ecx
 9727 00d0 31D2     		xorl	%edx, %edx
 9728 00d2 48F7F1   		divq	%rcx
 9729 00d5 4885D2   		testq	%rdx, %rdx
 9730 00d8 0F849B00 		je	.LBB10_26
 9730      0000
 9731              	# BB#9:                                 #   in Loop: Header=BB10_7 Depth=1
 9732              	.Ltmp3162:
 9733              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9734              	.Ltmp3163:
 9735              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9736              	.Ltmp3164:
 9737              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9738              	.Ltmp3165:
 9739              		#DEBUG_VALUE: nb_elts <- 0+0
 9740              	.Ltmp3166:
 9741              		#DEBUG_VALUE: i <- 0+0
 9742 00de 48C1E220 		shlq	$32, %rdx
 9743 00e2 48B80000 		movabsq	$281470681743360, %rax  # imm = 0xFFFF00000000
 9743      0000FFFF 
 9743      0000
 9744 00ec 4821C2   		andq	%rax, %rdx
 9745 00ef 48B80000 		movabsq	$-281474976710656, %rax # imm = 0xFFFF000000000000
 9745      00000000 
 9745      FFFF
 9746 00f9 4921C5   		andq	%rax, %r13
 9747 00fc 4D09F5   		orq	%r14, %r13
 9748 00ff 4909D5   		orq	%rdx, %r13
 9749 0102 4C896DD0 		movq	%r13, -48(%rbp)
 828:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 9750              		.loc	34 828 2
 9751              	.Ltmp3167:
 9752 0106 488B75A8 		movq	-88(%rbp), %rsi         # /usr/include/c++/4.6.3/bits/stl_vector.h:828:2[ ../lela/vector/spar
 9753 010a 483B75B0 		cmpq	-80(%rbp), %rsi         # /usr/include/c++/4.6.3/bits/stl_vector.h:828:2[ ../lela/vector/spar
 9754 010e 7417     		je	.LBB10_13               # /usr/include/c++/4.6.3/bits/stl_vector.h:828:2[ ../lela/vector/sparse
 9755              	# BB#10:                                #   in Loop: Header=BB10_7 Depth=1
 9756              	.Ltmp3168:
 9757              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9758              	.Ltmp3169:
 9759              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9760              	.Ltmp3170:
 9761              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9762              	.Ltmp3171:
 9763              		#DEBUG_VALUE: nb_elts <- 0+0
 9764              	.Ltmp3172:
 9765              		#DEBUG_VALUE: i <- 0+0
 9766 0110 31C0     		xorl	%eax, %eax
 9767              		.loc	4 108 9
 9768              	.Ltmp3173:
 9769 0112 4885F6   		testq	%rsi, %rsi              # /usr/include/c++/4.6.3/ext/new_allocator.h:108:9[ /usr/include/c++
 9770 0115 7406     		je	.LBB10_12
 9771              	# BB#11:                                #   in Loop: Header=BB10_7 Depth=1
 9772              	.Ltmp3174:
 9773              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9774              	.Ltmp3175:
 9775              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9776              	.Ltmp3176:
 9777              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9778              	.Ltmp3177:
 9779              		#DEBUG_VALUE: nb_elts <- 0+0
 9780              	.Ltmp3178:
 9781              		#DEBUG_VALUE: i <- 0+0
 9782 0117 448936   		movl	%r14d, (%rsi)           # /usr/include/c++/4.6.3/ext/new_allocator.h:108:9[ /usr/include/c++/
 9783 011a 4889F0   		movq	%rsi, %rax
 9784              	.LBB10_12:                              # %_ZN9__gnu_cxx13new_allocatorIjE9constructEPjRKj.exit.i.i
 9785              	                                        #   in Loop: Header=BB10_7 Depth=1
 9786              	.Ltmp3179:
 9787              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9788              	.Ltmp3180:
 9789              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9790              	.Ltmp3181:
 9791              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9792              	.Ltmp3182:
 9793              		#DEBUG_VALUE: nb_elts <- 0+0
 9794              	.Ltmp3183:
 9795              		#DEBUG_VALUE: i <- 0+0
 9796              	.Ltmp3184:
 9797              		.loc	34 831 6
 9798              	.Ltmp3185:
 9799 011d 4883C004 		addq	$4, %rax                # /usr/include/c++/4.6.3/bits/stl_vector.h:831:6[ ../lela/vector/spar
 9800 0121 488945A8 		movq	%rax, -88(%rbp)         # /usr/include/c++/4.6.3/bits/stl_vector.h:831:6[ ../lela/vector/spar
 9801 0125 EB0D     		jmp	.LBB10_14
 9802              	.LBB10_13:                              #   in Loop: Header=BB10_7 Depth=1
 9803              	.Ltmp3081:
 9804              	.Ltmp3186:
 9805              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9806              	.Ltmp3187:
 9807              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9808              	.Ltmp3188:
 9809              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9810              	.Ltmp3189:
 9811              		#DEBUG_VALUE: nb_elts <- 0+0
 9812              	.Ltmp3190:
 9813              		#DEBUG_VALUE: i <- 0+0
 9814 0127 488D7DA0 		leaq	-96(%rbp), %rdi
 9815 012b 488D55D0 		leaq	-48(%rbp), %rdx
 9816 012f E8000000 		callq	_ZNSt6vectorIjSaIjEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPjS1_EERKj
 9816      00
 9817              	.Ltmp3082:
 9818              	.LBB10_14:                              # %_ZNSt6vectorIjSaIjEE9push_backERKj.exit.i
 9819              	                                        #   in Loop: Header=BB10_7 Depth=1
 9820              	.Ltmp3191:
 9821              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9822              	.Ltmp3192:
 9823              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9824              	.Ltmp3193:
 9825              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9826              	.Ltmp3194:
 9827              		#DEBUG_VALUE: nb_elts <- 0+0
 9828              	.Ltmp3195:
 9829              		#DEBUG_VALUE: i <- 0+0
 9830 0134 488B75C0 		movq	-64(%rbp), %rsi
 9831 0138 483B75C8 		cmpq	-56(%rbp), %rsi
 9832 013c 742E     		je	.LBB10_25
 9833 013e E95DFFFF 		jmp	.LBB10_15
 9833      FF
 9834              	.LBB10_18:                              # %.loopexit.loopexit
 9835              	.Ltmp3085:
 9836 0143 EB00     		jmp	.LBB10_20
 9837              	.LBB10_19:                              # %.loopexit_unwind_edge
 9838              	.Ltmp3080:
 9839              	.LBB10_20:                              # %.loopexit_unwind_edge
 9840              	.Ltmp3196:
 9841              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9842              	.Ltmp3197:
 9843              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9844              	.Ltmp3198:
 9845              		#DEBUG_VALUE: nb_elts <- 0+0
 9846              	.Ltmp3199:
 9847              		#DEBUG_VALUE: i <- 0+0
 9848 0145 4889C3   		movq	%rax, %rbx
 9849              	.Ltmp3200:
 9850              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9851              	.Ltmp3201:
 9852              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9853              	.Ltmp3202:
 9854              		#DEBUG_VALUE: nb_elts <- 0+0
 9855              	.Ltmp3203:
 9856              		#DEBUG_VALUE: i <- 0+0
 9857 0148 488B7DB8 		movq	-72(%rbp), %rdi
 9858 014c 4885FF   		testq	%rdi, %rdi
 9859 014f 7405     		je	.LBB10_22
 9860              	# BB#21:
 9861              	.Ltmp3204:
 9862              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9863              	.Ltmp3205:
 9864              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9865              	.Ltmp3206:
 9866              		#DEBUG_VALUE: nb_elts <- 0+0
 9867              	.Ltmp3207:
 9868              		#DEBUG_VALUE: i <- 0+0
 9869 0151 E8000000 		callq	_ZdlPv
 9869      00
 9870              	.LBB10_22:                              # %_ZNSt6vectorItSaItEED1Ev.exit.i.i3
 9871              	.Ltmp3208:
 9872              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9873              	.Ltmp3209:
 9874              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9875              	.Ltmp3210:
 9876              		#DEBUG_VALUE: nb_elts <- 0+0
 9877              	.Ltmp3211:
 9878              		#DEBUG_VALUE: i <- 0+0
 9879 0156 488B7DA0 		movq	-96(%rbp), %rdi
 9880              	.Ltmp3212:
 9881              		#DEBUG_VALUE: _M_deallocate:__p <- RDI+0
 9882 015a 4885FF   		testq	%rdi, %rdi
 9883 015d 7405     		je	.LBB10_24
 9884              	# BB#23:
 9885              	.Ltmp3213:
 9886              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9887              	.Ltmp3214:
 9888              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9889              	.Ltmp3215:
 9890              		#DEBUG_VALUE: nb_elts <- 0+0
 9891              	.Ltmp3216:
 9892              		#DEBUG_VALUE: i <- 0+0
 9893              	.Ltmp3217:
 9894              		#DEBUG_VALUE: _M_deallocate:__p <- RDI+0
 9895              	.Ltmp3218:
 9896              		#DEBUG_VALUE: deallocate:__p <- RDI+0
 9897              	.Ltmp3219:
 9898              		#DEBUG_VALUE: deallocate:__p <- undef
 9899              	.Ltmp3220:
 9900              		#DEBUG_VALUE: _M_deallocate:__p <- undef
 9901 015f E8000000 		callq	_ZdlPv
 9901      00
 9902              	.LBB10_24:                              # %_ZN4LELA12SparseVectorItSt6vectorIjSaIjEES1_ItSaItEEED1E
 9903              	.Ltmp3221:
 9904              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9905              	.Ltmp3222:
 9906              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9907              	.Ltmp3223:
 9908              		#DEBUG_VALUE: nb_elts <- 0+0
 9909              	.Ltmp3224:
 9910              		#DEBUG_VALUE: i <- 0+0
 9911              	.Ltmp3225:
  58:matrix-op.C   **** 	tmp.reserve (nb_elts);
 9912              		.loc	1 58 2
 9913              	.Ltmp3226:
 9914 0164 4889DF   		movq	%rbx, %rdi              # matrix-op.C:58:2
 9915 0167 E8000000 		callq	_Unwind_Resume_or_Rethrow # matrix-op.C:58:2
 9915      00
 9916              	.LBB10_25:                              #   in Loop: Header=BB10_7 Depth=1
 9917              	.Ltmp3083:
 9918              	.Ltmp3227:
 9919              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9920              	.Ltmp3228:
 9921              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9922              	.Ltmp3229:
 9923              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9924              	.Ltmp3230:
 9925              		#DEBUG_VALUE: nb_elts <- 0+0
 9926              	.Ltmp3231:
 9927              		#DEBUG_VALUE: i <- 0+0
 9928 016c 488D7DB8 		leaq	-72(%rbp), %rdi
 411:../lela/vector/sparse.h **** 	inline void            push_back (T v)         { _idx.push_back (v.first); _elt.push_back (v.secon
 9929              		.loc	32 411 51
 9930              	.Ltmp3232:
 9931 0170 488D55D4 		leaq	-44(%rbp), %rdx         # ../lela/vector/sparse.h:411:51[ matrix-op.C:66:4 ]
 9932 0174 E8000000 		callq	_ZNSt6vectorItSaItEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPtS1_EERKt
 9932      00
 9933              	.Ltmp3084:
 9934              	.LBB10_26:                              # %_ZN4LELA12SparseVectorItSt6vectorIjSaIjEES1_ItSaItEEE9pu
 9935              	                                        #   in Loop: Header=BB10_7 Depth=1
 9936              	.Ltmp3233:
 9937              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9938              	.Ltmp3234:
 9939              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:array <- R12+0
 9940              	.Ltmp3235:
 9941              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9942              	.Ltmp3236:
 9943              		#DEBUG_VALUE: nb_elts <- 0+0
 9944              	.Ltmp3237:
 9945              		#DEBUG_VALUE: i <- 0+0
 9946 0179 49FFC6   		incq	%r14
 9947 017c E93BFFFF 		jmp	.LBB10_7
 9947      FF
 9948              	.LBB10_27:
 9949              	.Ltmp3238:
 9950              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 9951              	.Ltmp3239:
 9952              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 9953              	.Ltmp3240:
 9954              		#DEBUG_VALUE: nb_elts <- 0+0
 9955              	.Ltmp3241:
 9956              		#DEBUG_VALUE: i <- 0+0
 9957              	.Ltmp3242:
 9958              		#DEBUG_VALUE: swap:v <- RBX+0
 9959              	.Ltmp3243:
 9960              		#DEBUG_VALUE: swap:__b <- RBX+0
 9961 0181 4C8B33   		movq	(%rbx), %r14
 9962 0184 488B45A0 		movq	-96(%rbp), %rax
 9963              	.Ltmp3244:
 9964              		#DEBUG_VALUE: __tmp <- RAX+0
 9965 0188 4C8975A0 		movq	%r14, -96(%rbp)
 9966 018c 488903   		movq	%rax, (%rbx)
 9967              	.Ltmp3245:
 9968              		#DEBUG_VALUE: __tmp <- undef
 9969 018f 488B4308 		movq	8(%rbx), %rax
 9970 0193 488B4DA8 		movq	-88(%rbp), %rcx
 9971              	.Ltmp3246:
 9972              		#DEBUG_VALUE: __tmp <- RCX+0
 9973 0197 488945A8 		movq	%rax, -88(%rbp)
 9974 019b 48894B08 		movq	%rcx, 8(%rbx)
 9975              	.Ltmp3247:
 9976              		#DEBUG_VALUE: __tmp <- undef
 9977 019f 488B4310 		movq	16(%rbx), %rax
 9978 01a3 488B4DB0 		movq	-80(%rbp), %rcx
 9979              	.Ltmp3248:
 9980              		#DEBUG_VALUE: __tmp <- RCX+0
 9981 01a7 488945B0 		movq	%rax, -80(%rbp)
 9982 01ab 48894B10 		movq	%rcx, 16(%rbx)
 9983              	.Ltmp3249:
 9984              		#DEBUG_VALUE: __tmp <- undef
 9985 01af 488B7B18 		movq	24(%rbx), %rdi
 9986              	.Ltmp3250:
 9987              		#DEBUG_VALUE: __tmp <- RAX+0
 9988 01b3 488B45B8 		movq	-72(%rbp), %rax
 9989 01b7 48897DB8 		movq	%rdi, -72(%rbp)
 9990 01bb 48894318 		movq	%rax, 24(%rbx)
 9991 01bf 488B4320 		movq	32(%rbx), %rax
 9992              	.Ltmp3251:
 9993              		#DEBUG_VALUE: __tmp <- RCX+0
 9994 01c3 488B4DC0 		movq	-64(%rbp), %rcx
 9995 01c7 488945C0 		movq	%rax, -64(%rbp)
 9996 01cb 48894B20 		movq	%rcx, 32(%rbx)
 9997 01cf 4885FF   		testq	%rdi, %rdi
 9998 01d2 488B4328 		movq	40(%rbx), %rax
 9999 01d6 488B4DC8 		movq	-56(%rbp), %rcx
 10000 01da 488945C8 		movq	%rax, -56(%rbp)
 10001 01de 48894B28 		movq	%rcx, 40(%rbx)
 10002              	.Ltmp3252:
 10003              		#DEBUG_VALUE: swap:__b <- undef
 10004              	.Ltmp3253:
 10005              		#DEBUG_VALUE: swap:v <- undef
 10006 01e2 7405     		je	.LBB10_29
 10007              	# BB#28:
 10008              	.Ltmp3254:
 10009              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 10010              	.Ltmp3255:
 10011              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 10012              	.Ltmp3256:
 10013              		#DEBUG_VALUE: nb_elts <- 0+0
 10014              	.Ltmp3257:
 10015              		#DEBUG_VALUE: i <- 0+0
 10016              	.Ltmp3258:
 10017              		#DEBUG_VALUE: __tmp <- RCX+0
 10018 01e4 E8000000 		callq	_ZdlPv
 10018      00
 10019              	.LBB10_29:                              # %_ZNSt6vectorItSaItEED1Ev.exit.i.i
 10020              	.Ltmp3259:
 10021              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 10022              	.Ltmp3260:
 10023              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 10024              	.Ltmp3261:
 10025              		#DEBUG_VALUE: nb_elts <- 0+0
 10026              	.Ltmp3262:
 10027              		#DEBUG_VALUE: i <- 0+0
 10028              	.Ltmp3263:
 10029              		#DEBUG_VALUE: __tmp <- RCX+0
 10030 01e9 4D85F6   		testq	%r14, %r14
 10031              	.Ltmp3264:
 10032              		#DEBUG_VALUE: _M_deallocate:__p <- R14+0
 10033 01ec 7408     		je	.LBB10_31
 10034              	# BB#30:
 10035              	.Ltmp3265:
 10036              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 10037              	.Ltmp3266:
 10038              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 10039              	.Ltmp3267:
 10040              		#DEBUG_VALUE: nb_elts <- 0+0
 10041              	.Ltmp3268:
 10042              		#DEBUG_VALUE: i <- 0+0
 10043              	.Ltmp3269:
 10044              		#DEBUG_VALUE: _M_deallocate:__p <- R14+0
 10045              	.Ltmp3270:
 10046              		#DEBUG_VALUE: deallocate:__p <- R14+0
 10047              	.Ltmp3271:
 10048              		#DEBUG_VALUE: __tmp <- RCX+0
 10049 01ee 4C89F7   		movq	%r14, %rdi
 10050              	.Ltmp3272:
 10051              		#DEBUG_VALUE: deallocate:__p <- undef
 10052              	.Ltmp3273:
 10053              		#DEBUG_VALUE: _M_deallocate:__p <- undef
 10054 01f1 E8000000 		callq	_ZdlPv
 10054      00
 10055              	.Ltmp3274:
 10056              	.LBB10_31:                              # %_ZN4LELA12SparseVectorItSt6vectorIjSaIjEES1_ItSaItEEED1E
  71:matrix-op.C   **** }
 10057              		.loc	1 71 1
 10058              	.Ltmp3275:
 10059 01f6 4883C448 		addq	$72, %rsp               # matrix-op.C:71:1
 10060              	.Ltmp3276:
 10061              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:R <- [%rbp+$-104]+$0
 10062              	.Ltmp3277:
 10063              		#DEBUG_VALUE: copyDenseArrayToSparseVector64:v <- RBX+0
 10064              	.Ltmp3278:
 10065              		#DEBUG_VALUE: nb_elts <- 0+0
 10066              	.Ltmp3279:
 10067              		#DEBUG_VALUE: i <- 0+0
 10068              	.Ltmp3280:
 10069              		#DEBUG_VALUE: __tmp <- RCX+0
 10070 01fa 5B       		popq	%rbx                    # matrix-op.C:71:1
 10071 01fb 415C     		popq	%r12                    # matrix-op.C:71:1
 10072 01fd 415D     		popq	%r13                    # matrix-op.C:71:1
 10073 01ff 415E     		popq	%r14                    # matrix-op.C:71:1
 10074 0201 415F     		popq	%r15                    # matrix-op.C:71:1
 10075 0203 5D       		popq	%rbp                    # matrix-op.C:71:1
 10076 0204 C3       		ret                             # matrix-op.C:71:1
 10077              	.Ltmp3281:
 10078              	.Ltmp3282:
 10080              	.Lfunc_end10:
 10081              	.Leh_func_end10:
 10082              		.section	.gcc_except_table,"a",@progbits
 10083              		.align	4
 10084              	GCC_except_table10:
 10085              	.Lexception10:
 10086 01a8 FF       		.byte	255                     # @LPStart Encoding = omit
 10087 01a9 03       		.byte	3                       # @TType Encoding = udata4
 10088 01aa BC       		.byte	188                     # @TType base offset
 10089 01ab 00       		.zero	1
 10090 01ac 03       		.byte	3                       # Call site Encoding = udata4
 10091 01ad 34       		.byte	52                      # Call site table length
 10092              	.Lset78 = .Ltmp3076-.Leh_func_begin10   # Region start
 10093 01ae 73000000 		.long	.Lset78
 10094              	.Lset79 = .Ltmp3079-.Ltmp3076           # Region length
 10095 01b2 1B000000 		.long	.Lset79
 10096              	.Lset80 = .Ltmp3080-.Leh_func_begin10   # Landing pad
 10097 01b6 45010000 		.long	.Lset80
 10098 01ba 01       		.byte	1                       # Action
 10099              	.Lset81 = .Ltmp3081-.Leh_func_begin10   # Region start
 10100 01bb 27010000 		.long	.Lset81
 10101              	.Lset82 = .Ltmp3082-.Ltmp3081           # Region length
 10102 01bf 0D000000 		.long	.Lset82
 10103              	.Lset83 = .Ltmp3085-.Leh_func_begin10   # Landing pad
 10104 01c3 43010000 		.long	.Lset83
 10105 01c7 01       		.byte	1                       # Action
 10106              	.Lset84 = .Ltmp3082-.Leh_func_begin10   # Region start
 10107 01c8 34010000 		.long	.Lset84
 10108              	.Lset85 = .Ltmp3083-.Ltmp3082           # Region length
 10109 01cc 38000000 		.long	.Lset85
 10110 01d0 00000000 		.long	0                       # Landing pad
 10111 01d4 00       		.byte	0                       # Action
 10112              	.Lset86 = .Ltmp3083-.Leh_func_begin10   # Region start
 10113 01d5 6C010000 		.long	.Lset86
 10114              	.Lset87 = .Ltmp3084-.Ltmp3083           # Region length
 10115 01d9 0D000000 		.long	.Lset87
 10116              	.Lset88 = .Ltmp3085-.Leh_func_begin10   # Landing pad
 10117 01dd 43010000 		.long	.Lset88
 10118 01e1 01       		.byte	1                       # Action
 10119              	                                        # -- Action Record Table --
 10120              	                                        # Action Record
 10121 01e2 01       		.byte	1                       #   TypeInfo index
 10122 01e3 00       		.byte	0                       #   Next action
 10123              	                                        # -- Catch TypeInfos --
 10124 01e4 00000000 		.long	0                       # TypeInfo
 10125              		.align	4
 10126              	
 10127              		.section	.text._ZNSt6vectorItSaItEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPtS1_EERKt,"axG"
 10128              		.weak	_ZNSt6vectorItSaItEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPtS1_EERKt
 10129              		.align	16, 0x90
 10131              	_ZNSt6vectorItSaItEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPtS1_EERKt: # @_ZNSt6vectorItSaI
 10132              	.Leh_func_begin11:
 10133              	.Lfunc_begin11:
   1:/usr/include/c++/4.6.3/bits/vector.tcc **** // Vector implementation (out of line) -*- C++ -*-
   2:/usr/include/c++/4.6.3/bits/vector.tcc **** 
   3:/usr/include/c++/4.6.3/bits/vector.tcc **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
   4:/usr/include/c++/4.6.3/bits/vector.tcc **** // 2011 Free Software Foundation, Inc.
   5:/usr/include/c++/4.6.3/bits/vector.tcc **** //
   6:/usr/include/c++/4.6.3/bits/vector.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/usr/include/c++/4.6.3/bits/vector.tcc **** // software; you can redistribute it and/or modify it under the
   8:/usr/include/c++/4.6.3/bits/vector.tcc **** // terms of the GNU General Public License as published by the
   9:/usr/include/c++/4.6.3/bits/vector.tcc **** // Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/4.6.3/bits/vector.tcc **** // any later version.
  11:/usr/include/c++/4.6.3/bits/vector.tcc **** 
  12:/usr/include/c++/4.6.3/bits/vector.tcc **** // This library is distributed in the hope that it will be useful,
  13:/usr/include/c++/4.6.3/bits/vector.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/4.6.3/bits/vector.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/4.6.3/bits/vector.tcc **** // GNU General Public License for more details.
  16:/usr/include/c++/4.6.3/bits/vector.tcc **** 
  17:/usr/include/c++/4.6.3/bits/vector.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/4.6.3/bits/vector.tcc **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/4.6.3/bits/vector.tcc **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/4.6.3/bits/vector.tcc **** 
  21:/usr/include/c++/4.6.3/bits/vector.tcc **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/4.6.3/bits/vector.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/4.6.3/bits/vector.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/4.6.3/bits/vector.tcc **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/4.6.3/bits/vector.tcc **** 
  26:/usr/include/c++/4.6.3/bits/vector.tcc **** /*
  27:/usr/include/c++/4.6.3/bits/vector.tcc ****  *
  28:/usr/include/c++/4.6.3/bits/vector.tcc ****  * Copyright (c) 1994
  29:/usr/include/c++/4.6.3/bits/vector.tcc ****  * Hewlett-Packard Company
  30:/usr/include/c++/4.6.3/bits/vector.tcc ****  *
  31:/usr/include/c++/4.6.3/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  32:/usr/include/c++/4.6.3/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  33:/usr/include/c++/4.6.3/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  34:/usr/include/c++/4.6.3/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  35:/usr/include/c++/4.6.3/bits/vector.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  36:/usr/include/c++/4.6.3/bits/vector.tcc ****  * representations about the suitability of this software for any
  37:/usr/include/c++/4.6.3/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  38:/usr/include/c++/4.6.3/bits/vector.tcc ****  *
  39:/usr/include/c++/4.6.3/bits/vector.tcc ****  *
  40:/usr/include/c++/4.6.3/bits/vector.tcc ****  * Copyright (c) 1996
  41:/usr/include/c++/4.6.3/bits/vector.tcc ****  * Silicon Graphics Computer Systems, Inc.
  42:/usr/include/c++/4.6.3/bits/vector.tcc ****  *
  43:/usr/include/c++/4.6.3/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  44:/usr/include/c++/4.6.3/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  45:/usr/include/c++/4.6.3/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  46:/usr/include/c++/4.6.3/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  47:/usr/include/c++/4.6.3/bits/vector.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  48:/usr/include/c++/4.6.3/bits/vector.tcc ****  * representations about the suitability of this  software for any
  49:/usr/include/c++/4.6.3/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  50:/usr/include/c++/4.6.3/bits/vector.tcc ****  */
  51:/usr/include/c++/4.6.3/bits/vector.tcc **** 
  52:/usr/include/c++/4.6.3/bits/vector.tcc **** /** @file bits/vector.tcc
  53:/usr/include/c++/4.6.3/bits/vector.tcc ****  *  This is an internal header file, included by other library headers.
  54:/usr/include/c++/4.6.3/bits/vector.tcc ****  *  Do not attempt to use it directly. @headername{vector}
  55:/usr/include/c++/4.6.3/bits/vector.tcc ****  */
  56:/usr/include/c++/4.6.3/bits/vector.tcc **** 
  57:/usr/include/c++/4.6.3/bits/vector.tcc **** #ifndef _VECTOR_TCC
  58:/usr/include/c++/4.6.3/bits/vector.tcc **** #define _VECTOR_TCC 1
  59:/usr/include/c++/4.6.3/bits/vector.tcc **** 
  60:/usr/include/c++/4.6.3/bits/vector.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  61:/usr/include/c++/4.6.3/bits/vector.tcc **** {
  62:/usr/include/c++/4.6.3/bits/vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  63:/usr/include/c++/4.6.3/bits/vector.tcc **** 
  64:/usr/include/c++/4.6.3/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  65:/usr/include/c++/4.6.3/bits/vector.tcc ****     void
  66:/usr/include/c++/4.6.3/bits/vector.tcc ****     vector<_Tp, _Alloc>::
  67:/usr/include/c++/4.6.3/bits/vector.tcc ****     reserve(size_type __n)
  68:/usr/include/c++/4.6.3/bits/vector.tcc ****     {
  69:/usr/include/c++/4.6.3/bits/vector.tcc ****       if (__n > this->max_size())
  70:/usr/include/c++/4.6.3/bits/vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
  71:/usr/include/c++/4.6.3/bits/vector.tcc ****       if (this->capacity() < __n)
  72:/usr/include/c++/4.6.3/bits/vector.tcc **** 	{
  73:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  const size_type __old_size = size();
  74:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  pointer __tmp = _M_allocate_and_copy(__n,
  75:/usr/include/c++/4.6.3/bits/vector.tcc **** 		 _GLIBCXX_MAKE_MOVE_ITERATOR(this->_M_impl._M_start),
  76:/usr/include/c++/4.6.3/bits/vector.tcc **** 		 _GLIBCXX_MAKE_MOVE_ITERATOR(this->_M_impl._M_finish));
  77:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  78:/usr/include/c++/4.6.3/bits/vector.tcc **** 			_M_get_Tp_allocator());
  79:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
  80:/usr/include/c++/4.6.3/bits/vector.tcc **** 			this->_M_impl._M_end_of_storage
  81:/usr/include/c++/4.6.3/bits/vector.tcc **** 			- this->_M_impl._M_start);
  82:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl._M_start = __tmp;
  83:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
  84:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  85:/usr/include/c++/4.6.3/bits/vector.tcc **** 	}
  86:/usr/include/c++/4.6.3/bits/vector.tcc ****     }
  87:/usr/include/c++/4.6.3/bits/vector.tcc **** 
  88:/usr/include/c++/4.6.3/bits/vector.tcc **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
  89:/usr/include/c++/4.6.3/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  90:/usr/include/c++/4.6.3/bits/vector.tcc ****     template<typename... _Args>
  91:/usr/include/c++/4.6.3/bits/vector.tcc ****       void
  92:/usr/include/c++/4.6.3/bits/vector.tcc ****       vector<_Tp, _Alloc>::
  93:/usr/include/c++/4.6.3/bits/vector.tcc ****       emplace_back(_Args&&... __args)
  94:/usr/include/c++/4.6.3/bits/vector.tcc ****       {
  95:/usr/include/c++/4.6.3/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  96:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  {
  97:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    this->_M_impl.construct(this->_M_impl._M_finish,
  98:/usr/include/c++/4.6.3/bits/vector.tcc **** 				    std::forward<_Args>(__args)...);
  99:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 100:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  }
 101:/usr/include/c++/4.6.3/bits/vector.tcc **** 	else
 102:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  _M_insert_aux(end(), std::forward<_Args>(__args)...);
 103:/usr/include/c++/4.6.3/bits/vector.tcc ****       }
 104:/usr/include/c++/4.6.3/bits/vector.tcc **** #endif
 105:/usr/include/c++/4.6.3/bits/vector.tcc **** 
 106:/usr/include/c++/4.6.3/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 107:/usr/include/c++/4.6.3/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 108:/usr/include/c++/4.6.3/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 109:/usr/include/c++/4.6.3/bits/vector.tcc ****     insert(iterator __position, const value_type& __x)
 110:/usr/include/c++/4.6.3/bits/vector.tcc ****     {
 111:/usr/include/c++/4.6.3/bits/vector.tcc ****       const size_type __n = __position - begin();
 112:/usr/include/c++/4.6.3/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
 113:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  && __position == end())
 114:/usr/include/c++/4.6.3/bits/vector.tcc **** 	{
 115:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl.construct(this->_M_impl._M_finish, __x);
 116:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  ++this->_M_impl._M_finish;
 117:/usr/include/c++/4.6.3/bits/vector.tcc **** 	}
 118:/usr/include/c++/4.6.3/bits/vector.tcc ****       else
 119:/usr/include/c++/4.6.3/bits/vector.tcc **** 	{
 120:/usr/include/c++/4.6.3/bits/vector.tcc **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 121:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 122:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    {
 123:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      _Tp __x_copy = __x;
 124:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      _M_insert_aux(__position, std::move(__x_copy));
 125:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    }
 126:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  else
 127:/usr/include/c++/4.6.3/bits/vector.tcc **** #endif
 128:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    _M_insert_aux(__position, __x);
 129:/usr/include/c++/4.6.3/bits/vector.tcc **** 	}
 130:/usr/include/c++/4.6.3/bits/vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 131:/usr/include/c++/4.6.3/bits/vector.tcc ****     }
 132:/usr/include/c++/4.6.3/bits/vector.tcc **** 
 133:/usr/include/c++/4.6.3/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 134:/usr/include/c++/4.6.3/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 135:/usr/include/c++/4.6.3/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 136:/usr/include/c++/4.6.3/bits/vector.tcc ****     erase(iterator __position)
 137:/usr/include/c++/4.6.3/bits/vector.tcc ****     {
 138:/usr/include/c++/4.6.3/bits/vector.tcc ****       if (__position + 1 != end())
 139:/usr/include/c++/4.6.3/bits/vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 140:/usr/include/c++/4.6.3/bits/vector.tcc ****       --this->_M_impl._M_finish;
 141:/usr/include/c++/4.6.3/bits/vector.tcc ****       this->_M_impl.destroy(this->_M_impl._M_finish);
 142:/usr/include/c++/4.6.3/bits/vector.tcc ****       return __position;
 143:/usr/include/c++/4.6.3/bits/vector.tcc ****     }
 144:/usr/include/c++/4.6.3/bits/vector.tcc **** 
 145:/usr/include/c++/4.6.3/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 146:/usr/include/c++/4.6.3/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 147:/usr/include/c++/4.6.3/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 148:/usr/include/c++/4.6.3/bits/vector.tcc ****     erase(iterator __first, iterator __last)
 149:/usr/include/c++/4.6.3/bits/vector.tcc ****     {
 150:/usr/include/c++/4.6.3/bits/vector.tcc ****       if (__first != __last)
 151:/usr/include/c++/4.6.3/bits/vector.tcc **** 	{
 152:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  if (__last != end())
 153:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    _GLIBCXX_MOVE3(__last, end(), __first);
 154:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  _M_erase_at_end(__first.base() + (end() - __last));
 155:/usr/include/c++/4.6.3/bits/vector.tcc **** 	}
 156:/usr/include/c++/4.6.3/bits/vector.tcc ****       return __first;
 157:/usr/include/c++/4.6.3/bits/vector.tcc ****     }
 158:/usr/include/c++/4.6.3/bits/vector.tcc **** 
 159:/usr/include/c++/4.6.3/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 160:/usr/include/c++/4.6.3/bits/vector.tcc ****     vector<_Tp, _Alloc>&
 161:/usr/include/c++/4.6.3/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 162:/usr/include/c++/4.6.3/bits/vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 163:/usr/include/c++/4.6.3/bits/vector.tcc ****     {
 164:/usr/include/c++/4.6.3/bits/vector.tcc ****       if (&__x != this)
 165:/usr/include/c++/4.6.3/bits/vector.tcc **** 	{
 166:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  const size_type __xlen = __x.size();
 167:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  if (__xlen > capacity())
 168:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    {
 169:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 170:/usr/include/c++/4.6.3/bits/vector.tcc **** 						   __x.end());
 171:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 172:/usr/include/c++/4.6.3/bits/vector.tcc **** 			    _M_get_Tp_allocator());
 173:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 174:/usr/include/c++/4.6.3/bits/vector.tcc **** 			    this->_M_impl._M_end_of_storage
 175:/usr/include/c++/4.6.3/bits/vector.tcc **** 			    - this->_M_impl._M_start);
 176:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 177:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 178:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    }
 179:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  else if (size() >= __xlen)
 180:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    {
 181:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 182:/usr/include/c++/4.6.3/bits/vector.tcc **** 			    end(), _M_get_Tp_allocator());
 183:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    }
 184:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  else
 185:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    {
 186:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 187:/usr/include/c++/4.6.3/bits/vector.tcc **** 			this->_M_impl._M_start);
 188:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 189:/usr/include/c++/4.6.3/bits/vector.tcc **** 					  __x._M_impl._M_finish,
 190:/usr/include/c++/4.6.3/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 191:/usr/include/c++/4.6.3/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 192:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    }
 193:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 194:/usr/include/c++/4.6.3/bits/vector.tcc **** 	}
 195:/usr/include/c++/4.6.3/bits/vector.tcc ****       return *this;
 196:/usr/include/c++/4.6.3/bits/vector.tcc ****     }
 197:/usr/include/c++/4.6.3/bits/vector.tcc **** 
 198:/usr/include/c++/4.6.3/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 199:/usr/include/c++/4.6.3/bits/vector.tcc ****     void
 200:/usr/include/c++/4.6.3/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 201:/usr/include/c++/4.6.3/bits/vector.tcc ****     _M_fill_assign(size_t __n, const value_type& __val)
 202:/usr/include/c++/4.6.3/bits/vector.tcc ****     {
 203:/usr/include/c++/4.6.3/bits/vector.tcc ****       if (__n > capacity())
 204:/usr/include/c++/4.6.3/bits/vector.tcc **** 	{
 205:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  vector __tmp(__n, __val, _M_get_Tp_allocator());
 206:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  __tmp.swap(*this);
 207:/usr/include/c++/4.6.3/bits/vector.tcc **** 	}
 208:/usr/include/c++/4.6.3/bits/vector.tcc ****       else if (__n > size())
 209:/usr/include/c++/4.6.3/bits/vector.tcc **** 	{
 210:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  std::fill(begin(), end(), __val);
 211:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 212:/usr/include/c++/4.6.3/bits/vector.tcc **** 					__n - size(), __val,
 213:/usr/include/c++/4.6.3/bits/vector.tcc **** 					_M_get_Tp_allocator());
 214:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl._M_finish += __n - size();
 215:/usr/include/c++/4.6.3/bits/vector.tcc **** 	}
 216:/usr/include/c++/4.6.3/bits/vector.tcc ****       else
 217:/usr/include/c++/4.6.3/bits/vector.tcc ****         _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
 218:/usr/include/c++/4.6.3/bits/vector.tcc ****     }
 219:/usr/include/c++/4.6.3/bits/vector.tcc **** 
 220:/usr/include/c++/4.6.3/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 221:/usr/include/c++/4.6.3/bits/vector.tcc ****     template<typename _InputIterator>
 222:/usr/include/c++/4.6.3/bits/vector.tcc ****       void
 223:/usr/include/c++/4.6.3/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 224:/usr/include/c++/4.6.3/bits/vector.tcc ****       _M_assign_aux(_InputIterator __first, _InputIterator __last,
 225:/usr/include/c++/4.6.3/bits/vector.tcc **** 		    std::input_iterator_tag)
 226:/usr/include/c++/4.6.3/bits/vector.tcc ****       {
 227:/usr/include/c++/4.6.3/bits/vector.tcc **** 	pointer __cur(this->_M_impl._M_start);
 228:/usr/include/c++/4.6.3/bits/vector.tcc **** 	for (; __first != __last && __cur != this->_M_impl._M_finish;
 229:/usr/include/c++/4.6.3/bits/vector.tcc **** 	     ++__cur, ++__first)
 230:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  *__cur = *__first;
 231:/usr/include/c++/4.6.3/bits/vector.tcc **** 	if (__first == __last)
 232:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  _M_erase_at_end(__cur);
 233:/usr/include/c++/4.6.3/bits/vector.tcc **** 	else
 234:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  insert(end(), __first, __last);
 235:/usr/include/c++/4.6.3/bits/vector.tcc ****       }
 236:/usr/include/c++/4.6.3/bits/vector.tcc **** 
 237:/usr/include/c++/4.6.3/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 238:/usr/include/c++/4.6.3/bits/vector.tcc ****     template<typename _ForwardIterator>
 239:/usr/include/c++/4.6.3/bits/vector.tcc ****       void
 240:/usr/include/c++/4.6.3/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 241:/usr/include/c++/4.6.3/bits/vector.tcc ****       _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 242:/usr/include/c++/4.6.3/bits/vector.tcc **** 		    std::forward_iterator_tag)
 243:/usr/include/c++/4.6.3/bits/vector.tcc ****       {
 244:/usr/include/c++/4.6.3/bits/vector.tcc **** 	const size_type __len = std::distance(__first, __last);
 245:/usr/include/c++/4.6.3/bits/vector.tcc **** 
 246:/usr/include/c++/4.6.3/bits/vector.tcc **** 	if (__len > capacity())
 247:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  {
 248:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 249:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 250:/usr/include/c++/4.6.3/bits/vector.tcc **** 			  _M_get_Tp_allocator());
 251:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    _M_deallocate(this->_M_impl._M_start,
 252:/usr/include/c++/4.6.3/bits/vector.tcc **** 			  this->_M_impl._M_end_of_storage
 253:/usr/include/c++/4.6.3/bits/vector.tcc **** 			  - this->_M_impl._M_start);
 254:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    this->_M_impl._M_start = __tmp;
 255:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 256:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 257:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  }
 258:/usr/include/c++/4.6.3/bits/vector.tcc **** 	else if (size() >= __len)
 259:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 260:/usr/include/c++/4.6.3/bits/vector.tcc **** 	else
 261:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  {
 262:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    _ForwardIterator __mid = __first;
 263:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    std::advance(__mid, size());
 264:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    std::copy(__first, __mid, this->_M_impl._M_start);
 265:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    this->_M_impl._M_finish =
 266:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__mid, __last,
 267:/usr/include/c++/4.6.3/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 268:/usr/include/c++/4.6.3/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 269:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  }
 270:/usr/include/c++/4.6.3/bits/vector.tcc ****       }
 271:/usr/include/c++/4.6.3/bits/vector.tcc **** 
 272:/usr/include/c++/4.6.3/bits/vector.tcc **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 273:/usr/include/c++/4.6.3/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 274:/usr/include/c++/4.6.3/bits/vector.tcc ****     template<typename... _Args>
 275:/usr/include/c++/4.6.3/bits/vector.tcc ****       typename vector<_Tp, _Alloc>::iterator
 276:/usr/include/c++/4.6.3/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 277:/usr/include/c++/4.6.3/bits/vector.tcc ****       emplace(iterator __position, _Args&&... __args)
 278:/usr/include/c++/4.6.3/bits/vector.tcc ****       {
 279:/usr/include/c++/4.6.3/bits/vector.tcc **** 	const size_type __n = __position - begin();
 280:/usr/include/c++/4.6.3/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
 281:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    && __position == end())
 282:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  {
 283:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    this->_M_impl.construct(this->_M_impl._M_finish,
 284:/usr/include/c++/4.6.3/bits/vector.tcc **** 				    std::forward<_Args>(__args)...);
 285:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 286:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  }
 287:/usr/include/c++/4.6.3/bits/vector.tcc **** 	else
 288:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  _M_insert_aux(__position, std::forward<_Args>(__args)...);
 289:/usr/include/c++/4.6.3/bits/vector.tcc **** 	return iterator(this->_M_impl._M_start + __n);
 290:/usr/include/c++/4.6.3/bits/vector.tcc ****       }
 291:/usr/include/c++/4.6.3/bits/vector.tcc **** 
 292:/usr/include/c++/4.6.3/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 293:/usr/include/c++/4.6.3/bits/vector.tcc ****     template<typename... _Args>
 294:/usr/include/c++/4.6.3/bits/vector.tcc ****       void
 295:/usr/include/c++/4.6.3/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 296:/usr/include/c++/4.6.3/bits/vector.tcc ****       _M_insert_aux(iterator __position, _Args&&... __args)
 297:/usr/include/c++/4.6.3/bits/vector.tcc **** #else
 298:/usr/include/c++/4.6.3/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 299:/usr/include/c++/4.6.3/bits/vector.tcc ****     void
 300:/usr/include/c++/4.6.3/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 301:/usr/include/c++/4.6.3/bits/vector.tcc ****     _M_insert_aux(iterator __position, const _Tp& __x)
 302:/usr/include/c++/4.6.3/bits/vector.tcc **** #endif
 303:/usr/include/c++/4.6.3/bits/vector.tcc ****     {
 10134              		.loc	40 303 0
 10135              	.Ltmp3286:
 10136              	# BB#0:
 10137 0000 55       		pushq	%rbp
 10138              	.Ltmp3283:
 10139 0001 4889E5   		movq	%rsp, %rbp
 10140              	.Ltmp3284:
 304:/usr/include/c++/4.6.3/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 10141              		.loc	40 304 7
 10142              	.Ltmp3287:
 10143 0004 4157     		pushq	%r15                    # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 10144 0006 4156     		pushq	%r14                    # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 10145 0008 4155     		pushq	%r13                    # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 10146 000a 4154     		pushq	%r12                    # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 10147 000c 53       		pushq	%rbx                    # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 10148 000d 4883EC18 		subq	$24, %rsp               # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 10149              	.Ltmp3285:                              # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 10150              		#DEBUG_VALUE: _M_insert_aux:this <- RDI+0 # /usr/include/c++/4.6.3/bits/vector.tcc:1230:7
 10151              		#DEBUG_VALUE: _M_insert_aux:__x <- RDX+0 # /usr/include/c++/4.6.3/bits/vector.tcc:1230:60
 10152              		.loc	40 304 7
 10153              	.Ltmp3288:
 10154 0011 488B4F08 		movq	8(%rdi), %rcx           # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 10155 0015 483B4F10 		cmpq	16(%rdi), %rcx          # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 10156 0019 488955C0 		movq	%rdx, -64(%rbp)         # 8-byte Spill
 10157              	.Ltmp3289:
 10158              		#DEBUG_VALUE: _M_insert_aux:__x <- [%rbp+$-64]+$0
 10159 001d 488975D0 		movq	%rsi, -48(%rbp)         # 8-byte Spill
 10160 0021 48897DC8 		movq	%rdi, -56(%rbp)         # 8-byte Spill
 10161              	.Ltmp3290:
 10162              		#DEBUG_VALUE: _M_insert_aux:this <- undef
 10163 0025 7457     		je	.LBB11_6                # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 10164              	# BB#1:
 10165              	.Ltmp3291:
 10166              		#DEBUG_VALUE: _M_insert_aux:__x <- [%rbp+$-64]+$0
 10167 0027 31FF     		xorl	%edi, %edi
 107:/usr/include/c++/4.6.3/ext/new_allocator.h ****       construct(pointer __p, const _Tp& __val) 
 10168              		.loc	4 107 25
 10169              	.Ltmp3292:
 10170              		#DEBUG_VALUE: construct:__p <- RCX+0 # /usr/include/c++/4.6.3/ext/new_allocator.h:107:25[ /usr/inc
 10171              		.loc	4 108 9
 10172              	.Ltmp3293:
 10173 0029 4885C9   		testq	%rcx, %rcx              # /usr/include/c++/4.6.3/ext/new_allocator.h:108:9[ /usr/include/c++
 10174 002c 740F     		je	.LBB11_3
 10175              	# BB#2:
 10176              	.Ltmp3294:
 10177              		#DEBUG_VALUE: _M_insert_aux:__x <- [%rbp+$-64]+$0
 10178              	.Ltmp3295:
 10179              		#DEBUG_VALUE: construct:__p <- RCX+0
 10180 002e 668B41FE 		movw	-2(%rcx), %ax           # /usr/include/c++/4.6.3/ext/new_allocator.h:108:9[ /usr/include/c++/
 10181 0032 668901   		movw	%ax, (%rcx)             # /usr/include/c++/4.6.3/ext/new_allocator.h:108:9[ /usr/include/c++/
 10182              	.Ltmp3296:
 10183              		#DEBUG_VALUE: construct:__p <- undef
 10184 0035 488B7DC8 		movq	-56(%rbp), %rdi         # 8-byte Reload
 10185 0039 488B7F08 		movq	8(%rdi), %rdi
 10186              	.LBB11_3:                               # %_ZN9__gnu_cxx13new_allocatorItE9constructEPtRKt.exit
 10187              	.Ltmp3297:
 10188              		#DEBUG_VALUE: _M_insert_aux:__x <- [%rbp+$-64]+$0
 10189              	.Ltmp3298:
 305:/usr/include/c++/4.6.3/bits/vector.tcc **** 	{
 306:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl.construct(this->_M_impl._M_finish,
 307:/usr/include/c++/4.6.3/bits/vector.tcc **** 				  _GLIBCXX_MOVE(*(this->_M_impl._M_finish
 308:/usr/include/c++/4.6.3/bits/vector.tcc **** 						  - 1)));
 309:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  ++this->_M_impl._M_finish;
 10190              		.loc	40 309 4
 10191              	.Ltmp3299:
 10192 003d 488D4F02 		leaq	2(%rdi), %rcx           # /usr/include/c++/4.6.3/bits/vector.tcc:309:4
 10193 0041 488B45C8 		movq	-56(%rbp), %rax         # /usr/include/c++/4.6.3/bits/vector.tcc:309:4
 10194              	                                        # 8-byte Reload
 10195 0045 48894808 		movq	%rcx, 8(%rax)           # /usr/include/c++/4.6.3/bits/vector.tcc:309:4
 310:/usr/include/c++/4.6.3/bits/vector.tcc **** #ifndef __GXX_EXPERIMENTAL_CXX0X__
 311:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  _Tp __x_copy = __x;
 312:/usr/include/c++/4.6.3/bits/vector.tcc **** #endif
 313:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 10196              		.loc	40 313 4
 10197              	.Ltmp3300:
 10198 0049 488D57FE 		leaq	-2(%rdi), %rdx          # /usr/include/c++/4.6.3/bits/vector.tcc:313:4
 10199              	.Ltmp3301:
 10200              		#DEBUG_VALUE: copy_backward:__last <- undef
   1:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
   3:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
   4:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // 2011 Free Software Foundation, Inc.
   5:/usr/include/c++/4.6.3/bits/stl_algobase.h **** //
   6:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   8:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   9:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // any later version.
  11:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
  12:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  13:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // GNU General Public License for more details.
  16:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
  17:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
  21:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/4.6.3/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
  26:/usr/include/c++/4.6.3/bits/stl_algobase.h **** /*
  27:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  *
  28:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  * Copyright (c) 1994
  29:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  * Hewlett-Packard Company
  30:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  *
  31:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  32:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  33:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  34:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  35:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  36:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  37:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  38:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  *
  39:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  *
  40:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  41:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  42:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  *
  43:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  44:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  45:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  46:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  47:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  48:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  49:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  50:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  */
  51:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
  52:/usr/include/c++/4.6.3/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  53:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  54:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  55:/usr/include/c++/4.6.3/bits/stl_algobase.h ****  */
  56:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
  57:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  58:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  59:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
  60:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #include <bits/c++config.h>
  61:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #include <bits/functexcept.h>
  62:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  63:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #include <ext/type_traits.h>
  64:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  65:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  66:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  67:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  68:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  69:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #include <bits/concept_check.h>
  70:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #include <debug/debug.h>
  71:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap and _GLIBCXX_MOVE
  72:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
  73:/usr/include/c++/4.6.3/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  74:/usr/include/c++/4.6.3/bits/stl_algobase.h **** {
  75:/usr/include/c++/4.6.3/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  76:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
  77:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  78:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  79:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  80:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<bool _BoolType>
  81:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     struct __iter_swap
  82:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
  83:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  84:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         static void
  85:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  86:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         {
  87:/usr/include/c++/4.6.3/bits/stl_algobase.h ****           typedef typename iterator_traits<_ForwardIterator1>::value_type
  88:/usr/include/c++/4.6.3/bits/stl_algobase.h ****             _ValueType1;
  89:/usr/include/c++/4.6.3/bits/stl_algobase.h ****           _ValueType1 __tmp = _GLIBCXX_MOVE(*__a);
  90:/usr/include/c++/4.6.3/bits/stl_algobase.h ****           *__a = _GLIBCXX_MOVE(*__b);
  91:/usr/include/c++/4.6.3/bits/stl_algobase.h ****           *__b = _GLIBCXX_MOVE(__tmp);
  92:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	}
  93:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     };
  94:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
  95:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<>
  96:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     struct __iter_swap<true>
  97:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
  98:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  99:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         static void 
 100:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 101:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         {
 102:/usr/include/c++/4.6.3/bits/stl_algobase.h ****           swap(*__a, *__b);
 103:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         }
 104:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     };
 105:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 106:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   /**
 107:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 108:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 109:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  a  An iterator.
 110:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  b  Another iterator.
 111:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @return   Nothing.
 112:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *
 113:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 114:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  iterators themselves.
 115:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   */
 116:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 117:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     inline void
 118:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 119:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 120:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 121:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	_ValueType1;
 122:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 123:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	_ValueType2;
 124:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 125:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       // concept requirements
 126:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 127:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 128:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 129:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 130:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 131:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 				  _ValueType2>)
 132:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 133:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 				  _ValueType1>)
 134:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 135:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 136:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	_ReferenceType1;
 137:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 138:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	_ReferenceType2;
 139:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 140:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 141:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 142:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 143:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     }
 144:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 145:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   /**
 146:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 147:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 148:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  first1  A forward iterator.
 149:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  last1   A forward iterator.
 150:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  first2  A forward iterator.
 151:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 152:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *
 153:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 154:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 155:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  The ranges must not overlap.
 156:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   */
 157:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 158:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     _ForwardIterator2
 159:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 160:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 161:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 162:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       // concept requirements
 163:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 164:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 165:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 166:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 167:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 168:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 169:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, ++__first2)
 170:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 171:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       return __first2;
 172:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     }
 173:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 174:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   /**
 175:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 176:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 177:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  a  A thing of arbitrary type.
 178:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  b  Another thing of arbitrary type.
 179:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 180:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *
 181:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 182:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 183:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  preprocessor macro.
 184:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   */
 185:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<typename _Tp>
 186:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     inline const _Tp&
 187:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 188:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 189:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       // concept requirements
 190:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 191:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 192:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       if (__b < __a)
 193:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	return __b;
 194:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       return __a;
 195:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     }
 196:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 197:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   /**
 198:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 199:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 200:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  a  A thing of arbitrary type.
 201:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  b  Another thing of arbitrary type.
 202:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 203:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *
 204:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 205:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 206:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  preprocessor macro.
 207:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   */
 208:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<typename _Tp>
 209:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     inline const _Tp&
 210:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 211:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 212:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       // concept requirements
 213:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 214:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 215:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       if (__a < __b)
 216:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	return __b;
 217:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       return __a;
 218:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     }
 219:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 220:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   /**
 221:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 222:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 223:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  a  A thing of arbitrary type.
 224:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  b  Another thing of arbitrary type.
 225:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  comp  A @link comparison_functors comparison functor@endlink.
 226:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 227:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *
 228:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 229:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 230:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   */
 231:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 232:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     inline const _Tp&
 233:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 234:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 235:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 236:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       if (__comp(__b, __a))
 237:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	return __b;
 238:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       return __a;
 239:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     }
 240:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 241:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   /**
 242:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 243:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 244:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  a  A thing of arbitrary type.
 245:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  b  Another thing of arbitrary type.
 246:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  comp  A @link comparison_functors comparison functor@endlink.
 247:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 248:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *
 249:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 250:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 251:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   */
 252:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 253:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     inline const _Tp&
 254:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 255:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 256:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 257:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       if (__comp(__a, __b))
 258:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	return __b;
 259:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       return __a;
 260:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     }
 261:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 262:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   // If _Iterator is a __normal_iterator return its base (a plain pointer,
 263:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   // normally) otherwise return it untouched.  See copy, fill, ... 
 264:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<typename _Iterator>
 265:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     struct _Niter_base
 266:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
 267:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     { };
 268:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 269:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<typename _Iterator>
 270:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     inline typename _Niter_base<_Iterator>::iterator_type
 271:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 272:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     { return std::_Niter_base<_Iterator>::_S_base(__it); }
 273:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 274:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   // Likewise, for move_iterator.
 275:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<typename _Iterator>
 276:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     struct _Miter_base
 277:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
 278:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     { };
 279:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 280:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<typename _Iterator>
 281:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     inline typename _Miter_base<_Iterator>::iterator_type
 282:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __miter_base(_Iterator __it)
 283:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     { return std::_Miter_base<_Iterator>::_S_base(__it); }
 284:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 285:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 286:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 287:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 288:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 289:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   // a for loop with an explicit count.
 290:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 291:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<bool, bool, typename>
 292:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     struct __copy_move
 293:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 294:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 295:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         static _OI
 296:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 297:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         {
 298:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, ++__first)
 299:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	    *__result = *__first;
 300:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  return __result;
 301:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	}
 302:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     };
 303:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 304:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 305:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<typename _Category>
 306:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     struct __copy_move<true, false, _Category>
 307:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 308:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 309:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         static _OI
 310:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 311:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         {
 312:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, ++__first)
 313:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	    *__result = std::move(*__first);
 314:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  return __result;
 315:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	}
 316:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     };
 317:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #endif
 318:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 319:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<>
 320:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 321:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 322:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 323:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         static _OI
 324:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 325:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         { 
 326:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 327:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 328:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	    {
 329:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	      *__result = *__first;
 330:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	      ++__first;
 331:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	      ++__result;
 332:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	    }
 333:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  return __result;
 334:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	}
 335:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     };
 336:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 337:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 338:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<>
 339:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 340:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 341:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 342:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         static _OI
 343:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 344:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         { 
 345:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 346:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 347:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	    {
 348:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	      *__result = std::move(*__first);
 349:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	      ++__first;
 350:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	      ++__result;
 351:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	    }
 352:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  return __result;
 353:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	}
 354:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     };
 355:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #endif
 356:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 357:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<bool _IsMove>
 358:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 359:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 360:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       template<typename _Tp>
 361:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         static _Tp*
 362:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 363:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         {
 364:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 365:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  if (_Num)
 366:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 367:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  return __result + _Num;
 368:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	}
 369:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     };
 370:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 371:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 372:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     inline _OI
 373:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 374:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 375:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::value_type _ValueTypeI;
 376:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
 377:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 378:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       const bool __simple = (__is_trivial(_ValueTypeI)
 379:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	                     && __is_pointer<_II>::__value
 380:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	                     && __is_pointer<_OI>::__value
 381:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 382:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 383:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       return std::__copy_move<_IsMove, __simple,
 384:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	                      _Category>::__copy_m(__first, __last, __result);
 385:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     }
 386:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 387:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 388:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 389:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<typename _CharT>
 390:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     struct char_traits;
 391:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 392:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 393:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     class istreambuf_iterator;
 394:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 395:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 396:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     class ostreambuf_iterator;
 397:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 398:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 399:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
 400:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 401:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 402:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 403:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 404:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 405:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
 406:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 407:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 408:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 409:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 410:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 411:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 412:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 				    _CharT*>::__type
 413:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 414:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 415:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 416:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 417:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     inline _OI
 418:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 419:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 420:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 421:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 					     std::__niter_base(__last),
 422:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 					     std::__niter_base(__result)));
 423:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     }
 424:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 425:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   /**
 426:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 427:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 428:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  first  An input iterator.
 429:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  last   An input iterator.
 430:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  result An output iterator.
 431:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @return   result + (first - last)
 432:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *
 433:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 434:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 435:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 436:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 437:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 438:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *
 439:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 440:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  within [first,last).
 441:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   */
 442:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 443:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     inline _OI
 444:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 445:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 446:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       // concept requirements
 447:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 448:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 449:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 450:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 451:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 452:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
 453:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	      (std::__miter_base(__first), std::__miter_base(__last),
 454:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	       __result));
 455:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     }
 456:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 457:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 458:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   /**
 459:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 460:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 461:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  first  An input iterator.
 462:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  last   An input iterator.
 463:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  result An output iterator.
 464:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @return   result + (first - last)
 465:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *
 466:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 467:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 468:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 469:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 470:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 471:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *
 472:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 473:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  within [first,last).
 474:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   */
 475:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 476:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     inline _OI
 477:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 478:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 479:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       // concept requirements
 480:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 481:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 482:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 483:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 484:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 485:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       return std::__copy_move_a2<true>(std::__miter_base(__first),
 486:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 				       std::__miter_base(__last), __result);
 487:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     }
 488:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 489:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 490:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #else
 491:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
 492:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #endif
 493:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 494:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<bool, bool, typename>
 495:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     struct __copy_move_backward
 496:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 497:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 498:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         static _BI2
 499:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 500:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         {
 501:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  while (__first != __last)
 502:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	    *--__result = *--__last;
 503:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  return __result;
 504:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	}
 505:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     };
 506:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 507:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 508:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<typename _Category>
 509:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 510:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 511:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 512:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         static _BI2
 513:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 514:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         {
 515:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  while (__first != __last)
 516:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 517:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  return __result;
 518:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	}
 519:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     };
 520:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #endif
 521:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 522:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<>
 523:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 524:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 525:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 526:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         static _BI2
 527:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 528:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         {
 529:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type __n;
 530:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  for (__n = __last - __first; __n > 0; --__n)
 531:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	    *--__result = *--__last;
 532:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  return __result;
 533:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	}
 534:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     };
 535:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 536:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 537:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<>
 538:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 539:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 540:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 541:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         static _BI2
 542:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 543:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         {
 544:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type __n;
 545:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  for (__n = __last - __first; __n > 0; --__n)
 546:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 547:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  return __result;
 548:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	}
 549:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     };
 550:/usr/include/c++/4.6.3/bits/stl_algobase.h **** #endif
 551:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 552:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<bool _IsMove>
 553:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 554:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 555:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       template<typename _Tp>
 556:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         static _Tp*
 557:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 558:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         {
 559:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 560:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  if (_Num)
 561:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 562:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  return __result - _Num;
 563:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	}
 564:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     };
 565:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 566:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 567:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     inline _BI2
 568:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 569:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 570:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI1>::value_type _ValueType1;
 571:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI2>::value_type _ValueType2;
 572:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI1>::iterator_category _Category;
 573:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       const bool __simple = (__is_trivial(_ValueType1)
 574:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	                     && __is_pointer<_BI1>::__value
 575:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	                     && __is_pointer<_BI2>::__value
 576:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 			     && __are_same<_ValueType1, _ValueType2>::__value);
 577:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 578:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       return std::__copy_move_backward<_IsMove, __simple,
 579:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	                               _Category>::__copy_move_b(__first,
 580:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 								 __last,
 581:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 								 __result);
 582:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     }
 583:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 584:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 585:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     inline _BI2
 586:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 587:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     {
 588:/usr/include/c++/4.6.3/bits/stl_algobase.h ****       return _BI2(std::__copy_move_backward_a<_IsMove>
 589:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 		  (std::__niter_base(__first), std::__niter_base(__last),
 590:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 		   std::__niter_base(__result)));
 591:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     }
 592:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 
 593:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   /**
 594:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 595:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 596:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  first  A bidirectional iterator.
 597:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  last   A bidirectional iterator.
 598:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @param  result A bidirectional iterator.
 599:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  @return   result - (first - last)
 600:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *
 601:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  The function has the same effect as copy, but starts at the end of the
 602:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 603:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 604:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 605:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 606:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 607:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *
 608:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  Result may not be in the range [first,last).  Use copy instead.  Note
 609:/usr/include/c++/4.6.3/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 610:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   */
 611:/usr/include/c++/4.6.3/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 612:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     inline _BI2
 613:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 10201              		.loc	19 613 38
 10202              	.Ltmp3302:
 10203              		#DEBUG_VALUE: copy_backward:__last <- RDX+0 # /usr/include/c++/4.6.3/bits/stl_algobase.h:613:38[ /
 10204              		.loc	19 613 51
 10205              	.Ltmp3303:
 10206              		#DEBUG_VALUE: copy_backward:__result <- RDI+0 # /usr/include/c++/4.6.3/bits/stl_algobase.h:613:51[
 10207              	.Ltmp3304:
 10208              		#DEBUG_VALUE: __miter_base:__it <- undef
 282:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __miter_base(_Iterator __it)
 10209              		.loc	19 282 28
 10210              	.Ltmp3305:
 10211              		#DEBUG_VALUE: __miter_base:__it <- RDX+0 # /usr/include/c++/4.6.3/bits/stl_algobase.h:282:28[ /usr
 10212              	.Ltmp3306:
 10213              		#DEBUG_VALUE: __copy_move_backward_a2:__last <- undef
 586:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 10214              		.loc	19 586 48
 10215              	.Ltmp3307:
 10216              		#DEBUG_VALUE: __copy_move_backward_a2:__last <- RDX+0 # /usr/include/c++/4.6.3/bits/stl_algobase.h
 586:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 10217              		.loc	19 586 61
 10218              	.Ltmp3308:
 10219              		#DEBUG_VALUE: __copy_move_backward_a2:__result <- RDI+0 # /usr/include/c++/4.6.3/bits/stl_algobase
 271:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 10220              		.loc	19 271 28
 10221              	.Ltmp3309:
 10222              		#DEBUG_VALUE: __niter_base:__it <- RDI+0 # /usr/include/c++/4.6.3/bits/stl_algobase.h:271:28[ /usr
   1:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // Types used in iterator implementation -*- C++ -*-
   2:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
   3:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
   4:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // Free Software Foundation, Inc.
   5:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** //
   6:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // software; you can redistribute it and/or modify it under the
   8:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // terms of the GNU General Public License as published by the
   9:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // any later version.
  11:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
  12:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // This library is distributed in the hope that it will be useful,
  13:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // GNU General Public License for more details.
  16:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
  17:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
  21:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
  26:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** /*
  27:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  *
  28:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  * Copyright (c) 1994
  29:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  * Hewlett-Packard Company
  30:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  *
  31:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  * Permission to use, copy, modify, distribute and sell this software
  32:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  * and its documentation for any purpose is hereby granted without fee,
  33:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  * provided that the above copyright notice appear in all copies and
  34:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  * that both that copyright notice and this permission notice appear
  35:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  36:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  * representations about the suitability of this software for any
  37:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  38:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  *
  39:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  *
  40:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  * Copyright (c) 1996-1998
  41:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  * Silicon Graphics Computer Systems, Inc.
  42:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  *
  43:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  * Permission to use, copy, modify, distribute and sell this software
  44:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  * and its documentation for any purpose is hereby granted without fee,
  45:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  * provided that the above copyright notice appear in all copies and
  46:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  * that both that copyright notice and this permission notice appear
  47:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  * in supporting documentation.  Silicon Graphics makes no
  48:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  * representations about the suitability of this software for any
  49:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  50:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  */
  51:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
  52:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** /** @file bits/stl_iterator_base_types.h
  53:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  *  This is an internal header file, included by other library headers.
  54:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  *  Do not attempt to use it directly. @headername{iterator}
  55:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  *
  56:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  *  This file contains all of the general iterator-related utility types,
  57:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  *  such as iterator_traits and struct iterator.
  58:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****  */
  59:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
  60:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** #ifndef _STL_ITERATOR_BASE_TYPES_H
  61:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** #define _STL_ITERATOR_BASE_TYPES_H 1
  62:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
  63:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** #pragma GCC system_header
  64:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
  65:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** #include <bits/c++config.h>
  66:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
  67:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
  68:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** # include <type_traits>  // For _GLIBCXX_HAS_NESTED_TYPE
  69:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** #endif
  70:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
  71:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** namespace std _GLIBCXX_VISIBILITY(default)
  72:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** {
  73:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  74:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
  75:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   /**
  76:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  @defgroup iterators Iterators
  77:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  Abstractions for uniform iterating through various underlying types.
  78:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   */
  79:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   //@{ 
  80:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
  81:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   /**
  82:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  @defgroup iterator_tags Iterator Tags
  83:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  These are empty types, used to distinguish different iterators.  The
  84:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  distinction is not made by what they contain, but simply by what they
  85:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  are.  Different underlying algorithms can then be used based on the
  86:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  different operations supported by different iterator types.
  87:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   */
  88:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   //@{ 
  89:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   ///  Marking input iterators.
  90:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   struct input_iterator_tag { };
  91:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
  92:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   ///  Marking output iterators.
  93:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   struct output_iterator_tag { };
  94:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
  95:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   /// Forward iterators support a superset of input iterator operations.
  96:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   struct forward_iterator_tag : public input_iterator_tag { };
  97:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
  98:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   /// Bidirectional iterators support a superset of forward iterator
  99:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   /// operations.
 100:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   struct bidirectional_iterator_tag : public forward_iterator_tag { };
 101:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
 102:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   /// Random-access iterators support a superset of bidirectional
 103:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   /// iterator operations.
 104:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   struct random_access_iterator_tag : public bidirectional_iterator_tag { };
 105:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   //@}
 106:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
 107:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   /**
 108:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  @brief  Common %iterator class.
 109:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *
 110:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  This class does nothing but define nested typedefs.  %Iterator classes
 111:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  can inherit from this class to save some work.  The typedefs are then
 112:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  used in specializations and overloading.
 113:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *
 114:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  In particular, there are no default implementations of requirements
 115:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  such as @c operator++ and the like.  (How could there be?)
 116:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   */
 117:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
 118:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****            typename _Pointer = _Tp*, typename _Reference = _Tp&>
 119:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     struct iterator
 120:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     {
 121:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       /// One of the @link iterator_tags tag types@endlink.
 122:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef _Category  iterator_category;
 123:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       /// The type "pointed to" by the iterator.
 124:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef _Tp        value_type;
 125:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       /// Distance between iterators is represented as this type.
 126:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef _Distance  difference_type;
 127:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       /// This type represents a pointer-to-value_type.
 128:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef _Pointer   pointer;
 129:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       /// This type represents a reference-to-value_type.
 130:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef _Reference reference;
 131:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     };
 132:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
 133:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   /**
 134:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  @brief  Traits class for iterators.
 135:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *
 136:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  This class does nothing but define nested typedefs.  The general
 137:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  version simply @a forwards the nested typedefs from the Iterator
 138:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  argument.  Specialized versions for pointers and pointers-to-const
 139:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  provide tighter, more correct semantics.
 140:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   */
 141:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 142:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
 143:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** _GLIBCXX_HAS_NESTED_TYPE(iterator_category)
 144:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
 145:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   template<typename _Iterator,
 146:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 	   bool = __has_iterator_category<_Iterator>::value>
 147:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     struct __iterator_traits { };
 148:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
 149:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 150:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     struct __iterator_traits<_Iterator, true>
 151:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     {
 152:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::iterator_category iterator_category;
 153:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::value_type        value_type;
 154:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::difference_type   difference_type;
 155:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::pointer           pointer;
 156:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::reference         reference;
 157:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     };
 158:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
 159:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 160:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     struct iterator_traits
 161:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     : public __iterator_traits<_Iterator> { };
 162:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** #else
 163:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 164:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     struct iterator_traits
 165:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     {
 166:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::iterator_category iterator_category;
 167:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::value_type        value_type;
 168:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::difference_type   difference_type;
 169:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::pointer           pointer;
 170:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::reference         reference;
 171:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     };
 172:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** #endif
 173:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
 174:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   /// Partial specialization for pointer types.
 175:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   template<typename _Tp>
 176:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     struct iterator_traits<_Tp*>
 177:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     {
 178:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef random_access_iterator_tag iterator_category;
 179:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef _Tp                         value_type;
 180:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef ptrdiff_t                   difference_type;
 181:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef _Tp*                        pointer;
 182:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef _Tp&                        reference;
 183:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     };
 184:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
 185:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   /// Partial specialization for const pointer types.
 186:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   template<typename _Tp>
 187:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     struct iterator_traits<const _Tp*>
 188:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     {
 189:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef random_access_iterator_tag iterator_category;
 190:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef _Tp                         value_type;
 191:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef ptrdiff_t                   difference_type;
 192:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef const _Tp*                  pointer;
 193:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef const _Tp&                  reference;
 194:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     };
 195:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
 196:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   /**
 197:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  This function is not a part of the C++ standard but is syntactic
 198:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****    *  sugar for internal library use only.
 199:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   */
 200:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   template<typename _Iter>
 201:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     inline typename iterator_traits<_Iter>::iterator_category
 202:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     __iterator_category(const _Iter&)
 203:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     { return typename iterator_traits<_Iter>::iterator_category(); }
 204:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
 205:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   //@}
 206:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h **** 
 207:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   // If _Iterator has a base returns it otherwise _Iterator is returned
 208:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   // untouched
 209:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****   template<typename _Iterator, bool _HasBase>
 210:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     struct _Iter_base
 211:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****     {
 212:/usr/include/c++/4.6.3/bits/stl_iterator_base_types.h ****       typedef _Iterator iterator_type;
 10223              		.loc	42 212 46
 10224              	.Ltmp3310:
 10225              		#DEBUG_VALUE: _S_base:__it <- RDI+0 # /usr/include/c++/4.6.3/bits/stl_iterator_base_types.h:212:46
 10226              	.Ltmp3311:
 10227              		#DEBUG_VALUE: __copy_move_backward_a:__last <- undef
 568:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 10228              		.loc	19 568 47
 10229              	.Ltmp3312:
 10230              		#DEBUG_VALUE: __copy_move_backward_a:__last <- RDX+0 # /usr/include/c++/4.6.3/bits/stl_algobase.h:
 568:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 10231              		.loc	19 568 60
 10232              	.Ltmp3313:
 10233              		#DEBUG_VALUE: __copy_move_backward_a:__result <- RDI+0 # /usr/include/c++/4.6.3/bits/stl_algobase.
 576:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 			     && __are_same<_ValueType1, _ValueType2>::__value);
 10234              		.loc	19 576 58
 10235              	.Ltmp3314:
 10236              		#DEBUG_VALUE: __simple <- 1+0   # /usr/include/c++/4.6.3/bits/stl_algobase.h:576:58[ /usr/include/
 10237              	.Ltmp3315:
 10238              		#DEBUG_VALUE: __copy_move_b:__last <- undef
 557:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 10239              		.loc	19 557 54
 10240              	.Ltmp3316:
 10241              		#DEBUG_VALUE: __copy_move_b:__last <- RDX+0 # /usr/include/c++/4.6.3/bits/stl_algobase.h:557:54[ /
 557:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 10242              		.loc	19 557 67
 10243              	.Ltmp3317:
 10244              		#DEBUG_VALUE: __copy_move_b:__result <- RDI+0 # /usr/include/c++/4.6.3/bits/stl_algobase.h:557:67[
 557:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 10245              		.loc	19 557 34
 10246              	.Ltmp3318:
 10247              		#DEBUG_VALUE: __copy_move_b:__first <- [%rbp+$-48]+$0 # /usr/include/c++/4.6.3/bits/stl_algobase.h
 559:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 10248              		.loc	19 559 43
 10249              	.Ltmp3319:
 10250 004d 482B55D0 		subq	-48(%rbp), %rdx         # /usr/include/c++/4.6.3/bits/stl_algobase.h:559:43[ /usr/include/c++
 10251              	                                        # 8-byte Folded Reload
 10252 0051 4889D1   		movq	%rdx, %rcx              # /usr/include/c++/4.6.3/bits/stl_algobase.h:559:43[ /usr/include/c++
 10253 0054 48D1F9   		sarq	%rcx                    # /usr/include/c++/4.6.3/bits/stl_algobase.h:559:43[ /usr/include/c++
 559:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 10254              		.loc	19 559 43
 10255              	.Ltmp3320:
 10256              		#DEBUG_VALUE: _Num <- RCX+0     # /usr/include/c++/4.6.3/bits/stl_algobase.h:559:43[ /usr/include/
 10257 0057 4885C9   		testq	%rcx, %rcx              # /usr/include/c++/4.6.3/bits/stl_algobase.h:559:43[ /usr/include/c+
 10258              	.Ltmp3321:
 311:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  _Tp __x_copy = __x;
 10259              		.loc	40 311 22
 10260              	.Ltmp3322:
 10261 005a 488B45C0 		movq	-64(%rbp), %rax         # /usr/include/c++/4.6.3/bits/vector.tcc:311:22
 10262              	                                        # 8-byte Reload
 10263 005e 0FB718   		movzwl	(%rax), %ebx            # /usr/include/c++/4.6.3/bits/vector.tcc:311:22
 10264              	.Ltmp3323:
 10265              		#DEBUG_VALUE: _M_insert_aux:__x <- undef
 10266 0061 740F     		je	.LBB11_5
 10267              	# BB#4:
 10268              	.Ltmp3324:
 10269              		#DEBUG_VALUE: __copy_move_b:__first <- [%rbp+$-48]+$0
 10270              	.Ltmp3325:
 10271              		#DEBUG_VALUE: __copy_move_b:__result <- RDI+0
 10272              	.Ltmp3326:
 10273              		#DEBUG_VALUE: __simple <- 1+0
 10274              	.Ltmp3327:
 10275              		#DEBUG_VALUE: __copy_move_backward_a:__result <- RDI+0
 10276              	.Ltmp3328:
 10277              		#DEBUG_VALUE: _S_base:__it <- RDI+0
 10278              	.Ltmp3329:
 10279              		#DEBUG_VALUE: __niter_base:__it <- RDI+0
 10280              	.Ltmp3330:
 10281              		#DEBUG_VALUE: __copy_move_backward_a2:__result <- RDI+0
 10282              	.Ltmp3331:
 10283              		#DEBUG_VALUE: copy_backward:__result <- RDI+0
 10284              	.Ltmp3332:
 10285              		#DEBUG_VALUE: _Num <- RCX+0
 10286              	.Ltmp3333:
 10287              		#DEBUG_VALUE: _Num <- undef
 562:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  return __result - _Num;
 10288              		.loc	19 562 4
 10289              	.Ltmp3334:
 10290 0063 4801C9   		addq	%rcx, %rcx              # /usr/include/c++/4.6.3/bits/stl_algobase.h:562:4[ /usr/include/c++/
 10291              	.Ltmp3335:
 10292              		#DEBUG_VALUE: copy_backward:__result <- undef
 10293              	.Ltmp3336:
 10294              		#DEBUG_VALUE: __copy_move_backward_a2:__result <- undef
 10295              	.Ltmp3337:
 10296              		#DEBUG_VALUE: __niter_base:__it <- undef
 10297              	.Ltmp3338:
 10298              		#DEBUG_VALUE: _S_base:__it <- undef
 10299              	.Ltmp3339:
 10300              		#DEBUG_VALUE: __copy_move_backward_a:__result <- undef
 10301              	.Ltmp3340:
 10302              		#DEBUG_VALUE: __copy_move_b:__result <- undef
 10303 0066 4829CF   		subq	%rcx, %rdi              # /usr/include/c++/4.6.3/bits/stl_algobase.h:562:4[ /usr/include/c++/
 561:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 10304              		.loc	19 561 6
 10305              	.Ltmp3341:
 10306 0069 488B75D0 		movq	-48(%rbp), %rsi         # /usr/include/c++/4.6.3/bits/stl_algobase.h:561:6[ /usr/include/c++/
 10307              	                                        # 8-byte Reload
 10308 006d E8000000 		callq	memmove                 # /usr/include/c++/4.6.3/bits/stl_algobase.h:561:6[ /usr/include/c++
 10308      00
 10309              	.LBB11_5:                               # %_ZSt13copy_backwardIPtS0_ET0_T_S2_S1_.exit
 10310              	.Ltmp3342:
 10311              		#DEBUG_VALUE: __copy_move_b:__first <- [%rbp+$-48]+$0
 10312              	.Ltmp3343:
 10313              		#DEBUG_VALUE: __simple <- 1+0
 10314              	.Ltmp3344:
 314:/usr/include/c++/4.6.3/bits/vector.tcc **** 				  this->_M_impl._M_finish - 2,
 315:/usr/include/c++/4.6.3/bits/vector.tcc **** 				  this->_M_impl._M_finish - 1);
 316:/usr/include/c++/4.6.3/bits/vector.tcc **** #ifndef __GXX_EXPERIMENTAL_CXX0X__
 317:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  *__position = __x_copy;
 10315              		.loc	40 317 4
 10316              	.Ltmp3345:
 10317 0072 488B4DD0 		movq	-48(%rbp), %rcx         # /usr/include/c++/4.6.3/bits/vector.tcc:317:4
 10318              	                                        # 8-byte Reload
 10319 0076 668919   		movw	%bx, (%rcx)             # /usr/include/c++/4.6.3/bits/vector.tcc:317:4
 10320              	.Ltmp3346:
 10321              		#DEBUG_VALUE: __copy_move_b:__first <- undef
 10322 0079 E9DA0000 		jmp	.LBB11_18
 10322      00
 10323              	.LBB11_6:                               # %_ZNKSt6vectorItSaItEE12_M_check_lenEmPKc.exit
 10324              	.Ltmp3347:
 10325              		#DEBUG_VALUE: _M_insert_aux:__x <- [%rbp+$-64]+$0
 10326              	.Ltmp3348:
 570:/usr/include/c++/4.6.3/bits/stl_vector.h ****       size() const
 10327              		.loc	34 570 7
 10328              	.Ltmp3349:
 10329              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0 # /usr/include/c++/4.6.3/bits/stl_vector.h:570:7[ /usr/i
 571:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 10330              		.loc	34 571 9
 10331              	.Ltmp3350:
 10332 007e 488B1F   		movq	(%rdi), %rbx            # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ /usr/include/c++/4.
 10333 0081 4829D9   		subq	%rbx, %rcx              # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ /usr/include/c++/4.
 10334 0084 48D1F9   		sarq	%rcx                    # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ /usr/include/c++/4.
 10335 0087 4885C9   		testq	%rcx, %rcx              # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ /usr/include/c++/4
 10336 008a BA010000 		movl	$1, %edx
 10336      00
 10337 008f 480F45D1 		cmovneq	%rcx, %rdx
 463:/usr/include/c++/4.6.3/bits/stl_vector.h ****       begin()
 10338              		.loc	34 463 7
 10339              	.Ltmp3351:
 10340              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0 # /usr/include/c++/4.6.3/bits/stl_vector.h:463:7[ /usr/
 720:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
 10341              		.loc	9 720 42
 10342              	.Ltmp3352:
 10343              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0 # /usr/include/c++/4.6.3/bits/stl_iterator.h
 720:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
 10344              		.loc	9 720 42
 10345              	.Ltmp3353:
 10346              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0 # /usr/include/c++/4.6.3/bits/stl_iterator.h
 10347 0093 31C0     		xorl	%eax, %eax
 318:/usr/include/c++/4.6.3/bits/vector.tcc **** #else
 319:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  *__position = _Tp(std::forward<_Args>(__args)...);
 320:/usr/include/c++/4.6.3/bits/vector.tcc **** #endif
 321:/usr/include/c++/4.6.3/bits/vector.tcc **** 	}
 322:/usr/include/c++/4.6.3/bits/vector.tcc ****       else
 323:/usr/include/c++/4.6.3/bits/vector.tcc **** 	{
 324:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  const size_type __len =
 325:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    _M_check_len(size_type(1), "vector::_M_insert_aux");
 326:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  const size_type __elems_before = __position - begin();
 10348              		.loc	40 326 57
 10349              	.Ltmp3354:
 10350              		#DEBUG_VALUE: __elems_before <- RAX+0 # /usr/include/c++/4.6.3/bits/vector.tcc:326:57
 10351 0095 4801CA   		addq	%rcx, %rdx
 10352              	.Ltmp3355:
 832:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  }
 833:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	else
 834:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  _M_insert_aux(end(), __x);
 835:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
 836:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 837:/usr/include/c++/4.6.3/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 838:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
 839:/usr/include/c++/4.6.3/bits/stl_vector.h ****       push_back(value_type&& __x)
 840:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { emplace_back(std::move(__x)); }
 841:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 842:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename... _Args>
 843:/usr/include/c++/4.6.3/bits/stl_vector.h ****         void
 844:/usr/include/c++/4.6.3/bits/stl_vector.h ****         emplace_back(_Args&&... __args);
 845:/usr/include/c++/4.6.3/bits/stl_vector.h **** #endif
 846:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 847:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 848:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Removes last element.
 849:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 850:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
 851:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 852:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Note that no data is returned, and if the last element's
 853:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
 854:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  called.
 855:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 856:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
 857:/usr/include/c++/4.6.3/bits/stl_vector.h ****       pop_back()
 858:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
 859:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	--this->_M_impl._M_finish;
 860:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	this->_M_impl.destroy(this->_M_impl._M_finish);
 861:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
 862:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 863:/usr/include/c++/4.6.3/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 864:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 865:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
 866:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  position  An iterator into the %vector.
 867:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  args  Arguments.
 868:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 869:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 870:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This function will insert an object of type T constructed
 871:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
 872:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
 873:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  and if it is frequently used the user should consider using
 874:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  std::list.
 875:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 876:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename... _Args>
 877:/usr/include/c++/4.6.3/bits/stl_vector.h ****         iterator
 878:/usr/include/c++/4.6.3/bits/stl_vector.h ****         emplace(iterator __position, _Args&&... __args);
 879:/usr/include/c++/4.6.3/bits/stl_vector.h **** #endif
 880:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 881:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 882:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
 883:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  position  An iterator into the %vector.
 884:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  x  Data to be inserted.
 885:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 886:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 887:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
 888:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
 889:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
 890:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  used the user should consider using std::list.
 891:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 892:/usr/include/c++/4.6.3/bits/stl_vector.h ****       iterator
 893:/usr/include/c++/4.6.3/bits/stl_vector.h ****       insert(iterator __position, const value_type& __x);
 894:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 895:/usr/include/c++/4.6.3/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 896:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 897:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
 898:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  position  An iterator into the %vector.
 899:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  x  Data to be inserted.
 900:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 901:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 902:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This function will insert a copy of the given rvalue before
 903:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
 904:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
 905:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  used the user should consider using std::list.
 906:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 907:/usr/include/c++/4.6.3/bits/stl_vector.h ****       iterator
 908:/usr/include/c++/4.6.3/bits/stl_vector.h ****       insert(iterator __position, value_type&& __x)
 909:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return emplace(__position, std::move(__x)); }
 910:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 911:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 912:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
 913:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  position  An iterator into the %vector.
 914:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  l  An initializer_list.
 915:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 916:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This function will insert copies of the data in the 
 917:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  initializer_list @a l into the %vector before the location
 918:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  specified by @a position.
 919:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 920:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
 921:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
 922:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  consider using std::list.
 923:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 924:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
 925:/usr/include/c++/4.6.3/bits/stl_vector.h ****       insert(iterator __position, initializer_list<value_type> __l)
 926:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { this->insert(__position, __l.begin(), __l.end()); }
 927:/usr/include/c++/4.6.3/bits/stl_vector.h **** #endif
 928:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 929:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 930:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
 931:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  position  An iterator into the %vector.
 932:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  n  Number of elements to be inserted.
 933:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  x  Data to be inserted.
 934:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 935:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
 936:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
 937:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 938:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
 939:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
 940:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  consider using std::list.
 941:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 942:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
 943:/usr/include/c++/4.6.3/bits/stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
 944:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
 945:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 946:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 947:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
 948:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  position  An iterator into the %vector.
 949:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  first  An input iterator.
 950:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  last   An input iterator.
 951:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 952:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
 953:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  [first,last) into the %vector before the location specified
 954:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  by @a pos.
 955:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 956:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
 957:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
 958:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  consider using std::list.
 959:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 960:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename _InputIterator>
 961:/usr/include/c++/4.6.3/bits/stl_vector.h ****         void
 962:/usr/include/c++/4.6.3/bits/stl_vector.h ****         insert(iterator __position, _InputIterator __first,
 963:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	       _InputIterator __last)
 964:/usr/include/c++/4.6.3/bits/stl_vector.h ****         {
 965:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 966:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 967:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
 968:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	}
 969:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 970:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 971:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Remove element at given position.
 972:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  position  Iterator pointing to element to be erased.
 973:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
 974:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 975:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This function will erase the element at the given position and thus
 976:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  shorten the %vector by one.
 977:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 978:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
 979:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
 980:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
 981:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  the element, and that if the element is itself a pointer,
 982:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
 983:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  the pointer is the user's responsibility.
 984:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
 985:/usr/include/c++/4.6.3/bits/stl_vector.h ****       iterator
 986:/usr/include/c++/4.6.3/bits/stl_vector.h ****       erase(iterator __position);
 987:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
 988:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
 989:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Remove a range of elements.
 990:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  first  Iterator pointing to the first element to be erased.
 991:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  last  Iterator pointing to one past the last element to be
 992:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *                erased.
 993:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a last
 994:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *           prior to erasing (or end()).
 995:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 996:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This function will erase the elements in the range [first,last) and
 997:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  shorten the %vector accordingly.
 998:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
 999:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1000:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1001:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1002:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  the elements, and that if the elements themselves are
1003:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1004:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1005:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
1006:/usr/include/c++/4.6.3/bits/stl_vector.h ****       iterator
1007:/usr/include/c++/4.6.3/bits/stl_vector.h ****       erase(iterator __first, iterator __last);
1008:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1009:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
1010:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @brief  Swaps data with another %vector.
1011:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  @param  x  A %vector of the same element and allocator types.
1012:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *
1013:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1014:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1015:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1016:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1017:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
1018:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
1019:/usr/include/c++/4.6.3/bits/stl_vector.h ****       swap(vector& __x)
1020:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
1021:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
1022:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
1023:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	std::swap(this->_M_impl._M_end_of_storage,
1024:/usr/include/c++/4.6.3/bits/stl_vector.h **** 		  __x._M_impl._M_end_of_storage);
1025:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1026:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
1027:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	// 431. Swapping containers with unequal allocators.
1028:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	std::__alloc_swap<_Tp_alloc_type>::_S_do_it(_M_get_Tp_allocator(),
1029:/usr/include/c++/4.6.3/bits/stl_vector.h **** 						    __x._M_get_Tp_allocator());
1030:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
1031:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1032:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
1033:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1034:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1035:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1036:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  the user's responsibility.
1037:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
1038:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
1039:/usr/include/c++/4.6.3/bits/stl_vector.h ****       clear()
1040:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1041:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1042:/usr/include/c++/4.6.3/bits/stl_vector.h ****     protected:
1043:/usr/include/c++/4.6.3/bits/stl_vector.h ****       /**
1044:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1045:/usr/include/c++/4.6.3/bits/stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1046:/usr/include/c++/4.6.3/bits/stl_vector.h ****        */
1047:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename _ForwardIterator>
1048:/usr/include/c++/4.6.3/bits/stl_vector.h ****         pointer
1049:/usr/include/c++/4.6.3/bits/stl_vector.h ****         _M_allocate_and_copy(size_type __n,
1050:/usr/include/c++/4.6.3/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
1051:/usr/include/c++/4.6.3/bits/stl_vector.h ****         {
1052:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1053:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  __try
1054:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	    {
1055:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1056:/usr/include/c++/4.6.3/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
1057:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	      return __result;
1058:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	    }
1059:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  __catch(...)
1060:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	    {
1061:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	      _M_deallocate(__result, __n);
1062:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	      __throw_exception_again;
1063:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	    }
1064:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	}
1065:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1066:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1067:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Internal constructor functions follow.
1068:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1069:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1070:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1071:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1072:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1073:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename _Integer>
1074:/usr/include/c++/4.6.3/bits/stl_vector.h ****         void
1075:/usr/include/c++/4.6.3/bits/stl_vector.h ****         _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1076:/usr/include/c++/4.6.3/bits/stl_vector.h ****         {
1077:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
1078:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1079:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
1080:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1081:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	}
1082:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1083:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1084:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename _InputIterator>
1085:/usr/include/c++/4.6.3/bits/stl_vector.h ****         void
1086:/usr/include/c++/4.6.3/bits/stl_vector.h ****         _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1087:/usr/include/c++/4.6.3/bits/stl_vector.h **** 			       __false_type)
1088:/usr/include/c++/4.6.3/bits/stl_vector.h ****         {
1089:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1090:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	    iterator_category _IterCategory;
1091:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last, _IterCategory());
1092:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	}
1093:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1094:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1095:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename _InputIterator>
1096:/usr/include/c++/4.6.3/bits/stl_vector.h ****         void
1097:/usr/include/c++/4.6.3/bits/stl_vector.h ****         _M_range_initialize(_InputIterator __first,
1098:/usr/include/c++/4.6.3/bits/stl_vector.h **** 			    _InputIterator __last, std::input_iterator_tag)
1099:/usr/include/c++/4.6.3/bits/stl_vector.h ****         {
1100:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  for (; __first != __last; ++__first)
1101:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	    push_back(*__first);
1102:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	}
1103:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1104:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1105:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename _ForwardIterator>
1106:/usr/include/c++/4.6.3/bits/stl_vector.h ****         void
1107:/usr/include/c++/4.6.3/bits/stl_vector.h ****         _M_range_initialize(_ForwardIterator __first,
1108:/usr/include/c++/4.6.3/bits/stl_vector.h **** 			    _ForwardIterator __last, std::forward_iterator_tag)
1109:/usr/include/c++/4.6.3/bits/stl_vector.h ****         {
1110:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
1111:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  this->_M_impl._M_start = this->_M_allocate(__n);
1112:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
1113:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  this->_M_impl._M_finish =
1114:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1115:/usr/include/c++/4.6.3/bits/stl_vector.h **** 					this->_M_impl._M_start,
1116:/usr/include/c++/4.6.3/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1117:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	}
1118:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1119:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1120:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // vector(n,value,a) constructor.
1121:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
1122:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
1123:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
1124:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value, 
1125:/usr/include/c++/4.6.3/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
1126:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
1127:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
1128:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1129:/usr/include/c++/4.6.3/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
1130:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by the vector(n) constructor.
1131:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
1132:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_default_initialize(size_type __n)
1133:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
1134:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	std::__uninitialized_default_n_a(this->_M_impl._M_start, __n, 
1135:/usr/include/c++/4.6.3/bits/stl_vector.h **** 					 _M_get_Tp_allocator());
1136:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
1137:/usr/include/c++/4.6.3/bits/stl_vector.h ****       }
1138:/usr/include/c++/4.6.3/bits/stl_vector.h **** #endif
1139:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1140:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1141:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // assignment work for the range versions.
1142:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1143:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1144:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1145:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1146:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1147:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename _Integer>
1148:/usr/include/c++/4.6.3/bits/stl_vector.h ****         void
1149:/usr/include/c++/4.6.3/bits/stl_vector.h ****         _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1150:/usr/include/c++/4.6.3/bits/stl_vector.h ****         { _M_fill_assign(__n, __val); }
1151:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1152:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1153:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename _InputIterator>
1154:/usr/include/c++/4.6.3/bits/stl_vector.h ****         void
1155:/usr/include/c++/4.6.3/bits/stl_vector.h ****         _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1156:/usr/include/c++/4.6.3/bits/stl_vector.h **** 			   __false_type)
1157:/usr/include/c++/4.6.3/bits/stl_vector.h ****         {
1158:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1159:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	    iterator_category _IterCategory;
1160:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  _M_assign_aux(__first, __last, _IterCategory());
1161:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	}
1162:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1163:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1164:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename _InputIterator>
1165:/usr/include/c++/4.6.3/bits/stl_vector.h ****         void
1166:/usr/include/c++/4.6.3/bits/stl_vector.h ****         _M_assign_aux(_InputIterator __first, _InputIterator __last,
1167:/usr/include/c++/4.6.3/bits/stl_vector.h **** 		      std::input_iterator_tag);
1168:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1169:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1170:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename _ForwardIterator>
1171:/usr/include/c++/4.6.3/bits/stl_vector.h ****         void
1172:/usr/include/c++/4.6.3/bits/stl_vector.h ****         _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1173:/usr/include/c++/4.6.3/bits/stl_vector.h **** 		      std::forward_iterator_tag);
1174:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1175:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by assign(n,t), and the range assign when it turns out
1176:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // to be the same thing.
1177:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
1178:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1179:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1180:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1181:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Internal insert functions follow.
1182:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1183:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1184:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1185:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1186:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1187:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename _Integer>
1188:/usr/include/c++/4.6.3/bits/stl_vector.h ****         void
1189:/usr/include/c++/4.6.3/bits/stl_vector.h ****         _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
1190:/usr/include/c++/4.6.3/bits/stl_vector.h **** 			   __true_type)
1191:/usr/include/c++/4.6.3/bits/stl_vector.h ****         { _M_fill_insert(__pos, __n, __val); }
1192:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1193:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1194:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename _InputIterator>
1195:/usr/include/c++/4.6.3/bits/stl_vector.h ****         void
1196:/usr/include/c++/4.6.3/bits/stl_vector.h ****         _M_insert_dispatch(iterator __pos, _InputIterator __first,
1197:/usr/include/c++/4.6.3/bits/stl_vector.h **** 			   _InputIterator __last, __false_type)
1198:/usr/include/c++/4.6.3/bits/stl_vector.h ****         {
1199:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1200:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	    iterator_category _IterCategory;
1201:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  _M_range_insert(__pos, __first, __last, _IterCategory());
1202:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	}
1203:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1204:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1205:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename _InputIterator>
1206:/usr/include/c++/4.6.3/bits/stl_vector.h ****         void
1207:/usr/include/c++/4.6.3/bits/stl_vector.h ****         _M_range_insert(iterator __pos, _InputIterator __first,
1208:/usr/include/c++/4.6.3/bits/stl_vector.h **** 			_InputIterator __last, std::input_iterator_tag);
1209:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1210:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1211:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename _ForwardIterator>
1212:/usr/include/c++/4.6.3/bits/stl_vector.h ****         void
1213:/usr/include/c++/4.6.3/bits/stl_vector.h ****         _M_range_insert(iterator __pos, _ForwardIterator __first,
1214:/usr/include/c++/4.6.3/bits/stl_vector.h **** 			_ForwardIterator __last, std::forward_iterator_tag);
1215:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1216:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1217:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // the same thing.
1218:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
1219:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1220:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1221:/usr/include/c++/4.6.3/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
1222:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by resize(n).
1223:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
1224:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_default_append(size_type __n);
1225:/usr/include/c++/4.6.3/bits/stl_vector.h **** #endif
1226:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1227:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by insert(p,x)
1228:/usr/include/c++/4.6.3/bits/stl_vector.h **** #ifndef __GXX_EXPERIMENTAL_CXX0X__
1229:/usr/include/c++/4.6.3/bits/stl_vector.h ****       void
1230:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_insert_aux(iterator __position, const value_type& __x);
1231:/usr/include/c++/4.6.3/bits/stl_vector.h **** #else
1232:/usr/include/c++/4.6.3/bits/stl_vector.h ****       template<typename... _Args>
1233:/usr/include/c++/4.6.3/bits/stl_vector.h ****         void
1234:/usr/include/c++/4.6.3/bits/stl_vector.h ****         _M_insert_aux(iterator __position, _Args&&... __args);
1235:/usr/include/c++/4.6.3/bits/stl_vector.h **** #endif
1236:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1237:/usr/include/c++/4.6.3/bits/stl_vector.h ****       // Called by the latter.
1238:/usr/include/c++/4.6.3/bits/stl_vector.h ****       size_type
1239:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_check_len(size_type __n, const char* __s) const
1240:/usr/include/c++/4.6.3/bits/stl_vector.h ****       {
1241:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	if (max_size() - size() < __n)
1242:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
1243:/usr/include/c++/4.6.3/bits/stl_vector.h **** 
1244:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	const size_type __len = size() + std::max(size(), __n);
1245:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 10353              		.loc	34 1245 2
 10354              	.Ltmp3356:
 10355 0098 0F98C1   		sets	%cl                     # /usr/include/c++/4.6.3/bits/stl_vector.h:1245:2[ /usr/include/c++/4
 10356 009b 400F92C6 		setb	%sil
 10357 009f 4008CE   		orb	%cl, %sil
 10358 00a2 49BEFFFF 		movabsq	$9223372036854775807, %r14 # imm = 0x7FFFFFFFFFFFFFFF
 10358      FFFFFFFF 
 10358      FF7F
 10359 00ac 4C0F44F2 		cmoveq	%rdx, %r14
 149:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_allocate(size_t __n)
 10360              		.loc	34 149 26
 10361              	.Ltmp3357:
 10362              		#DEBUG_VALUE: _M_allocate:__n <- R14+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:149:26[ /usr/inc
 325:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    _M_check_len(size_type(1), "vector::_M_insert_aux");
 10363              		.loc	40 325 57
 10364              	.Ltmp3358:
 10365              		#DEBUG_VALUE: __len <- R14+0    # /usr/include/c++/4.6.3/bits/vector.tcc:325:57
 10366 00b0 4D85F6   		testq	%r14, %r14
 10367 00b3 7412     		je	.LBB11_9
 10368              	# BB#7:
 10369              	.Ltmp3359:
 10370              		#DEBUG_VALUE: _M_insert_aux:__x <- [%rbp+$-64]+$0
 10371              	.Ltmp3360:
 10372              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 10373              	.Ltmp3361:
 10374              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10375              	.Ltmp3362:
 10376              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10377              	.Ltmp3363:
 10378              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 10379              	.Ltmp3364:
 10380              		#DEBUG_VALUE: __elems_before <- RAX+0
 10381              	.Ltmp3365:
 10382              		#DEBUG_VALUE: __len <- R14+0
 10383              	.Ltmp3366:
 10384              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 10385              	.Ltmp3367:
  89:/usr/include/c++/4.6.3/ext/new_allocator.h **** 	if (__n > this->max_size())
 10386              		.loc	4 89 2
 10387              	.Ltmp3368:
 10388 00b5 4D85F6   		testq	%r14, %r14              # /usr/include/c++/4.6.3/ext/new_allocator.h:89:2[ /usr/include/c++/
  87:/usr/include/c++/4.6.3/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
 10389              		.loc	4 87 26
 10390              	.Ltmp3369:
 10391              		#DEBUG_VALUE: allocate:__n <- R14+0 # /usr/include/c++/4.6.3/ext/new_allocator.h:87:26[ /usr/inclu
 10392 00b8 0F88A900 		js	.LBB11_19
 10392      0000
 10393              	# BB#8:                                 # %_ZN9__gnu_cxx13new_allocatorItE8allocateEmPKv.exit.i
 10394              	.Ltmp3370:
 10395              		#DEBUG_VALUE: _M_insert_aux:__x <- [%rbp+$-64]+$0
 10396              	.Ltmp3371:
 10397              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 10398              	.Ltmp3372:
 10399              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10400              	.Ltmp3373:
 10401              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10402              	.Ltmp3374:
 10403              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 10404              	.Ltmp3375:
 10405              		#DEBUG_VALUE: __elems_before <- RAX+0
 10406              	.Ltmp3376:
 10407              		#DEBUG_VALUE: __len <- R14+0
 10408              	.Ltmp3377:
 10409              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 10410              	.Ltmp3378:
 10411              		#DEBUG_VALUE: allocate:__n <- R14+0
  92:/usr/include/c++/4.6.3/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 10412              		.loc	4 92 2
 10413              	.Ltmp3379:
 10414 00be 4B8D3C36 		leaq	(%r14,%r14), %rdi       # /usr/include/c++/4.6.3/ext/new_allocator.h:92:2[ /usr/include/c++/4
 10415 00c2 E8000000 		callq	_Znwm                   # /usr/include/c++/4.6.3/ext/new_allocator.h:92:2[ /usr/include/c++/
 10415      00
 10416              	.LBB11_9:                               # %_ZNSt12_Vector_baseItSaItEE11_M_allocateEm.exit
 10417              	.Ltmp3380:
 10418              		#DEBUG_VALUE: _M_insert_aux:__x <- [%rbp+$-64]+$0
 10419              	.Ltmp3381:
 10420              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 10421              	.Ltmp3382:
 10422              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10423              	.Ltmp3383:
 10424              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10425              	.Ltmp3384:
 10426              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 10427              	.Ltmp3385:
 10428              		#DEBUG_VALUE: __elems_before <- RAX+0
 10429              	.Ltmp3386:
 10430              		#DEBUG_VALUE: __len <- R14+0
 10431              	.Ltmp3387:
 10432              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 10433              	.Ltmp3388:
 150:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return __n != 0 ? _M_impl.allocate(__n) : 0; }
 10434              		.loc	34 150 9
 10435              	.Ltmp3389:
 10436 00c7 4989C7   		movq	%rax, %r15              # /usr/include/c++/4.6.3/bits/stl_vector.h:150:9[ /usr/include/c++/4.
 10437              	.Ltmp3390:
 820:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 821:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // Random access iterator requirements
 822:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 823:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 824:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
 825:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 826:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
 827:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 828:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 829:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 830:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 831:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 832:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
 833:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 834:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 835:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 836:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
 837:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 838:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
 839:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 840:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 841:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 842:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
 843:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 844:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
 845:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 846:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 847:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 848:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 849:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 850:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
 851:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 852:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 853:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 854:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
 855:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 856:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
 857:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 858:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 859:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 860:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 861:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 862:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
 863:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 864:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 865:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline bool
 866:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
 867:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 868:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
 869:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 870:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 871:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // According to the resolution of DR179 not only the various comparison
 872:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // operators but also operator- must accept mixed iterator/const_iterator
 873:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   // parameters.
 874:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 875:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 876:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     // DR 685.
 877:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline auto
 878:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
 879:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 880:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     -> decltype(__lhs.base() - __rhs.base())
 881:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #else
 882:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline typename __normal_iterator<_IteratorL, _Container>::difference_type
 883:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
 884:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 885:/usr/include/c++/4.6.3/bits/stl_iterator.h **** #endif
 886:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 887:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 
 888:/usr/include/c++/4.6.3/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 889:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     inline typename __normal_iterator<_Iterator, _Container>::difference_type
 890:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 891:/usr/include/c++/4.6.3/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 892:/usr/include/c++/4.6.3/bits/stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 10438              		.loc	9 892 7
 10439              	.Ltmp3391:
 10440 00ca 488B45D0 		movq	-48(%rbp), %rax         # /usr/include/c++/4.6.3/bits/stl_iterator.h:892:7[ /usr/include/c++/
 10441              	                                        # 8-byte Reload
 10442 00ce 4829D8   		subq	%rbx, %rax              # /usr/include/c++/4.6.3/bits/stl_iterator.h:892:7[ /usr/include/c++/
 10443 00d1 48D1F8   		sarq	%rax                    # /usr/include/c++/4.6.3/bits/stl_iterator.h:892:7[ /usr/include/c++/
 10444              	.Ltmp3392:
 327:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  pointer __new_start(this->_M_allocate(__len));
 328:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  pointer __new_finish(__new_start);
 329:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  __try
 330:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    {
 331:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      // The order of the three operations is dictated by the C++0x
 332:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      // case, where the moves could alter a new element belonging
 333:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      // to the existing vector.  This is an issue only for callers
 334:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      // taking the element by const lvalue ref (see 23.1/13).
 335:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      this->_M_impl.construct(__new_start + __elems_before,
 10445              		.loc	40 335 8
 10446              	.Ltmp3393:
 10447 00d4 4801C0   		addq	%rax, %rax              # /usr/include/c++/4.6.3/bits/vector.tcc:335:8
 328:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  pointer __new_finish(__new_start);
 10448              		.loc	40 328 37
 10449              	.Ltmp3394:
 10450              		#DEBUG_VALUE: __new_finish <- R15+0 # /usr/include/c++/4.6.3/bits/vector.tcc:328:37
 10451              		.loc	40 335 8
 10452              	.Ltmp3395:
 10453 00d7 4C01F8   		addq	%r15, %rax              # /usr/include/c++/4.6.3/bits/vector.tcc:335:8
 10454 00da 740A     		je	.LBB11_11
 10455              	# BB#10:
 10456              	.Ltmp3396:
 10457              		#DEBUG_VALUE: _M_insert_aux:__x <- [%rbp+$-64]+$0
 10458              	.Ltmp3397:
 10459              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 10460              	.Ltmp3398:
 10461              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10462              	.Ltmp3399:
 10463              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10464              	.Ltmp3400:
 10465              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 10466              	.Ltmp3401:
 10467              		#DEBUG_VALUE: __elems_before <- RAX+0
 10468              	.Ltmp3402:
 10469              		#DEBUG_VALUE: __len <- R14+0
 10470              	.Ltmp3403:
 10471              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 10472              	.Ltmp3404:
 10473              		#DEBUG_VALUE: __new_finish <- R15+0
 10474 00dc 488B4DC0 		movq	-64(%rbp), %rcx         # 8-byte Reload
 10475 00e0 668B09   		movw	(%rcx), %cx
 10476              	.Ltmp3405:
 10477              		#DEBUG_VALUE: _M_insert_aux:__x <- undef
 10478 00e3 668908   		movw	%cx, (%rax)
 10479              	.LBB11_11:                              # %_ZN9__gnu_cxx13new_allocatorItE9constructEPtRKt.exit3
 10480              	.Ltmp3406:
 10481              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 10482              	.Ltmp3407:
 10483              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10484              	.Ltmp3408:
 10485              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10486              	.Ltmp3409:
 10487              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 10488              	.Ltmp3410:
 10489              		#DEBUG_VALUE: __elems_before <- RAX+0
 10490              	.Ltmp3411:
 10491              		#DEBUG_VALUE: __len <- R14+0
 10492              	.Ltmp3412:
 10493              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 10494              	.Ltmp3413:
 10495              		#DEBUG_VALUE: __new_finish <- R15+0
 336:/usr/include/c++/4.6.3/bits/vector.tcc **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 337:/usr/include/c++/4.6.3/bits/vector.tcc **** 				      std::forward<_Args>(__args)...);
 338:/usr/include/c++/4.6.3/bits/vector.tcc **** #else
 339:/usr/include/c++/4.6.3/bits/vector.tcc **** 	                              __x);
 340:/usr/include/c++/4.6.3/bits/vector.tcc **** #endif
 341:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      __new_finish = 0;
 342:/usr/include/c++/4.6.3/bits/vector.tcc **** 
 343:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      __new_finish =
 344:/usr/include/c++/4.6.3/bits/vector.tcc **** 		std::__uninitialized_move_a(this->_M_impl._M_start,
 10496              		.loc	40 344 3
 10497              	.Ltmp3414:
 10498 00e6 488B7DC8 		movq	-56(%rbp), %rdi         # /usr/include/c++/4.6.3/bits/vector.tcc:344:3
 10499              	                                        # 8-byte Reload
 10500 00ea 488B1F   		movq	(%rdi), %rbx            # /usr/include/c++/4.6.3/bits/vector.tcc:344:3
 10501              	.Ltmp3415:
 10502              		#DEBUG_VALUE: __uninitialized_move_a:__first <- RBX+0
 10503 00ed 488B55D0 		movq	-48(%rbp), %rdx         # 8-byte Reload
 10504 00f1 4829DA   		subq	%rbx, %rdx
 10505              	.Ltmp3416:
 10506              		#DEBUG_VALUE: __uninitialized_move_a:__last <- [%rbp+$-48]+$0
 10507              	.Ltmp3417:
 10508              		#DEBUG_VALUE: __uninitialized_copy_a:__first <- RBX+0
 10509              	.Ltmp3418:
 10510              		#DEBUG_VALUE: __uninitialized_copy_a:__last <- [%rbp+$-48]+$0
 10511              	.Ltmp3419:
 10512              		#DEBUG_VALUE: uninitialized_copy:__first <- RBX+0
 10513              	.Ltmp3420:
 10514              		#DEBUG_VALUE: uninitialized_copy:__last <- [%rbp+$-48]+$0
 10515              	.Ltmp3421:
 10516              		#DEBUG_VALUE: __uninit_copy:__first <- RBX+0
 10517              	.Ltmp3422:
 10518              		#DEBUG_VALUE: __uninit_copy:__last <- [%rbp+$-48]+$0
 10519              	.Ltmp3423:
 10520              		#DEBUG_VALUE: copy:__first <- RBX+0
 10521              	.Ltmp3424:
 10522              		#DEBUG_VALUE: copy:__last <- [%rbp+$-48]+$0
 10523              	.Ltmp3425:
 10524              		#DEBUG_VALUE: __copy_move_a2:__first <- RBX+0
 10525              	.Ltmp3426:
 10526              		#DEBUG_VALUE: __copy_move_a2:__last <- [%rbp+$-48]+$0
 10527              	.Ltmp3427:
 10528              		#DEBUG_VALUE: __copy_move_a:__first <- RBX+0
 10529              	.Ltmp3428:
 10530              		#DEBUG_VALUE: __copy_move_a:__last <- [%rbp+$-48]+$0
 10531              	.Ltmp3429:
 10532              		#DEBUG_VALUE: __simple <- 1+0
 10533              	.Ltmp3430:
 10534              		#DEBUG_VALUE: __copy_m:__first <- RBX+0
 10535              	.Ltmp3431:
 10536              		#DEBUG_VALUE: __copy_m:__last <- [%rbp+$-48]+$0
 10537              	.Ltmp3432:
 10538              		#DEBUG_VALUE: __miter_base:__it <- [%rbp+$-48]+$0
 10539              	.Ltmp3433:
 10540              		#DEBUG_VALUE: __niter_base:__it <- [%rbp+$-48]+$0
 10541              	.Ltmp3434:
 10542              		#DEBUG_VALUE: _S_base:__it <- [%rbp+$-48]+$0
 10543 00f4 4989D4   		movq	%rdx, %r12
 10544 00f7 49D1FC   		sarq	%r12
 10545              	.Ltmp3435:
 10546              		#DEBUG_VALUE: _Num <- R12+0
 10547 00fa 4D85E4   		testq	%r12, %r12
 10548 00fd 740B     		je	.LBB11_13
 10549              	# BB#12:
 10550              	.Ltmp3436:
 10551              		#DEBUG_VALUE: _S_base:__it <- [%rbp+$-48]+$0
 10552              	.Ltmp3437:
 10553              		#DEBUG_VALUE: __niter_base:__it <- [%rbp+$-48]+$0
 10554              	.Ltmp3438:
 10555              		#DEBUG_VALUE: __miter_base:__it <- [%rbp+$-48]+$0
 10556              	.Ltmp3439:
 10557              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 10558              	.Ltmp3440:
 10559              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10560              	.Ltmp3441:
 10561              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10562              	.Ltmp3442:
 10563              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 10564              	.Ltmp3443:
 10565              		#DEBUG_VALUE: __elems_before <- RAX+0
 10566              	.Ltmp3444:
 10567              		#DEBUG_VALUE: __len <- R14+0
 10568              	.Ltmp3445:
 10569              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 10570              	.Ltmp3446:
 10571              		#DEBUG_VALUE: __new_finish <- R15+0
 10572              	.Ltmp3447:
 10573              		#DEBUG_VALUE: __uninitialized_move_a:__first <- RBX+0
 10574              	.Ltmp3448:
 10575              		#DEBUG_VALUE: __copy_m:__last <- [%rbp+$-48]+$0
 10576              	.Ltmp3449:
 10577              		#DEBUG_VALUE: __copy_m:__first <- RBX+0
 10578              	.Ltmp3450:
 10579              		#DEBUG_VALUE: __simple <- 1+0
 10580              	.Ltmp3451:
 10581              		#DEBUG_VALUE: __copy_move_a:__last <- [%rbp+$-48]+$0
 10582              	.Ltmp3452:
 10583              		#DEBUG_VALUE: __copy_move_a:__first <- RBX+0
 10584              	.Ltmp3453:
 10585              		#DEBUG_VALUE: __copy_move_a2:__last <- [%rbp+$-48]+$0
 10586              	.Ltmp3454:
 10587              		#DEBUG_VALUE: __copy_move_a2:__first <- RBX+0
 10588              	.Ltmp3455:
 10589              		#DEBUG_VALUE: copy:__last <- [%rbp+$-48]+$0
 10590              	.Ltmp3456:
 10591              		#DEBUG_VALUE: copy:__first <- RBX+0
 10592              	.Ltmp3457:
 10593              		#DEBUG_VALUE: __uninit_copy:__last <- [%rbp+$-48]+$0
 10594              	.Ltmp3458:
 10595              		#DEBUG_VALUE: __uninit_copy:__first <- RBX+0
 10596              	.Ltmp3459:
 10597              		#DEBUG_VALUE: uninitialized_copy:__last <- [%rbp+$-48]+$0
 10598              	.Ltmp3460:
 10599              		#DEBUG_VALUE: uninitialized_copy:__first <- RBX+0
 10600              	.Ltmp3461:
 10601              		#DEBUG_VALUE: __uninitialized_copy_a:__last <- [%rbp+$-48]+$0
 10602              	.Ltmp3462:
 10603              		#DEBUG_VALUE: __uninitialized_copy_a:__first <- RBX+0
 10604              	.Ltmp3463:
 10605              		#DEBUG_VALUE: __uninitialized_move_a:__last <- [%rbp+$-48]+$0
 10606              	.Ltmp3464:
 10607              		#DEBUG_VALUE: _Num <- R12+0
 10608 00ff 4C89FF   		movq	%r15, %rdi
 10609 0102 4889DE   		movq	%rbx, %rsi
 10610 0105 E8000000 		callq	memmove
 10610      00
 10611              	.LBB11_13:                              # %_ZN9__gnu_cxx13new_allocatorItE9constructEPtRKt.exit3._c
 10612              	.Ltmp3465:
 10613              		#DEBUG_VALUE: _S_base:__it <- [%rbp+$-48]+$0
 10614              	.Ltmp3466:
 10615              		#DEBUG_VALUE: __niter_base:__it <- [%rbp+$-48]+$0
 10616              	.Ltmp3467:
 10617              		#DEBUG_VALUE: __miter_base:__it <- [%rbp+$-48]+$0
 10618              	.Ltmp3468:
 10619              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 10620              	.Ltmp3469:
 10621              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10622              	.Ltmp3470:
 10623              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10624              	.Ltmp3471:
 10625              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 10626              	.Ltmp3472:
 10627              		#DEBUG_VALUE: __elems_before <- RAX+0
 10628              	.Ltmp3473:
 10629              		#DEBUG_VALUE: __len <- R14+0
 10630              	.Ltmp3474:
 10631              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 10632              	.Ltmp3475:
 10633              		#DEBUG_VALUE: __new_finish <- R15+0
 10634              	.Ltmp3476:
 10635              		#DEBUG_VALUE: __uninitialized_move_a:__first <- RBX+0
 10636              	.Ltmp3477:
 10637              		#DEBUG_VALUE: __copy_m:__last <- [%rbp+$-48]+$0
 10638              	.Ltmp3478:
 10639              		#DEBUG_VALUE: __copy_m:__first <- RBX+0
 10640              	.Ltmp3479:
 10641              		#DEBUG_VALUE: __simple <- 1+0
 10642              	.Ltmp3480:
 10643              		#DEBUG_VALUE: __copy_move_a:__last <- [%rbp+$-48]+$0
 10644              	.Ltmp3481:
 10645              		#DEBUG_VALUE: __copy_move_a:__first <- RBX+0
 10646              	.Ltmp3482:
 10647              		#DEBUG_VALUE: __copy_move_a2:__last <- [%rbp+$-48]+$0
 10648              	.Ltmp3483:
 10649              		#DEBUG_VALUE: __copy_move_a2:__first <- RBX+0
 10650              	.Ltmp3484:
 10651              		#DEBUG_VALUE: copy:__last <- [%rbp+$-48]+$0
 10652              	.Ltmp3485:
 10653              		#DEBUG_VALUE: copy:__first <- RBX+0
 10654              	.Ltmp3486:
 10655              		#DEBUG_VALUE: __uninit_copy:__last <- [%rbp+$-48]+$0
 10656              	.Ltmp3487:
 10657              		#DEBUG_VALUE: __uninit_copy:__first <- RBX+0
 10658              	.Ltmp3488:
 10659              		#DEBUG_VALUE: uninitialized_copy:__last <- [%rbp+$-48]+$0
 10660              	.Ltmp3489:
 10661              		#DEBUG_VALUE: uninitialized_copy:__first <- RBX+0
 10662              	.Ltmp3490:
 10663              		#DEBUG_VALUE: __uninitialized_copy_a:__last <- [%rbp+$-48]+$0
 10664              	.Ltmp3491:
 10665              		#DEBUG_VALUE: __uninitialized_copy_a:__first <- RBX+0
 10666              	.Ltmp3492:
 10667              		#DEBUG_VALUE: __uninitialized_move_a:__last <- [%rbp+$-48]+$0
 10668              	.Ltmp3493:
 10669              		#DEBUG_VALUE: _Num <- R12+0
 345:/usr/include/c++/4.6.3/bits/vector.tcc **** 					    __position.base(), __new_start,
 346:/usr/include/c++/4.6.3/bits/vector.tcc **** 					    _M_get_Tp_allocator());
 347:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      ++__new_finish;
 348:/usr/include/c++/4.6.3/bits/vector.tcc **** 
 349:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      __new_finish =
 350:/usr/include/c++/4.6.3/bits/vector.tcc **** 		std::__uninitialized_move_a(__position.base(),
 10670              		.loc	40 350 3
 10671              	.Ltmp3494:
 10672 010a 488B7DC8 		movq	-56(%rbp), %rdi         # /usr/include/c++/4.6.3/bits/vector.tcc:350:3
 10673              	                                        # 8-byte Reload
 10674 010e 488B5708 		movq	8(%rdi), %rdx           # /usr/include/c++/4.6.3/bits/vector.tcc:350:3
 10675 0112 482B55D0 		subq	-48(%rbp), %rdx         # 8-byte Folded Reload
 10676              	.Ltmp3495:
 10677              		#DEBUG_VALUE: __uninitialized_move_a:__last <- RDX+0
 10678              	.Ltmp3496:
 10679              		#DEBUG_VALUE: __uninitialized_copy_a:__first <- [%rbp+$-48]+$0
 10680              	.Ltmp3497:
 10681              		#DEBUG_VALUE: __uninitialized_copy_a:__last <- RDX+0
 10682              	.Ltmp3498:
 10683              		#DEBUG_VALUE: uninitialized_copy:__first <- [%rbp+$-48]+$0
 10684              	.Ltmp3499:
 10685              		#DEBUG_VALUE: uninitialized_copy:__last <- RDX+0
 10686              	.Ltmp3500:
 10687              		#DEBUG_VALUE: __uninit_copy:__first <- [%rbp+$-48]+$0
 10688              	.Ltmp3501:
 10689              		#DEBUG_VALUE: __uninit_copy:__last <- RDX+0
 10690              	.Ltmp3502:
 10691              		#DEBUG_VALUE: copy:__first <- [%rbp+$-48]+$0
 10692              	.Ltmp3503:
 10693              		#DEBUG_VALUE: copy:__last <- RDX+0
 10694              	.Ltmp3504:
 10695              		#DEBUG_VALUE: __copy_move_a2:__first <- [%rbp+$-48]+$0
 10696              	.Ltmp3505:
 10697              		#DEBUG_VALUE: __copy_move_a2:__last <- RDX+0
 10698              	.Ltmp3506:
 10699              		#DEBUG_VALUE: __copy_move_a:__first <- [%rbp+$-48]+$0
 10700              	.Ltmp3507:
 10701              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 10702              	.Ltmp3508:
 10703              		#DEBUG_VALUE: __copy_m:__first <- [%rbp+$-48]+$0
 10704              	.Ltmp3509:
 10705              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 10706              	.Ltmp3510:
 10707              		#DEBUG_VALUE: __uninitialized_move_a:__first <- [%rbp+$-48]+$0
 10708              	.Ltmp3511:
 10709              		#DEBUG_VALUE: __miter_base:__it <- RDX+0
 10710              	.Ltmp3512:
 10711              		#DEBUG_VALUE: __niter_base:__it <- RDX+0
 10712              	.Ltmp3513:
 10713              		#DEBUG_VALUE: _S_base:__it <- RDX+0
 10714 0116 4989D5   		movq	%rdx, %r13
 10715 0119 49D1FD   		sarq	%r13
 10716              	.Ltmp3514:
 10717              		#DEBUG_VALUE: _Num <- R13+0
 10718 011c 49FFC4   		incq	%r12
 10719 011f 4D85ED   		testq	%r13, %r13
 10720 0122 740D     		je	.LBB11_15
 10721              	# BB#14:
 10722              	.Ltmp3515:
 10723              		#DEBUG_VALUE: _S_base:__it <- RDX+0
 10724              	.Ltmp3516:
 10725              		#DEBUG_VALUE: __niter_base:__it <- RDX+0
 10726              	.Ltmp3517:
 10727              		#DEBUG_VALUE: __miter_base:__it <- RDX+0
 10728              	.Ltmp3518:
 10729              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 10730              	.Ltmp3519:
 10731              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10732              	.Ltmp3520:
 10733              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10734              	.Ltmp3521:
 10735              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 10736              	.Ltmp3522:
 10737              		#DEBUG_VALUE: __elems_before <- RAX+0
 10738              	.Ltmp3523:
 10739              		#DEBUG_VALUE: __len <- R14+0
 10740              	.Ltmp3524:
 10741              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 10742              	.Ltmp3525:
 10743              		#DEBUG_VALUE: __new_finish <- R15+0
 10744              	.Ltmp3526:
 10745              		#DEBUG_VALUE: __uninitialized_move_a:__first <- [%rbp+$-48]+$0
 10746              	.Ltmp3527:
 10747              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 10748              	.Ltmp3528:
 10749              		#DEBUG_VALUE: __copy_m:__first <- [%rbp+$-48]+$0
 10750              	.Ltmp3529:
 10751              		#DEBUG_VALUE: __simple <- 1+0
 10752              	.Ltmp3530:
 10753              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 10754              	.Ltmp3531:
 10755              		#DEBUG_VALUE: __copy_move_a:__first <- [%rbp+$-48]+$0
 10756              	.Ltmp3532:
 10757              		#DEBUG_VALUE: __copy_move_a2:__last <- RDX+0
 10758              	.Ltmp3533:
 10759              		#DEBUG_VALUE: __copy_move_a2:__first <- [%rbp+$-48]+$0
 10760              	.Ltmp3534:
 10761              		#DEBUG_VALUE: copy:__last <- RDX+0
 10762              	.Ltmp3535:
 10763              		#DEBUG_VALUE: copy:__first <- [%rbp+$-48]+$0
 10764              	.Ltmp3536:
 10765              		#DEBUG_VALUE: __uninit_copy:__last <- RDX+0
 10766              	.Ltmp3537:
 10767              		#DEBUG_VALUE: __uninit_copy:__first <- [%rbp+$-48]+$0
 10768              	.Ltmp3538:
 10769              		#DEBUG_VALUE: uninitialized_copy:__last <- RDX+0
 10770              	.Ltmp3539:
 10771              		#DEBUG_VALUE: uninitialized_copy:__first <- [%rbp+$-48]+$0
 10772              	.Ltmp3540:
 10773              		#DEBUG_VALUE: __uninitialized_copy_a:__last <- RDX+0
 10774              	.Ltmp3541:
 10775              		#DEBUG_VALUE: __uninitialized_copy_a:__first <- [%rbp+$-48]+$0
 10776              	.Ltmp3542:
 10777              		#DEBUG_VALUE: __uninitialized_move_a:__last <- RDX+0
 10778              	.Ltmp3543:
 10779              		#DEBUG_VALUE: _Num <- R13+0
 347:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      ++__new_finish;
 10780              		.loc	40 347 8
 10781              	.Ltmp3544:
 10782 0124 4B8D3C67 		leaq	(%r15,%r12,2), %rdi     # /usr/include/c++/4.6.3/bits/vector.tcc:347:8
 10783 0128 488B75D0 		movq	-48(%rbp), %rsi         # 8-byte Reload
 10784              	.Ltmp3545:
 10785              		#DEBUG_VALUE: __uninitialized_copy_a:__first <- undef
 10786              	.Ltmp3546:
 10787              		#DEBUG_VALUE: uninitialized_copy:__first <- undef
 10788              	.Ltmp3547:
 10789              		#DEBUG_VALUE: __uninit_copy:__first <- undef
 10790              	.Ltmp3548:
 10791              		#DEBUG_VALUE: copy:__first <- undef
 10792              	.Ltmp3549:
 10793              		#DEBUG_VALUE: __copy_move_a2:__first <- undef
 10794              	.Ltmp3550:
 10795              		#DEBUG_VALUE: __copy_move_a:__first <- undef
 10796              	.Ltmp3551:
 10797              		#DEBUG_VALUE: __copy_m:__first <- undef
 10798              	.Ltmp3552:
 10799              		#DEBUG_VALUE: __uninitialized_move_a:__first <- undef
 10800 012c E8000000 		callq	memmove
 10800      00
 10801              	.LBB11_15:
 10802              	.Ltmp3553:
 10803              		#DEBUG_VALUE: _S_base:__it <- RDX+0
 10804              	.Ltmp3554:
 10805              		#DEBUG_VALUE: __niter_base:__it <- RDX+0
 10806              	.Ltmp3555:
 10807              		#DEBUG_VALUE: __miter_base:__it <- RDX+0
 10808              	.Ltmp3556:
 10809              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 10810              	.Ltmp3557:
 10811              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10812              	.Ltmp3558:
 10813              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10814              	.Ltmp3559:
 10815              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 10816              	.Ltmp3560:
 10817              		#DEBUG_VALUE: __elems_before <- RAX+0
 10818              	.Ltmp3561:
 10819              		#DEBUG_VALUE: __len <- R14+0
 10820              	.Ltmp3562:
 10821              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 10822              	.Ltmp3563:
 10823              		#DEBUG_VALUE: __new_finish <- RAX+0
 10824              	.Ltmp3564:
 10825              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 10826              	.Ltmp3565:
 10827              		#DEBUG_VALUE: __simple <- 1+0
 10828              	.Ltmp3566:
 10829              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 10830              	.Ltmp3567:
 10831              		#DEBUG_VALUE: __copy_move_a2:__last <- RDX+0
 10832              	.Ltmp3568:
 10833              		#DEBUG_VALUE: copy:__last <- RDX+0
 10834              	.Ltmp3569:
 10835              		#DEBUG_VALUE: __uninit_copy:__last <- RDX+0
 10836              	.Ltmp3570:
 10837              		#DEBUG_VALUE: uninitialized_copy:__last <- RDX+0
 10838              	.Ltmp3571:
 10839              		#DEBUG_VALUE: __uninitialized_copy_a:__last <- RDX+0
 10840              	.Ltmp3572:
 10841              		#DEBUG_VALUE: __uninitialized_move_a:__last <- RDX+0
 10842              	.Ltmp3573:
 10843              		#DEBUG_VALUE: _Num <- R13+0
 10844              	.Ltmp3574:
 153:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)
 10845              		.loc	34 153 54
 10846              	.Ltmp3575:
 10847              		#DEBUG_VALUE: _M_deallocate:__p <- RBX+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:153:54[ /usr/i
 155:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	if (__p)
 10848              		.loc	34 155 2
 10849              	.Ltmp3576:
 10850 0131 4885DB   		testq	%rbx, %rbx              # /usr/include/c++/4.6.3/bits/stl_vector.h:155:2[ /usr/include/c++/4
 10851 0134 7408     		je	.LBB11_17
 10852              	# BB#16:
 10853              	.Ltmp3577:
 10854              		#DEBUG_VALUE: _S_base:__it <- RDX+0
 10855              	.Ltmp3578:
 10856              		#DEBUG_VALUE: __niter_base:__it <- RDX+0
 10857              	.Ltmp3579:
 10858              		#DEBUG_VALUE: __miter_base:__it <- RDX+0
 10859              	.Ltmp3580:
 10860              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 10861              	.Ltmp3581:
 10862              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10863              	.Ltmp3582:
 10864              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10865              	.Ltmp3583:
 10866              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 10867              	.Ltmp3584:
 10868              		#DEBUG_VALUE: __elems_before <- RAX+0
 10869              	.Ltmp3585:
 10870              		#DEBUG_VALUE: __len <- R14+0
 10871              	.Ltmp3586:
 10872              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 10873              	.Ltmp3587:
 10874              		#DEBUG_VALUE: __new_finish <- RAX+0
 10875              	.Ltmp3588:
 10876              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 10877              	.Ltmp3589:
 10878              		#DEBUG_VALUE: __simple <- 1+0
 10879              	.Ltmp3590:
 10880              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 10881              	.Ltmp3591:
 10882              		#DEBUG_VALUE: __copy_move_a2:__last <- RDX+0
 10883              	.Ltmp3592:
 10884              		#DEBUG_VALUE: copy:__last <- RDX+0
 10885              	.Ltmp3593:
 10886              		#DEBUG_VALUE: __uninit_copy:__last <- RDX+0
 10887              	.Ltmp3594:
 10888              		#DEBUG_VALUE: uninitialized_copy:__last <- RDX+0
 10889              	.Ltmp3595:
 10890              		#DEBUG_VALUE: __uninitialized_copy_a:__last <- RDX+0
 10891              	.Ltmp3596:
 10892              		#DEBUG_VALUE: __uninitialized_move_a:__last <- RDX+0
 10893              	.Ltmp3597:
 10894              		#DEBUG_VALUE: _Num <- R13+0
 10895              	.Ltmp3598:
 10896              		#DEBUG_VALUE: _M_deallocate:__p <- RBX+0
  97:/usr/include/c++/4.6.3/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 10897              		.loc	4 97 26
 10898              	.Ltmp3599:
 10899              		#DEBUG_VALUE: deallocate:__p <- RBX+0 # /usr/include/c++/4.6.3/ext/new_allocator.h:97:26[ /usr/inc
  98:/usr/include/c++/4.6.3/ext/new_allocator.h ****       { ::operator delete(__p); }
 10900              		.loc	4 98 9
 10901              	.Ltmp3600:
 10902 0136 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ext/new_allocator.h:98:9[ /usr/include/c++/4
 10903              	.Ltmp3601:
 10904              		#DEBUG_VALUE: deallocate:__p <- undef
 10905              	.Ltmp3602:
 10906              		#DEBUG_VALUE: _M_deallocate:__p <- undef
 10907 0139 E8000000 		callq	_ZdlPv                  # /usr/include/c++/4.6.3/ext/new_allocator.h:98:9[ /usr/include/c++/
 10907      00
 10908              	.LBB11_17:                              # %_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtm.exit1
 10909              	.Ltmp3603:
 10910              		#DEBUG_VALUE: _S_base:__it <- RDX+0
 10911              	.Ltmp3604:
 10912              		#DEBUG_VALUE: __niter_base:__it <- RDX+0
 10913              	.Ltmp3605:
 10914              		#DEBUG_VALUE: __miter_base:__it <- RDX+0
 10915              	.Ltmp3606:
 10916              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 10917              	.Ltmp3607:
 10918              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10919              	.Ltmp3608:
 10920              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 10921              	.Ltmp3609:
 10922              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 10923              	.Ltmp3610:
 10924              		#DEBUG_VALUE: __elems_before <- RAX+0
 10925              	.Ltmp3611:
 10926              		#DEBUG_VALUE: __len <- R14+0
 10927              	.Ltmp3612:
 10928              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 10929              	.Ltmp3613:
 10930              		#DEBUG_VALUE: __new_finish <- RAX+0
 10931              	.Ltmp3614:
 10932              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 10933              	.Ltmp3615:
 10934              		#DEBUG_VALUE: __simple <- 1+0
 10935              	.Ltmp3616:
 10936              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 10937              	.Ltmp3617:
 10938              		#DEBUG_VALUE: __copy_move_a2:__last <- RDX+0
 10939              	.Ltmp3618:
 10940              		#DEBUG_VALUE: copy:__last <- RDX+0
 10941              	.Ltmp3619:
 10942              		#DEBUG_VALUE: __uninit_copy:__last <- RDX+0
 10943              	.Ltmp3620:
 10944              		#DEBUG_VALUE: uninitialized_copy:__last <- RDX+0
 10945              	.Ltmp3621:
 10946              		#DEBUG_VALUE: __uninitialized_copy_a:__last <- RDX+0
 10947              	.Ltmp3622:
 10948              		#DEBUG_VALUE: __uninitialized_move_a:__last <- RDX+0
 10949              	.Ltmp3623:
 10950              		#DEBUG_VALUE: _Num <- R13+0
 10951              	.Ltmp3624:
 10952              		#DEBUG_VALUE: _Num <- undef
 10953 013e 4D01E5   		addq	%r12, %r13
 10954 0141 4B8D046F 		leaq	(%r15,%r13,2), %rax
 10955              	.Ltmp3625:
 351:/usr/include/c++/4.6.3/bits/vector.tcc **** 					    this->_M_impl._M_finish,
 352:/usr/include/c++/4.6.3/bits/vector.tcc **** 					    __new_finish,
 353:/usr/include/c++/4.6.3/bits/vector.tcc **** 					    _M_get_Tp_allocator());
 354:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    }
 355:/usr/include/c++/4.6.3/bits/vector.tcc ****           __catch(...)
 356:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    {
 357:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      if (!__new_finish)
 358:/usr/include/c++/4.6.3/bits/vector.tcc **** 		this->_M_impl.destroy(__new_start + __elems_before);
 359:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      else
 360:/usr/include/c++/4.6.3/bits/vector.tcc **** 		std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 361:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      _M_deallocate(__new_start, __len);
 362:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      __throw_exception_again;
 363:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    }
 364:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 365:/usr/include/c++/4.6.3/bits/vector.tcc **** 			_M_get_Tp_allocator());
 366:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
 367:/usr/include/c++/4.6.3/bits/vector.tcc **** 			this->_M_impl._M_end_of_storage
 368:/usr/include/c++/4.6.3/bits/vector.tcc **** 			- this->_M_impl._M_start);
 369:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl._M_start = __new_start;
 10956              		.loc	40 369 4
 10957              	.Ltmp3626:
 10958 0145 488B7DC8 		movq	-56(%rbp), %rdi         # /usr/include/c++/4.6.3/bits/vector.tcc:369:4
 10959              	                                        # 8-byte Reload
 10960 0149 4C893F   		movq	%r15, (%rdi)            # /usr/include/c++/4.6.3/bits/vector.tcc:369:4
 370:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl._M_finish = __new_finish;
 10961              		.loc	40 370 4
 10962              	.Ltmp3627:
 10963 014c 48894708 		movq	%rax, 8(%rdi)           # /usr/include/c++/4.6.3/bits/vector.tcc:370:4
 371:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = __new_start + __len;
 10964              		.loc	40 371 4
 10965              	.Ltmp3628:
 10966 0150 4B8D0477 		leaq	(%r15,%r14,2), %rax     # /usr/include/c++/4.6.3/bits/vector.tcc:371:4
 10967              	.Ltmp3629:
 10968              		#DEBUG_VALUE: _M_allocate:__n <- undef
 10969              	.Ltmp3630:
 10970              		#DEBUG_VALUE: __len <- undef
 10971 0154 48894710 		movq	%rax, 16(%rdi)          # /usr/include/c++/4.6.3/bits/vector.tcc:371:4
 10972              	.Ltmp3631:
 10973              		#DEBUG_VALUE: begin:this <- undef
 10974              	.Ltmp3632:
 10975              		#DEBUG_VALUE: __normal_iterator:__i <- undef
 10976              	.Ltmp3633:
 10977              		#DEBUG_VALUE: __normal_iterator:__i <- undef
 10978              	.Ltmp3634:
 10979              		#DEBUG_VALUE: size:this <- undef
 10980              	.Ltmp3635:
 10981              	.LBB11_18:
 372:/usr/include/c++/4.6.3/bits/vector.tcc **** 	}
 373:/usr/include/c++/4.6.3/bits/vector.tcc ****     }
 10982              		.loc	40 373 5
 10983              	.Ltmp3636:
 10984 0158 4883C418 		addq	$24, %rsp               # /usr/include/c++/4.6.3/bits/vector.tcc:373:5
 10985 015c 5B       		popq	%rbx                    # /usr/include/c++/4.6.3/bits/vector.tcc:373:5
 10986 015d 415C     		popq	%r12                    # /usr/include/c++/4.6.3/bits/vector.tcc:373:5
 10987 015f 415D     		popq	%r13                    # /usr/include/c++/4.6.3/bits/vector.tcc:373:5
 10988 0161 415E     		popq	%r14                    # /usr/include/c++/4.6.3/bits/vector.tcc:373:5
 10989 0163 415F     		popq	%r15                    # /usr/include/c++/4.6.3/bits/vector.tcc:373:5
 10990 0165 5D       		popq	%rbp                    # /usr/include/c++/4.6.3/bits/vector.tcc:373:5
 10991 0166 C3       		ret                             # /usr/include/c++/4.6.3/bits/vector.tcc:373:5
 10992              	.LBB11_19:
 10993              	.Ltmp3637:
 10994              		#DEBUG_VALUE: __elems_before <- RAX+0
  90:/usr/include/c++/4.6.3/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 10995              		.loc	4 90 4
 10996              	.Ltmp3638:
 10997 0167 E8000000 		callq	_ZSt17__throw_bad_allocv # /usr/include/c++/4.6.3/ext/new_allocator.h:90:4[ /usr/include/c++
 10997      00
 10998              	.Ltmp3639:
 10999              	.Ltmp3640:
 11001              	.Lfunc_end11:
 11002              	.Leh_func_end11:
 11003              	
 11004              		.section	.text._ZNSt6vectorIjSaIjEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPjS1_EERKj,"axG"
 11005              		.weak	_ZNSt6vectorIjSaIjEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPjS1_EERKj
 11006              		.align	16, 0x90
 11008              	_ZNSt6vectorIjSaIjEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPjS1_EERKj: # @_ZNSt6vectorIjSaI
 11009              	.Leh_func_begin12:
 11010              	.Lfunc_begin12:
 303:/usr/include/c++/4.6.3/bits/vector.tcc ****     {
 11011              		.loc	40 303 0
 11012              	.Ltmp3644:
 11013              	# BB#0:
 11014 0000 55       		pushq	%rbp
 11015              	.Ltmp3641:
 11016 0001 4889E5   		movq	%rsp, %rbp
 11017              	.Ltmp3642:
 304:/usr/include/c++/4.6.3/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 11018              		.loc	40 304 7
 11019              	.Ltmp3645:
 11020 0004 4157     		pushq	%r15                    # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 11021 0006 4156     		pushq	%r14                    # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 11022 0008 4155     		pushq	%r13                    # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 11023 000a 4154     		pushq	%r12                    # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 11024 000c 53       		pushq	%rbx                    # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 11025 000d 4883EC18 		subq	$24, %rsp               # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 11026              	.Ltmp3643:                              # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 11027              		#DEBUG_VALUE: _M_insert_aux:this <- RDI+0 # /usr/include/c++/4.6.3/bits/vector.tcc:1230:7
 11028              		#DEBUG_VALUE: _M_insert_aux:__x <- RDX+0 # /usr/include/c++/4.6.3/bits/vector.tcc:1230:60
 304:/usr/include/c++/4.6.3/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 11029              		.loc	40 304 7
 11030              	.Ltmp3646:
 11031 0011 488B4F08 		movq	8(%rdi), %rcx           # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 11032 0015 483B4F10 		cmpq	16(%rdi), %rcx          # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 11033 0019 488955C0 		movq	%rdx, -64(%rbp)         # 8-byte Spill
 11034              	.Ltmp3647:
 11035              		#DEBUG_VALUE: _M_insert_aux:__x <- [%rbp+$-64]+$0
 11036 001d 488975D0 		movq	%rsi, -48(%rbp)         # 8-byte Spill
 11037 0021 48897DC8 		movq	%rdi, -56(%rbp)         # 8-byte Spill
 11038              	.Ltmp3648:
 11039              		#DEBUG_VALUE: _M_insert_aux:this <- undef
 11040 0025 7455     		je	.LBB12_6                # /usr/include/c++/4.6.3/bits/vector.tcc:304:7
 11041              	# BB#1:
 11042              	.Ltmp3649:
 11043              		#DEBUG_VALUE: _M_insert_aux:__x <- [%rbp+$-64]+$0
 11044 0027 31FF     		xorl	%edi, %edi
 107:/usr/include/c++/4.6.3/ext/new_allocator.h ****       construct(pointer __p, const _Tp& __val) 
 11045              		.loc	4 107 25
 11046              	.Ltmp3650:
 11047              		#DEBUG_VALUE: construct:__p <- RCX+0 # /usr/include/c++/4.6.3/ext/new_allocator.h:107:25[ /usr/inc
 11048              		.loc	4 108 9
 11049              	.Ltmp3651:
 11050 0029 4885C9   		testq	%rcx, %rcx              # /usr/include/c++/4.6.3/ext/new_allocator.h:108:9[ /usr/include/c++
 11051 002c 740D     		je	.LBB12_3
 11052              	# BB#2:
 11053              	.Ltmp3652:
 11054              		#DEBUG_VALUE: _M_insert_aux:__x <- [%rbp+$-64]+$0
 11055              	.Ltmp3653:
 11056              		#DEBUG_VALUE: construct:__p <- RCX+0
 11057 002e 8B41FC   		movl	-4(%rcx), %eax          # /usr/include/c++/4.6.3/ext/new_allocator.h:108:9[ /usr/include/c++/
 11058 0031 8901     		movl	%eax, (%rcx)            # /usr/include/c++/4.6.3/ext/new_allocator.h:108:9[ /usr/include/c++/
 11059              	.Ltmp3654:
 11060              		#DEBUG_VALUE: construct:__p <- undef
 11061 0033 488B7DC8 		movq	-56(%rbp), %rdi         # 8-byte Reload
 11062 0037 488B7F08 		movq	8(%rdi), %rdi
 11063              	.LBB12_3:                               # %_ZN9__gnu_cxx13new_allocatorIjE9constructEPjRKj.exit
 11064              	.Ltmp3655:
 11065              		#DEBUG_VALUE: _M_insert_aux:__x <- [%rbp+$-64]+$0
 11066              	.Ltmp3656:
 309:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  ++this->_M_impl._M_finish;
 11067              		.loc	40 309 4
 11068              	.Ltmp3657:
 11069 003b 488D4F04 		leaq	4(%rdi), %rcx           # /usr/include/c++/4.6.3/bits/vector.tcc:309:4
 11070 003f 488B45C8 		movq	-56(%rbp), %rax         # /usr/include/c++/4.6.3/bits/vector.tcc:309:4
 11071              	                                        # 8-byte Reload
 11072 0043 48894808 		movq	%rcx, 8(%rax)           # /usr/include/c++/4.6.3/bits/vector.tcc:309:4
 313:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 11073              		.loc	40 313 4
 11074              	.Ltmp3658:
 11075 0047 488D57FC 		leaq	-4(%rdi), %rdx          # /usr/include/c++/4.6.3/bits/vector.tcc:313:4
 11076              	.Ltmp3659:
 11077              		#DEBUG_VALUE: copy_backward:__last <- undef
 11078              		.loc	19 613 38
 11079              	.Ltmp3660:
 11080              		#DEBUG_VALUE: copy_backward:__last <- RDX+0 # /usr/include/c++/4.6.3/bits/stl_algobase.h:613:38[ /
 11081              		.loc	19 613 51
 11082              	.Ltmp3661:
 11083              		#DEBUG_VALUE: copy_backward:__result <- RDI+0 # /usr/include/c++/4.6.3/bits/stl_algobase.h:613:51[
 11084              	.Ltmp3662:
 11085              		#DEBUG_VALUE: __miter_base:__it <- undef
 282:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __miter_base(_Iterator __it)
 11086              		.loc	19 282 28
 11087              	.Ltmp3663:
 11088              		#DEBUG_VALUE: __miter_base:__it <- RDX+0 # /usr/include/c++/4.6.3/bits/stl_algobase.h:282:28[ /usr
 11089              	.Ltmp3664:
 11090              		#DEBUG_VALUE: __copy_move_backward_a2:__last <- undef
 586:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 11091              		.loc	19 586 48
 11092              	.Ltmp3665:
 11093              		#DEBUG_VALUE: __copy_move_backward_a2:__last <- RDX+0 # /usr/include/c++/4.6.3/bits/stl_algobase.h
 586:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 11094              		.loc	19 586 61
 11095              	.Ltmp3666:
 11096              		#DEBUG_VALUE: __copy_move_backward_a2:__result <- RDI+0 # /usr/include/c++/4.6.3/bits/stl_algobase
 271:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 11097              		.loc	19 271 28
 11098              	.Ltmp3667:
 11099              		#DEBUG_VALUE: __niter_base:__it <- RDI+0 # /usr/include/c++/4.6.3/bits/stl_algobase.h:271:28[ /usr
 11100              		.loc	42 212 46
 11101              	.Ltmp3668:
 11102              		#DEBUG_VALUE: _S_base:__it <- RDI+0 # /usr/include/c++/4.6.3/bits/stl_iterator_base_types.h:212:46
 11103              	.Ltmp3669:
 11104              		#DEBUG_VALUE: __copy_move_backward_a:__last <- undef
 568:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 11105              		.loc	19 568 47
 11106              	.Ltmp3670:
 11107              		#DEBUG_VALUE: __copy_move_backward_a:__last <- RDX+0 # /usr/include/c++/4.6.3/bits/stl_algobase.h:
 568:/usr/include/c++/4.6.3/bits/stl_algobase.h ****     __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 11108              		.loc	19 568 60
 11109              	.Ltmp3671:
 11110              		#DEBUG_VALUE: __copy_move_backward_a:__result <- RDI+0 # /usr/include/c++/4.6.3/bits/stl_algobase.
 576:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 			     && __are_same<_ValueType1, _ValueType2>::__value);
 11111              		.loc	19 576 58
 11112              	.Ltmp3672:
 11113              		#DEBUG_VALUE: __simple <- 1+0   # /usr/include/c++/4.6.3/bits/stl_algobase.h:576:58[ /usr/include/
 11114              	.Ltmp3673:
 11115              		#DEBUG_VALUE: __copy_move_b:__last <- undef
 557:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 11116              		.loc	19 557 54
 11117              	.Ltmp3674:
 11118              		#DEBUG_VALUE: __copy_move_b:__last <- RDX+0 # /usr/include/c++/4.6.3/bits/stl_algobase.h:557:54[ /
 557:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 11119              		.loc	19 557 67
 11120              	.Ltmp3675:
 11121              		#DEBUG_VALUE: __copy_move_b:__result <- RDI+0 # /usr/include/c++/4.6.3/bits/stl_algobase.h:557:67[
 557:/usr/include/c++/4.6.3/bits/stl_algobase.h ****         __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 11122              		.loc	19 557 34
 11123              	.Ltmp3676:
 11124              		#DEBUG_VALUE: __copy_move_b:__first <- [%rbp+$-48]+$0 # /usr/include/c++/4.6.3/bits/stl_algobase.h
 559:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 11125              		.loc	19 559 43
 11126              	.Ltmp3677:
 11127 004b 482B55D0 		subq	-48(%rbp), %rdx         # /usr/include/c++/4.6.3/bits/stl_algobase.h:559:43[ /usr/include/c++
 11128              	                                        # 8-byte Folded Reload
 11129 004f 4889D1   		movq	%rdx, %rcx              # /usr/include/c++/4.6.3/bits/stl_algobase.h:559:43[ /usr/include/c++
 11130 0052 48C1F902 		sarq	$2, %rcx                # /usr/include/c++/4.6.3/bits/stl_algobase.h:559:43[ /usr/include/c++
 559:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 11131              		.loc	19 559 43
 11132              	.Ltmp3678:
 11133              		#DEBUG_VALUE: _Num <- RCX+0     # /usr/include/c++/4.6.3/bits/stl_algobase.h:559:43[ /usr/include/
 11134 0056 4885C9   		testq	%rcx, %rcx              # /usr/include/c++/4.6.3/bits/stl_algobase.h:559:43[ /usr/include/c+
 11135              	.Ltmp3679:
 311:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  _Tp __x_copy = __x;
 11136              		.loc	40 311 22
 11137              	.Ltmp3680:
 11138 0059 488B45C0 		movq	-64(%rbp), %rax         # /usr/include/c++/4.6.3/bits/vector.tcc:311:22
 11139              	                                        # 8-byte Reload
 11140 005d 8B18     		movl	(%rax), %ebx            # /usr/include/c++/4.6.3/bits/vector.tcc:311:22
 311:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  _Tp __x_copy = __x;
 11141              		.loc	40 311 22
 11142              	.Ltmp3681:
 11143              		#DEBUG_VALUE: __x_copy <- EBX+0 # /usr/include/c++/4.6.3/bits/vector.tcc:311:22
 11144              	.Ltmp3682:
 11145              		#DEBUG_VALUE: _M_insert_aux:__x <- undef
 11146 005f 7410     		je	.LBB12_5
 11147              	# BB#4:
 11148              	.Ltmp3683:
 11149              		#DEBUG_VALUE: __copy_move_b:__first <- [%rbp+$-48]+$0
 11150              	.Ltmp3684:
 11151              		#DEBUG_VALUE: __copy_move_b:__result <- RDI+0
 11152              	.Ltmp3685:
 11153              		#DEBUG_VALUE: __simple <- 1+0
 11154              	.Ltmp3686:
 11155              		#DEBUG_VALUE: __copy_move_backward_a:__result <- RDI+0
 11156              	.Ltmp3687:
 11157              		#DEBUG_VALUE: _S_base:__it <- RDI+0
 11158              	.Ltmp3688:
 11159              		#DEBUG_VALUE: __niter_base:__it <- RDI+0
 11160              	.Ltmp3689:
 11161              		#DEBUG_VALUE: __copy_move_backward_a2:__result <- RDI+0
 11162              	.Ltmp3690:
 11163              		#DEBUG_VALUE: copy_backward:__result <- RDI+0
 11164              	.Ltmp3691:
 11165              		#DEBUG_VALUE: _Num <- RCX+0
 11166              	.Ltmp3692:
 11167              		#DEBUG_VALUE: _Num <- undef
 11168              	.Ltmp3693:
 11169              		#DEBUG_VALUE: __x_copy <- EBX+0
 562:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	  return __result - _Num;
 11170              		.loc	19 562 4
 11171              	.Ltmp3694:
 11172 0061 48C1E102 		shlq	$2, %rcx                # /usr/include/c++/4.6.3/bits/stl_algobase.h:562:4[ /usr/include/c++/
 11173              	.Ltmp3695:
 11174              		#DEBUG_VALUE: copy_backward:__result <- undef
 11175              	.Ltmp3696:
 11176              		#DEBUG_VALUE: __copy_move_backward_a2:__result <- undef
 11177              	.Ltmp3697:
 11178              		#DEBUG_VALUE: __niter_base:__it <- undef
 11179              	.Ltmp3698:
 11180              		#DEBUG_VALUE: _S_base:__it <- undef
 11181              	.Ltmp3699:
 11182              		#DEBUG_VALUE: __copy_move_backward_a:__result <- undef
 11183              	.Ltmp3700:
 11184              		#DEBUG_VALUE: __copy_move_b:__result <- undef
 11185 0065 4829CF   		subq	%rcx, %rdi              # /usr/include/c++/4.6.3/bits/stl_algobase.h:562:4[ /usr/include/c++/
 561:/usr/include/c++/4.6.3/bits/stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 11186              		.loc	19 561 6
 11187              	.Ltmp3701:
 11188 0068 488B75D0 		movq	-48(%rbp), %rsi         # /usr/include/c++/4.6.3/bits/stl_algobase.h:561:6[ /usr/include/c++/
 11189              	                                        # 8-byte Reload
 11190 006c E8000000 		callq	memmove                 # /usr/include/c++/4.6.3/bits/stl_algobase.h:561:6[ /usr/include/c++
 11190      00
 11191              	.LBB12_5:                               # %_ZSt13copy_backwardIPjS0_ET0_T_S2_S1_.exit
 11192              	.Ltmp3702:
 11193              		#DEBUG_VALUE: __copy_move_b:__first <- [%rbp+$-48]+$0
 11194              	.Ltmp3703:
 11195              		#DEBUG_VALUE: __simple <- 1+0
 11196              	.Ltmp3704:
 11197              		#DEBUG_VALUE: __x_copy <- EBX+0
 11198              	.Ltmp3705:
 317:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  *__position = __x_copy;
 11199              		.loc	40 317 4
 11200              	.Ltmp3706:
 11201 0071 488B4DD0 		movq	-48(%rbp), %rcx         # /usr/include/c++/4.6.3/bits/vector.tcc:317:4
 11202              	                                        # 8-byte Reload
 11203 0075 8919     		movl	%ebx, (%rcx)            # /usr/include/c++/4.6.3/bits/vector.tcc:317:4
 11204              	.Ltmp3707:
 11205              		#DEBUG_VALUE: __x_copy <- undef
 11206              	.Ltmp3708:
 11207              		#DEBUG_VALUE: __copy_move_b:__first <- undef
 11208 0077 E9EF0000 		jmp	.LBB12_18
 11208      00
 11209              	.LBB12_6:                               # %_ZNKSt6vectorIjSaIjEE12_M_check_lenEmPKc.exit
 11210              	.Ltmp3709:
 11211              		#DEBUG_VALUE: _M_insert_aux:__x <- [%rbp+$-64]+$0
 11212              	.Ltmp3710:
 570:/usr/include/c++/4.6.3/bits/stl_vector.h ****       size() const
 11213              		.loc	34 570 7
 11214              	.Ltmp3711:
 11215              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0 # /usr/include/c++/4.6.3/bits/stl_vector.h:570:7[ /usr/i
 571:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 11216              		.loc	34 571 9
 11217              	.Ltmp3712:
 11218 007c 488B1F   		movq	(%rdi), %rbx            # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ /usr/include/c++/4.
 11219 007f 4829D9   		subq	%rbx, %rcx              # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ /usr/include/c++/4.
 11220 0082 48C1F902 		sarq	$2, %rcx                # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ /usr/include/c++/4.
 11221 0086 4885C9   		testq	%rcx, %rcx              # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ /usr/include/c++/4
 11222 0089 41BE0100 		movl	$1, %r14d
 11222      0000
 11223 008f 4C0F45F1 		cmovneq	%rcx, %r14
 11224 0093 31C0     		xorl	%eax, %eax
 11225 0095 4901CE   		addq	%rcx, %r14
 463:/usr/include/c++/4.6.3/bits/stl_vector.h ****       begin()
 11226              		.loc	34 463 7
 11227              	.Ltmp3713:
 11228              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0 # /usr/include/c++/4.6.3/bits/stl_vector.h:463:7[ /usr/
 720:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
 11229              		.loc	9 720 42
 11230              	.Ltmp3714:
 11231              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0 # /usr/include/c++/4.6.3/bits/stl_iterator.h
 720:/usr/include/c++/4.6.3/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
 11232              		.loc	9 720 42
 11233              	.Ltmp3715:
 11234              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0 # /usr/include/c++/4.6.3/bits/stl_iterator.h
 11235 0098 0F92C1   		setb	%cl
 326:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  const size_type __elems_before = __position - begin();
 11236              		.loc	40 326 57
 11237              	.Ltmp3716:
 11238              		#DEBUG_VALUE: __elems_before <- RAX+0 # /usr/include/c++/4.6.3/bits/vector.tcc:326:57
 11239 009b 48BAFFFF 		movabsq	$4611686018427387903, %rdx # imm = 0x3FFFFFFFFFFFFFFF
 11239      FFFFFFFF 
 11239      FF3F
 11240 00a5 4939D6   		cmpq	%rdx, %r14
 11241              	.Ltmp3717:
 11242              		.loc	34 1245 2
 11243              	.Ltmp3718:
 11244 00a8 400F97C6 		seta	%sil                    # /usr/include/c++/4.6.3/bits/stl_vector.h:1245:2[ /usr/include/c++/4
 11245 00ac 4008CE   		orb	%cl, %sil
 11246 00af 4C0F45F2 		cmovneq	%rdx, %r14
 149:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_allocate(size_t __n)
 11247              		.loc	34 149 26
 11248              	.Ltmp3719:
 11249              		#DEBUG_VALUE: _M_allocate:__n <- R14+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:149:26[ /usr/inc
 325:/usr/include/c++/4.6.3/bits/vector.tcc **** 	    _M_check_len(size_type(1), "vector::_M_insert_aux");
 11250              		.loc	40 325 57
 11251              	.Ltmp3720:
 11252              		#DEBUG_VALUE: __len <- R14+0    # /usr/include/c++/4.6.3/bits/vector.tcc:325:57
 11253 00b3 4D85F6   		testq	%r14, %r14
 11254 00b6 7420     		je	.LBB12_9
 11255              	# BB#7:
 11256              	.Ltmp3721:
 11257              		#DEBUG_VALUE: _M_insert_aux:__x <- [%rbp+$-64]+$0
 11258              	.Ltmp3722:
 11259              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 11260              	.Ltmp3723:
 11261              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11262              	.Ltmp3724:
 11263              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11264              	.Ltmp3725:
 11265              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 11266              	.Ltmp3726:
 11267              		#DEBUG_VALUE: __elems_before <- RAX+0
 11268              	.Ltmp3727:
 11269              		#DEBUG_VALUE: __len <- R14+0
 11270              	.Ltmp3728:
 11271              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
  87:/usr/include/c++/4.6.3/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
 11272              		.loc	4 87 26
 11273              	.Ltmp3729:
 11274              		#DEBUG_VALUE: allocate:__n <- R14+0 # /usr/include/c++/4.6.3/ext/new_allocator.h:87:26[ /usr/inclu
 11275 00b8 48B80000 		movabsq	$4611686018427387904, %rax # imm = 0x4000000000000000
 11275      00000000 
 11275      0040
 11276              	.Ltmp3730:
  89:/usr/include/c++/4.6.3/ext/new_allocator.h **** 	if (__n > this->max_size())
 11277              		.loc	4 89 2
 11278              	.Ltmp3731:
 11279 00c2 4939C6   		cmpq	%rax, %r14              # /usr/include/c++/4.6.3/ext/new_allocator.h:89:2[ /usr/include/c++/4
 11280 00c5 0F83AF00 		jae	.LBB12_19
 11280      0000
 11281              	# BB#8:                                 # %_ZN9__gnu_cxx13new_allocatorIjE8allocateEmPKv.exit.i
 11282              	.Ltmp3732:
 11283              		#DEBUG_VALUE: _M_insert_aux:__x <- [%rbp+$-64]+$0
 11284              	.Ltmp3733:
 11285              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 11286              	.Ltmp3734:
 11287              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11288              	.Ltmp3735:
 11289              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11290              	.Ltmp3736:
 11291              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 11292              	.Ltmp3737:
 11293              		#DEBUG_VALUE: __elems_before <- RAX+0
 11294              	.Ltmp3738:
 11295              		#DEBUG_VALUE: __len <- R14+0
 11296              	.Ltmp3739:
 11297              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 11298              	.Ltmp3740:
 11299              		#DEBUG_VALUE: allocate:__n <- R14+0
  92:/usr/include/c++/4.6.3/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 11300              		.loc	4 92 2
 11301              	.Ltmp3741:
 11302 00cb 4A8D3CB5 		leaq	(,%r14,4), %rdi         # /usr/include/c++/4.6.3/ext/new_allocator.h:92:2[ /usr/include/c++/4
 11302      00000000 
 11303 00d3 E8000000 		callq	_Znwm                   # /usr/include/c++/4.6.3/ext/new_allocator.h:92:2[ /usr/include/c++/
 11303      00
 11304              	.LBB12_9:                               # %_ZNSt12_Vector_baseIjSaIjEE11_M_allocateEm.exit
 11305              	.Ltmp3742:
 11306              		#DEBUG_VALUE: _M_insert_aux:__x <- [%rbp+$-64]+$0
 11307              	.Ltmp3743:
 11308              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 11309              	.Ltmp3744:
 11310              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11311              	.Ltmp3745:
 11312              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11313              	.Ltmp3746:
 11314              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 11315              	.Ltmp3747:
 11316              		#DEBUG_VALUE: __elems_before <- RAX+0
 11317              	.Ltmp3748:
 11318              		#DEBUG_VALUE: __len <- R14+0
 11319              	.Ltmp3749:
 11320              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 11321              	.Ltmp3750:
 150:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return __n != 0 ? _M_impl.allocate(__n) : 0; }
 11322              		.loc	34 150 9
 11323              	.Ltmp3751:
 11324 00d8 4989C7   		movq	%rax, %r15              # /usr/include/c++/4.6.3/bits/stl_vector.h:150:9[ /usr/include/c++/4.
 11325              	.Ltmp3752:
 11326              		.loc	9 892 7
 11327              	.Ltmp3753:
 11328 00db 488B45D0 		movq	-48(%rbp), %rax         # /usr/include/c++/4.6.3/bits/stl_iterator.h:892:7[ /usr/include/c++/
 11329              	                                        # 8-byte Reload
 11330 00df 4829D8   		subq	%rbx, %rax              # /usr/include/c++/4.6.3/bits/stl_iterator.h:892:7[ /usr/include/c++/
 11331 00e2 48C1F802 		sarq	$2, %rax                # /usr/include/c++/4.6.3/bits/stl_iterator.h:892:7[ /usr/include/c++/
 11332              	.Ltmp3754:
 335:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      this->_M_impl.construct(__new_start + __elems_before,
 11333              		.loc	40 335 8
 11334              	.Ltmp3755:
 11335 00e6 48C1E002 		shlq	$2, %rax                # /usr/include/c++/4.6.3/bits/vector.tcc:335:8
 328:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  pointer __new_finish(__new_start);
 11336              		.loc	40 328 37
 11337              	.Ltmp3756:
 11338              		#DEBUG_VALUE: __new_finish <- R15+0 # /usr/include/c++/4.6.3/bits/vector.tcc:328:37
 335:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      this->_M_impl.construct(__new_start + __elems_before,
 11339              		.loc	40 335 8
 11340              	.Ltmp3757:
 11341 00ea 4C01F8   		addq	%r15, %rax              # /usr/include/c++/4.6.3/bits/vector.tcc:335:8
 11342 00ed 7408     		je	.LBB12_11
 11343              	# BB#10:
 11344              	.Ltmp3758:
 11345              		#DEBUG_VALUE: _M_insert_aux:__x <- [%rbp+$-64]+$0
 11346              	.Ltmp3759:
 11347              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 11348              	.Ltmp3760:
 11349              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11350              	.Ltmp3761:
 11351              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11352              	.Ltmp3762:
 11353              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 11354              	.Ltmp3763:
 11355              		#DEBUG_VALUE: __elems_before <- RAX+0
 11356              	.Ltmp3764:
 11357              		#DEBUG_VALUE: __len <- R14+0
 11358              	.Ltmp3765:
 11359              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 11360              	.Ltmp3766:
 11361              		#DEBUG_VALUE: __new_finish <- R15+0
 11362 00ef 488B4DC0 		movq	-64(%rbp), %rcx         # 8-byte Reload
 11363 00f3 8B09     		movl	(%rcx), %ecx
 11364              	.Ltmp3767:
 11365              		#DEBUG_VALUE: _M_insert_aux:__x <- undef
 11366 00f5 8908     		movl	%ecx, (%rax)
 11367              	.LBB12_11:                              # %_ZN9__gnu_cxx13new_allocatorIjE9constructEPjRKj.exit3
 11368              	.Ltmp3768:
 11369              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 11370              	.Ltmp3769:
 11371              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11372              	.Ltmp3770:
 11373              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11374              	.Ltmp3771:
 11375              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 11376              	.Ltmp3772:
 11377              		#DEBUG_VALUE: __elems_before <- RAX+0
 11378              	.Ltmp3773:
 11379              		#DEBUG_VALUE: __len <- R14+0
 11380              	.Ltmp3774:
 11381              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 11382              	.Ltmp3775:
 11383              		#DEBUG_VALUE: __new_finish <- R15+0
 344:/usr/include/c++/4.6.3/bits/vector.tcc **** 		std::__uninitialized_move_a(this->_M_impl._M_start,
 11384              		.loc	40 344 3
 11385              	.Ltmp3776:
 11386 00f7 488B7DC8 		movq	-56(%rbp), %rdi         # /usr/include/c++/4.6.3/bits/vector.tcc:344:3
 11387              	                                        # 8-byte Reload
 11388 00fb 488B1F   		movq	(%rdi), %rbx            # /usr/include/c++/4.6.3/bits/vector.tcc:344:3
 11389              	.Ltmp3777:
 11390              		#DEBUG_VALUE: __uninitialized_move_a:__first <- RBX+0
 11391 00fe 488B55D0 		movq	-48(%rbp), %rdx         # 8-byte Reload
 11392 0102 4829DA   		subq	%rbx, %rdx
 11393              	.Ltmp3778:
 11394              		#DEBUG_VALUE: __uninitialized_move_a:__last <- [%rbp+$-48]+$0
 11395              	.Ltmp3779:
 11396              		#DEBUG_VALUE: __uninitialized_copy_a:__first <- RBX+0
 11397              	.Ltmp3780:
 11398              		#DEBUG_VALUE: __uninitialized_copy_a:__last <- [%rbp+$-48]+$0
 11399              	.Ltmp3781:
 11400              		#DEBUG_VALUE: uninitialized_copy:__first <- RBX+0
 11401              	.Ltmp3782:
 11402              		#DEBUG_VALUE: uninitialized_copy:__last <- [%rbp+$-48]+$0
 11403              	.Ltmp3783:
 11404              		#DEBUG_VALUE: __uninit_copy:__first <- RBX+0
 11405              	.Ltmp3784:
 11406              		#DEBUG_VALUE: __uninit_copy:__last <- [%rbp+$-48]+$0
 11407              	.Ltmp3785:
 11408              		#DEBUG_VALUE: copy:__first <- RBX+0
 11409              	.Ltmp3786:
 11410              		#DEBUG_VALUE: copy:__last <- [%rbp+$-48]+$0
 11411              	.Ltmp3787:
 11412              		#DEBUG_VALUE: __copy_move_a2:__first <- RBX+0
 11413              	.Ltmp3788:
 11414              		#DEBUG_VALUE: __copy_move_a2:__last <- [%rbp+$-48]+$0
 11415              	.Ltmp3789:
 11416              		#DEBUG_VALUE: __copy_move_a:__first <- RBX+0
 11417              	.Ltmp3790:
 11418              		#DEBUG_VALUE: __copy_move_a:__last <- [%rbp+$-48]+$0
 11419              	.Ltmp3791:
 11420              		#DEBUG_VALUE: __simple <- 1+0
 11421              	.Ltmp3792:
 11422              		#DEBUG_VALUE: __copy_m:__first <- RBX+0
 11423              	.Ltmp3793:
 11424              		#DEBUG_VALUE: __copy_m:__last <- [%rbp+$-48]+$0
 11425              	.Ltmp3794:
 11426              		#DEBUG_VALUE: __miter_base:__it <- [%rbp+$-48]+$0
 11427              	.Ltmp3795:
 11428              		#DEBUG_VALUE: __niter_base:__it <- [%rbp+$-48]+$0
 11429              	.Ltmp3796:
 11430              		#DEBUG_VALUE: _S_base:__it <- [%rbp+$-48]+$0
 11431 0105 4989D4   		movq	%rdx, %r12
 11432 0108 49C1FC02 		sarq	$2, %r12
 11433              	.Ltmp3797:
 11434              		#DEBUG_VALUE: _Num <- R12+0
 11435 010c 4D85E4   		testq	%r12, %r12
 11436 010f 740B     		je	.LBB12_13
 11437              	# BB#12:
 11438              	.Ltmp3798:
 11439              		#DEBUG_VALUE: _S_base:__it <- [%rbp+$-48]+$0
 11440              	.Ltmp3799:
 11441              		#DEBUG_VALUE: __niter_base:__it <- [%rbp+$-48]+$0
 11442              	.Ltmp3800:
 11443              		#DEBUG_VALUE: __miter_base:__it <- [%rbp+$-48]+$0
 11444              	.Ltmp3801:
 11445              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 11446              	.Ltmp3802:
 11447              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11448              	.Ltmp3803:
 11449              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11450              	.Ltmp3804:
 11451              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 11452              	.Ltmp3805:
 11453              		#DEBUG_VALUE: __elems_before <- RAX+0
 11454              	.Ltmp3806:
 11455              		#DEBUG_VALUE: __len <- R14+0
 11456              	.Ltmp3807:
 11457              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 11458              	.Ltmp3808:
 11459              		#DEBUG_VALUE: __new_finish <- R15+0
 11460              	.Ltmp3809:
 11461              		#DEBUG_VALUE: __uninitialized_move_a:__first <- RBX+0
 11462              	.Ltmp3810:
 11463              		#DEBUG_VALUE: __copy_m:__last <- [%rbp+$-48]+$0
 11464              	.Ltmp3811:
 11465              		#DEBUG_VALUE: __copy_m:__first <- RBX+0
 11466              	.Ltmp3812:
 11467              		#DEBUG_VALUE: __simple <- 1+0
 11468              	.Ltmp3813:
 11469              		#DEBUG_VALUE: __copy_move_a:__last <- [%rbp+$-48]+$0
 11470              	.Ltmp3814:
 11471              		#DEBUG_VALUE: __copy_move_a:__first <- RBX+0
 11472              	.Ltmp3815:
 11473              		#DEBUG_VALUE: __copy_move_a2:__last <- [%rbp+$-48]+$0
 11474              	.Ltmp3816:
 11475              		#DEBUG_VALUE: __copy_move_a2:__first <- RBX+0
 11476              	.Ltmp3817:
 11477              		#DEBUG_VALUE: copy:__last <- [%rbp+$-48]+$0
 11478              	.Ltmp3818:
 11479              		#DEBUG_VALUE: copy:__first <- RBX+0
 11480              	.Ltmp3819:
 11481              		#DEBUG_VALUE: __uninit_copy:__last <- [%rbp+$-48]+$0
 11482              	.Ltmp3820:
 11483              		#DEBUG_VALUE: __uninit_copy:__first <- RBX+0
 11484              	.Ltmp3821:
 11485              		#DEBUG_VALUE: uninitialized_copy:__last <- [%rbp+$-48]+$0
 11486              	.Ltmp3822:
 11487              		#DEBUG_VALUE: uninitialized_copy:__first <- RBX+0
 11488              	.Ltmp3823:
 11489              		#DEBUG_VALUE: __uninitialized_copy_a:__last <- [%rbp+$-48]+$0
 11490              	.Ltmp3824:
 11491              		#DEBUG_VALUE: __uninitialized_copy_a:__first <- RBX+0
 11492              	.Ltmp3825:
 11493              		#DEBUG_VALUE: __uninitialized_move_a:__last <- [%rbp+$-48]+$0
 11494              	.Ltmp3826:
 11495              		#DEBUG_VALUE: _Num <- R12+0
 11496 0111 4C89FF   		movq	%r15, %rdi
 11497 0114 4889DE   		movq	%rbx, %rsi
 11498 0117 E8000000 		callq	memmove
 11498      00
 11499              	.LBB12_13:                              # %_ZN9__gnu_cxx13new_allocatorIjE9constructEPjRKj.exit3._c
 11500              	.Ltmp3827:
 11501              		#DEBUG_VALUE: _S_base:__it <- [%rbp+$-48]+$0
 11502              	.Ltmp3828:
 11503              		#DEBUG_VALUE: __niter_base:__it <- [%rbp+$-48]+$0
 11504              	.Ltmp3829:
 11505              		#DEBUG_VALUE: __miter_base:__it <- [%rbp+$-48]+$0
 11506              	.Ltmp3830:
 11507              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 11508              	.Ltmp3831:
 11509              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11510              	.Ltmp3832:
 11511              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11512              	.Ltmp3833:
 11513              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 11514              	.Ltmp3834:
 11515              		#DEBUG_VALUE: __elems_before <- RAX+0
 11516              	.Ltmp3835:
 11517              		#DEBUG_VALUE: __len <- R14+0
 11518              	.Ltmp3836:
 11519              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 11520              	.Ltmp3837:
 11521              		#DEBUG_VALUE: __new_finish <- R15+0
 11522              	.Ltmp3838:
 11523              		#DEBUG_VALUE: __uninitialized_move_a:__first <- RBX+0
 11524              	.Ltmp3839:
 11525              		#DEBUG_VALUE: __copy_m:__last <- [%rbp+$-48]+$0
 11526              	.Ltmp3840:
 11527              		#DEBUG_VALUE: __copy_m:__first <- RBX+0
 11528              	.Ltmp3841:
 11529              		#DEBUG_VALUE: __simple <- 1+0
 11530              	.Ltmp3842:
 11531              		#DEBUG_VALUE: __copy_move_a:__last <- [%rbp+$-48]+$0
 11532              	.Ltmp3843:
 11533              		#DEBUG_VALUE: __copy_move_a:__first <- RBX+0
 11534              	.Ltmp3844:
 11535              		#DEBUG_VALUE: __copy_move_a2:__last <- [%rbp+$-48]+$0
 11536              	.Ltmp3845:
 11537              		#DEBUG_VALUE: __copy_move_a2:__first <- RBX+0
 11538              	.Ltmp3846:
 11539              		#DEBUG_VALUE: copy:__last <- [%rbp+$-48]+$0
 11540              	.Ltmp3847:
 11541              		#DEBUG_VALUE: copy:__first <- RBX+0
 11542              	.Ltmp3848:
 11543              		#DEBUG_VALUE: __uninit_copy:__last <- [%rbp+$-48]+$0
 11544              	.Ltmp3849:
 11545              		#DEBUG_VALUE: __uninit_copy:__first <- RBX+0
 11546              	.Ltmp3850:
 11547              		#DEBUG_VALUE: uninitialized_copy:__last <- [%rbp+$-48]+$0
 11548              	.Ltmp3851:
 11549              		#DEBUG_VALUE: uninitialized_copy:__first <- RBX+0
 11550              	.Ltmp3852:
 11551              		#DEBUG_VALUE: __uninitialized_copy_a:__last <- [%rbp+$-48]+$0
 11552              	.Ltmp3853:
 11553              		#DEBUG_VALUE: __uninitialized_copy_a:__first <- RBX+0
 11554              	.Ltmp3854:
 11555              		#DEBUG_VALUE: __uninitialized_move_a:__last <- [%rbp+$-48]+$0
 11556              	.Ltmp3855:
 11557              		#DEBUG_VALUE: _Num <- R12+0
 350:/usr/include/c++/4.6.3/bits/vector.tcc **** 		std::__uninitialized_move_a(__position.base(),
 11558              		.loc	40 350 3
 11559              	.Ltmp3856:
 11560 011c 488B7DC8 		movq	-56(%rbp), %rdi         # /usr/include/c++/4.6.3/bits/vector.tcc:350:3
 11561              	                                        # 8-byte Reload
 11562 0120 488B5708 		movq	8(%rdi), %rdx           # /usr/include/c++/4.6.3/bits/vector.tcc:350:3
 11563 0124 482B55D0 		subq	-48(%rbp), %rdx         # 8-byte Folded Reload
 11564              	.Ltmp3857:
 11565              		#DEBUG_VALUE: __uninitialized_move_a:__last <- RDX+0
 11566              	.Ltmp3858:
 11567              		#DEBUG_VALUE: __uninitialized_copy_a:__first <- [%rbp+$-48]+$0
 11568              	.Ltmp3859:
 11569              		#DEBUG_VALUE: __uninitialized_copy_a:__last <- RDX+0
 11570              	.Ltmp3860:
 11571              		#DEBUG_VALUE: uninitialized_copy:__first <- [%rbp+$-48]+$0
 11572              	.Ltmp3861:
 11573              		#DEBUG_VALUE: uninitialized_copy:__last <- RDX+0
 11574              	.Ltmp3862:
 11575              		#DEBUG_VALUE: __uninit_copy:__first <- [%rbp+$-48]+$0
 11576              	.Ltmp3863:
 11577              		#DEBUG_VALUE: __uninit_copy:__last <- RDX+0
 11578              	.Ltmp3864:
 11579              		#DEBUG_VALUE: copy:__first <- [%rbp+$-48]+$0
 11580              	.Ltmp3865:
 11581              		#DEBUG_VALUE: copy:__last <- RDX+0
 11582              	.Ltmp3866:
 11583              		#DEBUG_VALUE: __copy_move_a2:__first <- [%rbp+$-48]+$0
 11584              	.Ltmp3867:
 11585              		#DEBUG_VALUE: __copy_move_a2:__last <- RDX+0
 11586              	.Ltmp3868:
 11587              		#DEBUG_VALUE: __copy_move_a:__first <- [%rbp+$-48]+$0
 11588              	.Ltmp3869:
 11589              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 11590              	.Ltmp3870:
 11591              		#DEBUG_VALUE: __copy_m:__first <- [%rbp+$-48]+$0
 11592              	.Ltmp3871:
 11593              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 11594              	.Ltmp3872:
 11595              		#DEBUG_VALUE: __uninitialized_move_a:__first <- [%rbp+$-48]+$0
 11596              	.Ltmp3873:
 11597              		#DEBUG_VALUE: __miter_base:__it <- RDX+0
 11598              	.Ltmp3874:
 11599              		#DEBUG_VALUE: __niter_base:__it <- RDX+0
 11600              	.Ltmp3875:
 11601              		#DEBUG_VALUE: _S_base:__it <- RDX+0
 11602 0128 4989D5   		movq	%rdx, %r13
 11603 012b 49C1FD02 		sarq	$2, %r13
 11604              	.Ltmp3876:
 11605              		#DEBUG_VALUE: _Num <- R13+0
 11606 012f 49FFC4   		incq	%r12
 11607 0132 4D85ED   		testq	%r13, %r13
 11608 0135 740D     		je	.LBB12_15
 11609              	# BB#14:
 11610              	.Ltmp3877:
 11611              		#DEBUG_VALUE: _S_base:__it <- RDX+0
 11612              	.Ltmp3878:
 11613              		#DEBUG_VALUE: __niter_base:__it <- RDX+0
 11614              	.Ltmp3879:
 11615              		#DEBUG_VALUE: __miter_base:__it <- RDX+0
 11616              	.Ltmp3880:
 11617              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 11618              	.Ltmp3881:
 11619              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11620              	.Ltmp3882:
 11621              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11622              	.Ltmp3883:
 11623              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 11624              	.Ltmp3884:
 11625              		#DEBUG_VALUE: __elems_before <- RAX+0
 11626              	.Ltmp3885:
 11627              		#DEBUG_VALUE: __len <- R14+0
 11628              	.Ltmp3886:
 11629              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 11630              	.Ltmp3887:
 11631              		#DEBUG_VALUE: __new_finish <- R15+0
 11632              	.Ltmp3888:
 11633              		#DEBUG_VALUE: __uninitialized_move_a:__first <- [%rbp+$-48]+$0
 11634              	.Ltmp3889:
 11635              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 11636              	.Ltmp3890:
 11637              		#DEBUG_VALUE: __copy_m:__first <- [%rbp+$-48]+$0
 11638              	.Ltmp3891:
 11639              		#DEBUG_VALUE: __simple <- 1+0
 11640              	.Ltmp3892:
 11641              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 11642              	.Ltmp3893:
 11643              		#DEBUG_VALUE: __copy_move_a:__first <- [%rbp+$-48]+$0
 11644              	.Ltmp3894:
 11645              		#DEBUG_VALUE: __copy_move_a2:__last <- RDX+0
 11646              	.Ltmp3895:
 11647              		#DEBUG_VALUE: __copy_move_a2:__first <- [%rbp+$-48]+$0
 11648              	.Ltmp3896:
 11649              		#DEBUG_VALUE: copy:__last <- RDX+0
 11650              	.Ltmp3897:
 11651              		#DEBUG_VALUE: copy:__first <- [%rbp+$-48]+$0
 11652              	.Ltmp3898:
 11653              		#DEBUG_VALUE: __uninit_copy:__last <- RDX+0
 11654              	.Ltmp3899:
 11655              		#DEBUG_VALUE: __uninit_copy:__first <- [%rbp+$-48]+$0
 11656              	.Ltmp3900:
 11657              		#DEBUG_VALUE: uninitialized_copy:__last <- RDX+0
 11658              	.Ltmp3901:
 11659              		#DEBUG_VALUE: uninitialized_copy:__first <- [%rbp+$-48]+$0
 11660              	.Ltmp3902:
 11661              		#DEBUG_VALUE: __uninitialized_copy_a:__last <- RDX+0
 11662              	.Ltmp3903:
 11663              		#DEBUG_VALUE: __uninitialized_copy_a:__first <- [%rbp+$-48]+$0
 11664              	.Ltmp3904:
 11665              		#DEBUG_VALUE: __uninitialized_move_a:__last <- RDX+0
 11666              	.Ltmp3905:
 11667              		#DEBUG_VALUE: _Num <- R13+0
 347:/usr/include/c++/4.6.3/bits/vector.tcc **** 	      ++__new_finish;
 11668              		.loc	40 347 8
 11669              	.Ltmp3906:
 11670 0137 4B8D3CA7 		leaq	(%r15,%r12,4), %rdi     # /usr/include/c++/4.6.3/bits/vector.tcc:347:8
 11671 013b 488B75D0 		movq	-48(%rbp), %rsi         # 8-byte Reload
 11672              	.Ltmp3907:
 11673              		#DEBUG_VALUE: __uninitialized_copy_a:__first <- undef
 11674              	.Ltmp3908:
 11675              		#DEBUG_VALUE: uninitialized_copy:__first <- undef
 11676              	.Ltmp3909:
 11677              		#DEBUG_VALUE: __uninit_copy:__first <- undef
 11678              	.Ltmp3910:
 11679              		#DEBUG_VALUE: copy:__first <- undef
 11680              	.Ltmp3911:
 11681              		#DEBUG_VALUE: __copy_move_a2:__first <- undef
 11682              	.Ltmp3912:
 11683              		#DEBUG_VALUE: __copy_move_a:__first <- undef
 11684              	.Ltmp3913:
 11685              		#DEBUG_VALUE: __copy_m:__first <- undef
 11686              	.Ltmp3914:
 11687              		#DEBUG_VALUE: __uninitialized_move_a:__first <- undef
 11688 013f E8000000 		callq	memmove
 11688      00
 11689              	.LBB12_15:
 11690              	.Ltmp3915:
 11691              		#DEBUG_VALUE: _S_base:__it <- RDX+0
 11692              	.Ltmp3916:
 11693              		#DEBUG_VALUE: __niter_base:__it <- RDX+0
 11694              	.Ltmp3917:
 11695              		#DEBUG_VALUE: __miter_base:__it <- RDX+0
 11696              	.Ltmp3918:
 11697              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 11698              	.Ltmp3919:
 11699              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11700              	.Ltmp3920:
 11701              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11702              	.Ltmp3921:
 11703              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 11704              	.Ltmp3922:
 11705              		#DEBUG_VALUE: __elems_before <- RAX+0
 11706              	.Ltmp3923:
 11707              		#DEBUG_VALUE: __len <- R14+0
 11708              	.Ltmp3924:
 11709              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 11710              	.Ltmp3925:
 11711              		#DEBUG_VALUE: __new_finish <- RAX+0
 11712              	.Ltmp3926:
 11713              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 11714              	.Ltmp3927:
 11715              		#DEBUG_VALUE: __simple <- 1+0
 11716              	.Ltmp3928:
 11717              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 11718              	.Ltmp3929:
 11719              		#DEBUG_VALUE: __copy_move_a2:__last <- RDX+0
 11720              	.Ltmp3930:
 11721              		#DEBUG_VALUE: copy:__last <- RDX+0
 11722              	.Ltmp3931:
 11723              		#DEBUG_VALUE: __uninit_copy:__last <- RDX+0
 11724              	.Ltmp3932:
 11725              		#DEBUG_VALUE: uninitialized_copy:__last <- RDX+0
 11726              	.Ltmp3933:
 11727              		#DEBUG_VALUE: __uninitialized_copy_a:__last <- RDX+0
 11728              	.Ltmp3934:
 11729              		#DEBUG_VALUE: __uninitialized_move_a:__last <- RDX+0
 11730              	.Ltmp3935:
 11731              		#DEBUG_VALUE: _Num <- R13+0
 11732              	.Ltmp3936:
 153:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)
 11733              		.loc	34 153 54
 11734              	.Ltmp3937:
 11735              		#DEBUG_VALUE: _M_deallocate:__p <- RBX+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:153:54[ /usr/i
 155:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	if (__p)
 11736              		.loc	34 155 2
 11737              	.Ltmp3938:
 11738 0144 4885DB   		testq	%rbx, %rbx              # /usr/include/c++/4.6.3/bits/stl_vector.h:155:2[ /usr/include/c++/4
 11739 0147 7408     		je	.LBB12_17
 11740              	# BB#16:
 11741              	.Ltmp3939:
 11742              		#DEBUG_VALUE: _S_base:__it <- RDX+0
 11743              	.Ltmp3940:
 11744              		#DEBUG_VALUE: __niter_base:__it <- RDX+0
 11745              	.Ltmp3941:
 11746              		#DEBUG_VALUE: __miter_base:__it <- RDX+0
 11747              	.Ltmp3942:
 11748              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 11749              	.Ltmp3943:
 11750              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11751              	.Ltmp3944:
 11752              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11753              	.Ltmp3945:
 11754              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 11755              	.Ltmp3946:
 11756              		#DEBUG_VALUE: __elems_before <- RAX+0
 11757              	.Ltmp3947:
 11758              		#DEBUG_VALUE: __len <- R14+0
 11759              	.Ltmp3948:
 11760              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 11761              	.Ltmp3949:
 11762              		#DEBUG_VALUE: __new_finish <- RAX+0
 11763              	.Ltmp3950:
 11764              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 11765              	.Ltmp3951:
 11766              		#DEBUG_VALUE: __simple <- 1+0
 11767              	.Ltmp3952:
 11768              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 11769              	.Ltmp3953:
 11770              		#DEBUG_VALUE: __copy_move_a2:__last <- RDX+0
 11771              	.Ltmp3954:
 11772              		#DEBUG_VALUE: copy:__last <- RDX+0
 11773              	.Ltmp3955:
 11774              		#DEBUG_VALUE: __uninit_copy:__last <- RDX+0
 11775              	.Ltmp3956:
 11776              		#DEBUG_VALUE: uninitialized_copy:__last <- RDX+0
 11777              	.Ltmp3957:
 11778              		#DEBUG_VALUE: __uninitialized_copy_a:__last <- RDX+0
 11779              	.Ltmp3958:
 11780              		#DEBUG_VALUE: __uninitialized_move_a:__last <- RDX+0
 11781              	.Ltmp3959:
 11782              		#DEBUG_VALUE: _Num <- R13+0
 11783              	.Ltmp3960:
 11784              		#DEBUG_VALUE: _M_deallocate:__p <- RBX+0
  97:/usr/include/c++/4.6.3/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 11785              		.loc	4 97 26
 11786              	.Ltmp3961:
 11787              		#DEBUG_VALUE: deallocate:__p <- RBX+0 # /usr/include/c++/4.6.3/ext/new_allocator.h:97:26[ /usr/inc
  98:/usr/include/c++/4.6.3/ext/new_allocator.h ****       { ::operator delete(__p); }
 11788              		.loc	4 98 9
 11789              	.Ltmp3962:
 11790 0149 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/ext/new_allocator.h:98:9[ /usr/include/c++/4
 11791              	.Ltmp3963:
 11792              		#DEBUG_VALUE: deallocate:__p <- undef
 11793              	.Ltmp3964:
 11794              		#DEBUG_VALUE: _M_deallocate:__p <- undef
 11795 014c E8000000 		callq	_ZdlPv                  # /usr/include/c++/4.6.3/ext/new_allocator.h:98:9[ /usr/include/c++/
 11795      00
 11796              	.LBB12_17:                              # %_ZNSt12_Vector_baseIjSaIjEE13_M_deallocateEPjm.exit1
 11797              	.Ltmp3965:
 11798              		#DEBUG_VALUE: _S_base:__it <- RDX+0
 11799              	.Ltmp3966:
 11800              		#DEBUG_VALUE: __niter_base:__it <- RDX+0
 11801              	.Ltmp3967:
 11802              		#DEBUG_VALUE: __miter_base:__it <- RDX+0
 11803              	.Ltmp3968:
 11804              		#DEBUG_VALUE: size:this <- [%rbp+$-56]+$0
 11805              	.Ltmp3969:
 11806              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11807              	.Ltmp3970:
 11808              		#DEBUG_VALUE: __normal_iterator:__i <- [%rbp+$-56]+$0
 11809              	.Ltmp3971:
 11810              		#DEBUG_VALUE: begin:this <- [%rbp+$-56]+$0
 11811              	.Ltmp3972:
 11812              		#DEBUG_VALUE: __elems_before <- RAX+0
 11813              	.Ltmp3973:
 11814              		#DEBUG_VALUE: __len <- R14+0
 11815              	.Ltmp3974:
 11816              		#DEBUG_VALUE: _M_allocate:__n <- R14+0
 11817              	.Ltmp3975:
 11818              		#DEBUG_VALUE: __new_finish <- RAX+0
 11819              	.Ltmp3976:
 11820              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 11821              	.Ltmp3977:
 11822              		#DEBUG_VALUE: __simple <- 1+0
 11823              	.Ltmp3978:
 11824              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 11825              	.Ltmp3979:
 11826              		#DEBUG_VALUE: __copy_move_a2:__last <- RDX+0
 11827              	.Ltmp3980:
 11828              		#DEBUG_VALUE: copy:__last <- RDX+0
 11829              	.Ltmp3981:
 11830              		#DEBUG_VALUE: __uninit_copy:__last <- RDX+0
 11831              	.Ltmp3982:
 11832              		#DEBUG_VALUE: uninitialized_copy:__last <- RDX+0
 11833              	.Ltmp3983:
 11834              		#DEBUG_VALUE: __uninitialized_copy_a:__last <- RDX+0
 11835              	.Ltmp3984:
 11836              		#DEBUG_VALUE: __uninitialized_move_a:__last <- RDX+0
 11837              	.Ltmp3985:
 11838              		#DEBUG_VALUE: _Num <- R13+0
 11839              	.Ltmp3986:
 11840              		#DEBUG_VALUE: _Num <- undef
 11841 0151 4D01E5   		addq	%r12, %r13
 11842 0154 4B8D04AF 		leaq	(%r15,%r13,4), %rax
 11843              	.Ltmp3987:
 369:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl._M_start = __new_start;
 11844              		.loc	40 369 4
 11845              	.Ltmp3988:
 11846 0158 488B7DC8 		movq	-56(%rbp), %rdi         # /usr/include/c++/4.6.3/bits/vector.tcc:369:4
 11847              	                                        # 8-byte Reload
 11848 015c 4C893F   		movq	%r15, (%rdi)            # /usr/include/c++/4.6.3/bits/vector.tcc:369:4
 370:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl._M_finish = __new_finish;
 11849              		.loc	40 370 4
 11850              	.Ltmp3989:
 11851 015f 48894708 		movq	%rax, 8(%rdi)           # /usr/include/c++/4.6.3/bits/vector.tcc:370:4
 371:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = __new_start + __len;
 11852              		.loc	40 371 4
 11853              	.Ltmp3990:
 11854 0163 4B8D04B7 		leaq	(%r15,%r14,4), %rax     # /usr/include/c++/4.6.3/bits/vector.tcc:371:4
 11855              	.Ltmp3991:
 11856              		#DEBUG_VALUE: _M_allocate:__n <- undef
 11857              	.Ltmp3992:
 11858              		#DEBUG_VALUE: __len <- undef
 11859 0167 48894710 		movq	%rax, 16(%rdi)          # /usr/include/c++/4.6.3/bits/vector.tcc:371:4
 11860              	.Ltmp3993:
 11861              		#DEBUG_VALUE: begin:this <- undef
 11862              	.Ltmp3994:
 11863              		#DEBUG_VALUE: __normal_iterator:__i <- undef
 11864              	.Ltmp3995:
 11865              		#DEBUG_VALUE: __normal_iterator:__i <- undef
 11866              	.Ltmp3996:
 11867              		#DEBUG_VALUE: size:this <- undef
 11868              	.Ltmp3997:
 11869              	.LBB12_18:
 11870              		.loc	40 373 5
 11871              	.Ltmp3998:
 11872 016b 4883C418 		addq	$24, %rsp               # /usr/include/c++/4.6.3/bits/vector.tcc:373:5
 11873 016f 5B       		popq	%rbx                    # /usr/include/c++/4.6.3/bits/vector.tcc:373:5
 11874 0170 415C     		popq	%r12                    # /usr/include/c++/4.6.3/bits/vector.tcc:373:5
 11875 0172 415D     		popq	%r13                    # /usr/include/c++/4.6.3/bits/vector.tcc:373:5
 11876 0174 415E     		popq	%r14                    # /usr/include/c++/4.6.3/bits/vector.tcc:373:5
 11877 0176 415F     		popq	%r15                    # /usr/include/c++/4.6.3/bits/vector.tcc:373:5
 11878 0178 5D       		popq	%rbp                    # /usr/include/c++/4.6.3/bits/vector.tcc:373:5
 11879 0179 C3       		ret                             # /usr/include/c++/4.6.3/bits/vector.tcc:373:5
 11880              	.LBB12_19:
 11881              	.Ltmp3999:
 11882              		#DEBUG_VALUE: __elems_before <- RAX+0
  90:/usr/include/c++/4.6.3/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 11883              		.loc	4 90 4
 11884              	.Ltmp4000:
 11885 017a E8000000 		callq	_ZSt17__throw_bad_allocv # /usr/include/c++/4.6.3/ext/new_allocator.h:90:4[ /usr/include/c++
 11885      00
 11886              	.Ltmp4001:
 11887              	.Ltmp4002:
 11889              	.Lfunc_end12:
 11890              	.Leh_func_end12:
 11891              	
 11892              		.section	.text._ZNSt6vectorIjSaIjEE7reserveEm,"axG",@progbits,_ZNSt6vectorIjSaIjEE7reserveEm,comda
 11893              		.weak	_ZNSt6vectorIjSaIjEE7reserveEm
 11894              		.align	16, 0x90
 11896              	_ZNSt6vectorIjSaIjEE7reserveEm:         # @_ZNSt6vectorIjSaIjEE7reserveEm
 11897              	.Leh_func_begin13:
 11898              	.Lfunc_begin13:
  68:/usr/include/c++/4.6.3/bits/vector.tcc ****     {
 11899              		.loc	40 68 0
 11900              	.Ltmp4006:
 11901              	# BB#0:
 11902 0000 55       		pushq	%rbp
 11903              	.Ltmp4003:
 11904 0001 4889E5   		movq	%rsp, %rbp
 11905              	.Ltmp4004:
 11906 0004 4157     		pushq	%r15
 11907 0006 4156     		pushq	%r14
 11908 0008 4155     		pushq	%r13
 11909 000a 4154     		pushq	%r12
 11910 000c 53       		pushq	%rbx
 11911 000d 50       		pushq	%rax
 11912              	.Ltmp4005:
 11913              		#DEBUG_VALUE: reserve:this <- RDI+0 # /usr/include/c++/4.6.3/bits/vector.tcc:680:7
 11914              		#DEBUG_VALUE: reserve:__n <- RSI+0 # /usr/include/c++/4.6.3/bits/vector.tcc:680:25
 11915 000e 48B80000 		movabsq	$4611686018427387904, %rax # imm = 0x4000000000000000
 11915      00000000 
 11915      0040
 11916 0018 4839C6   		cmpq	%rax, %rsi
 11917              	.Ltmp4007:
 11918              		#DEBUG_VALUE: reserve:this <- R14+0
 11919 001b 0F839700 		jae	.LBB13_11
 11919      0000
 11920              	# BB#1:
 11921              	.Ltmp4008:
 11922              		#DEBUG_VALUE: reserve:this <- R14+0
 11923              	.Ltmp4009:
 11924              		#DEBUG_VALUE: reserve:__n <- RSI+0
 11925 0021 4889F3   		movq	%rsi, %rbx
 11926              	.Ltmp4010:
 11927              		#DEBUG_VALUE: reserve:__n <- undef
 11928 0024 4989FE   		movq	%rdi, %r14
 650:/usr/include/c++/4.6.3/bits/stl_vector.h ****       capacity() const
 11929              		.loc	34 650 7
 11930              	.Ltmp4011:
 11931              		#DEBUG_VALUE: capacity:this <- R14+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:650:7[ /usr/includ
 651:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 11932              		.loc	34 651 9
 11933              	.Ltmp4012:
 11934 0027 4D8B3E   		movq	(%r14), %r15            # /usr/include/c++/4.6.3/bits/stl_vector.h:651:9[ /usr/include/c++/4.
 11935 002a 498B4610 		movq	16(%r14), %rax          # /usr/include/c++/4.6.3/bits/stl_vector.h:651:9[ /usr/include/c++/4.
 11936 002e 4C29F8   		subq	%r15, %rax              # /usr/include/c++/4.6.3/bits/stl_vector.h:651:9[ /usr/include/c++/4.
 11937 0031 48C1F802 		sarq	$2, %rax                # /usr/include/c++/4.6.3/bits/stl_vector.h:651:9[ /usr/include/c++/4.
 11938 0035 4839D8   		cmpq	%rbx, %rax              # /usr/include/c++/4.6.3/bits/stl_vector.h:651:9[ /usr/include/c++/4.
 11939 0038 736F     		jae	.LBB13_10
 11940              	# BB#2:
 11941              	.Ltmp4013:
 11942              		#DEBUG_VALUE: reserve:this <- R14+0
 11943              	.Ltmp4014:
 11944              		#DEBUG_VALUE: capacity:this <- R14+0
 11945              	.Ltmp4015:
 571:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 11946              		.loc	34 571 9
 11947              	.Ltmp4016:
 11948 003a 498B4608 		movq	8(%r14), %rax           # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ /usr/include/c++/4.
  73:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  const size_type __old_size = size();
 11949              		.loc	40 73 39
 11950              	.Ltmp4017:
 11951              		#DEBUG_VALUE: __old_size <- R13+0 # /usr/include/c++/4.6.3/bits/vector.tcc:73:39
 570:/usr/include/c++/4.6.3/bits/stl_vector.h ****       size() const
 11952              		.loc	34 570 7
 11953              	.Ltmp4018:
 11954              		#DEBUG_VALUE: size:this <- R14+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:570:7[ /usr/include/c+
 11955 003e 488945D0 		movq	%rax, -48(%rbp)         # 8-byte Spill
 11956 0042 31C0     		xorl	%eax, %eax
 11957              	.Ltmp4019:
1049:/usr/include/c++/4.6.3/bits/stl_vector.h ****         _M_allocate_and_copy(size_type __n,
 11958              		.loc	34 1049 9
 11959              	.Ltmp4020:
 11960              		#DEBUG_VALUE: _M_allocate_and_copy:this <- R14+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:1049:9
1050:/usr/include/c++/4.6.3/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
 11961              		.loc	34 1050 26
 11962              	.Ltmp4021:
 11963              		#DEBUG_VALUE: _M_allocate_and_copy:__first <- R15+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:105
1050:/usr/include/c++/4.6.3/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
 11964              		.loc	34 1050 52
 11965              	.Ltmp4022:
 11966              		#DEBUG_VALUE: _M_allocate_and_copy:__last <- [%rbp+$-48]+$0 # /usr/include/c++/4.6.3/bits/stl_vect
 149:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_allocate(size_t __n)
 11967              		.loc	34 149 26
 11968              	.Ltmp4023:
 11969              		#DEBUG_VALUE: _M_allocate:__n <- RBX+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:149:26[ /usr/inc
 150:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return __n != 0 ? _M_impl.allocate(__n) : 0; }
 11970              		.loc	34 150 9
 11971              	.Ltmp4024:
 11972 0044 4885DB   		testq	%rbx, %rbx              # /usr/include/c++/4.6.3/bits/stl_vector.h:150:9[ /usr/include/c++/4
 11973 0047 741C     		je	.LBB13_5
 11974              	# BB#3:
 11975              	.Ltmp4025:
 11976              		#DEBUG_VALUE: reserve:this <- R14+0
 11977              	.Ltmp4026:
 11978              		#DEBUG_VALUE: capacity:this <- R14+0
 11979              	.Ltmp4027:
 11980              		#DEBUG_VALUE: size:this <- R14+0
 11981              	.Ltmp4028:
 11982              		#DEBUG_VALUE: __old_size <- R13+0
 11983              	.Ltmp4029:
 11984              		#DEBUG_VALUE: _M_allocate:__n <- RBX+0
 11985              	.Ltmp4030:
 11986              		#DEBUG_VALUE: _M_allocate_and_copy:__last <- [%rbp+$-48]+$0
 11987              	.Ltmp4031:
 11988              		#DEBUG_VALUE: _M_allocate_and_copy:__first <- R15+0
 11989              	.Ltmp4032:
 11990              		#DEBUG_VALUE: _M_allocate_and_copy:this <- R14+0
 11991 0049 48B80000 		movabsq	$4611686018427387904, %rax # imm = 0x4000000000000000
 11991      00000000 
 11991      0040
  87:/usr/include/c++/4.6.3/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
 11992              		.loc	4 87 26
 11993              	.Ltmp4033:
 11994              		#DEBUG_VALUE: allocate:__n <- RBX+0 # /usr/include/c++/4.6.3/ext/new_allocator.h:87:26[ /usr/inclu
 11995 0053 4839C3   		cmpq	%rax, %rbx
 11996 0056 736A     		jae	.LBB13_12
 11997              	# BB#4:                                 # %_ZN9__gnu_cxx13new_allocatorIjE8allocateEmPKv.exit.i.i
 11998              	.Ltmp4034:
 11999              		#DEBUG_VALUE: reserve:this <- R14+0
 12000              	.Ltmp4035:
 12001              		#DEBUG_VALUE: capacity:this <- R14+0
 12002              	.Ltmp4036:
 12003              		#DEBUG_VALUE: size:this <- R14+0
 12004              	.Ltmp4037:
 12005              		#DEBUG_VALUE: __old_size <- R13+0
 12006              	.Ltmp4038:
 12007              		#DEBUG_VALUE: _M_allocate:__n <- RBX+0
 12008              	.Ltmp4039:
 12009              		#DEBUG_VALUE: _M_allocate_and_copy:__last <- [%rbp+$-48]+$0
 12010              	.Ltmp4040:
 12011              		#DEBUG_VALUE: _M_allocate_and_copy:__first <- R15+0
 12012              	.Ltmp4041:
 12013              		#DEBUG_VALUE: _M_allocate_and_copy:this <- R14+0
 12014              	.Ltmp4042:
 12015              		#DEBUG_VALUE: allocate:__n <- RBX+0
  92:/usr/include/c++/4.6.3/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 12016              		.loc	4 92 2
 12017              	.Ltmp4043:
 12018 0058 488D3C9D 		leaq	(,%rbx,4), %rdi         # /usr/include/c++/4.6.3/ext/new_allocator.h:92:2[ /usr/include/c++/4
 12018      00000000 
 12019 0060 E8000000 		callq	_Znwm                   # /usr/include/c++/4.6.3/ext/new_allocator.h:92:2[ /usr/include/c++/
 12019      00
 12020              	.LBB13_5:                               # %_ZNSt12_Vector_baseIjSaIjEE11_M_allocateEm.exit.i
 12021              	.Ltmp4044:
 12022              		#DEBUG_VALUE: reserve:this <- R14+0
 12023              	.Ltmp4045:
 12024              		#DEBUG_VALUE: capacity:this <- R14+0
 12025              	.Ltmp4046:
 12026              		#DEBUG_VALUE: size:this <- R14+0
 12027              	.Ltmp4047:
 12028              		#DEBUG_VALUE: __old_size <- R13+0
 12029              	.Ltmp4048:
 12030              		#DEBUG_VALUE: _M_allocate:__n <- RBX+0
 12031              	.Ltmp4049:
 12032              		#DEBUG_VALUE: _M_allocate_and_copy:__last <- [%rbp+$-48]+$0
 12033              	.Ltmp4050:
 12034              		#DEBUG_VALUE: _M_allocate_and_copy:__first <- R15+0
 12035              	.Ltmp4051:
 12036              		#DEBUG_VALUE: _M_allocate_and_copy:this <- R14+0
 12037              	.Ltmp4052:
 150:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return __n != 0 ? _M_impl.allocate(__n) : 0; }
 12038              		.loc	34 150 9
 12039              	.Ltmp4053:
 12040 0065 4989C4   		movq	%rax, %r12              # /usr/include/c++/4.6.3/bits/stl_vector.h:150:9[ /usr/include/c++/4.
 12041              	.Ltmp4054:
 571:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 12042              		.loc	34 571 9
 12043              	.Ltmp4055:
 12044 0068 488B45D0 		movq	-48(%rbp), %rax         # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ /usr/include/c++/4.
 12045              	                                        # 8-byte Reload
 12046 006c 4989C5   		movq	%rax, %r13              # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ /usr/include/c++/4.
 12047 006f 4D29FD   		subq	%r15, %r13              # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ /usr/include/c++/4.
 12048              	.Ltmp4056:
 12049              		#DEBUG_VALUE: __copy_m:__last <- [%rbp+$-48]+$0
 12050              	.Ltmp4057:
 12051              		#DEBUG_VALUE: __simple <- 1+0
 12052 0072 4C39F8   		cmpq	%r15, %rax
 12053              	.Ltmp4058:
 12054              		#DEBUG_VALUE: __copy_m:__first <- R15+0
 12055              	.Ltmp4059:
 12056              		#DEBUG_VALUE: __copy_m:__last <- undef
 12057              	.Ltmp4060:
 12058              		#DEBUG_VALUE: _M_allocate_and_copy:__last <- undef
 12059 0075 740E     		je	.LBB13_7
 12060              	# BB#6:
 12061              	.Ltmp4061:
 12062              		#DEBUG_VALUE: reserve:this <- R14+0
 12063              	.Ltmp4062:
 12064              		#DEBUG_VALUE: capacity:this <- R14+0
 12065              	.Ltmp4063:
 12066              		#DEBUG_VALUE: size:this <- R14+0
 12067              	.Ltmp4064:
 12068              		#DEBUG_VALUE: __old_size <- R13+0
 12069              	.Ltmp4065:
 12070              		#DEBUG_VALUE: _M_allocate:__n <- RBX+0
 12071              	.Ltmp4066:
 12072              		#DEBUG_VALUE: _M_allocate_and_copy:__first <- R15+0
 12073              	.Ltmp4067:
 12074              		#DEBUG_VALUE: _M_allocate_and_copy:this <- R14+0
 12075              	.Ltmp4068:
 12076              		#DEBUG_VALUE: __simple <- 1+0
 12077              	.Ltmp4069:
 12078              		#DEBUG_VALUE: __copy_m:__first <- R15+0
 12079 0077 4C89E7   		movq	%r12, %rdi
 12080 007a 4C89FE   		movq	%r15, %rsi
 12081              	.Ltmp4070:
 12082              		#DEBUG_VALUE: __copy_m:__first <- undef
 12083              	.Ltmp4071:
 12084              		#DEBUG_VALUE: _M_allocate_and_copy:__first <- undef
 12085 007d 4C89EA   		movq	%r13, %rdx
 12086 0080 E8000000 		callq	memcpy
 12086      00
 12087              	.LBB13_7:                               # %_ZNSt6vectorIjSaIjEE20_M_allocate_and_copyIPjEES3_mT_S4_
 12088              	.Ltmp4072:
 12089              		#DEBUG_VALUE: reserve:this <- R14+0
 12090              	.Ltmp4073:
 12091              		#DEBUG_VALUE: capacity:this <- R14+0
 12092              	.Ltmp4074:
 12093              		#DEBUG_VALUE: size:this <- R14+0
 12094              	.Ltmp4075:
 12095              		#DEBUG_VALUE: __old_size <- R13+0
 12096              	.Ltmp4076:
 12097              		#DEBUG_VALUE: _M_allocate:__n <- RBX+0
 12098              	.Ltmp4077:
 12099              		#DEBUG_VALUE: _M_allocate_and_copy:this <- R14+0
 12100              	.Ltmp4078:
 12101              		#DEBUG_VALUE: __simple <- 1+0
 12102              	.Ltmp4079:
  79:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
 12103              		.loc	40 79 4
 12104              	.Ltmp4080:
 12105 0085 498B3E   		movq	(%r14), %rdi            # /usr/include/c++/4.6.3/bits/vector.tcc:79:4
 153:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)
 12106              		.loc	34 153 54
 12107              	.Ltmp4081:
 12108              		#DEBUG_VALUE: _M_deallocate:__p <- RDI+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:153:54[ /usr/i
  79:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
 12109              		.loc	40 79 4
 12110              	.Ltmp4082:
 12111 0088 4885FF   		testq	%rdi, %rdi              # /usr/include/c++/4.6.3/bits/vector.tcc:79:4
 12112 008b 7405     		je	.LBB13_9
 12113              	# BB#8:
 12114              	.Ltmp4083:
 12115              		#DEBUG_VALUE: reserve:this <- R14+0
 12116              	.Ltmp4084:
 12117              		#DEBUG_VALUE: capacity:this <- R14+0
 12118              	.Ltmp4085:
 12119              		#DEBUG_VALUE: size:this <- R14+0
 12120              	.Ltmp4086:
 12121              		#DEBUG_VALUE: __old_size <- R13+0
 12122              	.Ltmp4087:
 12123              		#DEBUG_VALUE: _M_allocate:__n <- RBX+0
 12124              	.Ltmp4088:
 12125              		#DEBUG_VALUE: _M_allocate_and_copy:this <- R14+0
 12126              	.Ltmp4089:
 12127              		#DEBUG_VALUE: __simple <- 1+0
 12128              	.Ltmp4090:
 12129              		#DEBUG_VALUE: _M_deallocate:__p <- RDI+0
  97:/usr/include/c++/4.6.3/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 12130              		.loc	4 97 26
 12131              	.Ltmp4091:
 12132              		#DEBUG_VALUE: deallocate:__p <- RDI+0 # /usr/include/c++/4.6.3/ext/new_allocator.h:97:26[ /usr/inc
 12133              	.Ltmp4092:
 12134              		#DEBUG_VALUE: deallocate:__p <- undef
 12135              	.Ltmp4093:
 12136              		#DEBUG_VALUE: _M_deallocate:__p <- undef
  98:/usr/include/c++/4.6.3/ext/new_allocator.h ****       { ::operator delete(__p); }
 12137              		.loc	4 98 9
 12138              	.Ltmp4094:
 12139 008d E8000000 		callq	_ZdlPv                  # /usr/include/c++/4.6.3/ext/new_allocator.h:98:9[ /usr/include/c++/
 12139      00
 12140              	.LBB13_9:                               # %_ZNSt12_Vector_baseIjSaIjEE13_M_deallocateEPjm.exit
 12141              	.Ltmp4095:
 12142              		#DEBUG_VALUE: reserve:this <- R14+0
 12143              	.Ltmp4096:
 12144              		#DEBUG_VALUE: capacity:this <- R14+0
 12145              	.Ltmp4097:
 12146              		#DEBUG_VALUE: size:this <- R14+0
 12147              	.Ltmp4098:
 12148              		#DEBUG_VALUE: __old_size <- R13+0
 12149              	.Ltmp4099:
 12150              		#DEBUG_VALUE: _M_allocate:__n <- RBX+0
 12151              	.Ltmp4100:
 12152              		#DEBUG_VALUE: _M_allocate_and_copy:this <- R14+0
 12153              	.Ltmp4101:
 12154              		#DEBUG_VALUE: __simple <- 1+0
 12155              	.Ltmp4102:
 571:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 12156              		.loc	34 571 9
 12157              	.Ltmp4103:
 12158 0092 49C1FD02 		sarq	$2, %r13                # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ /usr/include/c++/4.
 12159              	.Ltmp4104:
  82:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl._M_start = __tmp;
 12160              		.loc	40 82 4
 12161              	.Ltmp4105:
 12162 0096 4D8926   		movq	%r12, (%r14)            # /usr/include/c++/4.6.3/bits/vector.tcc:82:4
  83:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
 12163              		.loc	40 83 4
 12164              	.Ltmp4106:
 12165 0099 4B8D04AC 		leaq	(%r12,%r13,4), %rax     # /usr/include/c++/4.6.3/bits/vector.tcc:83:4
 12166 009d 49894608 		movq	%rax, 8(%r14)           # /usr/include/c++/4.6.3/bits/vector.tcc:83:4
  84:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 12167              		.loc	40 84 4
 12168              	.Ltmp4107:
 12169 00a1 498D049C 		leaq	(%r12,%rbx,4), %rax     # /usr/include/c++/4.6.3/bits/vector.tcc:84:4
 12170              	.Ltmp4108:
 12171              		#DEBUG_VALUE: _M_allocate:__n <- undef
 12172 00a5 49894610 		movq	%rax, 16(%r14)          # /usr/include/c++/4.6.3/bits/vector.tcc:84:4
 12173              	.Ltmp4109:
 12174              		#DEBUG_VALUE: _M_allocate_and_copy:this <- undef
 12175              	.Ltmp4110:
 12176              		#DEBUG_VALUE: size:this <- undef
 12177              	.Ltmp4111:
 12178              		#DEBUG_VALUE: capacity:this <- undef
 12179              	.Ltmp4112:
 12180              	.LBB13_10:
  86:/usr/include/c++/4.6.3/bits/vector.tcc ****     }
 12181              		.loc	40 86 5
 12182              	.Ltmp4113:
 12183 00a9 4883C408 		addq	$8, %rsp                # /usr/include/c++/4.6.3/bits/vector.tcc:86:5
 12184              	.Ltmp4114:
 12185              		#DEBUG_VALUE: reserve:this <- R14+0
 12186 00ad 5B       		popq	%rbx                    # /usr/include/c++/4.6.3/bits/vector.tcc:86:5
 12187 00ae 415C     		popq	%r12                    # /usr/include/c++/4.6.3/bits/vector.tcc:86:5
 12188 00b0 415D     		popq	%r13                    # /usr/include/c++/4.6.3/bits/vector.tcc:86:5
 12189 00b2 415E     		popq	%r14                    # /usr/include/c++/4.6.3/bits/vector.tcc:86:5
 12190 00b4 415F     		popq	%r15                    # /usr/include/c++/4.6.3/bits/vector.tcc:86:5
 12191 00b6 5D       		popq	%rbp                    # /usr/include/c++/4.6.3/bits/vector.tcc:86:5
 12192 00b7 C3       		ret                             # /usr/include/c++/4.6.3/bits/vector.tcc:86:5
 12193              	.LBB13_11:
 12194              	.Ltmp4115:
 12195              		#DEBUG_VALUE: reserve:this <- R14+0
  70:/usr/include/c++/4.6.3/bits/vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
 12196              		.loc	40 70 2
 12197              	.Ltmp4116:
 12198 00b8 BF000000 		movl	$.L.str29, %edi         # /usr/include/c++/4.6.3/bits/vector.tcc:70:2
 12198      00
 12199 00bd E8000000 		callq	_ZSt20__throw_length_errorPKc # /usr/include/c++/4.6.3/bits/vector.tcc:70:2
 12199      00
 12200              	.LBB13_12:
 12201              	.Ltmp4117:
 12202              		#DEBUG_VALUE: reserve:this <- R14+0
 12203              	.Ltmp4118:
 12204              		#DEBUG_VALUE: __old_size <- R13+0
  90:/usr/include/c++/4.6.3/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 12205              		.loc	4 90 4
 12206              	.Ltmp4119:
 12207 00c2 E8000000 		callq	_ZSt17__throw_bad_allocv # /usr/include/c++/4.6.3/ext/new_allocator.h:90:4[ /usr/include/c++
 12207      00
 12208              	.Ltmp4120:
 12209              	.Ltmp4121:
 12211              	.Lfunc_end13:
 12212              	.Leh_func_end13:
 12213              	
 12214              		.section	.text._ZNSt6vectorItSaItEE7reserveEm,"axG",@progbits,_ZNSt6vectorItSaItEE7reserveEm,comda
 12215              		.weak	_ZNSt6vectorItSaItEE7reserveEm
 12216              		.align	16, 0x90
 12218              	_ZNSt6vectorItSaItEE7reserveEm:         # @_ZNSt6vectorItSaItEE7reserveEm
 12219              	.Leh_func_begin14:
 12220              	.Lfunc_begin14:
  68:/usr/include/c++/4.6.3/bits/vector.tcc ****     {
 12221              		.loc	40 68 0
 12222              	.Ltmp4125:
 12223              	# BB#0:
 12224 0000 55       		pushq	%rbp
 12225              	.Ltmp4122:
 12226 0001 4889E5   		movq	%rsp, %rbp
 12227              	.Ltmp4123:
 12228 0004 4157     		pushq	%r15
 12229 0006 4156     		pushq	%r14
 12230 0008 4155     		pushq	%r13
 12231 000a 4154     		pushq	%r12
 12232 000c 53       		pushq	%rbx
 12233 000d 50       		pushq	%rax
 12234              	.Ltmp4124:
 12235              		#DEBUG_VALUE: reserve:this <- RDI+0 # /usr/include/c++/4.6.3/bits/vector.tcc:680:7
 12236              		#DEBUG_VALUE: reserve:__n <- RSI+0 # /usr/include/c++/4.6.3/bits/vector.tcc:680:25
 12237 000e 4885F6   		testq	%rsi, %rsi
 12238              	.Ltmp4126:
 12239              		#DEBUG_VALUE: reserve:this <- R14+0
 12240 0011 0F888700 		js	.LBB14_11
 12240      0000
 12241              	# BB#1:
 12242              	.Ltmp4127:
 12243              		#DEBUG_VALUE: reserve:this <- R14+0
 12244              	.Ltmp4128:
 12245              		#DEBUG_VALUE: reserve:__n <- RSI+0
 12246 0017 4889F3   		movq	%rsi, %rbx
 12247              	.Ltmp4129:
 12248              		#DEBUG_VALUE: reserve:__n <- undef
 12249 001a 4989FE   		movq	%rdi, %r14
 650:/usr/include/c++/4.6.3/bits/stl_vector.h ****       capacity() const
 12250              		.loc	34 650 7
 12251              	.Ltmp4130:
 12252              		#DEBUG_VALUE: capacity:this <- R14+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:650:7[ /usr/includ
 651:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 12253              		.loc	34 651 9
 12254              	.Ltmp4131:
 12255 001d 4D8B3E   		movq	(%r14), %r15            # /usr/include/c++/4.6.3/bits/stl_vector.h:651:9[ /usr/include/c++/4.
 12256 0020 498B4610 		movq	16(%r14), %rax          # /usr/include/c++/4.6.3/bits/stl_vector.h:651:9[ /usr/include/c++/4.
 12257 0024 4C29F8   		subq	%r15, %rax              # /usr/include/c++/4.6.3/bits/stl_vector.h:651:9[ /usr/include/c++/4.
 12258 0027 48D1F8   		sarq	%rax                    # /usr/include/c++/4.6.3/bits/stl_vector.h:651:9[ /usr/include/c++/4.
 12259 002a 4839D8   		cmpq	%rbx, %rax              # /usr/include/c++/4.6.3/bits/stl_vector.h:651:9[ /usr/include/c++/4.
 12260 002d 7360     		jae	.LBB14_10
 12261              	# BB#2:
 12262              	.Ltmp4132:
 12263              		#DEBUG_VALUE: reserve:this <- R14+0
 12264              	.Ltmp4133:
 12265              		#DEBUG_VALUE: capacity:this <- R14+0
 12266              	.Ltmp4134:
 571:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 12267              		.loc	34 571 9
 12268              	.Ltmp4135:
 12269 002f 498B4608 		movq	8(%r14), %rax           # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ /usr/include/c++/4.
  73:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  const size_type __old_size = size();
 12270              		.loc	40 73 39
 12271              	.Ltmp4136:
 12272              		#DEBUG_VALUE: __old_size <- R13+0 # /usr/include/c++/4.6.3/bits/vector.tcc:73:39
 570:/usr/include/c++/4.6.3/bits/stl_vector.h ****       size() const
 12273              		.loc	34 570 7
 12274              	.Ltmp4137:
 12275              		#DEBUG_VALUE: size:this <- R14+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:570:7[ /usr/include/c+
 12276 0033 488945D0 		movq	%rax, -48(%rbp)         # 8-byte Spill
 12277 0037 31C0     		xorl	%eax, %eax
 12278              	.Ltmp4138:
1049:/usr/include/c++/4.6.3/bits/stl_vector.h ****         _M_allocate_and_copy(size_type __n,
 12279              		.loc	34 1049 9
 12280              	.Ltmp4139:
 12281              		#DEBUG_VALUE: _M_allocate_and_copy:this <- R14+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:1049:9
1050:/usr/include/c++/4.6.3/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
 12282              		.loc	34 1050 26
 12283              	.Ltmp4140:
 12284              		#DEBUG_VALUE: _M_allocate_and_copy:__first <- R15+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:105
1050:/usr/include/c++/4.6.3/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
 12285              		.loc	34 1050 52
 12286              	.Ltmp4141:
 12287              		#DEBUG_VALUE: _M_allocate_and_copy:__last <- [%rbp+$-48]+$0 # /usr/include/c++/4.6.3/bits/stl_vect
 149:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_allocate(size_t __n)
 12288              		.loc	34 149 26
 12289              	.Ltmp4142:
 12290              		#DEBUG_VALUE: _M_allocate:__n <- RBX+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:149:26[ /usr/inc
 150:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return __n != 0 ? _M_impl.allocate(__n) : 0; }
 12291              		.loc	34 150 9
 12292              	.Ltmp4143:
 12293 0039 4885DB   		testq	%rbx, %rbx              # /usr/include/c++/4.6.3/bits/stl_vector.h:150:9[ /usr/include/c++/4
 12294 003c 740E     		je	.LBB14_5
 12295              	# BB#3:
 12296              	.Ltmp4144:
 12297              		#DEBUG_VALUE: reserve:this <- R14+0
 12298              	.Ltmp4145:
 12299              		#DEBUG_VALUE: capacity:this <- R14+0
 12300              	.Ltmp4146:
 12301              		#DEBUG_VALUE: size:this <- R14+0
 12302              	.Ltmp4147:
 12303              		#DEBUG_VALUE: __old_size <- R13+0
 12304              	.Ltmp4148:
 12305              		#DEBUG_VALUE: _M_allocate:__n <- RBX+0
 12306              	.Ltmp4149:
 12307              		#DEBUG_VALUE: _M_allocate_and_copy:__last <- [%rbp+$-48]+$0
 12308              	.Ltmp4150:
 12309              		#DEBUG_VALUE: _M_allocate_and_copy:__first <- R15+0
 12310              	.Ltmp4151:
 12311              		#DEBUG_VALUE: _M_allocate_and_copy:this <- R14+0
 12312 003e 4885DB   		testq	%rbx, %rbx
  87:/usr/include/c++/4.6.3/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
 12313              		.loc	4 87 26
 12314              	.Ltmp4152:
 12315              		#DEBUG_VALUE: allocate:__n <- RBX+0 # /usr/include/c++/4.6.3/ext/new_allocator.h:87:26[ /usr/inclu
 12316 0041 7865     		js	.LBB14_12
 12317              	# BB#4:                                 # %_ZN9__gnu_cxx13new_allocatorItE8allocateEmPKv.exit.i.i
 12318              	.Ltmp4153:
 12319              		#DEBUG_VALUE: reserve:this <- R14+0
 12320              	.Ltmp4154:
 12321              		#DEBUG_VALUE: capacity:this <- R14+0
 12322              	.Ltmp4155:
 12323              		#DEBUG_VALUE: size:this <- R14+0
 12324              	.Ltmp4156:
 12325              		#DEBUG_VALUE: __old_size <- R13+0
 12326              	.Ltmp4157:
 12327              		#DEBUG_VALUE: _M_allocate:__n <- RBX+0
 12328              	.Ltmp4158:
 12329              		#DEBUG_VALUE: _M_allocate_and_copy:__last <- [%rbp+$-48]+$0
 12330              	.Ltmp4159:
 12331              		#DEBUG_VALUE: _M_allocate_and_copy:__first <- R15+0
 12332              	.Ltmp4160:
 12333              		#DEBUG_VALUE: _M_allocate_and_copy:this <- R14+0
 12334              	.Ltmp4161:
 12335              		#DEBUG_VALUE: allocate:__n <- RBX+0
  92:/usr/include/c++/4.6.3/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 12336              		.loc	4 92 2
 12337              	.Ltmp4162:
 12338 0043 488D3C1B 		leaq	(%rbx,%rbx), %rdi       # /usr/include/c++/4.6.3/ext/new_allocator.h:92:2[ /usr/include/c++/4
 12339 0047 E8000000 		callq	_Znwm                   # /usr/include/c++/4.6.3/ext/new_allocator.h:92:2[ /usr/include/c++/
 12339      00
 12340              	.LBB14_5:                               # %_ZNSt12_Vector_baseItSaItEE11_M_allocateEm.exit.i
 12341              	.Ltmp4163:
 12342              		#DEBUG_VALUE: reserve:this <- R14+0
 12343              	.Ltmp4164:
 12344              		#DEBUG_VALUE: capacity:this <- R14+0
 12345              	.Ltmp4165:
 12346              		#DEBUG_VALUE: size:this <- R14+0
 12347              	.Ltmp4166:
 12348              		#DEBUG_VALUE: __old_size <- R13+0
 12349              	.Ltmp4167:
 12350              		#DEBUG_VALUE: _M_allocate:__n <- RBX+0
 12351              	.Ltmp4168:
 12352              		#DEBUG_VALUE: _M_allocate_and_copy:__last <- [%rbp+$-48]+$0
 12353              	.Ltmp4169:
 12354              		#DEBUG_VALUE: _M_allocate_and_copy:__first <- R15+0
 12355              	.Ltmp4170:
 12356              		#DEBUG_VALUE: _M_allocate_and_copy:this <- R14+0
 12357              	.Ltmp4171:
 150:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return __n != 0 ? _M_impl.allocate(__n) : 0; }
 12358              		.loc	34 150 9
 12359              	.Ltmp4172:
 12360 004c 4989C4   		movq	%rax, %r12              # /usr/include/c++/4.6.3/bits/stl_vector.h:150:9[ /usr/include/c++/4.
 12361              	.Ltmp4173:
 571:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 12362              		.loc	34 571 9
 12363              	.Ltmp4174:
 12364 004f 488B45D0 		movq	-48(%rbp), %rax         # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ /usr/include/c++/4.
 12365              	                                        # 8-byte Reload
 12366 0053 4989C5   		movq	%rax, %r13              # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ /usr/include/c++/4.
 12367 0056 4D29FD   		subq	%r15, %r13              # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ /usr/include/c++/4.
 12368              	.Ltmp4175:
 12369              		#DEBUG_VALUE: __copy_m:__last <- [%rbp+$-48]+$0
 12370              	.Ltmp4176:
 12371              		#DEBUG_VALUE: __simple <- 1+0
 12372 0059 4C39F8   		cmpq	%r15, %rax
 12373              	.Ltmp4177:
 12374              		#DEBUG_VALUE: __copy_m:__first <- R15+0
 12375              	.Ltmp4178:
 12376              		#DEBUG_VALUE: __copy_m:__last <- undef
 12377              	.Ltmp4179:
 12378              		#DEBUG_VALUE: _M_allocate_and_copy:__last <- undef
 12379 005c 740E     		je	.LBB14_7
 12380              	# BB#6:
 12381              	.Ltmp4180:
 12382              		#DEBUG_VALUE: reserve:this <- R14+0
 12383              	.Ltmp4181:
 12384              		#DEBUG_VALUE: capacity:this <- R14+0
 12385              	.Ltmp4182:
 12386              		#DEBUG_VALUE: size:this <- R14+0
 12387              	.Ltmp4183:
 12388              		#DEBUG_VALUE: __old_size <- R13+0
 12389              	.Ltmp4184:
 12390              		#DEBUG_VALUE: _M_allocate:__n <- RBX+0
 12391              	.Ltmp4185:
 12392              		#DEBUG_VALUE: _M_allocate_and_copy:__first <- R15+0
 12393              	.Ltmp4186:
 12394              		#DEBUG_VALUE: _M_allocate_and_copy:this <- R14+0
 12395              	.Ltmp4187:
 12396              		#DEBUG_VALUE: __simple <- 1+0
 12397              	.Ltmp4188:
 12398              		#DEBUG_VALUE: __copy_m:__first <- R15+0
 12399 005e 4C89E7   		movq	%r12, %rdi
 12400 0061 4C89FE   		movq	%r15, %rsi
 12401              	.Ltmp4189:
 12402              		#DEBUG_VALUE: __copy_m:__first <- undef
 12403              	.Ltmp4190:
 12404              		#DEBUG_VALUE: _M_allocate_and_copy:__first <- undef
 12405 0064 4C89EA   		movq	%r13, %rdx
 12406 0067 E8000000 		callq	memcpy
 12406      00
 12407              	.LBB14_7:                               # %_ZNSt6vectorItSaItEE20_M_allocate_and_copyIPtEES3_mT_S4_
 12408              	.Ltmp4191:
 12409              		#DEBUG_VALUE: reserve:this <- R14+0
 12410              	.Ltmp4192:
 12411              		#DEBUG_VALUE: capacity:this <- R14+0
 12412              	.Ltmp4193:
 12413              		#DEBUG_VALUE: size:this <- R14+0
 12414              	.Ltmp4194:
 12415              		#DEBUG_VALUE: __old_size <- R13+0
 12416              	.Ltmp4195:
 12417              		#DEBUG_VALUE: _M_allocate:__n <- RBX+0
 12418              	.Ltmp4196:
 12419              		#DEBUG_VALUE: _M_allocate_and_copy:this <- R14+0
 12420              	.Ltmp4197:
 12421              		#DEBUG_VALUE: __simple <- 1+0
 12422              	.Ltmp4198:
  79:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
 12423              		.loc	40 79 4
 12424              	.Ltmp4199:
 12425 006c 498B3E   		movq	(%r14), %rdi            # /usr/include/c++/4.6.3/bits/vector.tcc:79:4
 153:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)
 12426              		.loc	34 153 54
 12427              	.Ltmp4200:
 12428              		#DEBUG_VALUE: _M_deallocate:__p <- RDI+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:153:54[ /usr/i
  79:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
 12429              		.loc	40 79 4
 12430              	.Ltmp4201:
 12431 006f 4885FF   		testq	%rdi, %rdi              # /usr/include/c++/4.6.3/bits/vector.tcc:79:4
 12432 0072 7405     		je	.LBB14_9
 12433              	# BB#8:
 12434              	.Ltmp4202:
 12435              		#DEBUG_VALUE: reserve:this <- R14+0
 12436              	.Ltmp4203:
 12437              		#DEBUG_VALUE: capacity:this <- R14+0
 12438              	.Ltmp4204:
 12439              		#DEBUG_VALUE: size:this <- R14+0
 12440              	.Ltmp4205:
 12441              		#DEBUG_VALUE: __old_size <- R13+0
 12442              	.Ltmp4206:
 12443              		#DEBUG_VALUE: _M_allocate:__n <- RBX+0
 12444              	.Ltmp4207:
 12445              		#DEBUG_VALUE: _M_allocate_and_copy:this <- R14+0
 12446              	.Ltmp4208:
 12447              		#DEBUG_VALUE: __simple <- 1+0
 12448              	.Ltmp4209:
 12449              		#DEBUG_VALUE: _M_deallocate:__p <- RDI+0
  97:/usr/include/c++/4.6.3/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 12450              		.loc	4 97 26
 12451              	.Ltmp4210:
 12452              		#DEBUG_VALUE: deallocate:__p <- RDI+0 # /usr/include/c++/4.6.3/ext/new_allocator.h:97:26[ /usr/inc
 12453              	.Ltmp4211:
 12454              		#DEBUG_VALUE: deallocate:__p <- undef
 12455              	.Ltmp4212:
 12456              		#DEBUG_VALUE: _M_deallocate:__p <- undef
  98:/usr/include/c++/4.6.3/ext/new_allocator.h ****       { ::operator delete(__p); }
 12457              		.loc	4 98 9
 12458              	.Ltmp4213:
 12459 0074 E8000000 		callq	_ZdlPv                  # /usr/include/c++/4.6.3/ext/new_allocator.h:98:9[ /usr/include/c++/
 12459      00
 12460              	.LBB14_9:                               # %_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtm.exit
 12461              	.Ltmp4214:
 12462              		#DEBUG_VALUE: reserve:this <- R14+0
 12463              	.Ltmp4215:
 12464              		#DEBUG_VALUE: capacity:this <- R14+0
 12465              	.Ltmp4216:
 12466              		#DEBUG_VALUE: size:this <- R14+0
 12467              	.Ltmp4217:
 12468              		#DEBUG_VALUE: __old_size <- R13+0
 12469              	.Ltmp4218:
 12470              		#DEBUG_VALUE: _M_allocate:__n <- RBX+0
 12471              	.Ltmp4219:
 12472              		#DEBUG_VALUE: _M_allocate_and_copy:this <- R14+0
 12473              	.Ltmp4220:
 12474              		#DEBUG_VALUE: __simple <- 1+0
 12475              	.Ltmp4221:
 571:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 12476              		.loc	34 571 9
 12477              	.Ltmp4222:
 12478 0079 49D1FD   		sarq	%r13                    # /usr/include/c++/4.6.3/bits/stl_vector.h:571:9[ /usr/include/c++/4.
 12479              	.Ltmp4223:
  82:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl._M_start = __tmp;
 12480              		.loc	40 82 4
 12481              	.Ltmp4224:
 12482 007c 4D8926   		movq	%r12, (%r14)            # /usr/include/c++/4.6.3/bits/vector.tcc:82:4
  83:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
 12483              		.loc	40 83 4
 12484              	.Ltmp4225:
 12485 007f 4B8D046C 		leaq	(%r12,%r13,2), %rax     # /usr/include/c++/4.6.3/bits/vector.tcc:83:4
 12486 0083 49894608 		movq	%rax, 8(%r14)           # /usr/include/c++/4.6.3/bits/vector.tcc:83:4
  84:/usr/include/c++/4.6.3/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 12487              		.loc	40 84 4
 12488              	.Ltmp4226:
 12489 0087 498D045C 		leaq	(%r12,%rbx,2), %rax     # /usr/include/c++/4.6.3/bits/vector.tcc:84:4
 12490              	.Ltmp4227:
 12491              		#DEBUG_VALUE: _M_allocate:__n <- undef
 12492 008b 49894610 		movq	%rax, 16(%r14)          # /usr/include/c++/4.6.3/bits/vector.tcc:84:4
 12493              	.Ltmp4228:
 12494              		#DEBUG_VALUE: _M_allocate_and_copy:this <- undef
 12495              	.Ltmp4229:
 12496              		#DEBUG_VALUE: size:this <- undef
 12497              	.Ltmp4230:
 12498              		#DEBUG_VALUE: capacity:this <- undef
 12499              	.Ltmp4231:
 12500              	.LBB14_10:
  86:/usr/include/c++/4.6.3/bits/vector.tcc ****     }
 12501              		.loc	40 86 5
 12502              	.Ltmp4232:
 12503 008f 4883C408 		addq	$8, %rsp                # /usr/include/c++/4.6.3/bits/vector.tcc:86:5
 12504              	.Ltmp4233:
 12505              		#DEBUG_VALUE: reserve:this <- R14+0
 12506 0093 5B       		popq	%rbx                    # /usr/include/c++/4.6.3/bits/vector.tcc:86:5
 12507 0094 415C     		popq	%r12                    # /usr/include/c++/4.6.3/bits/vector.tcc:86:5
 12508 0096 415D     		popq	%r13                    # /usr/include/c++/4.6.3/bits/vector.tcc:86:5
 12509 0098 415E     		popq	%r14                    # /usr/include/c++/4.6.3/bits/vector.tcc:86:5
 12510 009a 415F     		popq	%r15                    # /usr/include/c++/4.6.3/bits/vector.tcc:86:5
 12511 009c 5D       		popq	%rbp                    # /usr/include/c++/4.6.3/bits/vector.tcc:86:5
 12512 009d C3       		ret                             # /usr/include/c++/4.6.3/bits/vector.tcc:86:5
 12513              	.LBB14_11:
 12514              	.Ltmp4234:
 12515              		#DEBUG_VALUE: reserve:this <- R14+0
  70:/usr/include/c++/4.6.3/bits/vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
 12516              		.loc	40 70 2
 12517              	.Ltmp4235:
 12518 009e BF000000 		movl	$.L.str29, %edi         # /usr/include/c++/4.6.3/bits/vector.tcc:70:2
 12518      00
 12519 00a3 E8000000 		callq	_ZSt20__throw_length_errorPKc # /usr/include/c++/4.6.3/bits/vector.tcc:70:2
 12519      00
 12520              	.LBB14_12:
 12521              	.Ltmp4236:
 12522              		#DEBUG_VALUE: reserve:this <- R14+0
 12523              	.Ltmp4237:
 12524              		#DEBUG_VALUE: __old_size <- R13+0
  90:/usr/include/c++/4.6.3/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 12525              		.loc	4 90 4
 12526              	.Ltmp4238:
 12527 00a8 E8000000 		callq	_ZSt17__throw_bad_allocv # /usr/include/c++/4.6.3/ext/new_allocator.h:90:4[ /usr/include/c++
 12527      00
 12528              	.Ltmp4239:
 12529              	.Ltmp4240:
 12531              	.Lfunc_end14:
 12532              	.Leh_func_end14:
 12533              	
 12534              		.section	.text._ZN4LELA12SparseMatrixItNS_12SparseVectorItSt6vectorIjSaIjEES2_ItSaItEEEENS_25Vecto
 12535              		.weak	_ZN4LELA12SparseMatrixItNS_12SparseVectorItSt6vectorIjSaIjEES2_ItSaItEEEENS_25VectorRepresen
 12536              		.align	16, 0x90
 12538              	_ZN4LELA12SparseMatrixItNS_12SparseVectorItSt6vectorIjSaIjEES2_ItSaItEEEENS_25VectorRepresentationT
 12539              	.Leh_func_begin15:
 12540              	.Lfunc_begin15:
 193:../lela/matrix/sparse.h **** 		: _A (m), _m (m), _n (n) {}
 12541              		.loc	30 193 0
 12542              	.Ltmp4247:
 12543              	# BB#0:
 12544 0000 55       		pushq	%rbp
 12545              	.Ltmp4244:
 12546 0001 4889E5   		movq	%rsp, %rbp
 12547              	.Ltmp4245:
 12548 0004 4157     		pushq	%r15
 12549 0006 4156     		pushq	%r14
 12550 0008 53       		pushq	%rbx
 12551 0009 4883EC38 		subq	$56, %rsp
 12552              	.Ltmp4246:
 12553              		#DEBUG_VALUE: SparseMatrix:this <- RDI+0 # ../lela/matrix/sparse.h:192:2
 12554              		#DEBUG_VALUE: SparseMatrix:m <- RSI+0 # ../lela/matrix/sparse.h:192:23
 12555              		#DEBUG_VALUE: SparseMatrix:n <- RDX+0 # ../lela/matrix/sparse.h:192:33
 12556 000d 4889D3   		movq	%rdx, %rbx
 12557              	.Ltmp4248:
 12558              		#DEBUG_VALUE: SparseMatrix:n <- RBX+0
 12559 0010 4989F6   		movq	%rsi, %r14
 12560              	.Ltmp4249:
 12561              		#DEBUG_VALUE: SparseMatrix:m <- R14+0
 12562 0013 4989FF   		movq	%rdi, %r15
 12563              	.Ltmp4250:
 12564              		#DEBUG_VALUE: SparseMatrix:this <- R15+0
 12565 0016 48C745B8 		movq	$0, -72(%rbp)
 12565      00000000 
 12566              	.Ltmp4251:
 12567              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12568              	.Ltmp4252:
 12569              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12570 001e 48C745C0 		movq	$0, -64(%rbp)
 12570      00000000 
 12571 0026 48C745C8 		movq	$0, -56(%rbp)
 12571      00000000 
 12572 002e 48C745D0 		movq	$0, -48(%rbp)
 12572      00000000 
 12573 0036 48C745D8 		movq	$0, -40(%rbp)
 12573      00000000 
 12574 003e 48C745E0 		movq	$0, -32(%rbp)
 12574      00000000 
 12575              	.Ltmp4253:
 12576              		#DEBUG_VALUE: vector:this <- R15+0
 12577              	.Ltmp4254:
 12578              		#DEBUG_VALUE: vector:__n <- R14+0
 12579 0046 488D55B8 		leaq	-72(%rbp), %rdx
 12580 004a 488D4DB0 		leaq	-80(%rbp), %rcx
 12581              	.Ltmp4255:
 12582              		#DEBUG_VALUE: vector:__value <- RDX+0
 12583              	.Ltmp4256:
 12584              		#DEBUG_VALUE: vector:__a <- RCX+0
 12585              	.Ltmp4241:
 12586 004e 4C89FF   		movq	%r15, %rdi
 12587 0051 4C89F6   		movq	%r14, %rsi
 12588              	.Ltmp4257:
 12589              		#DEBUG_VALUE: vector:__value <- undef
 12590              	.Ltmp4258:
 12591              		#DEBUG_VALUE: vector:__a <- undef
 12592 0054 E8000000 		callq	_ZNSt6vectorIN4LELA12SparseVectorItS_IjSaIjEES_ItSaItEEEESaIS6_EEC2EmRKS6_RKS7_
 12592      00
 12593              	.Ltmp4242:
 12594              	# BB#1:                                 # %_ZNSt6vectorIN4LELA12SparseVectorItS_IjSaIjEES_ItSaItEEE
 12595              	.Ltmp4259:
 12596              		#DEBUG_VALUE: SparseMatrix:this <- R15+0
 12597              	.Ltmp4260:
 12598              		#DEBUG_VALUE: SparseMatrix:m <- R14+0
 12599              	.Ltmp4261:
 12600              		#DEBUG_VALUE: SparseMatrix:n <- RBX+0
 12601              	.Ltmp4262:
 12602              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12603              	.Ltmp4263:
 12604              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12605              	.Ltmp4264:
 12606              		#DEBUG_VALUE: vector:__n <- R14+0
 12607              	.Ltmp4265:
 12608              		#DEBUG_VALUE: vector:this <- R15+0
 12609 0059 488B7DD0 		movq	-48(%rbp), %rdi
 12610 005d 4885FF   		testq	%rdi, %rdi
 12611 0060 7405     		je	.LBB15_3
 12612              	# BB#2:
 12613              	.Ltmp4266:
 12614              		#DEBUG_VALUE: SparseMatrix:this <- R15+0
 12615              	.Ltmp4267:
 12616              		#DEBUG_VALUE: SparseMatrix:m <- R14+0
 12617              	.Ltmp4268:
 12618              		#DEBUG_VALUE: SparseMatrix:n <- RBX+0
 12619              	.Ltmp4269:
 12620              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12621              	.Ltmp4270:
 12622              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12623              	.Ltmp4271:
 12624              		#DEBUG_VALUE: vector:__n <- R14+0
 12625              	.Ltmp4272:
 12626              		#DEBUG_VALUE: vector:this <- R15+0
 12627 0062 E8000000 		callq	_ZdlPv
 12627      00
 12628              	.LBB15_3:                               # %_ZNSt6vectorItSaItEED1Ev.exit.i.i1
 12629              	.Ltmp4273:
 12630              		#DEBUG_VALUE: SparseMatrix:this <- R15+0
 12631              	.Ltmp4274:
 12632              		#DEBUG_VALUE: SparseMatrix:m <- R14+0
 12633              	.Ltmp4275:
 12634              		#DEBUG_VALUE: SparseMatrix:n <- RBX+0
 12635              	.Ltmp4276:
 12636              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12637              	.Ltmp4277:
 12638              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12639              	.Ltmp4278:
 12640              		#DEBUG_VALUE: vector:__n <- R14+0
 12641              	.Ltmp4279:
 12642              		#DEBUG_VALUE: vector:this <- R15+0
 12643 0067 488B7DB8 		movq	-72(%rbp), %rdi
 12644              	.Ltmp4280:
 12645              		#DEBUG_VALUE: _M_deallocate:__p <- RDI+0
 12646 006b 4885FF   		testq	%rdi, %rdi
 12647 006e 7405     		je	.LBB15_5
 12648              	# BB#4:
 12649              	.Ltmp4281:
 12650              		#DEBUG_VALUE: SparseMatrix:this <- R15+0
 12651              	.Ltmp4282:
 12652              		#DEBUG_VALUE: SparseMatrix:m <- R14+0
 12653              	.Ltmp4283:
 12654              		#DEBUG_VALUE: SparseMatrix:n <- RBX+0
 12655              	.Ltmp4284:
 12656              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12657              	.Ltmp4285:
 12658              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12659              	.Ltmp4286:
 12660              		#DEBUG_VALUE: vector:__n <- R14+0
 12661              	.Ltmp4287:
 12662              		#DEBUG_VALUE: vector:this <- R15+0
 12663              	.Ltmp4288:
 12664              		#DEBUG_VALUE: _M_deallocate:__p <- RDI+0
 12665              	.Ltmp4289:
 12666              		#DEBUG_VALUE: deallocate:__p <- RDI+0
 12667              	.Ltmp4290:
 12668              		#DEBUG_VALUE: deallocate:__p <- undef
 12669              	.Ltmp4291:
 12670              		#DEBUG_VALUE: _M_deallocate:__p <- undef
 12671 0070 E8000000 		callq	_ZdlPv
 12671      00
 12672              	.LBB15_5:                               # %_ZN4LELA12SparseVectorItSt6vectorIjSaIjEES1_ItSaItEEED1E
 12673              	.Ltmp4292:
 12674              		#DEBUG_VALUE: SparseMatrix:this <- R15+0
 12675              	.Ltmp4293:
 12676              		#DEBUG_VALUE: SparseMatrix:this <- undef
 12677              	.Ltmp4294:
 12678              		#DEBUG_VALUE: SparseMatrix:m <- R14+0
 12679              	.Ltmp4295:
 12680              		#DEBUG_VALUE: SparseMatrix:m <- undef
 12681              	.Ltmp4296:
 12682              		#DEBUG_VALUE: SparseMatrix:n <- RBX+0
 12683              	.Ltmp4297:
 12684              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12685              	.Ltmp4298:
 12686              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12687              	.Ltmp4299:
 12688              		#DEBUG_VALUE: vector:__n <- R14+0
 12689              	.Ltmp4300:
 12690              		#DEBUG_VALUE: vector:__n <- undef
 12691              	.Ltmp4301:
 12692              		#DEBUG_VALUE: vector:this <- R15+0
 12693              	.Ltmp4302:
 12694              		#DEBUG_VALUE: vector:this <- undef
 12695 0075 4D897718 		movq	%r14, 24(%r15)
 12696 0079 49895F20 		movq	%rbx, 32(%r15)
 193:../lela/matrix/sparse.h **** 		: _A (m), _m (m), _n (n) {}
 12697              		.loc	30 193 29
 12698              	.Ltmp4303:
 12699 007d 4883C438 		addq	$56, %rsp               # ../lela/matrix/sparse.h:193:29
 12700 0081 5B       		popq	%rbx                    # ../lela/matrix/sparse.h:193:29
 12701 0082 415E     		popq	%r14                    # ../lela/matrix/sparse.h:193:29
 12702 0084 415F     		popq	%r15                    # ../lela/matrix/sparse.h:193:29
 12703 0086 5D       		popq	%rbp                    # ../lela/matrix/sparse.h:193:29
 12704 0087 C3       		ret                             # ../lela/matrix/sparse.h:193:29
 12705              	.LBB15_6:
 12706              	.Ltmp4243:
 12707              	.Ltmp4304:
 12708              		#DEBUG_VALUE: SparseMatrix:n <- RBX+0
 12709              	.Ltmp4305:
 12710              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12711              	.Ltmp4306:
 12712              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12713 0088 4889C3   		movq	%rax, %rbx
 12714 008b 488B7DD0 		movq	-48(%rbp), %rdi
 12715 008f 4885FF   		testq	%rdi, %rdi
 12716 0092 7405     		je	.LBB15_8
 12717              	# BB#7:
 12718              	.Ltmp4307:
 12719              		#DEBUG_VALUE: SparseMatrix:n <- RBX+0
 12720              	.Ltmp4308:
 12721              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12722              	.Ltmp4309:
 12723              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12724 0094 E8000000 		callq	_ZdlPv
 12724      00
 12725              	.LBB15_8:                               # %_ZNSt6vectorItSaItEED1Ev.exit.i.i
 12726              	.Ltmp4310:
 12727              		#DEBUG_VALUE: SparseMatrix:n <- RBX+0
 12728              	.Ltmp4311:
 12729              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12730              	.Ltmp4312:
 12731              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12732 0099 488B7DB8 		movq	-72(%rbp), %rdi
 12733              	.Ltmp4313:
 12734              		#DEBUG_VALUE: _M_deallocate:__p <- RDI+0
 12735 009d 4885FF   		testq	%rdi, %rdi
 12736 00a0 7405     		je	.LBB15_10
 12737              	# BB#9:
 12738              	.Ltmp4314:
 12739              		#DEBUG_VALUE: SparseMatrix:n <- RBX+0
 12740              	.Ltmp4315:
 12741              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12742              	.Ltmp4316:
 12743              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12744              	.Ltmp4317:
 12745              		#DEBUG_VALUE: _M_deallocate:__p <- RDI+0
 12746              	.Ltmp4318:
 12747              		#DEBUG_VALUE: deallocate:__p <- RDI+0
 12748              	.Ltmp4319:
 12749              		#DEBUG_VALUE: deallocate:__p <- undef
 12750              	.Ltmp4320:
 12751              		#DEBUG_VALUE: _M_deallocate:__p <- undef
 12752 00a2 E8000000 		callq	_ZdlPv
 12752      00
 12753              	.LBB15_10:                              # %_ZN4LELA12SparseVectorItSt6vectorIjSaIjEES1_ItSaItEEED1E
 12754              	.Ltmp4321:
 12755              		#DEBUG_VALUE: SparseMatrix:n <- RBX+0
 12756              	.Ltmp4322:
 12757              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12758              	.Ltmp4323:
 12759              		#DEBUG_VALUE: SparseVector:this <- RDX+0
 12760 00a7 4889DF   		movq	%rbx, %rdi
 12761 00aa E8000000 		callq	_Unwind_Resume_or_Rethrow
 12761      00
 12762              	.Ltmp4324:
 12763              	.Ltmp4325:
 12765              	.Lfunc_end15:
 12766              	.Leh_func_end15:
 12767              		.section	.gcc_except_table,"a",@progbits
 12768              		.align	4
 12769              	GCC_except_table15:
 12770              	.Lexception15:
 12771 01e8 FF       		.byte	255                     # @LPStart Encoding = omit
 12772 01e9 03       		.byte	3                       # @TType Encoding = udata4
 12773 01ea A2       		.byte	162                     # @TType base offset
 12774 01eb 8080     		.zero	2,128
 12775 01ed 00       		.zero	1
 12776 01ee 03       		.byte	3                       # Call site Encoding = udata4
 12777 01ef 1A       		.byte	26                      # Call site table length
 12778              	.Lset89 = .Ltmp4241-.Leh_func_begin15   # Region start
 12779 01f0 4E000000 		.long	.Lset89
 12780              	.Lset90 = .Ltmp4242-.Ltmp4241           # Region length
 12781 01f4 0B000000 		.long	.Lset90
 12782              	.Lset91 = .Ltmp4243-.Leh_func_begin15   # Landing pad
 12783 01f8 88000000 		.long	.Lset91
 12784 01fc 01       		.byte	1                       # Action
 12785              	.Lset92 = .Ltmp4242-.Leh_func_begin15   # Region start
 12786 01fd 59000000 		.long	.Lset92
 12787              	.Lset93 = .Leh_func_end15-.Ltmp4242     # Region length
 12788 0201 56000000 		.long	.Lset93
 12789 0205 00000000 		.long	0                       # Landing pad
 12790 0209 00       		.byte	0                       # Action
 12791              	                                        # -- Action Record Table --
 12792              	                                        # Action Record
 12793 020a 01       		.byte	1                       #   TypeInfo index
 12794 020b 00       		.byte	0                       #   Next action
 12795              	                                        # -- Catch TypeInfos --
 12796 020c 00000000 		.long	0                       # TypeInfo
 12797              		.align	4
 12798              	
 12799              		.section	.text._ZNSt6vectorIN4LELA12SparseVectorItS_IjSaIjEES_ItSaItEEEESaIS6_EEC2EmRKS6_RKS7_,"ax
 12800              		.weak	_ZNSt6vectorIN4LELA12SparseVectorItS_IjSaIjEES_ItSaItEEEESaIS6_EEC2EmRKS6_RKS7_
 12801              		.align	16, 0x90
 12803              	_ZNSt6vectorIN4LELA12SparseVectorItS_IjSaIjEES_ItSaItEEEESaIS6_EEC2EmRKS6_RKS7_: # @_ZNSt6vectorIN4
 12804              	.Leh_func_begin16:
 12805              	.Lfunc_begin16:
 266:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 12806              		.loc	34 266 0
 12807              	.Ltmp4337:
 12808              	# BB#0:
 12809 0000 55       		pushq	%rbp
 12810              	.Ltmp4334:
 12811 0001 4889E5   		movq	%rsp, %rbp
 12812              	.Ltmp4335:
 12813 0004 4157     		pushq	%r15
 12814 0006 4156     		pushq	%r14
 12815 0008 53       		pushq	%rbx
 12816 0009 50       		pushq	%rax
 12817              	.Ltmp4336:
 12818              		#DEBUG_VALUE: vector:this <- RDI+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:263:7
 12819              		#DEBUG_VALUE: vector:__n <- RSI+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:263:24
 12820              		#DEBUG_VALUE: vector:__value <- RDX+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:263:47
 12821              		#DEBUG_VALUE: vector:__a <- RCX+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:264:29
 12822 000a 4889D3   		movq	%rdx, %rbx
 12823              	.Ltmp4338:
 12824              		#DEBUG_VALUE: vector:__value <- RBX+0
 12825 000d 4989FE   		movq	%rdi, %r14
 12826              	.Ltmp4339:
 12827              		#DEBUG_VALUE: _Vector_base:__n <- RSI+0
 12828              	.Ltmp4340:
 12829              		#DEBUG_VALUE: vector:this <- R14+0
 12830 0010 49C70600 		movq	$0, (%r14)
 12830      000000
 12831 0017 49C74608 		movq	$0, 8(%r14)
 12831      00000000 
 12832 001f 49C74610 		movq	$0, 16(%r14)
 12832      00000000 
 12833 0027 31C0     		xorl	%eax, %eax
 12834              	.Ltmp4341:
 12835              		#DEBUG_VALUE: _M_allocate:__n <- RSI+0
 12836 0029 4885F6   		testq	%rsi, %rsi
 12837              	.Ltmp4342:
 12838              		#DEBUG_VALUE: vector:__value <- RDX+0
 12839 002c 4989F7   		movq	%rsi, %r15
 12840              	.Ltmp4343:
 12841              		#DEBUG_VALUE: _M_allocate:__n <- undef
 12842              	.Ltmp4344:
 12843              		#DEBUG_VALUE: _Vector_base:__n <- undef
 12844              	.Ltmp4345:
 12845              		#DEBUG_VALUE: vector:__n <- undef
 12846 002f 7424     		je	.LBB16_4
 12847              	# BB#1:
 12848              	.Ltmp4346:
 12849              		#DEBUG_VALUE: vector:this <- R14+0
 12850              	.Ltmp4347:
 12851              		#DEBUG_VALUE: vector:__value <- RDX+0
 12852              	.Ltmp4348:
 12853              		#DEBUG_VALUE: vector:__a <- RCX+0
 12854              	.Ltmp4349:
 12855              		#DEBUG_VALUE: allocate:__n <- R15+0
 12856 0031 48B85655 		movabsq	$384307168202282326, %rax # imm = 0x555555555555556
 12856      55555555 
 12856      5505
 12857 003b 4939C7   		cmpq	%rax, %r15
 12858 003e 7205     		jb	.LBB16_3
 12859              	# BB#2:
 12860              	.Ltmp4328:
 12861              	.Ltmp4350:
 12862              		#DEBUG_VALUE: vector:__value <- RDX+0
 12863              	.Ltmp4351:
 12864              		#DEBUG_VALUE: vector:__a <- RCX+0
 12865 0040 E8000000 		callq	_ZSt17__throw_bad_allocv
 12865      00
 12866              	.Ltmp4329:
 12867              	.LBB16_3:                               # %_ZN9__gnu_cxx13new_allocatorIN4LELA12SparseVectorItSt6ve
 12868              	.Ltmp4326:
 12869              	.Ltmp4352:
 12870              		#DEBUG_VALUE: vector:this <- R14+0
 12871              	.Ltmp4353:
 12872              		#DEBUG_VALUE: vector:__value <- RDX+0
 12873              	.Ltmp4354:
 12874              		#DEBUG_VALUE: vector:__a <- RCX+0
 12875              	.Ltmp4355:
 12876              		#DEBUG_VALUE: allocate:__n <- R15+0
 12877 0045 4C89F8   		movq	%r15, %rax
 12878 0048 48C1E004 		shlq	$4, %rax
 12879 004c 488D3C40 		leaq	(%rax,%rax,2), %rdi
 12880 0050 E8000000 		callq	_Znwm
 12880      00
 12881              	.Ltmp4327:
 12882              	.LBB16_4:                               # %_ZNSt12_Vector_baseIN4LELA12SparseVectorItSt6vectorIjSaI
 12883              	.Ltmp4356:
 12884              		#DEBUG_VALUE: vector:this <- R14+0
 12885              	.Ltmp4357:
 12886              		#DEBUG_VALUE: vector:__value <- RDX+0
 12887              	.Ltmp4358:
 12888              		#DEBUG_VALUE: vector:__a <- RCX+0
 12889 0055 4889DA   		movq	%rbx, %rdx
 12890              	.Ltmp4359:
 12891              		#DEBUG_VALUE: vector:this <- undef
 12892 0058 498906   		movq	%rax, (%r14)
 12893 005b 49894608 		movq	%rax, 8(%r14)
 12894 005f 4B8D0C7F 		leaq	(%r15,%r15,2), %rcx
 12895 0063 48C1E104 		shlq	$4, %rcx
 12896 0067 4801C1   		addq	%rax, %rcx
 12897 006a 49894E10 		movq	%rcx, 16(%r14)
 12898              	.Ltmp4331:
1122:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
 12899              		.loc	34 1122 7
 12900              	.Ltmp4360:
 12901              		#DEBUG_VALUE: _M_fill_initialize:this <- R14+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:1122:7[ 
1122:/usr/include/c++/4.6.3/bits/stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
 12902              		.loc	34 1122 36
 12903              	.Ltmp4361:
 12904              		#DEBUG_VALUE: _M_fill_initialize:__n <- R15+0 # /usr/include/c++/4.6.3/bits/stl_vector.h:1122:36[ 
   1:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
   3:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
   4:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // 2009, 2010, 2011
   5:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // Free Software Foundation, Inc.
   6:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** //
   7:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   8:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   9:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // terms of the GNU General Public License as published by the
  10:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
  11:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // any later version.
  12:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
  13:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  14:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // GNU General Public License for more details.
  17:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
  18:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  19:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  20:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  21:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
  22:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  23:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  24:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  25:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  26:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
  27:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** /*
  28:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  *
  29:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  * Copyright (c) 1994
  30:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  * Hewlett-Packard Company
  31:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  *
  32:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  33:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  34:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  35:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  36:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  37:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  38:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  39:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  *
  40:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  *
  41:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  * Copyright (c) 1996,1997
  42:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  43:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  *
  44:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  45:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  46:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  47:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  48:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  49:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  50:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  51:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  */
  52:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
  53:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  54:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  55:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  56:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****  */
  57:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
  58:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  59:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  60:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
  61:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  62:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** {
  63:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  64:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
  65:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   template<bool _TrivialValueTypes>
  66:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     struct __uninitialized_copy
  67:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     {
  68:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  69:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         static _ForwardIterator
  70:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  71:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  72:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         {
  73:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __result;
  74:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  __try
  75:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	    {
  76:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	      for (; __first != __last; ++__first, ++__cur)
  77:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
  78:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	      return __cur;
  79:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	    }
  80:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  __catch(...)
  81:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	    {
  82:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	      std::_Destroy(__result, __cur);
  83:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	      __throw_exception_again;
  84:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	    }
  85:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	}
  86:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     };
  87:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
  88:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   template<>
  89:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     struct __uninitialized_copy<true>
  90:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     {
  91:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  92:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         static _ForwardIterator
  93:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  94:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  95:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
  96:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     };
  97:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
  98:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   /**
  99:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
 100:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *  @param  first  An input iterator.
 101:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *  @param  last   An input iterator.
 102:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *  @param  result An output iterator.
 103:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *  @return   result + (first - last)
 104:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *
 105:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 106:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   */
 107:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 108:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     inline _ForwardIterator
 109:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 110:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 111:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     {
 112:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 113:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	_ValueType1;
 114:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 115:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	_ValueType2;
 116:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 117:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       return std::__uninitialized_copy<(__is_trivial(_ValueType1)
 118:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 					&& __is_trivial(_ValueType2))>::
 119:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 120:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     }
 121:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 122:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 123:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 124:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     struct __uninitialized_fill
 125:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     {
 126:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 127:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         static void
 128:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 129:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 130:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         {
 131:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 132:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  __try
 133:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	    {
 134:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 135:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 136:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	    }
 137:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  __catch(...)
 138:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	    {
 139:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 140:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 141:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	    }
 142:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	}
 143:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     };
 144:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 145:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   template<>
 146:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     struct __uninitialized_fill<true>
 147:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     {
 148:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 149:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         static void
 150:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 151:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 152:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 153:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     };
 154:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 155:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   /**
 156:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 157:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *  @param  first  An input iterator.
 158:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *  @param  last   An input iterator.
 159:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *  @param  x      The source value.
 160:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *  @return   Nothing.
 161:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *
 162:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 163:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   */
 164:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 165:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     inline void
 166:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 167:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 		       const _Tp& __x)
 168:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     {
 169:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 170:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	_ValueType;
 171:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 172:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       std::__uninitialized_fill<__is_trivial(_ValueType)>::
 173:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
 174:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     }
 175:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 176:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 177:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 178:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n
 179:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     {
 180:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 181:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         static void
 182:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 183:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 			const _Tp& __x)
 184:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         {
 185:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 186:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  __try
 187:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	    {
 188:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, ++__cur)
 189:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 190:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	    }
 191:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  __catch(...)
 192:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	    {
 193:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 194:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 195:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	    }
 196:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	}
 197:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     };
 198:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 199:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   template<>
 200:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 201:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     {
 202:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 203:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         static void
 204:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 205:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 			const _Tp& __x)
 206:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         { std::fill_n(__first, __n, __x); }
 207:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     };
 208:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 209:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   /**
 210:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 211:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *  @param  first  An input iterator.
 212:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *  @param  n      The number of copies to make.
 213:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *  @param  x      The source value.
 214:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *  @return   Nothing.
 215:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *
 216:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 217:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   */
 218:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 219:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     inline void
 220:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 221:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     {
 222:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 223:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	_ValueType;
 224:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 225:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       std::__uninitialized_fill_n<__is_trivial(_ValueType)>::
 226:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 227:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     }
 228:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 229:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 230:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
 231:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 232:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use 
 233:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   //  any of the POD optimizations.
 234:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 235:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 236:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	   typename _Allocator>
 237:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     _ForwardIterator
 238:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 239:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 240:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     {
 241:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 242:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       __try
 243:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	{
 244:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  for (; __first != __last; ++__first, ++__cur)
 245:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	    __alloc.construct(std::__addressof(*__cur), *__first);
 246:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  return __cur;
 247:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	}
 248:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       __catch(...)
 249:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	{
 250:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
 251:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 252:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	}
 253:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     }
 254:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 255:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 256:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     inline _ForwardIterator
 257:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 258:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 259:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __last, __result); }
 260:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 261:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 262:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	   typename _Allocator>
 263:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     inline _ForwardIterator
 264:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 265:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 266:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     {
 267:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 268:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
 269:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 					 __result, __alloc);
 270:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     }
 271:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 272:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Allocator>
 273:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     void
 274:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 275:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 			   const _Tp& __x, _Allocator& __alloc)
 276:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     {
 277:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 278:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       __try
 279:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	{
 280:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 281:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	    __alloc.construct(std::__addressof(*__cur), __x);
 282:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	}
 283:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       __catch(...)
 284:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	{
 285:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 286:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 287:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	}
 288:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     }
 289:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 290:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Tp2>
 291:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     inline void
 292:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 293:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 			   const _Tp& __x, allocator<_Tp2>&)
 294:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     { std::uninitialized_fill(__first, __last, __x); }
 295:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 296:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 297:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	   typename _Allocator>
 298:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     void
 299:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 300:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 			     const _Tp& __x, _Allocator& __alloc)
 301:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     {
 302:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 303:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       __try
 304:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	{
 305:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  for (; __n > 0; --__n, ++__cur)
 306:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	    __alloc.construct(std::__addressof(*__cur), __x);
 307:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	}
 308:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****       __catch(...)
 309:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	{
 310:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 311:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 312:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	}
 313:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     }
 314:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 
 315:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 316:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	   typename _Tp2>
 317:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     inline void
 318:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 12905              		.loc	43 318 47
 12906              	.Ltmp4362:
 12907              		#DEBUG_VALUE: __uninitialized_fill_n_a:__first <- RAX+0 # /usr/include/c++/4.6.3/bits/stl_uninitia
 12908              		.loc	43 318 62
 12909              	.Ltmp4363:
 12910              		#DEBUG_VALUE: __uninitialized_fill_n_a:__n <- R15+0 # /usr/include/c++/4.6.3/bits/stl_uninitialize
 220:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 12911              		.loc	43 220 43
 12912              	.Ltmp4364:
 12913              		#DEBUG_VALUE: uninitialized_fill_n:__first <- RAX+0 # /usr/include/c++/4.6.3/bits/stl_uninitialize
 220:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 12914              		.loc	43 220 58
 12915              	.Ltmp4365:
 12916              		#DEBUG_VALUE: uninitialized_fill_n:__n <- R15+0 # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:
 220:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 12917              		.loc	43 220 74
 12918              	.Ltmp4366:
 12919              		#DEBUG_VALUE: uninitialized_fill_n:__x <- RDX+0 # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:
 12920 006e 4889C7   		movq	%rax, %rdi
 12921              	.Ltmp4367:
 12922              		#DEBUG_VALUE: __uninitialized_fill_n_a:__first <- undef
 12923              	.Ltmp4368:
 12924              		#DEBUG_VALUE: uninitialized_fill_n:__first <- undef
 12925 0071 4C89FE   		movq	%r15, %rsi
 12926              	.Ltmp4369:
 12927              		#DEBUG_VALUE: _M_fill_initialize:__n <- undef
 12928              	.Ltmp4370:
 12929              		#DEBUG_VALUE: __uninitialized_fill_n_a:__n <- undef
 12930              	.Ltmp4371:
 12931              		#DEBUG_VALUE: uninitialized_fill_n:__n <- undef
 12932              	.Ltmp4372:
 12933              		#DEBUG_VALUE: uninitialized_fill_n:__x <- undef
 12934 0074 E8000000 		callq	_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPN4LELA12SparseVectorItSt6vectorIjSaIjE
 12934      00
 12935              	.Ltmp4332:
 12936              	# BB#5:
 12937              	.Ltmp4373:
 12938              		#DEBUG_VALUE: vector:__value <- RDX+0
 12939              	.Ltmp4374:
 12940              		#DEBUG_VALUE: vector:__a <- RCX+0
 12941              	.Ltmp4375:
 12942              		#DEBUG_VALUE: _M_fill_initialize:this <- R14+0
1126:/usr/include/c++/4.6.3/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
 12943              		.loc	34 1126 2
 12944              	.Ltmp4376:
 12945 0079 498B4610 		movq	16(%r14), %rax          # /usr/include/c++/4.6.3/bits/stl_vector.h:1126:2[ /usr/include/c++/4
 12946 007d 49894608 		movq	%rax, 8(%r14)           # /usr/include/c++/4.6.3/bits/stl_vector.h:1126:2[ /usr/include/c++/4
 12947              	.Ltmp4377:
 266:/usr/include/c++/4.6.3/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 12948              		.loc	34 266 9
 12949              	.Ltmp4378:
 12950 0081 4883C408 		addq	$8, %rsp                # /usr/include/c++/4.6.3/bits/stl_vector.h:266:9
 12951              	.Ltmp4379:
 12952              		#DEBUG_VALUE: _M_fill_initialize:this <- undef
 12953 0085 5B       		popq	%rbx                    # /usr/include/c++/4.6.3/bits/stl_vector.h:266:9
 12954 0086 415E     		popq	%r14                    # /usr/include/c++/4.6.3/bits/stl_vector.h:266:9
 12955 0088 415F     		popq	%r15                    # /usr/include/c++/4.6.3/bits/stl_vector.h:266:9
 12956 008a 5D       		popq	%rbp                    # /usr/include/c++/4.6.3/bits/stl_vector.h:266:9
 12957 008b C3       		ret                             # /usr/include/c++/4.6.3/bits/stl_vector.h:266:9
 12958              	.LBB16_6:
 12959              	.Ltmp4333:
 12960              	.Ltmp4380:
 12961              		#DEBUG_VALUE: vector:__value <- RDX+0
 12962              	.Ltmp4381:
 12963              		#DEBUG_VALUE: vector:__a <- RCX+0
 12964              	.Ltmp4382:
 12965              		#DEBUG_VALUE: _M_fill_initialize:this <- R14+0
 12966 008c 4889C3   		movq	%rax, %rbx              # /usr/include/c++/4.6.3/bits/stl_vector.h:266:9
 12967 008f 498B3E   		movq	(%r14), %rdi
 12968              	.Ltmp4383:
 12969              		#DEBUG_VALUE: _M_deallocate:__p <- RDI+0
 12970              	.Ltmp4384:
 12971              		#DEBUG_VALUE: _M_fill_initialize:this <- undef
 12972 0092 4885FF   		testq	%rdi, %rdi
 12973 0095 7405     		je	.LBB16_8
 12974              	# BB#7:
 12975              	.Ltmp4385:
 12976              		#DEBUG_VALUE: vector:__value <- RDX+0
 12977              	.Ltmp4386:
 12978              		#DEBUG_VALUE: vector:__a <- RCX+0
 12979              	.Ltmp4387:
 12980              		#DEBUG_VALUE: _M_deallocate:__p <- RDI+0
 12981              	.Ltmp4388:
 12982              		#DEBUG_VALUE: deallocate:__p <- RDI+0
 12983              	.Ltmp4389:
 12984              		#DEBUG_VALUE: deallocate:__p <- undef
 12985              	.Ltmp4390:
 12986              		#DEBUG_VALUE: _M_deallocate:__p <- undef
 12987 0097 E8000000 		callq	_ZdlPv
 12987      00
 12988              	.LBB16_8:                               # %_ZNSt12_Vector_baseIN4LELA12SparseVectorItSt6vectorIjSaI
 12989              	.Ltmp4391:
 12990              		#DEBUG_VALUE: vector:__value <- RDX+0
 12991              	.Ltmp4392:
 12992              		#DEBUG_VALUE: vector:__a <- RCX+0
 12993 009c 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/bits/stl_vector.h:266:9
 12994 009f E8000000 		callq	_Unwind_Resume_or_Rethrow # /usr/include/c++/4.6.3/bits/stl_vector.h:266:9
 12994      00
 12995              	.LBB16_9:
 12996              	.Ltmp4330:
 12997              	.Ltmp4393:
 12998              		#DEBUG_VALUE: vector:__value <- RDX+0
 12999              	.Ltmp4394:
 13000              		#DEBUG_VALUE: vector:__a <- RCX+0
 13001 00a4 4889C7   		movq	%rax, %rdi
 13002 00a7 E8000000 		callq	_Unwind_Resume_or_Rethrow
 13002      00
 13003              	.Ltmp4395:
 13004              	.Ltmp4396:
 13006              	.Lfunc_end16:
 13007              	.Leh_func_end16:
 13008              		.section	.gcc_except_table,"a",@progbits
 13009              		.align	4
 13010              	GCC_except_table16:
 13011              	.Lexception16:
 13012 0210 FF       		.byte	255                     # @LPStart Encoding = omit
 13013 0211 03       		.byte	3                       # @TType Encoding = udata4
 13014 0212 AF       		.byte	175                     # @TType base offset
 13015 0213 80       		.zero	1,128
 13016 0214 00       		.zero	1
 13017 0215 03       		.byte	3                       # Call site Encoding = udata4
 13018 0216 27       		.byte	39                      # Call site table length
 13019              	.Lset94 = .Ltmp4328-.Leh_func_begin16   # Region start
 13020 0217 40000000 		.long	.Lset94
 13021              	.Lset95 = .Ltmp4327-.Ltmp4328           # Region length
 13022 021b 15000000 		.long	.Lset95
 13023              	.Lset96 = .Ltmp4330-.Leh_func_begin16   # Landing pad
 13024 021f A4000000 		.long	.Lset96
 13025 0223 01       		.byte	1                       # Action
 13026              	.Lset97 = .Ltmp4331-.Leh_func_begin16   # Region start
 13027 0224 6E000000 		.long	.Lset97
 13028              	.Lset98 = .Ltmp4332-.Ltmp4331           # Region length
 13029 0228 0B000000 		.long	.Lset98
 13030              	.Lset99 = .Ltmp4333-.Leh_func_begin16   # Landing pad
 13031 022c 8C000000 		.long	.Lset99
 13032 0230 01       		.byte	1                       # Action
 13033              	.Lset100 = .Ltmp4332-.Leh_func_begin16  # Region start
 13034 0231 79000000 		.long	.Lset100
 13035              	.Lset101 = .Leh_func_end16-.Ltmp4332    # Region length
 13036 0235 33000000 		.long	.Lset101
 13037 0239 00000000 		.long	0                       # Landing pad
 13038 023d 00       		.byte	0                       # Action
 13039              	                                        # -- Action Record Table --
 13040              	                                        # Action Record
 13041 023e 01       		.byte	1                       #   TypeInfo index
 13042 023f 00       		.byte	0                       #   Next action
 13043              	                                        # -- Catch TypeInfos --
 13044 0240 00000000 		.long	0                       # TypeInfo
 13045              		.align	4
 13046              	
 13047              		.section	.text._ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPN4LELA12SparseVectorItSt6vect
 13048              		.weak	_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPN4LELA12SparseVectorItSt6vectorIjSaIjE
 13049              		.align	16, 0x90
 13051              	_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPN4LELA12SparseVectorItSt6vectorIjSaIjEES4_ItS
 13052              	.Leh_func_begin17:
 13053              	.Lfunc_begin17:
 184:/usr/include/c++/4.6.3/bits/stl_uninitialized.h ****         {
 13054              		.loc	43 184 0
 13055              	.Ltmp4412:
 13056              	# BB#0:
 13057 0000 55       		pushq	%rbp
 13058              	.Ltmp4409:
 13059 0001 4889E5   		movq	%rsp, %rbp
 13060              	.Ltmp4410:
 13061 0004 4157     		pushq	%r15
 13062 0006 4156     		pushq	%r14
 13063 0008 4155     		pushq	%r13
 13064 000a 4154     		pushq	%r12
 13065 000c 53       		pushq	%rbx
 13066 000d 50       		pushq	%rax
 13067              	.Ltmp4411:
 13068              		#DEBUG_VALUE: __uninit_fill_n:__first <- RDI+0 # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:1
 13069              		#DEBUG_VALUE: __uninit_fill_n:__n <- RSI+0 # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:182:5
 13070              		#DEBUG_VALUE: __uninit_fill_n:__x <- RDX+0 # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:183:1
 185:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 13071              		.loc	43 185 36
 13072              	.Ltmp4413:
 13073              		#DEBUG_VALUE: __cur <- RDI+0    # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:185:36
 13074 000e 31DB     		xorl	%ebx, %ebx
 13075 0010 4989D6   		movq	%rdx, %r14
 13076              	.Ltmp4414:
 13077              		#DEBUG_VALUE: __uninit_fill_n:__x <- R14+0
 13078 0013 4989F7   		movq	%rsi, %r15
 13079              	.Ltmp4415:
 13080              		#DEBUG_VALUE: __uninit_fill_n:__n <- R15+0
 13081 0016 4989FC   		movq	%rdi, %r12
 13082              	.Ltmp4416:
 13083              		#DEBUG_VALUE: __cur <- R12+0
 13084              	.Ltmp4417:
 13085              		#DEBUG_VALUE: __uninit_fill_n:__first <- R12+0
 13086 0019 4989DD   		movq	%rbx, %r13
 13087 001c 0F1F4000 		.align	16, 0x90
 13088              	.LBB17_1:                               # =>This Inner Loop Header: Depth=1
 13089              	.Ltmp4418:
 13090              		#DEBUG_VALUE: __uninit_fill_n:__first <- R12+0
 13091              	.Ltmp4419:
 13092              		#DEBUG_VALUE: __uninit_fill_n:__n <- R15+0
 13093              	.Ltmp4420:
 13094              		#DEBUG_VALUE: __uninit_fill_n:__x <- R14+0
 13095              	.Ltmp4421:
 13096              		#DEBUG_VALUE: __cur <- R12+0
 188:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, ++__cur)
 13097              		.loc	43 188 8
 13098              	.Ltmp4422:
 13099 0020 4D39EF   		cmpq	%r13, %r15              # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:188:8
 13100 0023 7466     		je	.LBB17_13
 13101              	# BB#2:                                 #   in Loop: Header=BB17_1 Depth=1
 13102              	.Ltmp4423:
 13103              		#DEBUG_VALUE: __uninit_fill_n:__first <- R12+0
 13104              	.Ltmp4424:
 13105              		#DEBUG_VALUE: __uninit_fill_n:__n <- R15+0
 13106              	.Ltmp4425:
 13107              		#DEBUG_VALUE: __uninit_fill_n:__x <- R14+0
 13108              	.Ltmp4426:
 13109              		#DEBUG_VALUE: __cur <- R12+0
 13110 0025 498D3C1C 		leaq	(%r12,%rbx), %rdi
 13111 0029 4885FF   		testq	%rdi, %rdi
 13112 002c 7412     		je	.LBB17_5
 13113              	# BB#3:                                 #   in Loop: Header=BB17_1 Depth=1
 13114              	.Ltmp4397:
 13115              	.Ltmp4427:
 13116              		#DEBUG_VALUE: __uninit_fill_n:__first <- R12+0
 13117              	.Ltmp4428:
 13118              		#DEBUG_VALUE: __uninit_fill_n:__n <- R15+0
 13119              	.Ltmp4429:
 13120              		#DEBUG_VALUE: __uninit_fill_n:__x <- R14+0
 13121              	.Ltmp4430:
 13122              		#DEBUG_VALUE: __cur <- R12+0
 13123 002e 4C89F6   		movq	%r14, %rsi
 13124 0031 E8000000 		callq	_ZN4LELA12SparseVectorItSt6vectorIjSaIjEES1_ItSaItEEEC2ERKS6_
 13124      00
 13125              	.Ltmp4398:
 13126 0036 EB08     		jmp	.LBB17_5
 13127              	.LBB17_4:                               #   in Loop: Header=BB17_1 Depth=1
 13128              	.Ltmp4399:
 13129              	.Ltmp4400:
 13130              	.Ltmp4431:
 13131              		#DEBUG_VALUE: __uninit_fill_n:__first <- R12+0
 13132              	.Ltmp4432:
 13133              		#DEBUG_VALUE: __cur <- R12+0
 13134 0038 4889C7   		movq	%rax, %rdi
 13135 003b E8000000 		callq	_Unwind_Resume_or_Rethrow
 13135      00
 13136              	.Ltmp4401:
 13137              	.LBB17_5:                               # %_ZSt10_ConstructIN4LELA12SparseVectorItSt6vectorIjSaIjEE
 13138              	                                        #   in Loop: Header=BB17_1 Depth=1
 13139              	.Ltmp4433:
 13140              		#DEBUG_VALUE: __uninit_fill_n:__first <- R12+0
 13141              	.Ltmp4434:
 13142              		#DEBUG_VALUE: __uninit_fill_n:__n <- R15+0
 13143              	.Ltmp4435:
 13144              		#DEBUG_VALUE: __uninit_fill_n:__x <- R14+0
 13145              	.Ltmp4436:
 13146              		#DEBUG_VALUE: __cur <- R12+0
 13147 0040 4883C330 		addq	$48, %rbx
 13148 0044 49FFC5   		incq	%r13
 13149 0047 EBD7     		jmp	.LBB17_1
 13150              	.LBB17_6:
 13151              	.Ltmp4402:
 13152              	.Ltmp4437:
 13153              		#DEBUG_VALUE: __uninit_fill_n:__first <- R12+0
 13154              	.Ltmp4438:
 13155              		#DEBUG_VALUE: __cur <- R12+0
 190:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	    }
 13156              		.loc	43 190 6
 13157              	.Ltmp4439:
 13158 0049 4889C7   		movq	%rax, %rdi              # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:190:6
 13159 004c E8000000 		callq	__cxa_begin_catch       # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:190:6
 13159      00
 13160 0051 4885DB   		testq	%rbx, %rbx
 13161 0054 7430     		je	.LBB17_12
 13162 0056 662E0F1F 		.align	16, 0x90
 13162      84000000 
 13162      0000
 13163              	.LBB17_7:                               # %.lr.ph.i.i
 13164              	                                        # =>This Inner Loop Header: Depth=1
 13165 0060 498B7C24 		movq	24(%r12), %rdi
 13165      18
 13166 0065 4885FF   		testq	%rdi, %rdi
 13167 0068 7405     		je	.LBB17_9
 13168              	# BB#8:                                 #   in Loop: Header=BB17_7 Depth=1
 13169 006a E8000000 		callq	_ZdlPv
 13169      00
 13170              	.LBB17_9:                               # %_ZNSt6vectorItSaItEED1Ev.exit.i.i.i.i.i
 13171              	                                        #   in Loop: Header=BB17_7 Depth=1
 13172 006f 498B3C24 		movq	(%r12), %rdi
 13173 0073 4885FF   		testq	%rdi, %rdi
 13174 0076 7405     		je	.LBB17_11
 13175              	# BB#10:                                #   in Loop: Header=BB17_7 Depth=1
 13176 0078 E8000000 		callq	_ZdlPv
 13176      00
 13177              	.LBB17_11:                              # %_ZSt8_DestroyIN4LELA12SparseVectorItSt6vectorIjSaIjEES2_
 13178              	                                        #   in Loop: Header=BB17_7 Depth=1
 13179 007d 4983C430 		addq	$48, %r12
 13180 0081 49FFCD   		decq	%r13
 13181 0084 75DA     		jne	.LBB17_7
 13182              	.Ltmp4440:
 13183              	.LBB17_12:                              # %_ZSt8_DestroyIPN4LELA12SparseVectorItSt6vectorIjSaIjEES2
 194:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 13184              		.loc	43 194 8
 13185              	.Ltmp4441:
 13186              	.Ltmp4403:                              # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:194:8
 13187 0086 E8000000 		callq	__cxa_rethrow           # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:194:8
 13187      00
 13188              	.Ltmp4404:                              # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:194:8
 13189              	.Ltmp4442:
 13190              	.LBB17_13:
 196:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	}
 13191              		.loc	43 196 2
 13192              	.Ltmp4443:
 13193 008b 4883C408 		addq	$8, %rsp                # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:196:2
 13194 008f 5B       		popq	%rbx                    # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:196:2
 13195 0090 415C     		popq	%r12                    # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:196:2
 13196 0092 415D     		popq	%r13                    # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:196:2
 13197 0094 415E     		popq	%r14                    # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:196:2
 13198 0096 415F     		popq	%r15                    # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:196:2
 13199 0098 5D       		popq	%rbp                    # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:196:2
 13200 0099 C3       		ret                             # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:196:2
 13201              	.LBB17_14:
 13202              	.Ltmp4405:
 193:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 13203              		.loc	43 193 8
 13204              	.Ltmp4444:
 13205 009a 4889C3   		movq	%rax, %rbx              # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:193:8
 195:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	    }
 13206              		.loc	43 195 6
 13207              	.Ltmp4445:
 13208              	.Ltmp4406:                              # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:195:6
 13209 009d E8000000 		callq	__cxa_end_catch         # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:195:6
 13209      00
 13210              	.Ltmp4407:                              # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:195:6
 13211              	# BB#15:
 193:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 13212              		.loc	43 193 8
 13213              	.Ltmp4446:
 13214 00a2 4889DF   		movq	%rbx, %rdi              # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:193:8
 13215 00a5 E8000000 		callq	_Unwind_Resume_or_Rethrow # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:193:8
 13215      00
 13216              	.LBB17_16:
 13217              	.Ltmp4408:
 195:/usr/include/c++/4.6.3/bits/stl_uninitialized.h **** 	    }
 13218              		.loc	43 195 6
 13219              	.Ltmp4447:
 13220 00aa E8000000 		callq	_ZSt9terminatev         # /usr/include/c++/4.6.3/bits/stl_uninitialized.h:195:6
 13220      00
 13221              	.Ltmp4448:
 13222              	.Ltmp4449:
 13224              	.Lfunc_end17:
 13225              	.Leh_func_end17:
 13226              		.section	.gcc_except_table,"a",@progbits
 13227              		.align	4
 13228              	GCC_except_table17:
 13229              	.Lexception17:
 13230 0244 FF       		.byte	255                     # @LPStart Encoding = omit
 13231 0245 03       		.byte	3                       # @TType Encoding = udata4
 13232 0246 D6       		.byte	214                     # @TType base offset
 13233 0247 8080     		.zero	2,128
 13234 0249 00       		.zero	1
 13235 024a 03       		.byte	3                       # Call site Encoding = udata4
 13236 024b 4E       		.byte	78                      # Call site table length
 13237              	.Lset102 = .Ltmp4397-.Leh_func_begin17  # Region start
 13238 024c 2E000000 		.long	.Lset102
 13239              	.Lset103 = .Ltmp4398-.Ltmp4397          # Region length
 13240 0250 08000000 		.long	.Lset103
 13241              	.Lset104 = .Ltmp4399-.Leh_func_begin17  # Landing pad
 13242 0254 38000000 		.long	.Lset104
 13243 0258 01       		.byte	1                       # Action
 13244              	.Lset105 = .Ltmp4400-.Leh_func_begin17  # Region start
 13245 0259 38000000 		.long	.Lset105
 13246              	.Lset106 = .Ltmp4401-.Ltmp4400          # Region length
 13247 025d 08000000 		.long	.Lset106
 13248              	.Lset107 = .Ltmp4402-.Leh_func_begin17  # Landing pad
 13249 0261 49000000 		.long	.Lset107
 13250 0265 01       		.byte	1                       # Action
 13251              	.Lset108 = .Ltmp4401-.Leh_func_begin17  # Region start
 13252 0266 40000000 		.long	.Lset108
 13253              	.Lset109 = .Ltmp4403-.Ltmp4401          # Region length
 13254 026a 46000000 		.long	.Lset109
 13255 026e 00000000 		.long	0                       # Landing pad
 13256 0272 00       		.byte	0                       # Action
 13257              	.Lset110 = .Ltmp4403-.Leh_func_begin17  # Region start
 13258 0273 86000000 		.long	.Lset110
 13259              	.Lset111 = .Ltmp4404-.Ltmp4403          # Region length
 13260 0277 05000000 		.long	.Lset111
 13261              	.Lset112 = .Ltmp4405-.Leh_func_begin17  # Landing pad
 13262 027b 9A000000 		.long	.Lset112
 13263 027f 01       		.byte	1                       # Action
 13264              	.Lset113 = .Ltmp4406-.Leh_func_begin17  # Region start
 13265 0280 9D000000 		.long	.Lset113
 13266              	.Lset114 = .Ltmp4407-.Ltmp4406          # Region length
 13267 0284 05000000 		.long	.Lset114
 13268              	.Lset115 = .Ltmp4408-.Leh_func_begin17  # Landing pad
 13269 0288 AA000000 		.long	.Lset115
 13270 028c 01       		.byte	1                       # Action
 13271              	.Lset116 = .Ltmp4407-.Leh_func_begin17  # Region start
 13272 028d A2000000 		.long	.Lset116
 13273              	.Lset117 = .Leh_func_end17-.Ltmp4407    # Region length
 13274 0291 0D000000 		.long	.Lset117
 13275 0295 00000000 		.long	0                       # Landing pad
 13276 0299 00       		.byte	0                       # Action
 13277              	                                        # -- Action Record Table --
 13278              	                                        # Action Record
 13279 029a 01       		.byte	1                       #   TypeInfo index
 13280 029b 00       		.byte	0                       #   Next action
 13281              	                                        # -- Catch TypeInfos --
 13282 029c 00000000 		.long	0                       # TypeInfo
 13283              		.align	4
 13284              	
 13285              		.section	.text._ZN4LELA12SparseVectorItSt6vectorIjSaIjEES1_ItSaItEEEC2ERKS6_,"axG",@progbits,_ZN4L
 13286              		.weak	_ZN4LELA12SparseVectorItSt6vectorIjSaIjEES1_ItSaItEEEC2ERKS6_
 13287              		.align	16, 0x90
 13289              	_ZN4LELA12SparseVectorItSt6vectorIjSaIjEES1_ItSaItEEEC2ERKS6_: # @_ZN4LELA12SparseVectorItSt6vector
 13290              	.Leh_func_begin18:
 13291              	.Lfunc_begin18:
   1:../lela/vector/traits.h **** /* lela/vector/traits.h
   2:../lela/vector/traits.h ****  * Copyright 1999-2001 William J Turner,
   3:../lela/vector/traits.h ****  *           2001-2002 Bradford Hovinen
   4:../lela/vector/traits.h ****  *
   5:../lela/vector/traits.h ****  * Written by William J Turner <wjturner@math.ncsu.edu>,
   6:../lela/vector/traits.h ****  *            Bradford Hovinen <hovinen@gmail.com>
   7:../lela/vector/traits.h ****  *
   8:../lela/vector/traits.h ****  * ------------------------------------
   9:../lela/vector/traits.h ****  * 
  10:../lela/vector/traits.h ****  * This file is part of LELA, licensed under the GNU General Public
  11:../lela/vector/traits.h ****  * License version 3. See COPYING for more information.
  12:../lela/vector/traits.h ****  */
  13:../lela/vector/traits.h **** 
  14:../lela/vector/traits.h **** #ifndef __LELA_VECTOR_TRAITS_H
  15:../lela/vector/traits.h **** #define __LELA_VECTOR_TRAITS_H
  16:../lela/vector/traits.h **** 
  17:../lela/vector/traits.h **** #include <vector>
  18:../lela/vector/traits.h **** #include <algorithm>
  19:../lela/vector/traits.h **** 
  20:../lela/vector/traits.h **** #include "lela/vector/bit-iterator.h"
  21:../lela/vector/traits.h **** 
  22:../lela/vector/traits.h **** namespace LELA
  23:../lela/vector/traits.h **** {
  24:../lela/vector/traits.h **** 
  25:../lela/vector/traits.h **** /** @name Vector traits.
  26:../lela/vector/traits.h ****  * Vector traits are use to allow template specialization to choose different
  27:../lela/vector/traits.h ****  * code for dense and sparse vectors.
  28:../lela/vector/traits.h ****  *
  29:../lela/vector/traits.h ****  * \ingroup vector
  30:../lela/vector/traits.h ****  */
  31:../lela/vector/traits.h **** //@{
  32:../lela/vector/traits.h **** 
  33:../lela/vector/traits.h **** /** \brief Vector-representation-types.
  34:../lela/vector/traits.h ****  *
  35:../lela/vector/traits.h ****  * The structures in this namespace identify the interface a vector
  36:../lela/vector/traits.h ****  * provides to LELA. There are in total five supported types.
  37:../lela/vector/traits.h ****  *
  38:../lela/vector/traits.h ****  * Over general rings there are two of vector-representations: dense
  39:../lela/vector/traits.h ****  * and sparse.
  40:../lela/vector/traits.h ****  *
  41:../lela/vector/traits.h ****  * Over GF2 there are three representation-types: dense, sparse, and
  42:../lela/vector/traits.h ****  * hybrid.
  43:../lela/vector/traits.h ****  *
  44:../lela/vector/traits.h ****  * \ingroup vector
  45:../lela/vector/traits.h ****  */
  46:../lela/vector/traits.h **** namespace VectorRepresentationTypes
  47:../lela/vector/traits.h **** {
  48:../lela/vector/traits.h **** 	/// Unspecified representation-type
  49:../lela/vector/traits.h **** 	struct Generic {};
  50:../lela/vector/traits.h **** 
  51:../lela/vector/traits.h **** 	/** Dense vector
  52:../lela/vector/traits.h **** 	 *
  53:../lela/vector/traits.h **** 	 * A dense vector must support the interface of std::vector with the
  54:../lela/vector/traits.h **** 	 * exception of operations which invalidate iterators (e.g. insert,
  55:../lela/vector/traits.h **** 	 * erase, push_back, and so on). A dense vector exists in the free
  56:../lela/vector/traits.h **** 	 * module over its ring defined by its size. Thus it must always be
  57:../lela/vector/traits.h **** 	 * allocated to the correct size before any operation is performed on
  58:../lela/vector/traits.h **** 	 * it.
  59:../lela/vector/traits.h **** 	 */
  60:../lela/vector/traits.h **** 	struct Dense : public Generic {};
  61:../lela/vector/traits.h **** 
  62:../lela/vector/traits.h **** 	/** Sparse vector
  63:../lela/vector/traits.h **** 	 *
  64:../lela/vector/traits.h **** 	 * A sparse vector must support an interface equivalent to
  65:../lela/vector/traits.h **** 	 * std::vector<std::pair<index_type, element_type> >, a vector of
  66:../lela/vector/traits.h **** 	 * index-entry pairs. Here index_type is an integral type giving the
  67:../lela/vector/traits.h **** 	 * index of a given entry and element_type is the type of the
  68:../lela/vector/traits.h **** 	 * underlying ring-element. Indices must be in strictly ascending
  69:../lela/vector/traits.h **** 	 * order and zero is not allowed as the element in a pair (such an
  70:../lela/vector/traits.h **** 	 * entry should be removed from the vector). The class @ref
  71:../lela/vector/traits.h **** 	 * SparseVector implements this interface.
  72:../lela/vector/traits.h **** 	 *
  73:../lela/vector/traits.h **** 	 * Note that the module in which a sparse vector exists is a priori
  74:../lela/vector/traits.h **** 	 * undefined, since arbitrary entries may be added.
  75:../lela/vector/traits.h **** 	 */
  76:../lela/vector/traits.h **** 	struct Sparse : public Generic {};
  77:../lela/vector/traits.h **** 
  78:../lela/vector/traits.h **** 	/** Dense 0-1 vector
  79:../lela/vector/traits.h **** 	 *
  80:../lela/vector/traits.h **** 	 * A dense 0-1 vector is similar to that over general rings with
  81:../lela/vector/traits.h **** 	 * the addition of a type word_iterator which iterates over entire
  82:../lela/vector/traits.h **** 	 * words (of type word_type -- usually uint64 -- which must be a
  83:../lela/vector/traits.h **** 	 * typedef in the vector) in the vector so that operations can be done
  84:../lela/vector/traits.h **** 	 * in parallel. It must correspondingly support the methods word_begin
  85:../lela/vector/traits.h **** 	 * and word_end. The class @ref BitVector implements this interface.
  86:../lela/vector/traits.h **** 	 *
  87:../lela/vector/traits.h **** 	 * The word_iterator should iterate up to the *penultimate* word --
  88:../lela/vector/traits.h **** 	 * not the last word. The vector should provide the method back_word
  89:../lela/vector/traits.h **** 	 * () which gives a reference to the last word. This is to improve
  90:../lela/vector/traits.h **** 	 * performance of word-iterators of bit-subvectors.
  91:../lela/vector/traits.h **** 	 *
  92:../lela/vector/traits.h **** 	 * Dense and hybrid 0-1 vectors must also define a type Endianness,
  93:../lela/vector/traits.h **** 	 * which indicates the order of entries in a word. The classes @ref
  94:../lela/vector/traits.h **** 	 * BigEndian<word_type> and @ref LittleEndian<word_type> define the
  95:../lela/vector/traits.h **** 	 * conventions respectively that the vector e_i corresponds to the
  96:../lela/vector/traits.h **** 	 * word with value 2^(N-i), where N is the number of bits in a word,
  97:../lela/vector/traits.h **** 	 * and that the vector e_i corresponds to the word with value 2^i.
  98:../lela/vector/traits.h **** 	 */
  99:../lela/vector/traits.h **** 	struct Dense01 : public Generic {};
 100:../lela/vector/traits.h **** 
 101:../lela/vector/traits.h **** 	/** Sparse 0-1 vector
 102:../lela/vector/traits.h **** 	 *
 103:../lela/vector/traits.h **** 	 *
 104:../lela/vector/traits.h **** 	 * A sparse 0-1 vector must support the interface of std::vector,
 105:../lela/vector/traits.h **** 	 * treated as a vector of indices, which must be sorted in strictly
 106:../lela/vector/traits.h **** 	 * ascending order. It must support the full interface, including
 107:../lela/vector/traits.h **** 	 * operations which invalidate iterators.
 108:../lela/vector/traits.h **** 	 */
 109:../lela/vector/traits.h **** 	struct Sparse01 : public Generic {};
 110:../lela/vector/traits.h **** 
 111:../lela/vector/traits.h **** 	/** Hybrid 0-1 vector
 112:../lela/vector/traits.h **** 	 *
 113:../lela/vector/traits.h **** 	 * A hybrid 0-1 vector must support the interface of
 114:../lela/vector/traits.h **** 	 * std::vector<std::pair<index_type, word_type> >, a vector of
 115:../lela/vector/traits.h **** 	 * index-word pairs. The vector-entries are divided into blocks, each
 116:../lela/vector/traits.h **** 	 * one the size of a word (of type word_type). The index is then the
 117:../lela/vector/traits.h **** 	 * index of the block and the word is the block itself. The word in a
 118:../lela/vector/traits.h **** 	 * pair must not be identically zero (such a pair should be removed
 119:../lela/vector/traits.h **** 	 * from the vector). Indices must be in strictly ascending order.
 120:../lela/vector/traits.h **** 	 *
 121:../lela/vector/traits.h **** 	 * In order that subvectors of hybrid vectors work properly, it must
 122:../lela/vector/traits.h **** 	 * always be possible to dereference an initialised iterator on a
 123:../lela/vector/traits.h **** 	 * hybrid vector, even if the iterator is initialised with end () and
 124:../lela/vector/traits.h **** 	 * even if the vector is empty. Dereferencing end () should result in
 125:../lela/vector/traits.h **** 	 * a pair consisting of the previous index plus one and the zero
 126:../lela/vector/traits.h **** 	 * word. This can be achieved by placing a sentry at the end of the
 127:../lela/vector/traits.h **** 	 * vector.
 128:../lela/vector/traits.h **** 	 *
 129:../lela/vector/traits.h **** 	 * Dense and hybrid 0-1 vectors must also define a type Endianness,
 130:../lela/vector/traits.h **** 	 * which indicates the order of entries in a word. The classes @ref
 131:../lela/vector/traits.h **** 	 * BigEndian<word_type> and @ref LittleEndian<word_type> define the
 132:../lela/vector/traits.h **** 	 * conventions respectively that the vector e_i corresponds to the
 133:../lela/vector/traits.h **** 	 * word with value 2^(N-i), where N is the number of bits in a word,
 134:../lela/vector/traits.h **** 	 * and that the vector e_i corresponds to the word with value 2^i.
 135:../lela/vector/traits.h **** 	 */
 136:../lela/vector/traits.h **** 	struct Hybrid01 : public Generic {};
 137:../lela/vector/traits.h **** };
 138:../lela/vector/traits.h **** 
 139:../lela/vector/traits.h **** /** Vector storage-types
 140:../lela/vector/traits.h ****  *
 141:../lela/vector/traits.h ****  * The tags in this namespace indicate how a vector is actually stored
 142:../lela/vector/traits.h ****  * in memory. They are useful when interfacing with lower-level
 143:../lela/vector/traits.h ****  * libraries.
 144:../lela/vector/traits.h ****  *
 145:../lela/vector/traits.h ****  * There are three storage-types: generic, transformed, and real.
 146:../lela/vector/traits.h ****  *
 147:../lela/vector/traits.h ****  * \ingroup vector
 148:../lela/vector/traits.h ****  */
 149:../lela/vector/traits.h **** namespace VectorStorageTypes
 150:../lela/vector/traits.h **** {
 151:../lela/vector/traits.h **** 	/** Unspecified storage-type
 152:../lela/vector/traits.h **** 	 *
 153:../lela/vector/traits.h **** 	 * Generic indicates that no assumptions at all should be made about
 154:../lela/vector/traits.h **** 	 * the underlying storage of the vector. This is useful if the code
 155:../lela/vector/traits.h **** 	 * using this library has created a virtual vector which does not
 156:../lela/vector/traits.h **** 	 * correspond directly to one in memory.
 157:../lela/vector/traits.h **** 	 */
 158:../lela/vector/traits.h **** 	struct Generic {};
 159:../lela/vector/traits.h **** 
 160:../lela/vector/traits.h **** 	/** Transformed storage-type
 161:../lela/vector/traits.h **** 	 *
 162:../lela/vector/traits.h **** 	 * Transformed (meaningful for sparse and hybrid 0-1 vectors only)
 163:../lela/vector/traits.h **** 	 * indicates that a vector has undergone a transformation from a pair
 164:../lela/vector/traits.h **** 	 * of vectors to a vector of pairs.
 165:../lela/vector/traits.h **** 	 */
 166:../lela/vector/traits.h **** 	struct Transformed : public Generic {};
 167:../lela/vector/traits.h **** 
 168:../lela/vector/traits.h **** 	/** Actual array in memory
 169:../lela/vector/traits.h **** 	 *
 170:../lela/vector/traits.h **** 	 * Real means that the vector represents a true array in memory. A
 171:../lela/vector/traits.h **** 	 * pointer to the beginning of the vector may then be attained by
 172:../lela/vector/traits.h **** 	 * dereferencing and then taking the address of the iterator begin ().
 173:../lela/vector/traits.h **** 	 */
 174:../lela/vector/traits.h **** 	struct Real : public Generic {};
 175:../lela/vector/traits.h **** }
 176:../lela/vector/traits.h **** 
 177:../lela/vector/traits.h **** // Forward-declaration
 178:../lela/vector/traits.h **** template <class Element, class Vector> struct ElementVectorTraits;
 179:../lela/vector/traits.h **** 
 180:../lela/vector/traits.h **** /** Vector traits
 181:../lela/vector/traits.h ****  *
 182:../lela/vector/traits.h ****  * This structure defines information about a vector on which methods
 183:../lela/vector/traits.h ****  * may specialise and from which they may generically derive
 184:../lela/vector/traits.h ****  * information.
 185:../lela/vector/traits.h ****  *
 186:../lela/vector/traits.h ****  * Because vectors over different rings with different
 187:../lela/vector/traits.h ****  * representation-types may nevertheless use the same underlying
 188:../lela/vector/traits.h ****  * C++-type (e.g. dense vectors over Modular<uint32> and sparse 0-1
 189:../lela/vector/traits.h ****  * vectors), it is necessary to parametrise this class by ring-type.
 190:../lela/vector/traits.h ****  *
 191:../lela/vector/traits.h ****  * \ingroup vector
 192:../lela/vector/traits.h ****  */
 193:../lela/vector/traits.h **** template <class Ring, class Vector>
 194:../lela/vector/traits.h **** struct VectorTraits
 195:../lela/vector/traits.h **** {
 196:../lela/vector/traits.h **** 	/** Representation-type
 197:../lela/vector/traits.h **** 	 *
 198:../lela/vector/traits.h **** 	 * See @ref VectorRepresentationTypes for definitions. On this
 199:../lela/vector/traits.h **** 	 * typedef methods which vary on the representation-type
 200:../lela/vector/traits.h **** 	 * should specialise.
 201:../lela/vector/traits.h **** 	 */
 202:../lela/vector/traits.h **** 	typedef typename ElementVectorTraits<typename Ring::Element, Vector>::RepresentationType Represent
 203:../lela/vector/traits.h **** 
 204:../lela/vector/traits.h **** 	/** Storage-type
 205:../lela/vector/traits.h **** 	 *
 206:../lela/vector/traits.h **** 	 * See @ref VectorStorageTypes for definitions.
 207:../lela/vector/traits.h **** 	 */
 208:../lela/vector/traits.h **** 	typedef typename ElementVectorTraits<typename Ring::Element, Vector>::StorageType StorageType;
 209:../lela/vector/traits.h **** 
 210:../lela/vector/traits.h **** 	/** Container-type
 211:../lela/vector/traits.h **** 	 *
 212:../lela/vector/traits.h **** 	 * This defines a vector which can be declared in generic code
 213:../lela/vector/traits.h **** 	 * with the same representation-type as Vector.
 214:../lela/vector/traits.h **** 	 */
 215:../lela/vector/traits.h **** 	typedef typename ElementVectorTraits<typename Ring::Element, Vector>::ContainerType ContainerType;
 216:../lela/vector/traits.h **** 
 217:../lela/vector/traits.h **** 	/** Subvector
 218:../lela/vector/traits.h **** 	 *
 219:../lela/vector/traits.h **** 	 * This defines a subvector of the given vector which can be
 220:../lela/vector/traits.h **** 	 * constructed in generic code. It must support a constructor
 221:../lela/vector/traits.h **** 	 * SubvectorType (v, start_index, size)
 222:../lela/vector/traits.h **** 	 */
 223:../lela/vector/traits.h **** 	typedef typename ElementVectorTraits<typename Ring::Element, Vector>::SubvectorType SubvectorType;
 224:../lela/vector/traits.h **** 
 225:../lela/vector/traits.h **** 	/** Const subvector
 226:../lela/vector/traits.h **** 	 *
 227:../lela/vector/traits.h **** 	 * Const version of @ref Subvector
 228:../lela/vector/traits.h **** 	 */
 229:../lela/vector/traits.h **** 	typedef typename ElementVectorTraits<typename Ring::Element, Vector>::ConstSubvectorType ConstSubv
 230:../lela/vector/traits.h **** 
 231:../lela/vector/traits.h **** 	/** Aligned subvector
 232:../lela/vector/traits.h **** 	 *
 233:../lela/vector/traits.h **** 	 * This type may perform more quickly than @ref Subvector but
 234:../lela/vector/traits.h **** 	 * the choice of start_index is restricted to an
 235:../lela/vector/traits.h **** 	 * integer-multiple of @ref align. If align is one, then it is
 236:../lela/vector/traits.h **** 	 * equivalent to Subvector.
 237:../lela/vector/traits.h **** 	 *
 238:../lela/vector/traits.h **** 	 * This is useful for recursive algorithms with some control
 239:../lela/vector/traits.h **** 	 * over where a vector is to be split.
 240:../lela/vector/traits.h **** 	 */
 241:../lela/vector/traits.h **** 	typedef typename ElementVectorTraits<typename Ring::Element, Vector>::AlignedSubvectorType Aligned
 242:../lela/vector/traits.h **** 
 243:../lela/vector/traits.h **** 	/** Const aligned subvector
 244:../lela/vector/traits.h **** 	 *
 245:../lela/vector/traits.h **** 	 * Const version of @ref AlignedSubvector
 246:../lela/vector/traits.h **** 	 */
 247:../lela/vector/traits.h **** 	typedef typename ElementVectorTraits<typename Ring::Element, Vector>::ConstAlignedSubvectorType Co
 248:../lela/vector/traits.h **** 
 249:../lela/vector/traits.h **** 	/** Alignment factor
 250:../lela/vector/traits.h **** 	 *
 251:../lela/vector/traits.h **** 	 * The starting-index and possibly size of a
 252:../lela/vector/traits.h **** 	 * AlignedSubvectorType must be an integral multiple of this
 253:../lela/vector/traits.h **** 	 * value.
 254:../lela/vector/traits.h **** 	 */
 255:../lela/vector/traits.h **** 	static const int align = ElementVectorTraits<typename Ring::Element, Vector>::align;
 256:../lela/vector/traits.h **** };
 257:../lela/vector/traits.h **** 
 258:../lela/vector/traits.h **** /** Default vector-traits
 259:../lela/vector/traits.h ****  *
 260:../lela/vector/traits.h ****  * Specialise this class to specify the vector-traits for a
 261:../lela/vector/traits.h ****  * vector-type which does not already contain the required tags and
 262:../lela/vector/traits.h ****  * which is defined over a general ring (i.e. not GF(2)).
 263:../lela/vector/traits.h ****  *
 264:../lela/vector/traits.h ****  * \ingroup vector
 265:../lela/vector/traits.h ****  */
 266:../lela/vector/traits.h **** template <class Vector> struct DefaultVectorTraits
 267:../lela/vector/traits.h **** {
 268:../lela/vector/traits.h **** 	typedef typename Vector::RepresentationType RepresentationType;
 269:../lela/vector/traits.h **** 	typedef typename Vector::StorageType StorageType;
 270:../lela/vector/traits.h **** 	typedef typename Vector::ContainerType ContainerType;
 271:../lela/vector/traits.h **** 	typedef typename Vector::SubvectorType SubvectorType;
 272:../lela/vector/traits.h **** 	typedef typename Vector::ConstSubvectorType ConstSubvectorType;
 273:../lela/vector/traits.h **** 	typedef typename Vector::AlignedSubvectorType AlignedSubvectorType;
 274:../lela/vector/traits.h **** 	typedef typename Vector::ConstAlignedSubvectorType ConstAlignedSubvectorType;
 275:../lela/vector/traits.h **** 	static const int align = 1;
 276:../lela/vector/traits.h **** };
 277:../lela/vector/traits.h **** 
 278:../lela/vector/traits.h **** /** Version of the above for vectors over GF2
 279:../lela/vector/traits.h ****  *
 280:../lela/vector/traits.h ****  * Identical to @ref DefaultVectorTraits, but used for vectors over
 281:../lela/vector/traits.h ****  * GF2.
 282:../lela/vector/traits.h ****  *
 283:../lela/vector/traits.h ****  * This is required because sparse vectors over GF2 and dense vectors
 284:../lela/vector/traits.h ****  * over a ring with element-type unsigned int have the same type
 285:../lela/vector/traits.h ****  *
 286:../lela/vector/traits.h ****  * \ingroup vector
 287:../lela/vector/traits.h ****  */
 288:../lela/vector/traits.h **** template <class Vector> struct GF2VectorTraits
 289:../lela/vector/traits.h **** {
 290:../lela/vector/traits.h **** 	typedef typename Vector::RepresentationType RepresentationType;
 291:../lela/vector/traits.h **** 	typedef typename Vector::StorageType StorageType;
 292:../lela/vector/traits.h **** 	typedef typename Vector::ContainerType ContainerType;
 293:../lela/vector/traits.h **** 	typedef typename Vector::SubvectorType SubvectorType;
 294:../lela/vector/traits.h **** 	typedef typename Vector::ConstSubvectorType ConstSubvectorType;
 295:../lela/vector/traits.h **** 	typedef typename Vector::AlignedSubvectorType AlignedSubvectorType;
 296:../lela/vector/traits.h **** 	typedef typename Vector::ConstAlignedSubvectorType ConstAlignedSubvectorType;
 297:../lela/vector/traits.h **** 	static const int align = Vector::align;
 298:../lela/vector/traits.h **** };
 299:../lela/vector/traits.h **** 
 300:../lela/vector/traits.h **** /** Similar to VectorTraits, but is parametrised on the element-type
 301:../lela/vector/traits.h ****  * rather than the ring. Used in contexts where the ring is not
 302:../lela/vector/traits.h ****  * available.
 303:../lela/vector/traits.h ****  *
 304:../lela/vector/traits.h ****  * \ingroup vector
 305:../lela/vector/traits.h ****  */
 306:../lela/vector/traits.h **** template <class Element, class Vector> struct ElementVectorTraits
 307:../lela/vector/traits.h **** {
 308:../lela/vector/traits.h **** 	typedef typename DefaultVectorTraits<Vector>::RepresentationType RepresentationType;
 309:../lela/vector/traits.h **** 	typedef typename DefaultVectorTraits<Vector>::StorageType StorageType;
 310:../lela/vector/traits.h **** 	typedef typename DefaultVectorTraits<Vector>::ContainerType ContainerType;
 311:../lela/vector/traits.h **** 	typedef typename DefaultVectorTraits<Vector>::SubvectorType SubvectorType;
 312:../lela/vector/traits.h **** 	typedef typename DefaultVectorTraits<Vector>::ConstSubvectorType ConstSubvectorType;
 313:../lela/vector/traits.h **** 	typedef typename DefaultVectorTraits<Vector>::AlignedSubvectorType AlignedSubvectorType;
 314:../lela/vector/traits.h **** 	typedef typename DefaultVectorTraits<Vector>::ConstAlignedSubvectorType ConstAlignedSubvectorType;
 315:../lela/vector/traits.h **** 	static const int align = DefaultVectorTraits<Vector>::align;
 316:../lela/vector/traits.h **** };
 317:../lela/vector/traits.h **** 
 318:../lela/vector/traits.h **** // Specialisation of ElementVectorTraits for vectors over GF2
 319:../lela/vector/traits.h **** template <class Vector> struct ElementVectorTraits<bool, Vector>
 320:../lela/vector/traits.h **** {
 321:../lela/vector/traits.h **** 	typedef typename GF2VectorTraits<Vector>::RepresentationType RepresentationType;
 322:../lela/vector/traits.h **** 	typedef typename GF2VectorTraits<Vector>::StorageType StorageType;
 323:../lela/vector/traits.h **** 	typedef typename GF2VectorTraits<Vector>::ContainerType ContainerType;
 324:../lela/vector/traits.h **** 	typedef typename GF2VectorTraits<Vector>::SubvectorType SubvectorType;
 325:../lela/vector/traits.h **** 	typedef typename GF2VectorTraits<Vector>::ConstSubvectorType ConstSubvectorType;
 326:../lela/vector/traits.h **** 	typedef typename GF2VectorTraits<Vector>::AlignedSubvectorType AlignedSubvectorType;
 327:../lela/vector/traits.h **** 	typedef typename GF2VectorTraits<Vector>::ConstAlignedSubvectorType ConstAlignedSubvectorType;
 328:../lela/vector/traits.h **** 	static const int align = GF2VectorTraits<Vector>::align;
 329:../lela/vector/traits.h **** };
 330:../lela/vector/traits.h **** 
 331:../lela/vector/traits.h **** /** Utility-functions for vectors
 332:../lela/vector/traits.h ****  *
 333:../lela/vector/traits.h ****  * \ingroup vector
 334:../lela/vector/traits.h ****  */
 335:../lela/vector/traits.h **** 
 336:../lela/vector/traits.h **** class VectorUtils
 337:../lela/vector/traits.h **** {
 338:../lela/vector/traits.h **** 	template <class Element, class Vector>
 339:../lela/vector/traits.h **** 	static inline bool getEntrySpecialised (const Vector &v, Element &a, size_t i, VectorRepresentatio
 340:../lela/vector/traits.h **** 		{ a = v[i]; return true; }
 341:../lela/vector/traits.h **** 
 342:../lela/vector/traits.h **** 	template <class Element, class Vector>
 343:../lela/vector/traits.h **** 	static inline bool getEntrySpecialised (const Vector &v, Element &a, size_t i, VectorRepresentatio
 344:../lela/vector/traits.h **** 	{
 345:../lela/vector/traits.h **** 		typename Vector::const_iterator j;
 346:../lela/vector/traits.h **** 
 347:../lela/vector/traits.h **** 		if (v.size () == 0)
 348:../lela/vector/traits.h **** 			return false;
 349:../lela/vector/traits.h **** 
 350:../lela/vector/traits.h **** 		j = std::lower_bound (v.begin (), v.end (), i, FindSparseEntryLB ());
 351:../lela/vector/traits.h **** 
 352:../lela/vector/traits.h **** 		if (j == v.end () || j->first != i)
 353:../lela/vector/traits.h **** 			return false;
 354:../lela/vector/traits.h **** 		else {
 355:../lela/vector/traits.h **** 			a = j->second;
 356:../lela/vector/traits.h **** 			return true;
 357:../lela/vector/traits.h **** 		}
 358:../lela/vector/traits.h **** 	}
 359:../lela/vector/traits.h **** 
 360:../lela/vector/traits.h **** 	template <class Element, class Vector>
 361:../lela/vector/traits.h **** 	static inline bool getEntrySpecialised (const Vector &v, Element &a, size_t i, VectorRepresentatio
 362:../lela/vector/traits.h **** 		{ a = v[i]; return true; }
 363:../lela/vector/traits.h **** 
 364:../lela/vector/traits.h **** 	template <class Element, class Vector>
 365:../lela/vector/traits.h **** 	static inline bool getEntrySpecialised (const Vector &v, Element &a, size_t i, VectorRepresentatio
 366:../lela/vector/traits.h **** 	{
 367:../lela/vector/traits.h **** 		typename Vector::const_iterator j;
 368:../lela/vector/traits.h **** 
 369:../lela/vector/traits.h **** 		if (v.size () == 0)
 370:../lela/vector/traits.h **** 			return false;
 371:../lela/vector/traits.h **** 
 372:../lela/vector/traits.h **** 		j = std::lower_bound (v.begin (), v.end (), i);
 373:../lela/vector/traits.h **** 
 374:../lela/vector/traits.h **** 		if (j == v.end () || *j != i)
 375:../lela/vector/traits.h **** 			return false;
 376:../lela/vector/traits.h **** 		else {
 377:../lela/vector/traits.h **** 			a = true;
 378:../lela/vector/traits.h **** 			return true;
 379:../lela/vector/traits.h **** 		}
 380:../lela/vector/traits.h **** 	}
 381:../lela/vector/traits.h **** 
 382:../lela/vector/traits.h **** 	template <class Element, class Vector>
 383:../lela/vector/traits.h **** 	static inline bool getEntrySpecialised (const Vector &v, Element &a, size_t i, VectorRepresentatio
 384:../lela/vector/traits.h **** 	{
 385:../lela/vector/traits.h **** 		typename Vector::const_iterator idx;
 386:../lela/vector/traits.h **** 
 387:../lela/vector/traits.h **** 		idx = std::lower_bound (v.begin (), v.end (), i >> WordTraits<typename Vector::word_type>::logof_
 388:../lela/vector/traits.h **** 
 389:../lela/vector/traits.h **** 		if (idx != v.end () && idx->first == i >> WordTraits<typename Vector::word_type>::logof_size) {
 390:../lela/vector/traits.h **** 			a = idx->second & Vector::Endianness::e_j (i & WordTraits<typename Vector::word_type>::pos_mask)
 391:../lela/vector/traits.h **** 			return true;
 392:../lela/vector/traits.h **** 		} else
 393:../lela/vector/traits.h **** 			return false;
 394:../lela/vector/traits.h **** 	}
 395:../lela/vector/traits.h **** 
 396:../lela/vector/traits.h **** 	template <class Ring, class Vector>
 397:../lela/vector/traits.h **** 	static inline void appendEntrySpecialised (const Ring &R, Vector &v, const typename Ring::Element 
 398:../lela/vector/traits.h **** 		{ R.copy (v[i], a); }
 399:../lela/vector/traits.h **** 
 400:../lela/vector/traits.h **** 	template <class Ring, class Vector>
 401:../lela/vector/traits.h **** 	static inline void appendEntrySpecialised (const Ring &R, Vector &v, const typename Ring::Element 
 402:../lela/vector/traits.h **** 		{ v.push_back (typename Vector::value_type (i, typename Ring::Element ())); R.copy (v.back ().sec
 403:../lela/vector/traits.h **** 
 404:../lela/vector/traits.h **** 	template <class Ring, class Vector>
 405:../lela/vector/traits.h **** 	static inline void appendEntrySpecialised (const Ring &R, Vector &v, const typename Ring::Element 
 406:../lela/vector/traits.h **** 		{ v[i] = a; }
 407:../lela/vector/traits.h **** 
 408:../lela/vector/traits.h **** 	template <class Ring, class Vector>
 409:../lela/vector/traits.h **** 	static inline void appendEntrySpecialised (const Ring &R, Vector &v, const typename Ring::Element 
 410:../lela/vector/traits.h **** 		{ v.push_back (i); }
 411:../lela/vector/traits.h **** 
 412:../lela/vector/traits.h **** 	template <class Ring, class Vector>
 413:../lela/vector/traits.h **** 	static inline void appendEntrySpecialised (const Ring &R, Vector &v, const typename Ring::Element 
 414:../lela/vector/traits.h **** 	{
 415:../lela/vector/traits.h **** 		if (v.empty () || (i >> LELA::WordTraits<typename Vector::word_type>::logof_size) != v.back ().fi
 416:../lela/vector/traits.h **** 			v.push_back (typename Vector::value_type (i >> LELA::WordTraits<typename Vector::word_type>::log
 417:../lela/vector/traits.h **** 								  Vector::Endianness::e_j (i & LELA::WordTraits<typename Vector::word_type>::pos_mask)));
 418:../lela/vector/traits.h **** 		else
 419:../lela/vector/traits.h **** 			v.back ().second |= Vector::Endianness::e_j (i & LELA::WordTraits<typename Vector::word_type>::p
 420:../lela/vector/traits.h **** 	}
 421:../lela/vector/traits.h **** 
 422:../lela/vector/traits.h **** 	template <class Vector>
 423:../lela/vector/traits.h **** 	static inline void ensureDimSpecialized (Vector &v, size_t n, VectorRepresentationTypes::Dense)
 424:../lela/vector/traits.h **** 		{ v.resize (n); }
 425:../lela/vector/traits.h **** 
 426:../lela/vector/traits.h **** 	template <class Vector>
 427:../lela/vector/traits.h **** 	static inline void ensureDimSpecialized (Vector &v, size_t n, VectorRepresentationTypes::Sparse)
 428:../lela/vector/traits.h **** 		{}
 429:../lela/vector/traits.h **** 
 430:../lela/vector/traits.h **** 	template <class Vector>
 431:../lela/vector/traits.h **** 	static inline void ensureDimSpecialized (Vector &v, size_t n, VectorRepresentationTypes::Dense01)
 432:../lela/vector/traits.h **** 		{ v.resize (n); }
 433:../lela/vector/traits.h **** 
 434:../lela/vector/traits.h **** 	template <class Vector>
 435:../lela/vector/traits.h **** 	static inline void ensureDimSpecialized (Vector &v, size_t n, VectorRepresentationTypes::Sparse01)
 436:../lela/vector/traits.h **** 		{}
 437:../lela/vector/traits.h **** 
 438:../lela/vector/traits.h **** 	template <class Vector>
 439:../lela/vector/traits.h **** 	static inline void ensureDimSpecialized (Vector &v, size_t n, VectorRepresentationTypes::Hybrid01)
 440:../lela/vector/traits.h **** 		{}
 441:../lela/vector/traits.h **** 
 442:../lela/vector/traits.h **** 	template <class Vector>
 443:../lela/vector/traits.h **** 	static inline bool hasDimSpecialized (const Vector &v, size_t n, VectorRepresentationTypes::Dense)
 444:../lela/vector/traits.h **** 		{ return v.size () == n; }
 445:../lela/vector/traits.h **** 
 446:../lela/vector/traits.h **** 	template <class Vector>
 447:../lela/vector/traits.h **** 	static inline bool hasDimSpecialized (const Vector &v, size_t n, VectorRepresentationTypes::Sparse
 448:../lela/vector/traits.h **** 		{ return v.empty () || v.back ().first < n; }
 449:../lela/vector/traits.h **** 
 450:../lela/vector/traits.h **** 	template <class Vector>
 451:../lela/vector/traits.h **** 	static inline bool hasDimSpecialized (const Vector &v, size_t n, VectorRepresentationTypes::Dense0
 452:../lela/vector/traits.h **** 		{ return v.size () == n; }
 453:../lela/vector/traits.h **** 
 454:../lela/vector/traits.h **** 	template <class Vector>
 455:../lela/vector/traits.h **** 	static inline bool hasDimSpecialized (const Vector &v, size_t n, VectorRepresentationTypes::Sparse
 456:../lela/vector/traits.h **** 		{ return v.empty () || v.back () < n; }
 457:../lela/vector/traits.h **** 
 458:../lela/vector/traits.h **** 	template <class Vector>
 459:../lela/vector/traits.h **** 	static inline bool hasDimSpecialized (const Vector &v, size_t n, VectorRepresentationTypes::Hybrid
 460:../lela/vector/traits.h **** 	{
 461:../lela/vector/traits.h **** 		if (v.empty ())
 462:../lela/vector/traits.h **** 			return true;
 463:../lela/vector/traits.h **** 		else if ((v.back ().first << WordTraits<typename Vector::word_type>::logof_size) >= (long) n)
 464:../lela/vector/traits.h **** 			return false;
 465:../lela/vector/traits.h **** 		else if (v.back ().first == (n >> WordTraits<typename Vector::word_type>::logof_size))
 466:../lela/vector/traits.h **** 			return (v.back ().second & Vector::Endianness::mask_right (n & WordTraits<typename Vector::word_
 467:../lela/vector/traits.h **** 		else
 468:../lela/vector/traits.h **** 			return true;
 469:../lela/vector/traits.h **** 	}
 470:../lela/vector/traits.h **** 
 471:../lela/vector/traits.h **** 	template <class Vector>
 472:../lela/vector/traits.h **** 	static inline bool isValidSpecialized (const Vector &v, VectorRepresentationTypes::Dense)
 473:../lela/vector/traits.h **** 		{ return true; }
 474:../lela/vector/traits.h **** 
 475:../lela/vector/traits.h **** 	template <class Vector>
 476:../lela/vector/traits.h **** 	static inline bool isValidSpecialized (const Vector &v, VectorRepresentationTypes::Sparse)
 477:../lela/vector/traits.h **** 	{
 478:../lela/vector/traits.h **** 		if (v.empty ())
 479:../lela/vector/traits.h **** 			return true;
 480:../lela/vector/traits.h **** 
 481:../lela/vector/traits.h **** 		typename Vector::const_iterator i = v.begin (), i_next = v.begin ();
 482:../lela/vector/traits.h **** 
 483:../lela/vector/traits.h **** 		for (++i_next; i_next != v.end (); ++i_next, ++i)
 484:../lela/vector/traits.h **** 			if (i->first >= i_next->first)
 485:../lela/vector/traits.h **** 				return false;
 486:../lela/vector/traits.h **** 
 487:../lela/vector/traits.h **** 		return true;
 488:../lela/vector/traits.h **** 	}
 489:../lela/vector/traits.h **** 
 490:../lela/vector/traits.h **** 	template <class Vector>
 491:../lela/vector/traits.h **** 	static inline bool isValidSpecialized (const Vector &v, VectorRepresentationTypes::Dense01)
 492:../lela/vector/traits.h **** 		{ return true; }
 493:../lela/vector/traits.h **** 
 494:../lela/vector/traits.h **** 	template <class Vector>
 495:../lela/vector/traits.h **** 	static inline bool isValidSpecialized (const Vector &v, VectorRepresentationTypes::Sparse01)
 496:../lela/vector/traits.h **** 	{
 497:../lela/vector/traits.h **** 		if (v.empty ())
 498:../lela/vector/traits.h **** 			return true;
 499:../lela/vector/traits.h **** 
 500:../lela/vector/traits.h **** 		typename Vector::const_iterator i = v.begin (), i_next = v.begin ();
 501:../lela/vector/traits.h **** 
 502:../lela/vector/traits.h **** 		for (++i_next; i_next != v.end (); ++i_next, ++i)
 503:../lela/vector/traits.h **** 			if (*i >= *i_next)
 504:../lela/vector/traits.h **** 				return false;
 505:../lela/vector/traits.h **** 
 506:../lela/vector/traits.h **** 		return true;
 507:../lela/vector/traits.h **** 	}
 508:../lela/vector/traits.h **** 
 509:../lela/vector/traits.h **** 	template <class Vector>
 510:../lela/vector/traits.h **** 	static inline bool isValidSpecialized (const Vector &v, VectorRepresentationTypes::Hybrid01)
 511:../lela/vector/traits.h **** 	{
 512:../lela/vector/traits.h **** 		if (v.empty ())
 513:../lela/vector/traits.h **** 			return true;
 514:../lela/vector/traits.h **** 
 515:../lela/vector/traits.h **** 		typename Vector::const_iterator i = v.begin (), i_next = v.begin ();
 516:../lela/vector/traits.h **** 
 517:../lela/vector/traits.h **** 		for (++i_next; i_next != v.end (); ++i_next, ++i)
 518:../lela/vector/traits.h **** 			if (i->first >= i_next->first || i->second == 0)
 519:../lela/vector/traits.h **** 				return false;
 520:../lela/vector/traits.h **** 
 521:../lela/vector/traits.h **** 		return true;
 522:../lela/vector/traits.h **** 	}
 523:../lela/vector/traits.h **** 
 524:../lela/vector/traits.h **** public:
 525:../lela/vector/traits.h **** 	/** Closure to find an entry with a given index in a sparse
 526:../lela/vector/traits.h **** 	 * vector, to be used with std::lower_bound
 527:../lela/vector/traits.h **** 	 *
 528:../lela/vector/traits.h **** 	 * This can be used to perform a binary search on entries.
 529:../lela/vector/traits.h **** 	 */
 530:../lela/vector/traits.h **** 	class FindSparseEntryLB
 531:../lela/vector/traits.h **** 	{
 532:../lela/vector/traits.h **** 	public:
 533:../lela/vector/traits.h **** 		template<typename PairType, typename T>
 534:../lela/vector/traits.h **** 		inline bool operator () (const PairType &i, const T &j) const
 535:../lela/vector/traits.h **** 			{ return i.first < j; }
 536:../lela/vector/traits.h **** 	};
 537:../lela/vector/traits.h **** 
 538:../lela/vector/traits.h **** 	/** Closure to find an entry with a given index in a sparse
 539:../lela/vector/traits.h **** 	 * vector, to be used with std::upper_bound
 540:../lela/vector/traits.h **** 	 *
 541:../lela/vector/traits.h **** 	 * This can be used to perform a binary search on entries.
 542:../lela/vector/traits.h **** 	 */
 543:../lela/vector/traits.h **** 	class FindSparseEntryUB
 544:../lela/vector/traits.h **** 	{
 545:../lela/vector/traits.h **** 	public:
 546:../lela/vector/traits.h **** 		template<typename T, typename PairType>
 547:../lela/vector/traits.h **** 		inline bool operator () (const T &i, const PairType &j) const
 548:../lela/vector/traits.h **** 			{ return i < j.first; }
 549:../lela/vector/traits.h **** 	};
 550:../lela/vector/traits.h **** 
 551:../lela/vector/traits.h **** 	/** Closure to compare entries in a sparse vector
 552:../lela/vector/traits.h **** 	 *
 553:../lela/vector/traits.h **** 	 * This can be used to sort entries by index (e.g. after
 554:../lela/vector/traits.h **** 	 * performing a permutation).
 555:../lela/vector/traits.h **** 	 */
 556:../lela/vector/traits.h **** 	class CompareSparseEntries
 557:../lela/vector/traits.h **** 	{
 558:../lela/vector/traits.h **** 	public:
 559:../lela/vector/traits.h **** 		template<typename PairType1, typename PairType2>
 560:../lela/vector/traits.h **** 		inline bool operator () (const PairType1 &i, const PairType2 &j) const
 561:../lela/vector/traits.h **** 			{ return i.first < j.first; }
 562:../lela/vector/traits.h **** 	};
 563:../lela/vector/traits.h **** 
 564:../lela/vector/traits.h **** 	/** Retrieve the entry at index i from the vector and store it in the element a
 565:../lela/vector/traits.h **** 	 *
 566:../lela/vector/traits.h **** 	 * If there is no entry at index i, then the element a is left unchanged
 567:../lela/vector/traits.h **** 	 *
 568:../lela/vector/traits.h **** 	 * @param v Vector from which obtain entry
 569:../lela/vector/traits.h **** 	 * @param a Reference to Element-object in which to store result
 570:../lela/vector/traits.h **** 	 * @param i Index at from which to obtain entry
 571:../lela/vector/traits.h **** 	 * @returns true if the entry at index i exists in the vector, false otherwise
 572:../lela/vector/traits.h **** 	 */
 573:../lela/vector/traits.h **** 	template <class Element, class Vector>
 574:../lela/vector/traits.h **** 	static inline bool getEntry (const Vector &v, Element &a, size_t i) 
 575:../lela/vector/traits.h **** 		{ return getEntrySpecialised<Element, Vector> (v, a, i, typename ElementVectorTraits<Element, Vec
 576:../lela/vector/traits.h **** 
 577:../lela/vector/traits.h **** 	/** Append the given element to the end of a vector.
 578:../lela/vector/traits.h **** 	 *
 579:../lela/vector/traits.h **** 	 * If the vector is sparse, it must either be empty or the
 580:../lela/vector/traits.h **** 	 * index of its last entry must be less than the given index.
 581:../lela/vector/traits.h **** 	 *
 582:../lela/vector/traits.h **** 	 * @param v Vector to which to append entry
 583:../lela/vector/traits.h **** 	 * @param a Element to be appended
 584:../lela/vector/traits.h **** 	 * @param i Index at which to append entry
 585:../lela/vector/traits.h **** 	 */
 586:../lela/vector/traits.h **** 	template <class Ring, class Vector>
 587:../lela/vector/traits.h **** 	static inline void appendEntry (const Ring &R, Vector &v, const typename Ring::Element &a, size_t 
 588:../lela/vector/traits.h **** 		{ return appendEntrySpecialised (R, v, a, i, typename VectorTraits<Ring, Vector>::RepresentationT
 589:../lela/vector/traits.h **** 
 590:../lela/vector/traits.h **** 	/** Ensure that the vector v is defined over the free module of rank n */
 591:../lela/vector/traits.h **** 	template <class Ring, class Vector>
 592:../lela/vector/traits.h **** 	static inline void ensureDim (Vector &v, size_t n) 
 593:../lela/vector/traits.h **** 		{ ensureDimSpecialized (v, n, typename VectorTraits<Ring, Vector>::RepresentationType ()); }
 594:../lela/vector/traits.h **** 
 595:../lela/vector/traits.h **** 	/// Determines whether the vector v can represent a vector of dimension n.
 596:../lela/vector/traits.h **** 	/// @returns true if v can represent a vector of dimension n and false otherwise
 597:../lela/vector/traits.h **** 	template <class Ring, class Vector>
 598:../lela/vector/traits.h **** 	static inline bool hasDim (const Vector &v, size_t n) 
 599:../lela/vector/traits.h **** 		{ return hasDimSpecialized (v, n, typename VectorTraits<Ring, Vector>::RepresentationType ()); }
 600:../lela/vector/traits.h **** 
 601:../lela/vector/traits.h **** 	/// Determines whether v is a valid vector of its format.
 602:../lela/vector/traits.h **** 	/// @returns true if v is valid or false if there is an error
 603:../lela/vector/traits.h **** 	template <class Ring, class Vector>
 604:../lela/vector/traits.h **** 	static inline bool isValid (const Vector &v) 
 605:../lela/vector/traits.h **** 		{ return isValidSpecialized (v, typename VectorTraits<Ring, Vector>::RepresentationType ()); }
 606:../lela/vector/traits.h **** 
 607:../lela/vector/traits.h **** 	/// Compute the image of an index under a permutation
 608:../lela/vector/traits.h **** 	template <class Iterator>
 609:../lela/vector/traits.h **** 	static typename Iterator::value_type::first_type permutationImage (typename Iterator::value_type::
 610:../lela/vector/traits.h **** 	{
 611:../lela/vector/traits.h **** 		for (Iterator i = P_start; i != P_end; ++i) {
 612:../lela/vector/traits.h **** 			if (i->first == x)
 613:../lela/vector/traits.h **** 				x = i->second;
 614:../lela/vector/traits.h **** 			else if (i->second == x)
 615:../lela/vector/traits.h **** 				x = i->first;
 616:../lela/vector/traits.h **** 		}
 617:../lela/vector/traits.h **** 
 618:../lela/vector/traits.h **** 		return x;
 619:../lela/vector/traits.h **** 	}
 620:../lela/vector/traits.h **** }; // class VectorUtils
 621:../lela/vector/traits.h **** 
 622:../lela/vector/traits.h **** // Forward declarations of types we're about to use
 623:../lela/vector/traits.h **** template <typename Iterator, typename ConstIterator = Iterator> class Subvector;
 624:../lela/vector/traits.h **** template <typename Iterator> class Subiterator;
 625:../lela/vector/traits.h **** template <class Element, class IndexVector = std::vector<uint32>, class ElementVector = std::vector
 13292              		.loc	39 625 0
 13293              	.Ltmp4466:
 13294              	# BB#0:
 13295 0000 55       		pushq	%rbp
 13296              	.Ltmp4463:
 13297 0001 4889E5   		movq	%rsp, %rbp
 13298              	.Ltmp4464:
 13299 0004 4157     		pushq	%r15
 13300 0006 4156     		pushq	%r14
 13301 0008 4154     		pushq	%r12
 13302 000a 53       		pushq	%rbx
 13303              	.Ltmp4465:
 13304              		#DEBUG_VALUE: SparseVector:this <- RDI+0 # ../lela/vector/traits.h:625:118
 13305 000b 4889F3   		movq	%rsi, %rbx
 13306 000e 4989FE   		movq	%rdi, %r14
 13307              	.Ltmp4467:
 13308              		#DEBUG_VALUE: SparseVector:this <- R14+0
 13309 0011 488B7B08 		movq	8(%rbx), %rdi
 13310 0015 482B3B   		subq	(%rbx), %rdi
 13311 0018 49C70600 		movq	$0, (%r14)
 13311      000000
 13312 001f 49C74608 		movq	$0, 8(%r14)
 13312      00000000 
 13313 0027 49C74610 		movq	$0, 16(%r14)
 13313      00000000 
 13314 002f 4989FF   		movq	%rdi, %r15
 13315 0032 49C1FF02 		sarq	$2, %r15
 13316              	.Ltmp4468:
 13317              		#DEBUG_VALUE: _Vector_base:__n <- R15+0
 13318 0036 31C0     		xorl	%eax, %eax
 13319 0038 4D85FF   		testq	%r15, %r15
 13320              	.Ltmp4469:
 13321              		#DEBUG_VALUE: _M_allocate:__n <- R15+0
 13322 003b 7419     		je	.LBB18_4
 13323              	# BB#1:
 13324              	.Ltmp4470:
 13325              		#DEBUG_VALUE: SparseVector:this <- R14+0
 13326              	.Ltmp4471:
 13327              		#DEBUG_VALUE: _Vector_base:__n <- R15+0
 13328              	.Ltmp4472:
 13329              		#DEBUG_VALUE: _M_allocate:__n <- R15+0
 13330              	.Ltmp4473:
 13331              		#DEBUG_VALUE: allocate:__n <- R15+0
 13332 003d 48B80000 		movabsq	$4611686018427387904, %rax # imm = 0x4000000000000000
 13332      00000000 
 13332      0040
 13333 0047 4939C7   		cmpq	%rax, %r15
 13334 004a 7205     		jb	.LBB18_3
 13335              	# BB#2:
 13336              	.Ltmp4452:
 13337 004c E8000000 		callq	_ZSt17__throw_bad_allocv
 13337      00
 13338              	.Ltmp4453:
 13339              	.LBB18_3:                               # %_ZN9__gnu_cxx13new_allocatorIjE8allocateEmPKv.exit.i.i.i
 13340              	.Ltmp4450:
 13341              	.Ltmp4474:
 13342              		#DEBUG_VALUE: SparseVector:this <- R14+0
 13343              	.Ltmp4475:
 13344              		#DEBUG_VALUE: _Vector_base:__n <- R15+0
 13345              	.Ltmp4476:
 13346              		#DEBUG_VALUE: _M_allocate:__n <- R15+0
 13347              	.Ltmp4477:
 13348              		#DEBUG_VALUE: allocate:__n <- R15+0
 13349 0051 E8000000 		callq	_Znwm
 13349      00
 13350              	.Ltmp4451:
 13351              	.LBB18_4:
 13352              	.Ltmp4478:
 13353              		#DEBUG_VALUE: SparseVector:this <- R14+0
 13354              	.Ltmp4479:
 13355              		#DEBUG_VALUE: _Vector_base:__n <- R15+0
 13356              	.Ltmp4480:
 13357              		#DEBUG_VALUE: _M_allocate:__n <- R15+0
 13358 0056 4989C4   		movq	%rax, %r12
 13359              	.Ltmp4481:
 13360              		#DEBUG_VALUE: SparseVector:this <- undef
 13361 0059 4D8926   		movq	%r12, (%r14)
 13362 005c 4D896608 		movq	%r12, 8(%r14)
 13363 0060 4B8D04BC 		leaq	(%r12,%r15,4), %rax
 13364              	.Ltmp4482:
 13365              		#DEBUG_VALUE: _M_allocate:__n <- undef
 13366              	.Ltmp4483:
 13367              		#DEBUG_VALUE: _Vector_base:__n <- undef
 13368 0064 49894610 		movq	%rax, 16(%r14)
 13369 0068 488B33   		movq	(%rbx), %rsi
 13370 006b 488B5308 		movq	8(%rbx), %rdx
 13371 006f 4829F2   		subq	%rsi, %rdx
 13372              	.Ltmp4484:
 13373              		#DEBUG_VALUE: __uninitialized_copy_a:__result <- R12+0
 13374              	.Ltmp4485:
 13375              		#DEBUG_VALUE: uninitialized_copy:__result <- R12+0
 13376              	.Ltmp4486:
 13377              		#DEBUG_VALUE: __uninit_copy:__result <- R12+0
 13378              	.Ltmp4487:
 13379              		#DEBUG_VALUE: copy:__result <- R12+0
 13380              	.Ltmp4488:
 13381              		#DEBUG_VALUE: __copy_move_a2:__result <- R12+0
 13382              	.Ltmp4489:
 13383              		#DEBUG_VALUE: __niter_base:__it <- R12+0
 13384              	.Ltmp4490:
 13385              		#DEBUG_VALUE: _S_base:__it <- R12+0
 13386              	.Ltmp4491:
 13387              		#DEBUG_VALUE: __copy_move_a:__first <- RSI+0
 13388              	.Ltmp4492:
 13389              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 13390              	.Ltmp4493:
 13391              		#DEBUG_VALUE: __copy_move_a:__result <- R12+0
 13392              	.Ltmp4494:
 13393              		#DEBUG_VALUE: __simple <- 1+0
 13394              	.Ltmp4495:
 13395              		#DEBUG_VALUE: __copy_m:__first <- RSI+0
 13396              	.Ltmp4496:
 13397              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 13398              	.Ltmp4497:
 13399              		#DEBUG_VALUE: __copy_m:__result <- R12+0
 13400 0072 4989D7   		movq	%rdx, %r15
 13401 0075 49C1FF02 		sarq	$2, %r15
 13402              	.Ltmp4498:
 13403              		#DEBUG_VALUE: _Num <- R15+0
 13404 0079 4D85FF   		testq	%r15, %r15
 13405 007c 7408     		je	.LBB18_6
 13406              	# BB#5:
 13407              	.Ltmp4499:
 13408              		#DEBUG_VALUE: __copy_m:__result <- R12+0
 13409              	.Ltmp4500:
 13410              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 13411              	.Ltmp4501:
 13412              		#DEBUG_VALUE: __copy_m:__first <- RSI+0
 13413              	.Ltmp4502:
 13414              		#DEBUG_VALUE: __simple <- 1+0
 13415              	.Ltmp4503:
 13416              		#DEBUG_VALUE: __copy_move_a:__result <- R12+0
 13417              	.Ltmp4504:
 13418              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 13419              	.Ltmp4505:
 13420              		#DEBUG_VALUE: __copy_move_a:__first <- RSI+0
 13421              	.Ltmp4506:
 13422              		#DEBUG_VALUE: _S_base:__it <- R12+0
 13423              	.Ltmp4507:
 13424              		#DEBUG_VALUE: __niter_base:__it <- R12+0
 13425              	.Ltmp4508:
 13426              		#DEBUG_VALUE: __copy_move_a2:__result <- R12+0
 13427              	.Ltmp4509:
 13428              		#DEBUG_VALUE: copy:__result <- R12+0
 13429              	.Ltmp4510:
 13430              		#DEBUG_VALUE: __uninit_copy:__result <- R12+0
 13431              	.Ltmp4511:
 13432              		#DEBUG_VALUE: uninitialized_copy:__result <- R12+0
 13433              	.Ltmp4512:
 13434              		#DEBUG_VALUE: __uninitialized_copy_a:__result <- R12+0
 13435              	.Ltmp4513:
 13436              		#DEBUG_VALUE: _Num <- R15+0
 13437 007e 4C89E7   		movq	%r12, %rdi
 13438              	.Ltmp4514:
 13439              		#DEBUG_VALUE: __copy_move_a:__first <- undef
 13440              	.Ltmp4515:
 13441              		#DEBUG_VALUE: __copy_m:__first <- undef
 13442 0081 E8000000 		callq	memmove
 13442      00
 13443              	.LBB18_6:                               # %_ZNSt6vectorIjSaIjEEC1ERKS1_.exit
 13444              	.Ltmp4516:
 13445              		#DEBUG_VALUE: __copy_m:__result <- R12+0
 13446              	.Ltmp4517:
 13447              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 13448              	.Ltmp4518:
 13449              		#DEBUG_VALUE: __simple <- 1+0
 13450              	.Ltmp4519:
 13451              		#DEBUG_VALUE: __copy_move_a:__result <- R12+0
 13452              	.Ltmp4520:
 13453              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 13454              	.Ltmp4521:
 13455              		#DEBUG_VALUE: _S_base:__it <- R12+0
 13456              	.Ltmp4522:
 13457              		#DEBUG_VALUE: __niter_base:__it <- R12+0
 13458              	.Ltmp4523:
 13459              		#DEBUG_VALUE: __copy_move_a2:__result <- R12+0
 13460              	.Ltmp4524:
 13461              		#DEBUG_VALUE: copy:__result <- R12+0
 13462              	.Ltmp4525:
 13463              		#DEBUG_VALUE: __uninit_copy:__result <- R12+0
 13464              	.Ltmp4526:
 13465              		#DEBUG_VALUE: uninitialized_copy:__result <- R12+0
 13466              	.Ltmp4527:
 13467              		#DEBUG_VALUE: __uninitialized_copy_a:__result <- R12+0
 13468              	.Ltmp4528:
 13469              		#DEBUG_VALUE: _Num <- R15+0
 13470 0086 4B8D04BC 		leaq	(%r12,%r15,4), %rax
 13471              	.Ltmp4529:
 13472              		#DEBUG_VALUE: _Num <- undef
 13473              	.Ltmp4530:
 13474              		#DEBUG_VALUE: __uninitialized_copy_a:__result <- undef
 13475              	.Ltmp4531:
 13476              		#DEBUG_VALUE: uninitialized_copy:__result <- undef
 13477              	.Ltmp4532:
 13478              		#DEBUG_VALUE: __uninit_copy:__result <- undef
 13479              	.Ltmp4533:
 13480              		#DEBUG_VALUE: copy:__result <- undef
 13481              	.Ltmp4534:
 13482              		#DEBUG_VALUE: __copy_move_a2:__result <- undef
 13483              	.Ltmp4535:
 13484              		#DEBUG_VALUE: __niter_base:__it <- undef
 13485              	.Ltmp4536:
 13486              		#DEBUG_VALUE: _S_base:__it <- undef
 13487              	.Ltmp4537:
 13488              		#DEBUG_VALUE: __copy_move_a:__result <- undef
 13489              	.Ltmp4538:
 13490              		#DEBUG_VALUE: __copy_m:__result <- undef
 13491 008a 49894608 		movq	%rax, 8(%r14)
 13492 008e 488B7B20 		movq	32(%rbx), %rdi
 13493 0092 482B7B18 		subq	24(%rbx), %rdi
 13494 0096 49C74618 		movq	$0, 24(%r14)
 13494      00000000 
 13495 009e 31C0     		xorl	%eax, %eax
 13496 00a0 49C74620 		movq	$0, 32(%r14)
 13496      00000000 
 13497 00a8 4989FF   		movq	%rdi, %r15
 13498 00ab 49D1FF   		sarq	%r15
 13499              	.Ltmp4539:
 13500              		#DEBUG_VALUE: _Vector_base:__n <- R15+0
 13501 00ae 4D85FF   		testq	%r15, %r15
 13502 00b1 49C74628 		movq	$0, 40(%r14)
 13502      00000000 
 13503              	.Ltmp4540:
 13504              		#DEBUG_VALUE: _M_allocate:__n <- R15+0
 13505 00b9 7419     		je	.LBB18_11
 13506              	# BB#7:
 13507              	.Ltmp4541:
 13508              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 13509              	.Ltmp4542:
 13510              		#DEBUG_VALUE: __simple <- 1+0
 13511              	.Ltmp4543:
 13512              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 13513              	.Ltmp4544:
 13514              		#DEBUG_VALUE: _Vector_base:__n <- R15+0
 13515              	.Ltmp4545:
 13516              		#DEBUG_VALUE: _M_allocate:__n <- R15+0
 13517 00bb 4885FF   		testq	%rdi, %rdi
 13518 00be 7905     		jns	.LBB18_9
 13519              	# BB#8:
 13520              	.Ltmp4457:
 13521              	.Ltmp4546:
 13522              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 13523              	.Ltmp4547:
 13524              		#DEBUG_VALUE: __simple <- 1+0
 13525              	.Ltmp4548:
 13526              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 13527 00c0 E8000000 		callq	_ZSt17__throw_bad_allocv
 13527      00
 13528              	.Ltmp4458:
 13529              	.LBB18_9:                               # %_ZN9__gnu_cxx13new_allocatorItE8allocateEmPKv.exit.i.i.i
 13530              	.Ltmp4455:
 13531              	.Ltmp4549:
 13532              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 13533              	.Ltmp4550:
 13534              		#DEBUG_VALUE: __simple <- 1+0
 13535              	.Ltmp4551:
 13536              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 13537              	.Ltmp4552:
 13538              		#DEBUG_VALUE: _Vector_base:__n <- R15+0
 13539              	.Ltmp4553:
 13540              		#DEBUG_VALUE: _M_allocate:__n <- R15+0
 13541 00c5 E8000000 		callq	_Znwm
 13541      00
 13542              	.Ltmp4456:
 13543 00ca EB08     		jmp	.LBB18_11
 13544              	.LBB18_10:
 13545              	.Ltmp4459:
 13546              	.Ltmp4460:
 13547              	.Ltmp4554:
 13548              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 13549              	.Ltmp4555:
 13550              		#DEBUG_VALUE: __simple <- 1+0
 13551              	.Ltmp4556:
 13552              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 13553 00cc 4889C7   		movq	%rax, %rdi
 13554 00cf E8000000 		callq	_Unwind_Resume_or_Rethrow
 13554      00
 13555              	.Ltmp4461:
 13556              	.LBB18_11:
 13557              	.Ltmp4557:
 13558              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 13559              	.Ltmp4558:
 13560              		#DEBUG_VALUE: __simple <- 1+0
 13561              	.Ltmp4559:
 13562              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 13563              	.Ltmp4560:
 13564              		#DEBUG_VALUE: _Vector_base:__n <- R15+0
 13565              	.Ltmp4561:
 13566              		#DEBUG_VALUE: _M_allocate:__n <- R15+0
 13567 00d4 4989C4   		movq	%rax, %r12
 13568 00d7 4D896618 		movq	%r12, 24(%r14)
 13569 00db 4D896620 		movq	%r12, 32(%r14)
 13570 00df 4B8D047C 		leaq	(%r12,%r15,2), %rax
 13571              	.Ltmp4562:
 13572              		#DEBUG_VALUE: _M_allocate:__n <- undef
 13573              	.Ltmp4563:
 13574              		#DEBUG_VALUE: _Vector_base:__n <- undef
 13575 00e3 49894628 		movq	%rax, 40(%r14)
 13576 00e7 488B7318 		movq	24(%rbx), %rsi
 13577 00eb 488B5320 		movq	32(%rbx), %rdx
 13578 00ef 4829F2   		subq	%rsi, %rdx
 13579              	.Ltmp4564:
 13580              		#DEBUG_VALUE: __uninitialized_copy_a:__result <- R12+0
 13581              	.Ltmp4565:
 13582              		#DEBUG_VALUE: uninitialized_copy:__result <- R12+0
 13583              	.Ltmp4566:
 13584              		#DEBUG_VALUE: __uninit_copy:__result <- R12+0
 13585              	.Ltmp4567:
 13586              		#DEBUG_VALUE: copy:__result <- R12+0
 13587              	.Ltmp4568:
 13588              		#DEBUG_VALUE: __copy_move_a2:__result <- R12+0
 13589              	.Ltmp4569:
 13590              		#DEBUG_VALUE: __niter_base:__it <- R12+0
 13591              	.Ltmp4570:
 13592              		#DEBUG_VALUE: _S_base:__it <- R12+0
 13593              	.Ltmp4571:
 13594              		#DEBUG_VALUE: __copy_move_a:__first <- RSI+0
 13595              	.Ltmp4572:
 13596              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 13597              	.Ltmp4573:
 13598              		#DEBUG_VALUE: __copy_move_a:__result <- R12+0
 13599              	.Ltmp4574:
 13600              		#DEBUG_VALUE: __simple <- 1+0
 13601              	.Ltmp4575:
 13602              		#DEBUG_VALUE: __copy_m:__first <- RSI+0
 13603              	.Ltmp4576:
 13604              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 13605              	.Ltmp4577:
 13606              		#DEBUG_VALUE: __copy_m:__result <- R12+0
 13607 00f2 4889D3   		movq	%rdx, %rbx
 13608 00f5 48D1FB   		sarq	%rbx
 13609              	.Ltmp4578:
 13610              		#DEBUG_VALUE: _Num <- RBX+0
 13611 00f8 4885DB   		testq	%rbx, %rbx
 13612 00fb 7408     		je	.LBB18_13
 13613              	# BB#12:
 13614              	.Ltmp4579:
 13615              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 13616              	.Ltmp4580:
 13617              		#DEBUG_VALUE: __simple <- 1+0
 13618              	.Ltmp4581:
 13619              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 13620              	.Ltmp4582:
 13621              		#DEBUG_VALUE: __copy_m:__result <- R12+0
 13622              	.Ltmp4583:
 13623              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 13624              	.Ltmp4584:
 13625              		#DEBUG_VALUE: __copy_m:__first <- RSI+0
 13626              	.Ltmp4585:
 13627              		#DEBUG_VALUE: __simple <- 1+0
 13628              	.Ltmp4586:
 13629              		#DEBUG_VALUE: __copy_move_a:__result <- R12+0
 13630              	.Ltmp4587:
 13631              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 13632              	.Ltmp4588:
 13633              		#DEBUG_VALUE: __copy_move_a:__first <- RSI+0
 13634              	.Ltmp4589:
 13635              		#DEBUG_VALUE: _S_base:__it <- R12+0
 13636              	.Ltmp4590:
 13637              		#DEBUG_VALUE: __niter_base:__it <- R12+0
 13638              	.Ltmp4591:
 13639              		#DEBUG_VALUE: __copy_move_a2:__result <- R12+0
 13640              	.Ltmp4592:
 13641              		#DEBUG_VALUE: copy:__result <- R12+0
 13642              	.Ltmp4593:
 13643              		#DEBUG_VALUE: __uninit_copy:__result <- R12+0
 13644              	.Ltmp4594:
 13645              		#DEBUG_VALUE: uninitialized_copy:__result <- R12+0
 13646              	.Ltmp4595:
 13647              		#DEBUG_VALUE: __uninitialized_copy_a:__result <- R12+0
 13648              	.Ltmp4596:
 13649              		#DEBUG_VALUE: _Num <- RBX+0
 13650 00fd 4C89E7   		movq	%r12, %rdi
 13651              	.Ltmp4597:
 13652              		#DEBUG_VALUE: __copy_move_a:__first <- undef
 13653              	.Ltmp4598:
 13654              		#DEBUG_VALUE: __copy_m:__first <- undef
 13655 0100 E8000000 		callq	memmove
 13655      00
 13656              	.LBB18_13:
 13657              	.Ltmp4599:
 13658              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 13659              	.Ltmp4600:
 13660              		#DEBUG_VALUE: __simple <- 1+0
 13661              	.Ltmp4601:
 13662              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 13663              	.Ltmp4602:
 13664              		#DEBUG_VALUE: __copy_m:__result <- R12+0
 13665              	.Ltmp4603:
 13666              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 13667              	.Ltmp4604:
 13668              		#DEBUG_VALUE: __simple <- 1+0
 13669              	.Ltmp4605:
 13670              		#DEBUG_VALUE: __copy_move_a:__result <- R12+0
 13671              	.Ltmp4606:
 13672              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 13673              	.Ltmp4607:
 13674              		#DEBUG_VALUE: _S_base:__it <- R12+0
 13675              	.Ltmp4608:
 13676              		#DEBUG_VALUE: __niter_base:__it <- R12+0
 13677              	.Ltmp4609:
 13678              		#DEBUG_VALUE: __copy_move_a2:__result <- R12+0
 13679              	.Ltmp4610:
 13680              		#DEBUG_VALUE: copy:__result <- R12+0
 13681              	.Ltmp4611:
 13682              		#DEBUG_VALUE: __uninit_copy:__result <- R12+0
 13683              	.Ltmp4612:
 13684              		#DEBUG_VALUE: uninitialized_copy:__result <- R12+0
 13685              	.Ltmp4613:
 13686              		#DEBUG_VALUE: __uninitialized_copy_a:__result <- R12+0
 13687              	.Ltmp4614:
 13688              		#DEBUG_VALUE: _Num <- RBX+0
 13689 0105 498D045C 		leaq	(%r12,%rbx,2), %rax
 13690              	.Ltmp4615:
 13691              		#DEBUG_VALUE: _Num <- undef
 13692              	.Ltmp4616:
 13693              		#DEBUG_VALUE: __uninitialized_copy_a:__result <- undef
 13694              	.Ltmp4617:
 13695              		#DEBUG_VALUE: uninitialized_copy:__result <- undef
 13696              	.Ltmp4618:
 13697              		#DEBUG_VALUE: __uninit_copy:__result <- undef
 13698              	.Ltmp4619:
 13699              		#DEBUG_VALUE: copy:__result <- undef
 13700              	.Ltmp4620:
 13701              		#DEBUG_VALUE: __copy_move_a2:__result <- undef
 13702              	.Ltmp4621:
 13703              		#DEBUG_VALUE: __niter_base:__it <- undef
 13704              	.Ltmp4622:
 13705              		#DEBUG_VALUE: _S_base:__it <- undef
 13706              	.Ltmp4623:
 13707              		#DEBUG_VALUE: __copy_move_a:__result <- undef
 13708              	.Ltmp4624:
 13709              		#DEBUG_VALUE: __copy_m:__result <- undef
 13710 0109 49894620 		movq	%rax, 32(%r14)
 13711              		.loc	39 625 118
 13712              	.Ltmp4625:
 13713 010d 5B       		popq	%rbx                    # ../lela/vector/traits.h:625:118
 13714 010e 415C     		popq	%r12                    # ../lela/vector/traits.h:625:118
 13715 0110 415E     		popq	%r14                    # ../lela/vector/traits.h:625:118
 13716 0112 415F     		popq	%r15                    # ../lela/vector/traits.h:625:118
 13717 0114 5D       		popq	%rbp                    # ../lela/vector/traits.h:625:118
 13718 0115 C3       		ret                             # ../lela/vector/traits.h:625:118
 13719              	.LBB18_14:
 13720              	.Ltmp4462:
 13721              	.Ltmp4626:
 13722              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 13723              	.Ltmp4627:
 13724              		#DEBUG_VALUE: __simple <- 1+0
 13725              	.Ltmp4628:
 13726              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 13727 0116 4889C3   		movq	%rax, %rbx
 13728 0119 498B3E   		movq	(%r14), %rdi
 13729              	.Ltmp4629:
 13730              		#DEBUG_VALUE: _M_deallocate:__p <- RDI+0
 13731 011c 4885FF   		testq	%rdi, %rdi
 13732 011f 7405     		je	.LBB18_16
 13733              	# BB#15:
 13734              	.Ltmp4630:
 13735              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 13736              	.Ltmp4631:
 13737              		#DEBUG_VALUE: __simple <- 1+0
 13738              	.Ltmp4632:
 13739              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 13740              	.Ltmp4633:
 13741              		#DEBUG_VALUE: _M_deallocate:__p <- RDI+0
 13742              	.Ltmp4634:
 13743              		#DEBUG_VALUE: deallocate:__p <- RDI+0
 13744              	.Ltmp4635:
 13745              		#DEBUG_VALUE: deallocate:__p <- undef
 13746              	.Ltmp4636:
 13747              		#DEBUG_VALUE: _M_deallocate:__p <- undef
 13748 0121 E8000000 		callq	_ZdlPv
 13748      00
 13749              	.LBB18_16:                              # %_ZNSt6vectorIjSaIjEED1Ev.exit
 13750              	.Ltmp4637:
 13751              		#DEBUG_VALUE: __copy_m:__last <- RDX+0
 13752              	.Ltmp4638:
 13753              		#DEBUG_VALUE: __simple <- 1+0
 13754              	.Ltmp4639:
 13755              		#DEBUG_VALUE: __copy_move_a:__last <- RDX+0
 13756 0126 4889DF   		movq	%rbx, %rdi
 13757 0129 E8000000 		callq	_Unwind_Resume_or_Rethrow
 13757      00
 13758              	.LBB18_17:
 13759              	.Ltmp4454:
 13760 012e 4889C7   		movq	%rax, %rdi
 13761 0131 E8000000 		callq	_Unwind_Resume_or_Rethrow
 13761      00
 13762              	.Ltmp4640:
 13763              	.Ltmp4641:
 13765              	.Lfunc_end18:
 13766              	.Leh_func_end18:
 13767              		.section	.gcc_except_table,"a",@progbits
 13768              		.align	4
 13769              	GCC_except_table18:
 13770              	.Lexception18:
 13771 02a0 FF       		.byte	255                     # @LPStart Encoding = omit
 13772 02a1 03       		.byte	3                       # @TType Encoding = udata4
 13773 02a2 49       		.byte	73                      # @TType base offset
 13774 02a3 03       		.byte	3                       # Call site Encoding = udata4
 13775 02a4 41       		.byte	65                      # Call site table length
 13776              	.Lset118 = .Ltmp4452-.Leh_func_begin18  # Region start
 13777 02a5 4C000000 		.long	.Lset118
 13778              	.Lset119 = .Ltmp4451-.Ltmp4452          # Region length
 13779 02a9 0A000000 		.long	.Lset119
 13780              	.Lset120 = .Ltmp4454-.Leh_func_begin18  # Landing pad
 13781 02ad 2E010000 		.long	.Lset120
 13782 02b1 01       		.byte	1                       # Action
 13783              	.Lset121 = .Ltmp4451-.Leh_func_begin18  # Region start
 13784 02b2 56000000 		.long	.Lset121
 13785              	.Lset122 = .Ltmp4457-.Ltmp4451          # Region length
 13786 02b6 6A000000 		.long	.Lset122
 13787 02ba 00000000 		.long	0                       # Landing pad
 13788 02be 00       		.byte	0                       # Action
 13789              	.Lset123 = .Ltmp4457-.Leh_func_begin18  # Region start
 13790 02bf C0000000 		.long	.Lset123
 13791              	.Lset124 = .Ltmp4456-.Ltmp4457          # Region length
 13792 02c3 0A000000 		.long	.Lset124
 13793              	.Lset125 = .Ltmp4459-.Leh_func_begin18  # Landing pad
 13794 02c7 CC000000 		.long	.Lset125
 13795 02cb 01       		.byte	1                       # Action
 13796              	.Lset126 = .Ltmp4460-.Leh_func_begin18  # Region start
 13797 02cc CC000000 		.long	.Lset126
 13798              	.Lset127 = .Ltmp4461-.Ltmp4460          # Region length
 13799 02d0 08000000 		.long	.Lset127
 13800              	.Lset128 = .Ltmp4462-.Leh_func_begin18  # Landing pad
 13801 02d4 16010000 		.long	.Lset128
 13802 02d8 01       		.byte	1                       # Action
 13803              	.Lset129 = .Ltmp4461-.Leh_func_begin18  # Region start
 13804 02d9 D4000000 		.long	.Lset129
 13805              	.Lset130 = .Leh_func_end18-.Ltmp4461    # Region length
 13806 02dd 62000000 		.long	.Lset130
 13807 02e1 00000000 		.long	0                       # Landing pad
 13808 02e5 00       		.byte	0                       # Action
 13809              	                                        # -- Action Record Table --
 13810              	                                        # Action Record
 13811 02e6 01       		.byte	1                       #   TypeInfo index
 13812 02e7 00       		.byte	0                       #   Next action
 13813              	                                        # -- Catch TypeInfos --
 13814 02e8 00000000 		.long	0                       # TypeInfo
 13815              		.align	4
 13816              	
 13817              		.text
 13818 1f6d 0F1F00   		.align	16, 0x90
 13820              	_GLOBAL__I_a:                           # @_GLOBAL__I_a
 13821              	.Leh_func_begin21:
 13822              	# BB#0:
 13823 1f70 55       		pushq	%rbp
 13824              	.Ltmp4642:
 13825 1f71 4889E5   		movq	%rsp, %rbp
 13826              	.Ltmp4643:
 13827 1f74 BF000000 		movl	$_ZStL8__ioinit, %edi
 13827      00
 13828 1f79 E8000000 		callq	_ZNSt8ios_base4InitC1Ev
 13828      00
 13829 1f7e BF000000 		movl	$_ZNSt8ios_base4InitD1Ev, %edi
 13829      00
 13830 1f83 BA000000 		movl	$__dso_handle, %edx
 13830      00
 13831 1f88 BE000000 		movl	$_ZStL8__ioinit, %esi
 13831      00
 13832 1f8d 5D       		popq	%rbp
 13833 1f8e E9000000 		jmp	__cxa_atexit            # TAILCALL
 13833      00
 13834              	.Ltmp4644:
 13836              	.Leh_func_end21:
 13837              	
 13839              		.local	_ZStL8__ioinit          # @_ZStL8__ioinit
 13840              		.comm	_ZStL8__ioinit,1,8
 13842              		.section	.rodata.str1.1,"aMS",@progbits,1
 13843              	.L.str:
 13844 0000 4B4200   		.asciz	 "KB"
 13846              	
 13848              	.L.str1:
 13849 0003 4D4200   		.asciz	 "MB"
 13851              	
 13853              		.section	.rodata.str1.16,"aMS",@progbits,1
 13854              		.align	16
 13855              	.L.str2:
 13856 0000 496E7465 		.asciz	 "Internal description"
 13856      726E616C 
 13856      20646573 
 13856      63726970 
 13856      74696F6E 
 13858              	
 13860              		.section	.rodata.str1.1,"aMS",@progbits,1
 13861              	.L.str3:
 13862 0006 5B5B5B00 		.asciz	 "[[["
 13864              	
 13866              	.L.str4:
 13867 000a 5D5D5D09 		.asciz	 "]]]\t\t"
 13867      0900
 13869              	
 13871              	.L.str5:
 13872 0010 204D656D 		.asciz	 " Memory (RSS: "
 13872      6F727920 
 13872      28525353 
 13872      3A2000
 13874              	
 13876              	.L.str6:
 13877 001f 3B20564D 		.asciz	 "; VM: "
 13877      3A2000
 13879              	
 13881              	.L.str7:
 13882 0026 2900     		.asciz	 ")"
 13884              	
 13886              	.L.str8:
 13887 0028 496E7465 		.asciz	 "Internal error"
 13887      726E616C 
 13887      20657272 
 13887      6F7200
 13889              	
 13891              	.L.str9:
 13892 0037 7200     		.asciz	 "r"
 13894              	
 13896              	.L.str10:
 13897 0039 43616E27 		.asciz	 "Can't open "
 13897      74206F70 
 13897      656E2000 
 13899              	
 13901              		.section	.rodata.str1.16,"aMS",@progbits,1
 13902 0015 00000000 		.align	16
 13902      00000000 
 13902      000000
 13903              	.L.str11:
 13904 0020 4572726F 		.asciz	 "Error while reading file "
 13904      72207768 
 13904      696C6520 
 13904      72656164 
 13904      696E6720 
 13906              	
 13908 003a 00000000 		.align	16
 13908      0000
 13909              	.L.str12:
 13910 0040 4572726F 		.asciz	 "Error while reading file"
 13910      72207768 
 13910      696C6520 
 13910      72656164 
 13910      696E6720 
 13912              	
 13914              		.section	.rodata.str1.1,"aMS",@progbits,1
 13915              	.L.str13:
 13916 0045 6D6F6420 		.asciz	 "mod >= 2"
 13916      3E3D2032 
 13916      00
 13918              	
 13920              	.L.str14:
 13921 004e 2E2F6D61 		.asciz	 "./matrix-util.C"
 13921      74726978 
 13921      2D757469 
 13921      6C2E4300 
 13923              	
 13925              		.section	.rodata.str1.16,"aMS",@progbits,1
 13926 0059 00000000 		.align	16
 13926      000000
 13927              	.L__PRETTY_FUNCTION__._ZN10MatrixUtil13loadF4ModulusEPKc:
 13928 0060 73746174 		.asciz	 "static uint32 MatrixUtil::loadF4Modulus(const char *)"
 13928      69632075 
 13928      696E7433 
 13928      32204D61 
 13928      74726978 
 13930              	
 13932              		.section	.rodata.str1.1,"aMS",@progbits,1
 13933              	.L.str15:
 13934 005e 2F00     		.asciz	 "/"
 13936              	
 13938              	.L.str16:
 13939 0060 5F5F00   		.asciz	 "__"
 13941              	
 13943              	.L.str17:
 13944 0063 2F70726F 		.asciz	 "/proc/self/stat"
 13944      632F7365 
 13944      6C662F73 
 13944      74617400 
 13946              	
 13948              		.section	.rodata.str1.16,"aMS",@progbits,1
 13949 0096 00000000 		.align	16
 13949      00000000 
 13949      0000
 13950              	.L.str18:
 13951 00a0 412E726F 		.asciz	 "A.rowdim () == B.rowdim ()"
 13951      7764696D 
 13951      20282920 
 13951      3D3D2042 
 13951      2E726F77 
 13953              	
 13955              		.section	.rodata.str1.1,"aMS",@progbits,1
 13956              	.L.str19:
 13957 0073 6D617472 		.asciz	 "matrix-op.C"
 13957      69782D6F 
 13957      702E4300 
 13959              	
 13961              		.section	.rodata.str1.16,"aMS",@progbits,1
 13962 00bb 00000000 		.align	16
 13962      00
 13963              	.L__PRETTY_FUNCTION__._ZN8MatrixOp20reducePivotsByPivotsIN4LELA12SparseMatrixItNS1_12SparseVectorIt
 13964 00c0 73746174 		.asciz	 "static void MatrixOp::reducePivotsByPivots(Modular<uint16> &, const LELA::SparseMatrix<un
 13964      69632076 
 13964      6F696420 
 13964      4D617472 
 13964      69784F70 
 13966              	
 13968 02e2 00000000 		.align	16
 13968      00000000 
 13968      00000000 
 13968      0000
 13969              	.L.str20:
 13970 02f0 412E636F 		.asciz	 "A.coldim () == A.rowdim ()"
 13970      6C64696D 
 13970      20282920 
 13970      3D3D2041 
 13970      2E726F77 
 13972              	
 13974              		.section	.rodata.str1.1,"aMS",@progbits,1
 13975              	.L.str21:
 13976 007f 54696D69 		.asciz	 "Timing measure"
 13976      6E67206D 
 13976      65617375 
 13976      726500
 13978              	
 13980              		.section	.rodata.str1.16,"aMS",@progbits,1
 13981 030b 00000000 		.align	16
 13981      00
 13982              	.L.str22:
 13983 0310 546F7461 		.asciz	 "Total RazArrayTimer time: "
 13983      6C205261 
 13983      7A417272 
 13983      61795469 
 13983      6D657220 
 13985              	
 13987              		.section	.rodata.str1.1,"aMS",@progbits,1
 13988              	.L.str23:
 13989 008e 7300     		.asciz	 "s"
 13991              	
 13993              		.section	.rodata.str1.16,"aMS",@progbits,1
 13994 032b 00000000 		.align	16
 13994      00
 13995              	.L.str24:
 13996 0330 546F7461 		.asciz	 "Total CopySparseVectorToDenseArrayTimer time: "
 13996      6C20436F 
 13996      70795370 
 13996      61727365 
 13996      56656374 
 13998              	
 14000 035f 00       		.align	16
 14001              	.L.str25:
 14002 0360 546F7461 		.asciz	 "Total CopyDenseArrayToSparseVectorTimer time: "
 14002      6C20436F 
 14002      70794465 
 14002      6E736541 
 14002      72726179 
 14004              	
 14006 038f 00       		.align	16
 14007              	.L.str26:
 14008 0390 546F7461 		.asciz	 "Total AxpyTimer time: "
 14008      6C204178 
 14008      70795469 
 14008      6D657220 
 14008      74696D65 
 14010              	
 14012 03a7 00000000 		.align	16
 14012      00000000 
 14012      00
 14013              	.L.str27:
 14014 03b0 546F7461 		.asciz	 "Total AxpyOutTimer time: "
 14014      6C204178 
 14014      70794F75 
 14014      7454696D 
 14014      65722074 
 14016              	
 14018              		.section	.rodata.str1.1,"aMS",@progbits,1
 14019              	.L.str29:
 14020 0090 76656374 		.asciz	 "vector::reserve"
 14020      6F723A3A 
 14020      72657365 
 14020      72766500 
 14022              	
 14024              		.section	.rodata.str1.16,"aMS",@progbits,1
 14025 03ca 00000000 		.align	16
 14025      0000
 14026              	.L.str30:
 14027 03d0 62617369 		.asciz	 "basic_string::_S_construct null not valid"
 14027      635F7374 
 14027      72696E67 
 14027      3A3A5F53 
 14027      5F636F6E 
 14029              	
 14031 03fa 00000000 		.align	16
 14031      0000
 14032              	.L.str31:
 14033 0400 62617369 		.asciz	 "basic_string::substr"
 14033      635F7374 
 14033      72696E67 
 14033      3A3A7375 
 14033      62737472 
 14035              	
 14036              		.section	.ctors,"aw",@progbits
 14037              		.align	8
 14038 0000 00000000 		.quad	_GLOBAL__I_a
 14038      00000000 
 14039              		.section	.eh_frame,"a",@progbits
 14040              	.LEH_frame0:
 14041              	.Lsection_eh_frame0:
 14042              	.Leh_frame_common0:
 14043              	.Lset131 = .Leh_frame_common_end0-.Leh_frame_common_begin0 # Length of Common Information Entry
 14044 0000 1C000000 		.long	.Lset131
 14045              	.Leh_frame_common_begin0:
 14046 0004 00000000 		.long	0                       # CIE Identifier Tag
 14047 0008 01       		.byte	1                       # DW_CIE_VERSION
 14048 0009 7A504C52 		.asciz	 "zPLR"                 # CIE Augmentation
 14048      00
 14049 000e 01       		.byte	1                       # CIE Code Alignment Factor
 14050 000f 78       		.byte	120                     # CIE Data Alignment Factor
 14051 0010 10       		.byte	16                      # CIE Return Address Column
 14052 0011 07       		.byte	7                       # Augmentation Size
 14053 0012 03       		.byte	3                       # Personality Encoding = udata4
 14054 0013 00000000 		.long	__gxx_personality_v0    # Personality
 14055 0017 03       		.byte	3                       # LSDA Encoding = udata4
 14056 0018 03       		.byte	3                       # FDE Encoding = udata4
 14057 0019 0C       		.byte	12                      # DW_CFA_def_cfa
 14058 001a 07       		.byte	7                       # Register
 14059 001b 08       		.byte	8                       # Offset
 14060 001c 90       		.byte	144                     # DW_CFA_offset + Reg (16)
 14061 001d 01       		.byte	1                       # Offset
 14062 001e 0000     		.align	8
 14063              	.Leh_frame_common_end0:
 14064              	.L_ZN10MatrixUtil14show_mem_usageESs.eh:
 14065              	.Lset132 = .Leh_frame_end0-.Leh_frame_begin0 # Length of Frame Information Entry
 14066 0020 24000000 		.long	.Lset132
 14067              	.Leh_frame_begin0:
 14068              	.Lset133 = .Leh_frame_begin0-.Leh_frame_common0 # FDE CIE offset
 14069 0024 24000000 		.long	.Lset133
 14070 0028 00000000 		.long	.Leh_func_begin0        # FDE initial location
 14071              	.Lset134 = .Leh_func_end0-.Leh_func_begin0 # FDE address range
 14072 002c 50020000 		.long	.Lset134
 14073 0030 04       		.byte	4                       # Augmentation size
 14074 0031 00000000 		.long	.Lexception0            # Language Specific Data Area
 14075 0035 41       		.byte	4                       # DW_CFA_advance_loc4
 14076              	.Lset135 = .Ltmp40-.Leh_func_begin0
 14077              		.long	.Lset135
 14078 0036 0E       		.byte	14                      # DW_CFA_def_cfa_offset
 14079 0037 10       		.byte	16                      # Offset
 14080 0038 86       		.byte	134                     # DW_CFA_offset + Reg (6)
 14081 0039 02       		.byte	2                       # Offset
 14082 003a 43       		.byte	4                       # DW_CFA_advance_loc4
 14083              	.Lset136 = .Ltmp41-.Ltmp40
 14084              		.long	.Lset136
 14085 003b 0D       		.byte	13                      # DW_CFA_def_cfa_register
 14086 003c 06       		.byte	6                       # Register
 14087 003d 47       		.byte	4                       # DW_CFA_advance_loc4
 14088              	.Lset137 = .Ltmp42-.Ltmp41
 14089              		.long	.Lset137
 14090 003e 83       		.byte	131                     # DW_CFA_offset + Reg (3)
 14091 003f 04       		.byte	4                       # Offset
 14092 0040 8E       		.byte	142                     # DW_CFA_offset + Reg (14)
 14093 0041 03       		.byte	3                       # Offset
 14094 0042 00000000 		.align	8
 14094      0000
 14095              	.Leh_frame_end0:
 14096              	
 14097              	.L_ZN10MatrixUtil17process_mem_usageERdS0_.eh:
 14098              	.Lset138 = .Leh_frame_end1-.Leh_frame_begin1 # Length of Frame Information Entry
 14099 0048 24000000 		.long	.Lset138
 14100              	.Leh_frame_begin1:
 14101              	.Lset139 = .Leh_frame_begin1-.Leh_frame_common0 # FDE CIE offset
 14102 004c 4C000000 		.long	.Lset139
 14103 0050 00000000 		.long	.Leh_func_begin1        # FDE initial location
 14104              	.Lset140 = .Leh_func_end1-.Leh_func_begin1 # FDE address range
 14105 0054 840F0000 		.long	.Lset140
 14106 0058 04       		.byte	4                       # Augmentation size
 14107 0059 00000000 		.long	.Lexception1            # Language Specific Data Area
 14108 005d 41       		.byte	4                       # DW_CFA_advance_loc4
 14109              	.Lset141 = .Ltmp313-.Leh_func_begin1
 14110              		.long	.Lset141
 14111 005e 0E       		.byte	14                      # DW_CFA_def_cfa_offset
 14112 005f 10       		.byte	16                      # Offset
 14113 0060 86       		.byte	134                     # DW_CFA_offset + Reg (6)
 14114 0061 02       		.byte	2                       # Offset
 14115 0062 43       		.byte	4                       # DW_CFA_advance_loc4
 14116              	.Lset142 = .Ltmp314-.Ltmp313
 14117              		.long	.Lset142
 14118 0063 0D       		.byte	13                      # DW_CFA_def_cfa_register
 14119 0064 06       		.byte	6                       # Register
 14120 0065 4C       		.byte	4                       # DW_CFA_advance_loc4
 14121              	.Lset143 = .Ltmp315-.Ltmp314
 14122              		.long	.Lset143
 14123 0066 83       		.byte	131                     # DW_CFA_offset + Reg (3)
 14124 0067 05       		.byte	5                       # Offset
 14125 0068 8E       		.byte	142                     # DW_CFA_offset + Reg (14)
 14126 0069 04       		.byte	4                       # Offset
 14127 006a 8F       		.byte	143                     # DW_CFA_offset + Reg (15)
 14128 006b 03       		.byte	3                       # Offset
 14129 006c 00000000 		.align	8
 14130              	.Leh_frame_end1:
 14131              	
 14132              	.L_ZN10MatrixUtil13loadF4ModulusEPKc.eh:
 14133              	.Lset144 = .Leh_frame_end2-.Leh_frame_begin2 # Length of Frame Information Entry
 14134 0070 1C000000 		.long	.Lset144
 14135              	.Leh_frame_begin2:
 14136              	.Lset145 = .Leh_frame_begin2-.Leh_frame_common0 # FDE CIE offset
 14137 0074 74000000 		.long	.Lset145
 14138 0078 00000000 		.long	.Leh_func_begin2        # FDE initial location
 14139              	.Lset146 = .Leh_func_end2-.Leh_func_begin2 # FDE address range
 14140 007c FF010000 		.long	.Lset146
 14141 0080 40       		.byte	4                       # Augmentation size
 14142              		.long	0                       # Language Specific Data Area
 14143 0081 41       		.byte	4                       # DW_CFA_advance_loc4
 14144              	.Lset147 = .Ltmp767-.Leh_func_begin2
 14145              		.long	.Lset147
 14146 0082 0E       		.byte	14                      # DW_CFA_def_cfa_offset
 14147 0083 10       		.byte	16                      # Offset
 14148 0084 86       		.byte	134                     # DW_CFA_offset + Reg (6)
 14149 0085 02       		.byte	2                       # Offset
 14150 0086 43       		.byte	4                       # DW_CFA_advance_loc4
 14151              	.Lset148 = .Ltmp768-.Ltmp767
 14152              		.long	.Lset148
 14153 0087 0D       		.byte	13                      # DW_CFA_def_cfa_register
 14154 0088 06       		.byte	6                       # Register
 14155 0089 46       		.byte	4                       # DW_CFA_advance_loc4
 14156              	.Lset149 = .Ltmp769-.Ltmp768
 14157              		.long	.Lset149
 14158 008a 83       		.byte	131                     # DW_CFA_offset + Reg (3)
 14159 008b 05       		.byte	5                       # Offset
 14160 008c 8E       		.byte	142                     # DW_CFA_offset + Reg (14)
 14161 008d 04       		.byte	4                       # Offset
 14162 008e 8F       		.byte	143                     # DW_CFA_offset + Reg (15)
 14163 008f 03       		.byte	3                       # Offset
 14164              		.align	8
 14165              	.Leh_frame_end2:
 14166              	
 14167              	.L_ZN10MatrixUtil30getOutputFileNameWithExtensionEPKcS1_S1_.eh:
 14168              	.Lset150 = .Leh_frame_end3-.Leh_frame_begin3 # Length of Frame Information Entry
 14169 0090 24000000 		.long	.Lset150
 14170              	.Leh_frame_begin3:
 14171              	.Lset151 = .Leh_frame_begin3-.Leh_frame_common0 # FDE CIE offset
 14172 0094 94000000 		.long	.Lset151
 14173 0098 00000000 		.long	.Leh_func_begin3        # FDE initial location
 14174              	.Lset152 = .Leh_func_end3-.Leh_func_begin3 # FDE address range
 14175 009c 98090000 		.long	.Lset152
 14176 00a0 04       		.byte	4                       # Augmentation size
 14177 00a1 00000000 		.long	.Lexception3            # Language Specific Data Area
 14178 00a5 41       		.byte	4                       # DW_CFA_advance_loc4
 14179              	.Lset153 = .Ltmp991-.Leh_func_begin3
 14180              		.long	.Lset153
 14181 00a6 0E       		.byte	14                      # DW_CFA_def_cfa_offset
 14182 00a7 10       		.byte	16                      # Offset
 14183 00a8 86       		.byte	134                     # DW_CFA_offset + Reg (6)
 14184 00a9 02       		.byte	2                       # Offset
 14185 00aa 43       		.byte	4                       # DW_CFA_advance_loc4
 14186              	.Lset154 = .Ltmp992-.Ltmp991
 14187              		.long	.Lset154
 14188 00ab 0D       		.byte	13                      # DW_CFA_def_cfa_register
 14189 00ac 06       		.byte	6                       # Register
 14190 00ad 50       		.byte	4                       # DW_CFA_advance_loc4
 14191              	.Lset155 = .Ltmp993-.Ltmp992
 14192              		.long	.Lset155
 14193 00ae 83       		.byte	131                     # DW_CFA_offset + Reg (3)
 14194 00af 07       		.byte	7                       # Offset
 14195 00b0 8C       		.byte	140                     # DW_CFA_offset + Reg (12)
 14196 00b1 06       		.byte	6                       # Offset
 14197 00b2 8D       		.byte	141                     # DW_CFA_offset + Reg (13)
 14198 00b3 05       		.byte	5                       # Offset
 14199 00b4 8E       		.byte	142                     # DW_CFA_offset + Reg (14)
 14200 00b5 04       		.byte	4                       # Offset
 14201 00b6 8F       		.byte	143                     # DW_CFA_offset + Reg (15)
 14202 00b7 03       		.byte	3                       # Offset
 14203              		.align	8
 14204              	.Leh_frame_end3:
 14205              	
 14206              	.L_Z5dummyv.eh:
 14207              	.Lset156 = .Leh_frame_end7-.Leh_frame_begin7 # Length of Frame Information Entry
 14208 00b8 24000000 		.long	.Lset156
 14209              	.Leh_frame_begin7:
 14210              	.Lset157 = .Leh_frame_begin7-.Leh_frame_common0 # FDE CIE offset
 14211 00bc BC000000 		.long	.Lset157
 14212 00c0 00000000 		.long	.Leh_func_begin7        # FDE initial location
 14213              	.Lset158 = .Leh_func_end7-.Leh_func_begin7 # FDE address range
 14214 00c4 AB010000 		.long	.Lset158
 14215 00c8 04       		.byte	4                       # Augmentation size
 14216 00c9 00000000 		.long	.Lexception7            # Language Specific Data Area
 14217 00cd 41       		.byte	4                       # DW_CFA_advance_loc4
 14218              	.Lset159 = .Ltmp1996-.Leh_func_begin7
 14219              		.long	.Lset159
 14220 00ce 0E       		.byte	14                      # DW_CFA_def_cfa_offset
 14221 00cf 10       		.byte	16                      # Offset
 14222 00d0 86       		.byte	134                     # DW_CFA_offset + Reg (6)
 14223 00d1 02       		.byte	2                       # Offset
 14224 00d2 43       		.byte	4                       # DW_CFA_advance_loc4
 14225              	.Lset160 = .Ltmp1997-.Ltmp1996
 14226              		.long	.Lset160
 14227 00d3 0D       		.byte	13                      # DW_CFA_def_cfa_register
 14228 00d4 06       		.byte	6                       # Register
 14229 00d5 4B       		.byte	4                       # DW_CFA_advance_loc4
 14230              	.Lset161 = .Ltmp1998-.Ltmp1997
 14231              		.long	.Lset161
 14232 00d6 83       		.byte	131                     # DW_CFA_offset + Reg (3)
 14233 00d7 06       		.byte	6                       # Offset
 14234 00d8 8C       		.byte	140                     # DW_CFA_offset + Reg (12)
 14235 00d9 05       		.byte	5                       # Offset
 14236 00da 8E       		.byte	142                     # DW_CFA_offset + Reg (14)
 14237 00db 04       		.byte	4                       # Offset
 14238 00dc 8F       		.byte	143                     # DW_CFA_offset + Reg (15)
 14239 00dd 03       		.byte	3                       # Offset
 14240 00de 0000     		.align	8
 14241              	.Leh_frame_end7:
 14242              	
 14243              	.L_ZN8MatrixOp20reducePivotsByPivotsIN4LELA12SparseMatrixItNS1_12SparseVectorItSt6vectorIjSaIjEES4_
 14244              	.Lset162 = .Leh_frame_end8-.Leh_frame_begin8 # Length of Frame Information Entry
 14245 00e0 24000000 		.long	.Lset162
 14246              	.Leh_frame_begin8:
 14247              	.Lset163 = .Leh_frame_begin8-.Leh_frame_common0 # FDE CIE offset
 14248 00e4 E4000000 		.long	.Lset163
 14249 00e8 00000000 		.long	.Leh_func_begin8        # FDE initial location
 14250              	.Lset164 = .Leh_func_end8-.Leh_func_begin8 # FDE address range
 14251 00ec B5060000 		.long	.Lset164
 14252 00f0 40       		.byte	4                       # Augmentation size
 14253              		.long	0                       # Language Specific Data Area
 14254 00f1 41       		.byte	4                       # DW_CFA_advance_loc4
 14255              	.Lset165 = .Ltmp2406-.Leh_func_begin8
 14256              		.long	.Lset165
 14257 00f2 0E       		.byte	14                      # DW_CFA_def_cfa_offset
 14258 00f3 10       		.byte	16                      # Offset
 14259 00f4 86       		.byte	134                     # DW_CFA_offset + Reg (6)
 14260 00f5 02       		.byte	2                       # Offset
 14261 00f6 43       		.byte	4                       # DW_CFA_advance_loc4
 14262              	.Lset166 = .Ltmp2407-.Ltmp2406
 14263              		.long	.Lset166
 14264 00f7 0D       		.byte	13                      # DW_CFA_def_cfa_register
 14265 00f8 06       		.byte	6                       # Register
 14266 00f9 50       		.byte	4                       # DW_CFA_advance_loc4
 14267              	.Lset167 = .Ltmp2408-.Ltmp2407
 14268              		.long	.Lset167
 14269 00fa 83       		.byte	131                     # DW_CFA_offset + Reg (3)
 14270 00fb 07       		.byte	7                       # Offset
 14271 00fc 8C       		.byte	140                     # DW_CFA_offset + Reg (12)
 14272 00fd 06       		.byte	6                       # Offset
 14273 00fe 8D       		.byte	141                     # DW_CFA_offset + Reg (13)
 14274 00ff 05       		.byte	5                       # Offset
 14275 0100 8E       		.byte	142                     # DW_CFA_offset + Reg (14)
 14276 0101 04       		.byte	4                       # Offset
 14277 0102 8F       		.byte	143                     # DW_CFA_offset + Reg (15)
 14278 0103 03       		.byte	3                       # Offset
 14279 0104 00000000 		.align	8
 14280              	.Leh_frame_end8:
 14281              	
 14282              	.L_Z4axpytRN4LELA12SparseVectorItSt6vectorIjSaIjEES1_ItSaItEEEEPm.eh:
 14283              	.Lset168 = .Leh_frame_end9-.Leh_frame_begin9 # Length of Frame Information Entry
 14284 0108 14000000 		.long	.Lset168
 14285              	.Leh_frame_begin9:
 14286              	.Lset169 = .Leh_frame_begin9-.Leh_frame_common0 # FDE CIE offset
 14287 010c 0C010000 		.long	.Lset169
 14288 0110 00000000 		.long	.Leh_func_begin9        # FDE initial location
 14289              	.Lset170 = .Leh_func_end9-.Leh_func_begin9 # FDE address range
 14290 0114 3D000000 		.long	.Lset170
 14291 0118 40       		.byte	4                       # Augmentation size
 14292              		.long	0                       # Language Specific Data Area
 14293 0119 00000000 		.align	8
 14293      000000
 14294              	.Leh_frame_end9:
 14295              	
 14296              	.L_Z30copyDenseArrayToSparseVector64IN4LELA7ModularItEENS0_12SparseVectorItSt6vectorIjSaIjEES4_ItSa
 14297              	.Lset171 = .Leh_frame_end10-.Leh_frame_begin10 # Length of Frame Information Entry
 14298 0120 24000000 		.long	.Lset171
 14299              	.Leh_frame_begin10:
 14300              	.Lset172 = .Leh_frame_begin10-.Leh_frame_common0 # FDE CIE offset
 14301 0124 24010000 		.long	.Lset172
 14302 0128 00000000 		.long	.Leh_func_begin10       # FDE initial location
 14303              	.Lset173 = .Leh_func_end10-.Leh_func_begin10 # FDE address range
 14304 012c 05020000 		.long	.Lset173
 14305 0130 04       		.byte	4                       # Augmentation size
 14306 0131 00000000 		.long	.Lexception10           # Language Specific Data Area
 14307 0135 41       		.byte	4                       # DW_CFA_advance_loc4
 14308              	.Lset174 = .Ltmp3086-.Leh_func_begin10
 14309              		.long	.Lset174
 14310 0136 0E       		.byte	14                      # DW_CFA_def_cfa_offset
 14311 0137 10       		.byte	16                      # Offset
 14312 0138 86       		.byte	134                     # DW_CFA_offset + Reg (6)
 14313 0139 02       		.byte	2                       # Offset
 14314 013a 43       		.byte	4                       # DW_CFA_advance_loc4
 14315              	.Lset175 = .Ltmp3087-.Ltmp3086
 14316              		.long	.Lset175
 14317 013b 0D       		.byte	13                      # DW_CFA_def_cfa_register
 14318 013c 06       		.byte	6                       # Register
 14319 013d 4D       		.byte	4                       # DW_CFA_advance_loc4
 14320              	.Lset176 = .Ltmp3088-.Ltmp3087
 14321              		.long	.Lset176
 14322 013e 83       		.byte	131                     # DW_CFA_offset + Reg (3)
 14323 013f 07       		.byte	7                       # Offset
 14324 0140 8C       		.byte	140                     # DW_CFA_offset + Reg (12)
 14325 0141 06       		.byte	6                       # Offset
 14326 0142 8D       		.byte	141                     # DW_CFA_offset + Reg (13)
 14327 0143 05       		.byte	5                       # Offset
 14328 0144 8E       		.byte	142                     # DW_CFA_offset + Reg (14)
 14329 0145 04       		.byte	4                       # Offset
 14330 0146 8F       		.byte	143                     # DW_CFA_offset + Reg (15)
 14331 0147 03       		.byte	3                       # Offset
 14332              		.align	8
 14333              	.Leh_frame_end10:
 14334              	
 14335              	.L_ZNSt6vectorItSaItEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPtS1_EERKt.eh:
 14336              	.Lset177 = .Leh_frame_end11-.Leh_frame_begin11 # Length of Frame Information Entry
 14337 0148 24000000 		.long	.Lset177
 14338              	.Leh_frame_begin11:
 14339              	.Lset178 = .Leh_frame_begin11-.Leh_frame_common0 # FDE CIE offset
 14340 014c 4C010000 		.long	.Lset178
 14341 0150 00000000 		.long	.Leh_func_begin11       # FDE initial location
 14342              	.Lset179 = .Leh_func_end11-.Leh_func_begin11 # FDE address range
 14343 0154 6C010000 		.long	.Lset179
 14344 0158 40       		.byte	4                       # Augmentation size
 14345              		.long	0                       # Language Specific Data Area
 14346 0159 41       		.byte	4                       # DW_CFA_advance_loc4
 14347              	.Lset180 = .Ltmp3283-.Leh_func_begin11
 14348              		.long	.Lset180
 14349 015a 0E       		.byte	14                      # DW_CFA_def_cfa_offset
 14350 015b 10       		.byte	16                      # Offset
 14351 015c 86       		.byte	134                     # DW_CFA_offset + Reg (6)
 14352 015d 02       		.byte	2                       # Offset
 14353 015e 43       		.byte	4                       # DW_CFA_advance_loc4
 14354              	.Lset181 = .Ltmp3284-.Ltmp3283
 14355              		.long	.Lset181
 14356 015f 0D       		.byte	13                      # DW_CFA_def_cfa_register
 14357 0160 06       		.byte	6                       # Register
 14358 0161 4D       		.byte	4                       # DW_CFA_advance_loc4
 14359              	.Lset182 = .Ltmp3285-.Ltmp3284
 14360              		.long	.Lset182
 14361 0162 83       		.byte	131                     # DW_CFA_offset + Reg (3)
 14362 0163 07       		.byte	7                       # Offset
 14363 0164 8C       		.byte	140                     # DW_CFA_offset + Reg (12)
 14364 0165 06       		.byte	6                       # Offset
 14365 0166 8D       		.byte	141                     # DW_CFA_offset + Reg (13)
 14366 0167 05       		.byte	5                       # Offset
 14367 0168 8E       		.byte	142                     # DW_CFA_offset + Reg (14)
 14368 0169 04       		.byte	4                       # Offset
 14369 016a 8F       		.byte	143                     # DW_CFA_offset + Reg (15)
 14370 016b 03       		.byte	3                       # Offset
 14371 016c 00000000 		.align	8
 14372              	.Leh_frame_end11:
 14373              	
 14374              	.L_ZNSt6vectorIjSaIjEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPjS1_EERKj.eh:
 14375              	.Lset183 = .Leh_frame_end12-.Leh_frame_begin12 # Length of Frame Information Entry
 14376 0170 24000000 		.long	.Lset183
 14377              	.Leh_frame_begin12:
 14378              	.Lset184 = .Leh_frame_begin12-.Leh_frame_common0 # FDE CIE offset
 14379 0174 74010000 		.long	.Lset184
 14380 0178 00000000 		.long	.Leh_func_begin12       # FDE initial location
 14381              	.Lset185 = .Leh_func_end12-.Leh_func_begin12 # FDE address range
 14382 017c 7F010000 		.long	.Lset185
 14383 0180 40       		.byte	4                       # Augmentation size
 14384              		.long	0                       # Language Specific Data Area
 14385 0181 41       		.byte	4                       # DW_CFA_advance_loc4
 14386              	.Lset186 = .Ltmp3641-.Leh_func_begin12
 14387              		.long	.Lset186
 14388 0182 0E       		.byte	14                      # DW_CFA_def_cfa_offset
 14389 0183 10       		.byte	16                      # Offset
 14390 0184 86       		.byte	134                     # DW_CFA_offset + Reg (6)
 14391 0185 02       		.byte	2                       # Offset
 14392 0186 43       		.byte	4                       # DW_CFA_advance_loc4
 14393              	.Lset187 = .Ltmp3642-.Ltmp3641
 14394              		.long	.Lset187
 14395 0187 0D       		.byte	13                      # DW_CFA_def_cfa_register
 14396 0188 06       		.byte	6                       # Register
 14397 0189 4D       		.byte	4                       # DW_CFA_advance_loc4
 14398              	.Lset188 = .Ltmp3643-.Ltmp3642
 14399              		.long	.Lset188
 14400 018a 83       		.byte	131                     # DW_CFA_offset + Reg (3)
 14401 018b 07       		.byte	7                       # Offset
 14402 018c 8C       		.byte	140                     # DW_CFA_offset + Reg (12)
 14403 018d 06       		.byte	6                       # Offset
 14404 018e 8D       		.byte	141                     # DW_CFA_offset + Reg (13)
 14405 018f 05       		.byte	5                       # Offset
 14406 0190 8E       		.byte	142                     # DW_CFA_offset + Reg (14)
 14407 0191 04       		.byte	4                       # Offset
 14408 0192 8F       		.byte	143                     # DW_CFA_offset + Reg (15)
 14409 0193 03       		.byte	3                       # Offset
 14410 0194 00000000 		.align	8
 14411              	.Leh_frame_end12:
 14412              	
 14413              	.L_ZNSt6vectorIjSaIjEE7reserveEm.eh:
 14414              	.Lset189 = .Leh_frame_end13-.Leh_frame_begin13 # Length of Frame Information Entry
 14415 0198 24000000 		.long	.Lset189
 14416              	.Leh_frame_begin13:
 14417              	.Lset190 = .Leh_frame_begin13-.Leh_frame_common0 # FDE CIE offset
 14418 019c 9C010000 		.long	.Lset190
 14419 01a0 00000000 		.long	.Leh_func_begin13       # FDE initial location
 14420              	.Lset191 = .Leh_func_end13-.Leh_func_begin13 # FDE address range
 14421 01a4 C7000000 		.long	.Lset191
 14422 01a8 40       		.byte	4                       # Augmentation size
 14423              		.long	0                       # Language Specific Data Area
 14424 01a9 41       		.byte	4                       # DW_CFA_advance_loc4
 14425              	.Lset192 = .Ltmp4003-.Leh_func_begin13
 14426              		.long	.Lset192
 14427 01aa 0E       		.byte	14                      # DW_CFA_def_cfa_offset
 14428 01ab 10       		.byte	16                      # Offset
 14429 01ac 86       		.byte	134                     # DW_CFA_offset + Reg (6)
 14430 01ad 02       		.byte	2                       # Offset
 14431 01ae 43       		.byte	4                       # DW_CFA_advance_loc4
 14432              	.Lset193 = .Ltmp4004-.Ltmp4003
 14433              		.long	.Lset193
 14434 01af 0D       		.byte	13                      # DW_CFA_def_cfa_register
 14435 01b0 06       		.byte	6                       # Register
 14436 01b1 4A       		.byte	4                       # DW_CFA_advance_loc4
 14437              	.Lset194 = .Ltmp4005-.Ltmp4004
 14438              		.long	.Lset194
 14439 01b2 83       		.byte	131                     # DW_CFA_offset + Reg (3)
 14440 01b3 07       		.byte	7                       # Offset
 14441 01b4 8C       		.byte	140                     # DW_CFA_offset + Reg (12)
 14442 01b5 06       		.byte	6                       # Offset
 14443 01b6 8D       		.byte	141                     # DW_CFA_offset + Reg (13)
 14444 01b7 05       		.byte	5                       # Offset
 14445 01b8 8E       		.byte	142                     # DW_CFA_offset + Reg (14)
 14446 01b9 04       		.byte	4                       # Offset
 14447 01ba 8F       		.byte	143                     # DW_CFA_offset + Reg (15)
 14448 01bb 03       		.byte	3                       # Offset
 14449 01bc 00000000 		.align	8
 14450              	.Leh_frame_end13:
 14451              	
 14452              	.L_ZNSt6vectorItSaItEE7reserveEm.eh:
 14453              	.Lset195 = .Leh_frame_end14-.Leh_frame_begin14 # Length of Frame Information Entry
 14454 01c0 24000000 		.long	.Lset195
 14455              	.Leh_frame_begin14:
 14456              	.Lset196 = .Leh_frame_begin14-.Leh_frame_common0 # FDE CIE offset
 14457 01c4 C4010000 		.long	.Lset196
 14458 01c8 00000000 		.long	.Leh_func_begin14       # FDE initial location
 14459              	.Lset197 = .Leh_func_end14-.Leh_func_begin14 # FDE address range
 14460 01cc AD000000 		.long	.Lset197
 14461 01d0 40       		.byte	4                       # Augmentation size
 14462              		.long	0                       # Language Specific Data Area
 14463 01d1 41       		.byte	4                       # DW_CFA_advance_loc4
 14464              	.Lset198 = .Ltmp4122-.Leh_func_begin14
 14465              		.long	.Lset198
 14466 01d2 0E       		.byte	14                      # DW_CFA_def_cfa_offset
 14467 01d3 10       		.byte	16                      # Offset
 14468 01d4 86       		.byte	134                     # DW_CFA_offset + Reg (6)
 14469 01d5 02       		.byte	2                       # Offset
 14470 01d6 43       		.byte	4                       # DW_CFA_advance_loc4
 14471              	.Lset199 = .Ltmp4123-.Ltmp4122
 14472              		.long	.Lset199
 14473 01d7 0D       		.byte	13                      # DW_CFA_def_cfa_register
 14474 01d8 06       		.byte	6                       # Register
 14475 01d9 4A       		.byte	4                       # DW_CFA_advance_loc4
 14476              	.Lset200 = .Ltmp4124-.Ltmp4123
 14477              		.long	.Lset200
 14478 01da 83       		.byte	131                     # DW_CFA_offset + Reg (3)
 14479 01db 07       		.byte	7                       # Offset
 14480 01dc 8C       		.byte	140                     # DW_CFA_offset + Reg (12)
 14481 01dd 06       		.byte	6                       # Offset
 14482 01de 8D       		.byte	141                     # DW_CFA_offset + Reg (13)
 14483 01df 05       		.byte	5                       # Offset
 14484 01e0 8E       		.byte	142                     # DW_CFA_offset + Reg (14)
 14485 01e1 04       		.byte	4                       # Offset
 14486 01e2 8F       		.byte	143                     # DW_CFA_offset + Reg (15)
 14487 01e3 03       		.byte	3                       # Offset
 14488 01e4 00000000 		.align	8
 14489              	.Leh_frame_end14:
 14490              	
 14491              	.L_ZN4LELA12SparseMatrixItNS_12SparseVectorItSt6vectorIjSaIjEES2_ItSaItEEEENS_25VectorRepresentatio
 14492              	.Lset201 = .Leh_frame_end15-.Leh_frame_begin15 # Length of Frame Information Entry
 14493 01e8 24000000 		.long	.Lset201
 14494              	.Leh_frame_begin15:
 14495              	.Lset202 = .Leh_frame_begin15-.Leh_frame_common0 # FDE CIE offset
 14496 01ec EC010000 		.long	.Lset202
 14497 01f0 00000000 		.long	.Leh_func_begin15       # FDE initial location
 14498              	.Lset203 = .Leh_func_end15-.Leh_func_begin15 # FDE address range
 14499 01f4 AF000000 		.long	.Lset203
 14500 01f8 04       		.byte	4                       # Augmentation size
 14501 01f9 00000000 		.long	.Lexception15           # Language Specific Data Area
 14502 01fd 41       		.byte	4                       # DW_CFA_advance_loc4
 14503              	.Lset204 = .Ltmp4244-.Leh_func_begin15
 14504              		.long	.Lset204
 14505 01fe 0E       		.byte	14                      # DW_CFA_def_cfa_offset
 14506 01ff 10       		.byte	16                      # Offset
 14507 0200 86       		.byte	134                     # DW_CFA_offset + Reg (6)
 14508 0201 02       		.byte	2                       # Offset
 14509 0202 43       		.byte	4                       # DW_CFA_advance_loc4
 14510              	.Lset205 = .Ltmp4245-.Ltmp4244
 14511              		.long	.Lset205
 14512 0203 0D       		.byte	13                      # DW_CFA_def_cfa_register
 14513 0204 06       		.byte	6                       # Register
 14514 0205 49       		.byte	4                       # DW_CFA_advance_loc4
 14515              	.Lset206 = .Ltmp4246-.Ltmp4245
 14516              		.long	.Lset206
 14517 0206 83       		.byte	131                     # DW_CFA_offset + Reg (3)
 14518 0207 05       		.byte	5                       # Offset
 14519 0208 8E       		.byte	142                     # DW_CFA_offset + Reg (14)
 14520 0209 04       		.byte	4                       # Offset
 14521 020a 8F       		.byte	143                     # DW_CFA_offset + Reg (15)
 14522 020b 03       		.byte	3                       # Offset
 14523 020c 00000000 		.align	8
 14524              	.Leh_frame_end15:
 14525              	
 14526              	.L_ZNSt6vectorIN4LELA12SparseVectorItS_IjSaIjEES_ItSaItEEEESaIS6_EEC2EmRKS6_RKS7_.eh:
 14527              	.Lset207 = .Leh_frame_end16-.Leh_frame_begin16 # Length of Frame Information Entry
 14528 0210 24000000 		.long	.Lset207
 14529              	.Leh_frame_begin16:
 14530              	.Lset208 = .Leh_frame_begin16-.Leh_frame_common0 # FDE CIE offset
 14531 0214 14020000 		.long	.Lset208
 14532 0218 00000000 		.long	.Leh_func_begin16       # FDE initial location
 14533              	.Lset209 = .Leh_func_end16-.Leh_func_begin16 # FDE address range
 14534 021c AC000000 		.long	.Lset209
 14535 0220 04       		.byte	4                       # Augmentation size
 14536 0221 00000000 		.long	.Lexception16           # Language Specific Data Area
 14537 0225 41       		.byte	4                       # DW_CFA_advance_loc4
 14538              	.Lset210 = .Ltmp4334-.Leh_func_begin16
 14539              		.long	.Lset210
 14540 0226 0E       		.byte	14                      # DW_CFA_def_cfa_offset
 14541 0227 10       		.byte	16                      # Offset
 14542 0228 86       		.byte	134                     # DW_CFA_offset + Reg (6)
 14543 0229 02       		.byte	2                       # Offset
 14544 022a 43       		.byte	4                       # DW_CFA_advance_loc4
 14545              	.Lset211 = .Ltmp4335-.Ltmp4334
 14546              		.long	.Lset211
 14547 022b 0D       		.byte	13                      # DW_CFA_def_cfa_register
 14548 022c 06       		.byte	6                       # Register
 14549 022d 46       		.byte	4                       # DW_CFA_advance_loc4
 14550              	.Lset212 = .Ltmp4336-.Ltmp4335
 14551              		.long	.Lset212
 14552 022e 83       		.byte	131                     # DW_CFA_offset + Reg (3)
 14553 022f 05       		.byte	5                       # Offset
 14554 0230 8E       		.byte	142                     # DW_CFA_offset + Reg (14)
 14555 0231 04       		.byte	4                       # Offset
 14556 0232 8F       		.byte	143                     # DW_CFA_offset + Reg (15)
 14557 0233 03       		.byte	3                       # Offset
 14558 0234 00000000 		.align	8
 14559              	.Leh_frame_end16:
 14560              	
 14561              	.L_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPN4LELA12SparseVectorItSt6vectorIjSaIjEES4_I
 14562              	.Lset213 = .Leh_frame_end17-.Leh_frame_begin17 # Length of Frame Information Entry
 14563 0238 24000000 		.long	.Lset213
 14564              	.Leh_frame_begin17:
 14565              	.Lset214 = .Leh_frame_begin17-.Leh_frame_common0 # FDE CIE offset
 14566 023c 3C020000 		.long	.Lset214
 14567 0240 00000000 		.long	.Leh_func_begin17       # FDE initial location
 14568              	.Lset215 = .Leh_func_end17-.Leh_func_begin17 # FDE address range
 14569 0244 AF000000 		.long	.Lset215
 14570 0248 04       		.byte	4                       # Augmentation size
 14571 0249 00000000 		.long	.Lexception17           # Language Specific Data Area
 14572 024d 41       		.byte	4                       # DW_CFA_advance_loc4
 14573              	.Lset216 = .Ltmp4409-.Leh_func_begin17
 14574              		.long	.Lset216
 14575 024e 0E       		.byte	14                      # DW_CFA_def_cfa_offset
 14576 024f 10       		.byte	16                      # Offset
 14577 0250 86       		.byte	134                     # DW_CFA_offset + Reg (6)
 14578 0251 02       		.byte	2                       # Offset
 14579 0252 43       		.byte	4                       # DW_CFA_advance_loc4
 14580              	.Lset217 = .Ltmp4410-.Ltmp4409
 14581              		.long	.Lset217
 14582 0253 0D       		.byte	13                      # DW_CFA_def_cfa_register
 14583 0254 06       		.byte	6                       # Register
 14584 0255 4A       		.byte	4                       # DW_CFA_advance_loc4
 14585              	.Lset218 = .Ltmp4411-.Ltmp4410
 14586              		.long	.Lset218
 14587 0256 83       		.byte	131                     # DW_CFA_offset + Reg (3)
 14588 0257 07       		.byte	7                       # Offset
 14589 0258 8C       		.byte	140                     # DW_CFA_offset + Reg (12)
 14590 0259 06       		.byte	6                       # Offset
 14591 025a 8D       		.byte	141                     # DW_CFA_offset + Reg (13)
 14592 025b 05       		.byte	5                       # Offset
 14593 025c 8E       		.byte	142                     # DW_CFA_offset + Reg (14)
 14594 025d 04       		.byte	4                       # Offset
 14595 025e 8F       		.byte	143                     # DW_CFA_offset + Reg (15)
 14596 025f 03       		.byte	3                       # Offset
 14597              		.align	8
 14598              	.Leh_frame_end17:
 14599              	
 14600              	.L_ZN4LELA12SparseVectorItSt6vectorIjSaIjEES1_ItSaItEEEC2ERKS6_.eh:
 14601              	.Lset219 = .Leh_frame_end18-.Leh_frame_begin18 # Length of Frame Information Entry
 14602 0260 24000000 		.long	.Lset219
 14603              	.Leh_frame_begin18:
 14604              	.Lset220 = .Leh_frame_begin18-.Leh_frame_common0 # FDE CIE offset
 14605 0264 64020000 		.long	.Lset220
 14606 0268 00000000 		.long	.Leh_func_begin18       # FDE initial location
 14607              	.Lset221 = .Leh_func_end18-.Leh_func_begin18 # FDE address range
 14608 026c 36010000 		.long	.Lset221
 14609 0270 04       		.byte	4                       # Augmentation size
 14610 0271 00000000 		.long	.Lexception18           # Language Specific Data Area
 14611 0275 41       		.byte	4                       # DW_CFA_advance_loc4
 14612              	.Lset222 = .Ltmp4463-.Leh_func_begin18
 14613              		.long	.Lset222
 14614 0276 0E       		.byte	14                      # DW_CFA_def_cfa_offset
 14615 0277 10       		.byte	16                      # Offset
 14616 0278 86       		.byte	134                     # DW_CFA_offset + Reg (6)
 14617 0279 02       		.byte	2                       # Offset
 14618 027a 43       		.byte	4                       # DW_CFA_advance_loc4
 14619              	.Lset223 = .Ltmp4464-.Ltmp4463
 14620              		.long	.Lset223
 14621 027b 0D       		.byte	13                      # DW_CFA_def_cfa_register
 14622 027c 06       		.byte	6                       # Register
 14623 027d 47       		.byte	4                       # DW_CFA_advance_loc4
 14624              	.Lset224 = .Ltmp4465-.Ltmp4464
 14625              		.long	.Lset224
 14626 027e 83       		.byte	131                     # DW_CFA_offset + Reg (3)
 14627 027f 06       		.byte	6                       # Offset
 14628 0280 8C       		.byte	140                     # DW_CFA_offset + Reg (12)
 14629 0281 05       		.byte	5                       # Offset
 14630 0282 8E       		.byte	142                     # DW_CFA_offset + Reg (14)
 14631 0283 04       		.byte	4                       # Offset
 14632 0284 8F       		.byte	143                     # DW_CFA_offset + Reg (15)
 14633 0285 03       		.byte	3                       # Offset
 14634 0286 0000     		.align	8
 14635              	.Leh_frame_end18:
 14636              	
 14637              	.L_GLOBAL__I_a.eh:
 14638              	.Lset225 = .Leh_frame_end21-.Leh_frame_begin21 # Length of Frame Information Entry
 14639 0288 1C000000 		.long	.Lset225
 14640              	.Leh_frame_begin21:
 14641              	.Lset226 = .Leh_frame_begin21-.Leh_frame_common0 # FDE CIE offset
 14642 028c 8C020000 		.long	.Lset226
 14643 0290 00000000 		.long	.Leh_func_begin21       # FDE initial location
 14644              	.Lset227 = .Leh_func_end21-.Leh_func_begin21 # FDE address range
 14645 0294 23000000 		.long	.Lset227
 14646 0298 40       		.byte	4                       # Augmentation size
 14647              		.long	0                       # Language Specific Data Area
 14648 0299 41       		.byte	4                       # DW_CFA_advance_loc4
 14649              	.Lset228 = .Ltmp4642-.Leh_func_begin21
 14650              		.long	.Lset228
 14651 029a 0E       		.byte	14                      # DW_CFA_def_cfa_offset
 14652 029b 10       		.byte	16                      # Offset
 14653 029c 86       		.byte	134                     # DW_CFA_offset + Reg (6)
 14654 029d 02       		.byte	2                       # Offset
 14655 029e 43       		.byte	4                       # DW_CFA_advance_loc4
 14656              	.Lset229 = .Ltmp4643-.Ltmp4642
 14657              		.long	.Lset229
 14658 029f 0D       		.byte	13                      # DW_CFA_def_cfa_register
 14659 02a0 06       		.byte	6                       # Register
 14660 02a1 00000000 		.align	8
 14660      000000
 14661              	.Leh_frame_end21:
 14662              	
 14663              		.text
 14664              	.Ltext_end:
 14665              		.data
 14666              	.Ldata_end:
 14667              		.text
 14668              	.Lsection_end1:
